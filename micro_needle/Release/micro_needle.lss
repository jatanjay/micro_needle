
micro_needle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e4c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00002e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000238  20000020  00002e6c  00020020  2**2
                  ALLOC
  3 .stack        00000400  20000258  000030a4  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00057c4a  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f7a  00000000  00000000  00077ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007afc  00000000  00000000  0007dc67  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000878  00000000  00000000  00085763  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000928  00000000  00000000  00085fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b433  00000000  00000000  00086903  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001522d  00000000  00000000  000a1d36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007d363  00000000  00000000  000b6f63  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001434  00000000  00000000  001342c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 06 00 20 5d 27 00 00 59 27 00 00 59 27 00 00     X.. ]'..Y'..Y'..
	...
      2c:	59 27 00 00 00 00 00 00 00 00 00 00 59 27 00 00     Y'..........Y'..
      3c:	59 27 00 00 59 27 00 00 59 27 00 00 59 27 00 00     Y'..Y'..Y'..Y'..
      4c:	59 27 00 00 31 06 00 00 59 27 00 00 59 27 00 00     Y'..1...Y'..Y'..
      5c:	59 27 00 00 59 27 00 00 3d 19 00 00 4d 19 00 00     Y'..Y'..=...M...
      6c:	5d 19 00 00 11 24 00 00 b1 24 00 00 bb 24 00 00     ]....$...$...$..
      7c:	59 27 00 00 59 27 00 00 59 27 00 00 59 27 00 00     Y'..Y'..Y'..Y'..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00002e4c 	.word	0x00002e4c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00002e4c 	.word	0x00002e4c
      e4:	00002e4c 	.word	0x00002e4c
      e8:	00000000 	.word	0x00000000

000000ec <configure_adc>:

#include <adc_sample.h>

uint16_t adc_result;

void configure_adc(void) {
      ec:	b510      	push	{r4, lr}
      ee:	b08c      	sub	sp, #48	; 0x30
  struct adc_config config_adc;
  adc_get_config_defaults(&config_adc);
      f0:	4668      	mov	r0, sp
      f2:	f000 f85d 	bl	1b0 <adc_get_config_defaults>
  // config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
  adc_init(&adc_instance, ADC, &config_adc);
      f6:	4c0d      	ldr	r4, [pc, #52]	; (12c <configure_adc+0x40>)
      f8:	466a      	mov	r2, sp
      fa:	490d      	ldr	r1, [pc, #52]	; (130 <configure_adc+0x44>)
      fc:	0020      	movs	r0, r4
      fe:	f000 f87b 	bl	1f8 <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     102:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     104:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     106:	b25b      	sxtb	r3, r3
     108:	2b00      	cmp	r3, #0
     10a:	dbfb      	blt.n	104 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     10c:	230f      	movs	r3, #15
     10e:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     110:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     112:	7813      	ldrb	r3, [r2, #0]
     114:	2102      	movs	r1, #2
     116:	430b      	orrs	r3, r1
     118:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     11a:	4b04      	ldr	r3, [pc, #16]	; (12c <configure_adc+0x40>)
     11c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     11e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     120:	b25b      	sxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	dbfb      	blt.n	11e <configure_adc+0x32>
  adc_enable(&adc_instance);
}
     126:	b00c      	add	sp, #48	; 0x30
     128:	bd10      	pop	{r4, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	200000a0 	.word	0x200000a0
     130:	42002000 	.word	0x42002000

00000134 <sample_adc>:

void sample_adc(void) {
     134:	b530      	push	{r4, r5, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     136:	4b1c      	ldr	r3, [pc, #112]	; (1a8 <sample_adc+0x74>)
     138:	6819      	ldr	r1, [r3, #0]
     13a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
     13c:	b25b      	sxtb	r3, r3
     13e:	2b00      	cmp	r3, #0
     140:	dbfb      	blt.n	13a <sample_adc+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     142:	7b0b      	ldrb	r3, [r1, #12]
     144:	2202      	movs	r2, #2
     146:	4313      	orrs	r3, r2
     148:	730b      	strb	r3, [r1, #12]
     14a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
     14c:	b25b      	sxtb	r3, r3
     14e:	2b00      	cmp	r3, #0
     150:	dbfb      	blt.n	14a <sample_adc+0x16>
	if (int_flags & ADC_INTFLAG_RESRDY) {
     152:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     154:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
     156:	2402      	movs	r4, #2
     158:	e001      	b.n	15e <sample_adc+0x2a>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     15a:	4210      	tst	r0, r2
     15c:	d10a      	bne.n	174 <sample_adc+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     15e:	7e0b      	ldrb	r3, [r1, #24]
     160:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     162:	0002      	movs	r2, r0
     164:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     166:	421d      	tst	r5, r3
     168:	d000      	beq.n	16c <sample_adc+0x38>
		status_flags |= ADC_STATUS_WINDOW;
     16a:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     16c:	421c      	tst	r4, r3
     16e:	d0f4      	beq.n	15a <sample_adc+0x26>
		status_flags |= ADC_STATUS_OVERRUN;
     170:	432a      	orrs	r2, r5
     172:	e7f2      	b.n	15a <sample_adc+0x26>
     174:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
     176:	b25b      	sxtb	r3, r3
     178:	2b00      	cmp	r3, #0
     17a:	dbfb      	blt.n	174 <sample_adc+0x40>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     17c:	8b4a      	ldrh	r2, [r1, #26]
     17e:	4b0b      	ldr	r3, [pc, #44]	; (1ac <sample_adc+0x78>)
     180:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     182:	2301      	movs	r3, #1
     184:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     186:	7e0a      	ldrb	r2, [r1, #24]
     188:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     18a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     18c:	0750      	lsls	r0, r2, #29
     18e:	d501      	bpl.n	194 <sample_adc+0x60>
		status_flags |= ADC_STATUS_WINDOW;
     190:	2002      	movs	r0, #2
     192:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     194:	0792      	lsls	r2, r2, #30
     196:	d501      	bpl.n	19c <sample_adc+0x68>
		status_flags |= ADC_STATUS_OVERRUN;
     198:	2204      	movs	r2, #4
     19a:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     19c:	075b      	lsls	r3, r3, #29
     19e:	d501      	bpl.n	1a4 <sample_adc+0x70>
	adc_module->INTFLAG.reg = int_flags;
     1a0:	2302      	movs	r3, #2
     1a2:	760b      	strb	r3, [r1, #24]
  adc_start_conversion(&adc_instance);
  do {
  } while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     1a4:	bd30      	pop	{r4, r5, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	200000a0 	.word	0x200000a0
     1ac:	2000009c 	.word	0x2000009c

000001b0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1b0:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1b2:	2200      	movs	r2, #0
     1b4:	2300      	movs	r3, #0
     1b6:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1b8:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1ba:	2100      	movs	r1, #0
     1bc:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1be:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1c0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1c2:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1c4:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1c6:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1c8:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1ca:	24c0      	movs	r4, #192	; 0xc0
     1cc:	0164      	lsls	r4, r4, #5
     1ce:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1d0:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1d2:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1d4:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1d6:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1d8:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1da:	242a      	movs	r4, #42	; 0x2a
     1dc:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1de:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1e0:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1e2:	3c06      	subs	r4, #6
     1e4:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1e6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1e8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1ea:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1ec:	232b      	movs	r3, #43	; 0x2b
     1ee:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1f0:	3301      	adds	r3, #1
     1f2:	54c1      	strb	r1, [r0, r3]
}
     1f4:	bd10      	pop	{r4, pc}
	...

000001f8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46de      	mov	lr, fp
     1fc:	4657      	mov	r7, sl
     1fe:	464e      	mov	r6, r9
     200:	b5c0      	push	{r6, r7, lr}
     202:	b096      	sub	sp, #88	; 0x58
     204:	0007      	movs	r7, r0
     206:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     208:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     20a:	4abd      	ldr	r2, [pc, #756]	; (500 <STACK_SIZE+0x100>)
     20c:	6a10      	ldr	r0, [r2, #32]
     20e:	2380      	movs	r3, #128	; 0x80
     210:	005b      	lsls	r3, r3, #1
     212:	4303      	orrs	r3, r0
     214:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     216:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     218:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     21a:	07db      	lsls	r3, r3, #31
     21c:	d505      	bpl.n	22a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     21e:	b016      	add	sp, #88	; 0x58
     220:	bc1c      	pop	{r2, r3, r4}
     222:	4691      	mov	r9, r2
     224:	469a      	mov	sl, r3
     226:	46a3      	mov	fp, r4
     228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     22a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     22c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     22e:	079b      	lsls	r3, r3, #30
     230:	d4f5      	bmi.n	21e <adc_init+0x26>
	module_inst->reference = config->reference;
     232:	7873      	ldrb	r3, [r6, #1]
     234:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     236:	2b00      	cmp	r3, #0
     238:	d104      	bne.n	244 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     23a:	4ab2      	ldr	r2, [pc, #712]	; (504 <STACK_SIZE+0x104>)
     23c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     23e:	2104      	movs	r1, #4
     240:	430b      	orrs	r3, r1
     242:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     244:	683b      	ldr	r3, [r7, #0]
     246:	469b      	mov	fp, r3
	gclk_chan_conf.source_generator = config->clock_source;
     248:	7833      	ldrb	r3, [r6, #0]
     24a:	466a      	mov	r2, sp
     24c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     24e:	4669      	mov	r1, sp
     250:	2013      	movs	r0, #19
     252:	f001 fd95 	bl	1d80 <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     256:	2013      	movs	r0, #19
     258:	f001 fd54 	bl	1d04 <system_gclk_chan_enable>
	if (config->pin_scan.inputs_to_scan != 0) {
     25c:	232c      	movs	r3, #44	; 0x2c
     25e:	5cf2      	ldrb	r2, [r6, r3]
     260:	2a00      	cmp	r2, #0
     262:	d057      	beq.n	314 <adc_init+0x11c>
		uint8_t offset = config->pin_scan.offset_start_scan;
     264:	3b01      	subs	r3, #1
     266:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     268:	7b33      	ldrb	r3, [r6, #12]
     26a:	18eb      	adds	r3, r5, r3
     26c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     26e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     270:	b2c9      	uxtb	r1, r1
     272:	428b      	cmp	r3, r1
     274:	d224      	bcs.n	2c0 <adc_init+0xc8>
     276:	1952      	adds	r2, r2, r5
     278:	b2d3      	uxtb	r3, r2
     27a:	4699      	mov	r9, r3
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     27c:	230f      	movs	r3, #15
     27e:	469a      	mov	sl, r3
     280:	e003      	b.n	28a <adc_init+0x92>
			offset++;
     282:	3501      	adds	r5, #1
     284:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     286:	45a9      	cmp	r9, r5
     288:	d01a      	beq.n	2c0 <adc_init+0xc8>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     28a:	7b33      	ldrb	r3, [r6, #12]
     28c:	4654      	mov	r4, sl
     28e:	402c      	ands	r4, r5
     290:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     292:	2250      	movs	r2, #80	; 0x50
     294:	499c      	ldr	r1, [pc, #624]	; (508 <STACK_SIZE+0x108>)
     296:	a802      	add	r0, sp, #8
     298:	f002 fcbc 	bl	2c14 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29c:	2c09      	cmp	r4, #9
     29e:	d8f0      	bhi.n	282 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2a0:	00a4      	lsls	r4, r4, #2
     2a2:	466b      	mov	r3, sp
     2a4:	2208      	movs	r2, #8
     2a6:	189b      	adds	r3, r3, r2
     2a8:	5918      	ldr	r0, [r3, r4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2aa:	a901      	add	r1, sp, #4
     2ac:	2300      	movs	r3, #0
     2ae:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2b0:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2b2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2b4:	3301      	adds	r3, #1
     2b6:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2b8:	b2c0      	uxtb	r0, r0
     2ba:	f001 fdd5 	bl	1e68 <system_pinmux_pin_set_config>
     2be:	e7e0      	b.n	282 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     2c0:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2c2:	2250      	movs	r2, #80	; 0x50
     2c4:	4990      	ldr	r1, [pc, #576]	; (508 <STACK_SIZE+0x108>)
     2c6:	a802      	add	r0, sp, #8
     2c8:	f002 fca4 	bl	2c14 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2cc:	2c09      	cmp	r4, #9
     2ce:	d913      	bls.n	2f8 <adc_init+0x100>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2d0:	7d73      	ldrb	r3, [r6, #21]
     2d2:	009b      	lsls	r3, r3, #2
     2d4:	b2db      	uxtb	r3, r3
     2d6:	465a      	mov	r2, fp
     2d8:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2da:	7db3      	ldrb	r3, [r6, #22]
     2dc:	01db      	lsls	r3, r3, #7
     2de:	7872      	ldrb	r2, [r6, #1]
     2e0:	4313      	orrs	r3, r2
     2e2:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2e4:	465a      	mov	r2, fp
     2e6:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2e8:	7933      	ldrb	r3, [r6, #4]
     2ea:	2b34      	cmp	r3, #52	; 0x34
     2ec:	d900      	bls.n	2f0 <adc_init+0xf8>
     2ee:	e171      	b.n	5d4 <STACK_SIZE+0x1d4>
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	4a86      	ldr	r2, [pc, #536]	; (50c <STACK_SIZE+0x10c>)
     2f4:	58d3      	ldr	r3, [r2, r3]
     2f6:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f8:	00a4      	lsls	r4, r4, #2
     2fa:	ab02      	add	r3, sp, #8
     2fc:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2fe:	a901      	add	r1, sp, #4
     300:	2300      	movs	r3, #0
     302:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     304:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     306:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     308:	3301      	adds	r3, #1
     30a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     30c:	b2c0      	uxtb	r0, r0
     30e:	f001 fdab 	bl	1e68 <system_pinmux_pin_set_config>
     312:	e7dd      	b.n	2d0 <adc_init+0xd8>
		_adc_configure_ain_pin(config->positive_input);
     314:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     316:	2250      	movs	r2, #80	; 0x50
     318:	497b      	ldr	r1, [pc, #492]	; (508 <STACK_SIZE+0x108>)
     31a:	a802      	add	r0, sp, #8
     31c:	f002 fc7a 	bl	2c14 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     320:	2c09      	cmp	r4, #9
     322:	d915      	bls.n	350 <adc_init+0x158>
		_adc_configure_ain_pin(config->negative_input);
     324:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     326:	2250      	movs	r2, #80	; 0x50
     328:	4977      	ldr	r1, [pc, #476]	; (508 <STACK_SIZE+0x108>)
     32a:	a802      	add	r0, sp, #8
     32c:	f002 fc72 	bl	2c14 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     330:	2c09      	cmp	r4, #9
     332:	d8cd      	bhi.n	2d0 <adc_init+0xd8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     334:	00a4      	lsls	r4, r4, #2
     336:	ab02      	add	r3, sp, #8
     338:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     340:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     342:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     344:	3301      	adds	r3, #1
     346:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     348:	b2c0      	uxtb	r0, r0
     34a:	f001 fd8d 	bl	1e68 <system_pinmux_pin_set_config>
     34e:	e7bf      	b.n	2d0 <adc_init+0xd8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     350:	00a4      	lsls	r4, r4, #2
     352:	ab02      	add	r3, sp, #8
     354:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     356:	a901      	add	r1, sp, #4
     358:	2300      	movs	r3, #0
     35a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     35c:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     35e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     360:	3301      	adds	r3, #1
     362:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     364:	b2c0      	uxtb	r0, r0
     366:	f001 fd7f 	bl	1e68 <system_pinmux_pin_set_config>
     36a:	e7db      	b.n	324 <adc_init+0x12c>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     36c:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     36e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     370:	2102      	movs	r1, #2
     372:	e01a      	b.n	3aa <adc_init+0x1b2>
		adjres = config->divide_result;
     374:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     376:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     378:	2410      	movs	r4, #16
     37a:	e016      	b.n	3aa <adc_init+0x1b2>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     37c:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     37e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     380:	2101      	movs	r1, #1
     382:	e012      	b.n	3aa <adc_init+0x1b2>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     384:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     386:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     388:	2100      	movs	r1, #0
     38a:	e00e      	b.n	3aa <adc_init+0x1b2>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     38c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     38e:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     390:	2100      	movs	r1, #0
     392:	e00a      	b.n	3aa <adc_init+0x1b2>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     394:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     396:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     398:	2100      	movs	r1, #0
     39a:	e006      	b.n	3aa <adc_init+0x1b2>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     39c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     39e:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3a0:	2100      	movs	r1, #0
     3a2:	e002      	b.n	3aa <adc_init+0x1b2>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3a4:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3a6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3a8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3aa:	0109      	lsls	r1, r1, #4
     3ac:	2270      	movs	r2, #112	; 0x70
     3ae:	400a      	ands	r2, r1
     3b0:	4313      	orrs	r3, r2
     3b2:	465a      	mov	r2, fp
     3b4:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3b6:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3b8:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3ba:	2b3f      	cmp	r3, #63	; 0x3f
     3bc:	d900      	bls.n	3c0 <adc_init+0x1c8>
     3be:	e72e      	b.n	21e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     3c0:	70d3      	strb	r3, [r2, #3]
	Adc *const adc_module = module_inst->hw;
     3c2:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3c6:	b25b      	sxtb	r3, r3
     3c8:	2b00      	cmp	r3, #0
     3ca:	dbfb      	blt.n	3c4 <adc_init+0x1cc>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3cc:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ce:	8872      	ldrh	r2, [r6, #2]
     3d0:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3d2:	2224      	movs	r2, #36	; 0x24
     3d4:	5cb2      	ldrb	r2, [r6, r2]
     3d6:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3d8:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3da:	7d32      	ldrb	r2, [r6, #20]
     3dc:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3de:	4313      	orrs	r3, r2
     3e0:	7cb2      	ldrb	r2, [r6, #18]
     3e2:	0052      	lsls	r2, r2, #1
     3e4:	4313      	orrs	r3, r2
     3e6:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3e8:	465a      	mov	r2, fp
     3ea:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ec:	7e33      	ldrb	r3, [r6, #24]
     3ee:	2b00      	cmp	r3, #0
     3f0:	d020      	beq.n	434 <STACK_SIZE+0x34>
		switch (resolution) {
     3f2:	2c10      	cmp	r4, #16
     3f4:	d100      	bne.n	3f8 <adc_init+0x200>
     3f6:	e0cf      	b.n	598 <STACK_SIZE+0x198>
     3f8:	d800      	bhi.n	3fc <adc_init+0x204>
     3fa:	e08f      	b.n	51c <STACK_SIZE+0x11c>
     3fc:	2c20      	cmp	r4, #32
     3fe:	d100      	bne.n	402 <STACK_SIZE+0x2>
     400:	e0ac      	b.n	55c <STACK_SIZE+0x15c>
     402:	2c30      	cmp	r4, #48	; 0x30
     404:	d116      	bne.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     406:	7cf2      	ldrb	r2, [r6, #19]
     408:	2a00      	cmp	r2, #0
     40a:	d00a      	beq.n	422 <STACK_SIZE+0x22>
					(config->window.window_lower_value > 127 ||
     40c:	69f2      	ldr	r2, [r6, #28]
     40e:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     410:	2017      	movs	r0, #23
			if (config->differential_mode &&
     412:	2aff      	cmp	r2, #255	; 0xff
     414:	d900      	bls.n	418 <STACK_SIZE+0x18>
     416:	e702      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     418:	6a32      	ldr	r2, [r6, #32]
     41a:	3280      	adds	r2, #128	; 0x80
     41c:	2aff      	cmp	r2, #255	; 0xff
     41e:	d900      	bls.n	422 <STACK_SIZE+0x22>
     420:	e6fd      	b.n	21e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     422:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     424:	69f2      	ldr	r2, [r6, #28]
     426:	2aff      	cmp	r2, #255	; 0xff
     428:	dd00      	ble.n	42c <STACK_SIZE+0x2c>
     42a:	e6f8      	b.n	21e <adc_init+0x26>
     42c:	6a32      	ldr	r2, [r6, #32]
     42e:	2aff      	cmp	r2, #255	; 0xff
     430:	dd00      	ble.n	434 <STACK_SIZE+0x34>
     432:	e6f4      	b.n	21e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     434:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     436:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     438:	b252      	sxtb	r2, r2
     43a:	2a00      	cmp	r2, #0
     43c:	dbfb      	blt.n	436 <STACK_SIZE+0x36>
	adc_module->WINCTRL.reg = config->window.window_mode;
     43e:	465a      	mov	r2, fp
     440:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     442:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     444:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     446:	b25b      	sxtb	r3, r3
     448:	2b00      	cmp	r3, #0
     44a:	dbfb      	blt.n	444 <STACK_SIZE+0x44>
	adc_module->WINLT.reg =
     44c:	8bb3      	ldrh	r3, [r6, #28]
     44e:	465a      	mov	r2, fp
     450:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     452:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     454:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     456:	b25b      	sxtb	r3, r3
     458:	2b00      	cmp	r3, #0
     45a:	dbfb      	blt.n	454 <STACK_SIZE+0x54>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     45c:	8c33      	ldrh	r3, [r6, #32]
     45e:	465a      	mov	r2, fp
     460:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     462:	232c      	movs	r3, #44	; 0x2c
     464:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     466:	2b00      	cmp	r3, #0
     468:	d005      	beq.n	476 <STACK_SIZE+0x76>
		inputs_to_scan--;
     46a:	3b01      	subs	r3, #1
     46c:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     46e:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     470:	2b0f      	cmp	r3, #15
     472:	d900      	bls.n	476 <STACK_SIZE+0x76>
     474:	e6d3      	b.n	21e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     476:	222b      	movs	r2, #43	; 0x2b
     478:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     47a:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     47c:	290f      	cmp	r1, #15
     47e:	d900      	bls.n	482 <STACK_SIZE+0x82>
     480:	e6cd      	b.n	21e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     482:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     484:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     486:	b252      	sxtb	r2, r2
     488:	2a00      	cmp	r2, #0
     48a:	dbfb      	blt.n	484 <STACK_SIZE+0x84>
			config->negative_input |
     48c:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     48e:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     490:	4302      	orrs	r2, r0
     492:	68b0      	ldr	r0, [r6, #8]
     494:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     496:	0509      	lsls	r1, r1, #20
			config->negative_input |
     498:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     49a:	041b      	lsls	r3, r3, #16
			config->negative_input |
     49c:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     49e:	465a      	mov	r2, fp
     4a0:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4a2:	232a      	movs	r3, #42	; 0x2a
     4a4:	5cf3      	ldrb	r3, [r6, r3]
     4a6:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4a8:	230f      	movs	r3, #15
     4aa:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4ac:	3315      	adds	r3, #21
     4ae:	5cf3      	ldrb	r3, [r6, r3]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d012      	beq.n	4da <STACK_SIZE+0xda>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4b4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4b6:	4a16      	ldr	r2, [pc, #88]	; (510 <STACK_SIZE+0x110>)
			return STATUS_ERR_INVALID_ARG;
     4b8:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4ba:	4293      	cmp	r3, r2
     4bc:	d900      	bls.n	4c0 <STACK_SIZE+0xc0>
     4be:	e6ae      	b.n	21e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4c0:	465a      	mov	r2, fp
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4c4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4c6:	2380      	movs	r3, #128	; 0x80
     4c8:	011b      	lsls	r3, r3, #4
     4ca:	18d3      	adds	r3, r2, r3
     4cc:	4910      	ldr	r1, [pc, #64]	; (510 <STACK_SIZE+0x110>)
     4ce:	b29b      	uxth	r3, r3
     4d0:	428b      	cmp	r3, r1
     4d2:	d900      	bls.n	4d6 <STACK_SIZE+0xd6>
     4d4:	e6a3      	b.n	21e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4d6:	465b      	mov	r3, fp
     4d8:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4da:	4b0e      	ldr	r3, [pc, #56]	; (514 <STACK_SIZE+0x114>)
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	015b      	lsls	r3, r3, #5
     4e0:	22e0      	movs	r2, #224	; 0xe0
     4e2:	00d2      	lsls	r2, r2, #3
     4e4:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4e6:	4a0c      	ldr	r2, [pc, #48]	; (518 <STACK_SIZE+0x118>)
     4e8:	6851      	ldr	r1, [r2, #4]
     4ea:	0149      	lsls	r1, r1, #5
     4ec:	6812      	ldr	r2, [r2, #0]
     4ee:	0ed2      	lsrs	r2, r2, #27
     4f0:	430a      	orrs	r2, r1
     4f2:	b2d2      	uxtb	r2, r2
			) |
     4f4:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4f6:	465a      	mov	r2, fp
     4f8:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     4fa:	2000      	movs	r0, #0
     4fc:	e68f      	b.n	21e <adc_init+0x26>
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	40000400 	.word	0x40000400
     504:	40000800 	.word	0x40000800
     508:	00002cfc 	.word	0x00002cfc
     50c:	00002c28 	.word	0x00002c28
     510:	00000fff 	.word	0x00000fff
     514:	00806024 	.word	0x00806024
     518:	00806020 	.word	0x00806020
		switch (resolution) {
     51c:	2c00      	cmp	r4, #0
     51e:	d189      	bne.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     520:	7cf2      	ldrb	r2, [r6, #19]
     522:	2a00      	cmp	r2, #0
     524:	d00f      	beq.n	546 <STACK_SIZE+0x146>
					(config->window.window_lower_value > 2047 ||
     526:	69f2      	ldr	r2, [r6, #28]
     528:	2180      	movs	r1, #128	; 0x80
     52a:	0109      	lsls	r1, r1, #4
     52c:	468c      	mov	ip, r1
     52e:	4462      	add	r2, ip
			if (config->differential_mode &&
     530:	4929      	ldr	r1, [pc, #164]	; (5d8 <STACK_SIZE+0x1d8>)
				return STATUS_ERR_INVALID_ARG;
     532:	2017      	movs	r0, #23
			if (config->differential_mode &&
     534:	428a      	cmp	r2, r1
     536:	d900      	bls.n	53a <STACK_SIZE+0x13a>
     538:	e671      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     53a:	6a32      	ldr	r2, [r6, #32]
     53c:	4462      	add	r2, ip
     53e:	4926      	ldr	r1, [pc, #152]	; (5d8 <STACK_SIZE+0x1d8>)
     540:	428a      	cmp	r2, r1
     542:	d900      	bls.n	546 <STACK_SIZE+0x146>
     544:	e66b      	b.n	21e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     546:	4a24      	ldr	r2, [pc, #144]	; (5d8 <STACK_SIZE+0x1d8>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     54a:	69f1      	ldr	r1, [r6, #28]
     54c:	4291      	cmp	r1, r2
     54e:	dd00      	ble.n	552 <STACK_SIZE+0x152>
     550:	e665      	b.n	21e <adc_init+0x26>
     552:	6a31      	ldr	r1, [r6, #32]
     554:	4291      	cmp	r1, r2
     556:	dd00      	ble.n	55a <STACK_SIZE+0x15a>
     558:	e661      	b.n	21e <adc_init+0x26>
     55a:	e76b      	b.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     55c:	7cf2      	ldrb	r2, [r6, #19]
     55e:	2a00      	cmp	r2, #0
     560:	d00f      	beq.n	582 <STACK_SIZE+0x182>
					(config->window.window_lower_value > 511 ||
     562:	69f2      	ldr	r2, [r6, #28]
     564:	2180      	movs	r1, #128	; 0x80
     566:	0089      	lsls	r1, r1, #2
     568:	468c      	mov	ip, r1
     56a:	4462      	add	r2, ip
			if (config->differential_mode &&
     56c:	491b      	ldr	r1, [pc, #108]	; (5dc <STACK_SIZE+0x1dc>)
				return STATUS_ERR_INVALID_ARG;
     56e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     570:	428a      	cmp	r2, r1
     572:	d900      	bls.n	576 <STACK_SIZE+0x176>
     574:	e653      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     576:	6a32      	ldr	r2, [r6, #32]
     578:	4462      	add	r2, ip
     57a:	4918      	ldr	r1, [pc, #96]	; (5dc <STACK_SIZE+0x1dc>)
     57c:	428a      	cmp	r2, r1
     57e:	d900      	bls.n	582 <STACK_SIZE+0x182>
     580:	e64d      	b.n	21e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     582:	4a16      	ldr	r2, [pc, #88]	; (5dc <STACK_SIZE+0x1dc>)
				return STATUS_ERR_INVALID_ARG;
     584:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     586:	69f1      	ldr	r1, [r6, #28]
     588:	4291      	cmp	r1, r2
     58a:	dd00      	ble.n	58e <STACK_SIZE+0x18e>
     58c:	e647      	b.n	21e <adc_init+0x26>
     58e:	6a31      	ldr	r1, [r6, #32]
     590:	4291      	cmp	r1, r2
     592:	dd00      	ble.n	596 <STACK_SIZE+0x196>
     594:	e643      	b.n	21e <adc_init+0x26>
     596:	e74d      	b.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     598:	7cf2      	ldrb	r2, [r6, #19]
     59a:	2a00      	cmp	r2, #0
     59c:	d00f      	beq.n	5be <STACK_SIZE+0x1be>
					(config->window.window_lower_value > 32767 ||
     59e:	69f2      	ldr	r2, [r6, #28]
     5a0:	2180      	movs	r1, #128	; 0x80
     5a2:	0209      	lsls	r1, r1, #8
     5a4:	468c      	mov	ip, r1
     5a6:	4462      	add	r2, ip
			if (config->differential_mode &&
     5a8:	490d      	ldr	r1, [pc, #52]	; (5e0 <STACK_SIZE+0x1e0>)
				return STATUS_ERR_INVALID_ARG;
     5aa:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5ac:	428a      	cmp	r2, r1
     5ae:	d900      	bls.n	5b2 <STACK_SIZE+0x1b2>
     5b0:	e635      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     5b2:	6a32      	ldr	r2, [r6, #32]
     5b4:	4462      	add	r2, ip
     5b6:	490a      	ldr	r1, [pc, #40]	; (5e0 <STACK_SIZE+0x1e0>)
     5b8:	428a      	cmp	r2, r1
     5ba:	d900      	bls.n	5be <STACK_SIZE+0x1be>
     5bc:	e62f      	b.n	21e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5be:	4a08      	ldr	r2, [pc, #32]	; (5e0 <STACK_SIZE+0x1e0>)
				return STATUS_ERR_INVALID_ARG;
     5c0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5c2:	69f1      	ldr	r1, [r6, #28]
     5c4:	4291      	cmp	r1, r2
     5c6:	dd00      	ble.n	5ca <STACK_SIZE+0x1ca>
     5c8:	e629      	b.n	21e <adc_init+0x26>
     5ca:	6a31      	ldr	r1, [r6, #32]
     5cc:	4291      	cmp	r1, r2
     5ce:	dd00      	ble.n	5d2 <STACK_SIZE+0x1d2>
     5d0:	e625      	b.n	21e <adc_init+0x26>
     5d2:	e72f      	b.n	434 <STACK_SIZE+0x34>
		return STATUS_ERR_INVALID_ARG;
     5d4:	2017      	movs	r0, #23
     5d6:	e622      	b.n	21e <adc_init+0x26>
     5d8:	00000fff 	.word	0x00000fff
     5dc:	000003ff 	.word	0x000003ff
     5e0:	0000ffff 	.word	0x0000ffff

000005e4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     5e4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     5e6:	2a00      	cmp	r2, #0
     5e8:	d001      	beq.n	5ee <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     5ea:	0018      	movs	r0, r3
     5ec:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     5ee:	008b      	lsls	r3, r1, #2
     5f0:	4a06      	ldr	r2, [pc, #24]	; (60c <extint_register_callback+0x28>)
     5f2:	589b      	ldr	r3, [r3, r2]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d003      	beq.n	600 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     5f8:	4283      	cmp	r3, r0
     5fa:	d005      	beq.n	608 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     5fc:	231d      	movs	r3, #29
     5fe:	e7f4      	b.n	5ea <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     600:	0089      	lsls	r1, r1, #2
     602:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     604:	2300      	movs	r3, #0
     606:	e7f0      	b.n	5ea <extint_register_callback+0x6>
		return STATUS_OK;
     608:	2300      	movs	r3, #0
     60a:	e7ee      	b.n	5ea <extint_register_callback+0x6>
     60c:	200000ac 	.word	0x200000ac

00000610 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     610:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     612:	2900      	cmp	r1, #0
     614:	d001      	beq.n	61a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     616:	0018      	movs	r0, r3
     618:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     61a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     61c:	281f      	cmp	r0, #31
     61e:	d800      	bhi.n	622 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     620:	4a02      	ldr	r2, [pc, #8]	; (62c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     622:	2301      	movs	r3, #1
     624:	4083      	lsls	r3, r0
     626:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     628:	2300      	movs	r3, #0
     62a:	e7f4      	b.n	616 <extint_chan_enable_callback+0x6>
     62c:	40001800 	.word	0x40001800

00000630 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     630:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     632:	2200      	movs	r2, #0
     634:	4b10      	ldr	r3, [pc, #64]	; (678 <EIC_Handler+0x48>)
     636:	701a      	strb	r2, [r3, #0]
     638:	2300      	movs	r3, #0
     63a:	4910      	ldr	r1, [pc, #64]	; (67c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     63c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     63e:	4e10      	ldr	r6, [pc, #64]	; (680 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     640:	4c0d      	ldr	r4, [pc, #52]	; (678 <EIC_Handler+0x48>)
     642:	e00a      	b.n	65a <EIC_Handler+0x2a>
		return eics[eic_index];
     644:	490d      	ldr	r1, [pc, #52]	; (67c <EIC_Handler+0x4c>)
     646:	e008      	b.n	65a <EIC_Handler+0x2a>
     648:	7823      	ldrb	r3, [r4, #0]
     64a:	3301      	adds	r3, #1
     64c:	b2db      	uxtb	r3, r3
     64e:	7023      	strb	r3, [r4, #0]
     650:	2b0f      	cmp	r3, #15
     652:	d810      	bhi.n	676 <EIC_Handler+0x46>
		return NULL;
     654:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     656:	2b1f      	cmp	r3, #31
     658:	d9f4      	bls.n	644 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     65a:	0028      	movs	r0, r5
     65c:	4018      	ands	r0, r3
     65e:	2201      	movs	r2, #1
     660:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     662:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     664:	4210      	tst	r0, r2
     666:	d0ef      	beq.n	648 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     668:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     66a:	009b      	lsls	r3, r3, #2
     66c:	599b      	ldr	r3, [r3, r6]
     66e:	2b00      	cmp	r3, #0
     670:	d0ea      	beq.n	648 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     672:	4798      	blx	r3
     674:	e7e8      	b.n	648 <EIC_Handler+0x18>
			}
		}
	}
}
     676:	bd70      	pop	{r4, r5, r6, pc}
     678:	200000a8 	.word	0x200000a8
     67c:	40001800 	.word	0x40001800
     680:	200000ac 	.word	0x200000ac

00000684 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     684:	4a04      	ldr	r2, [pc, #16]	; (698 <_extint_enable+0x14>)
     686:	7813      	ldrb	r3, [r2, #0]
     688:	2102      	movs	r1, #2
     68a:	430b      	orrs	r3, r1
     68c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     68e:	7853      	ldrb	r3, [r2, #1]
     690:	b25b      	sxtb	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	dbfb      	blt.n	68e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     696:	4770      	bx	lr
     698:	40001800 	.word	0x40001800

0000069c <_system_extint_init>:
{
     69c:	b500      	push	{lr}
     69e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     6a0:	4a12      	ldr	r2, [pc, #72]	; (6ec <_system_extint_init+0x50>)
     6a2:	6993      	ldr	r3, [r2, #24]
     6a4:	2140      	movs	r1, #64	; 0x40
     6a6:	430b      	orrs	r3, r1
     6a8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     6aa:	a901      	add	r1, sp, #4
     6ac:	2300      	movs	r3, #0
     6ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     6b0:	2005      	movs	r0, #5
     6b2:	f001 fb65 	bl	1d80 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     6b6:	2005      	movs	r0, #5
     6b8:	f001 fb24 	bl	1d04 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     6bc:	4a0c      	ldr	r2, [pc, #48]	; (6f0 <_system_extint_init+0x54>)
     6be:	7813      	ldrb	r3, [r2, #0]
     6c0:	2101      	movs	r1, #1
     6c2:	430b      	orrs	r3, r1
     6c4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     6c6:	7853      	ldrb	r3, [r2, #1]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	dbfb      	blt.n	6c6 <_system_extint_init+0x2a>
     6ce:	4b09      	ldr	r3, [pc, #36]	; (6f4 <_system_extint_init+0x58>)
     6d0:	0019      	movs	r1, r3
     6d2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     6d4:	2200      	movs	r2, #0
     6d6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     6d8:	4299      	cmp	r1, r3
     6da:	d1fc      	bne.n	6d6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6dc:	2210      	movs	r2, #16
     6de:	4b06      	ldr	r3, [pc, #24]	; (6f8 <_system_extint_init+0x5c>)
     6e0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     6e2:	f7ff ffcf 	bl	684 <_extint_enable>
}
     6e6:	b003      	add	sp, #12
     6e8:	bd00      	pop	{pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	40000400 	.word	0x40000400
     6f0:	40001800 	.word	0x40001800
     6f4:	200000ac 	.word	0x200000ac
     6f8:	e000e100 	.word	0xe000e100

000006fc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     6fc:	2300      	movs	r3, #0
     6fe:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     700:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     702:	2201      	movs	r2, #1
     704:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     706:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     708:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     70a:	3302      	adds	r3, #2
     70c:	72c3      	strb	r3, [r0, #11]
}
     70e:	4770      	bx	lr

00000710 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
     712:	b083      	sub	sp, #12
     714:	0005      	movs	r5, r0
     716:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     718:	a901      	add	r1, sp, #4
     71a:	2300      	movs	r3, #0
     71c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     71e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     720:	7923      	ldrb	r3, [r4, #4]
     722:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     724:	7a23      	ldrb	r3, [r4, #8]
     726:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     728:	7820      	ldrb	r0, [r4, #0]
     72a:	f001 fb9d 	bl	1e68 <system_pinmux_pin_set_config>
		return NULL;
     72e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     730:	2d1f      	cmp	r5, #31
     732:	d800      	bhi.n	736 <extint_chan_set_config+0x26>
		return eics[eic_index];
     734:	4812      	ldr	r0, [pc, #72]	; (780 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     736:	2207      	movs	r2, #7
     738:	402a      	ands	r2, r5
     73a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     73c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     73e:	7aa3      	ldrb	r3, [r4, #10]
     740:	2b00      	cmp	r3, #0
     742:	d001      	beq.n	748 <extint_chan_set_config+0x38>
     744:	2308      	movs	r3, #8
     746:	431f      	orrs	r7, r3
     748:	08eb      	lsrs	r3, r5, #3
     74a:	009b      	lsls	r3, r3, #2
     74c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     74e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     750:	260f      	movs	r6, #15
     752:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     754:	43b1      	bics	r1, r6
			(new_config << config_pos);
     756:	4097      	lsls	r7, r2
     758:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     75a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     75c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     75e:	7a63      	ldrb	r3, [r4, #9]
     760:	2b00      	cmp	r3, #0
     762:	d106      	bne.n	772 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     764:	6943      	ldr	r3, [r0, #20]
     766:	2201      	movs	r2, #1
     768:	40aa      	lsls	r2, r5
     76a:	4393      	bics	r3, r2
     76c:	6143      	str	r3, [r0, #20]
	}
}
     76e:	b003      	add	sp, #12
     770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     772:	6942      	ldr	r2, [r0, #20]
     774:	2301      	movs	r3, #1
     776:	40ab      	lsls	r3, r5
     778:	4313      	orrs	r3, r2
     77a:	6143      	str	r3, [r0, #20]
     77c:	e7f7      	b.n	76e <extint_chan_set_config+0x5e>
     77e:	46c0      	nop			; (mov r8, r8)
     780:	40001800 	.word	0x40001800

00000784 <is_button_two_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     784:	4b23      	ldr	r3, [pc, #140]	; (814 <is_button_two_pressed+0x90>)
     786:	6a1b      	ldr	r3, [r3, #32]
/* Button 2 function
 */
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     788:	041b      	lsls	r3, r3, #16
     78a:	d41a      	bmi.n	7c2 <is_button_two_pressed+0x3e>
    BUTTON_TWO_PRESS_STATUS = true;
     78c:	2201      	movs	r2, #1
     78e:	4b22      	ldr	r3, [pc, #136]	; (818 <is_button_two_pressed+0x94>)
     790:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count--;
     792:	4a22      	ldr	r2, [pc, #136]	; (81c <is_button_two_pressed+0x98>)
     794:	6813      	ldr	r3, [r2, #0]
     796:	3b01      	subs	r3, #1
     798:	6013      	str	r3, [r2, #0]
    long_press_B2_delay_count--;
     79a:	4a21      	ldr	r2, [pc, #132]	; (820 <is_button_two_pressed+0x9c>)
     79c:	6813      	ldr	r3, [r2, #0]
     79e:	3b01      	subs	r3, #1
     7a0:	6013      	str	r3, [r2, #0]
      return true;
    }
  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     7a2:	2b00      	cmp	r3, #0
     7a4:	dd29      	ble.n	7fa <is_button_two_pressed+0x76>
	
    return true;
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     7a6:	4b1d      	ldr	r3, [pc, #116]	; (81c <is_button_two_pressed+0x98>)
     7a8:	681b      	ldr	r3, [r3, #0]
     7aa:	2b00      	cmp	r3, #0
     7ac:	dc1a      	bgt.n	7e4 <is_button_two_pressed+0x60>
    BUTTON_TWO_RELEASE_STATUS = false;
     7ae:	2300      	movs	r3, #0
     7b0:	4a1c      	ldr	r2, [pc, #112]	; (824 <is_button_two_pressed+0xa0>)
     7b2:	7013      	strb	r3, [r2, #0]
    press_B2_delay_count = 0;
     7b4:	4a19      	ldr	r2, [pc, #100]	; (81c <is_button_two_pressed+0x98>)
     7b6:	6013      	str	r3, [r2, #0]
    BUTTON_TWO_READY_TAKE_ACTION = true;
     7b8:	2201      	movs	r2, #1
     7ba:	4b1b      	ldr	r3, [pc, #108]	; (828 <is_button_two_pressed+0xa4>)
     7bc:	701a      	strb	r2, [r3, #0]
  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
    return false;
  }

  return false;
     7be:	2000      	movs	r0, #0
     7c0:	e014      	b.n	7ec <is_button_two_pressed+0x68>
    BUTTON_TWO_PRESS_STATUS = false;
     7c2:	2200      	movs	r2, #0
     7c4:	4b14      	ldr	r3, [pc, #80]	; (818 <is_button_two_pressed+0x94>)
     7c6:	701a      	strb	r2, [r3, #0]
    BUTTON_TWO_RELEASE_STATUS = true;
     7c8:	3201      	adds	r2, #1
     7ca:	4b16      	ldr	r3, [pc, #88]	; (824 <is_button_two_pressed+0xa0>)
     7cc:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     7ce:	3209      	adds	r2, #9
     7d0:	4b12      	ldr	r3, [pc, #72]	; (81c <is_button_two_pressed+0x98>)
     7d2:	601a      	str	r2, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     7d4:	3223      	adds	r2, #35	; 0x23
     7d6:	32ff      	adds	r2, #255	; 0xff
     7d8:	4b11      	ldr	r3, [pc, #68]	; (820 <is_button_two_pressed+0x9c>)
     7da:	601a      	str	r2, [r3, #0]
    if (BUTTON_TWO_READY_TAKE_ACTION) {
     7dc:	4b12      	ldr	r3, [pc, #72]	; (828 <is_button_two_pressed+0xa4>)
     7de:	7818      	ldrb	r0, [r3, #0]
     7e0:	2800      	cmp	r0, #0
     7e2:	d104      	bne.n	7ee <is_button_two_pressed+0x6a>
    BUTTON_TWO_RELEASE_STATUS = true;
     7e4:	2201      	movs	r2, #1
     7e6:	4b0f      	ldr	r3, [pc, #60]	; (824 <is_button_two_pressed+0xa0>)
     7e8:	701a      	strb	r2, [r3, #0]
    return false;
     7ea:	2000      	movs	r0, #0
}
     7ec:	4770      	bx	lr
      BUTTON_TWO_READY_TAKE_ACTION = false;
     7ee:	2200      	movs	r2, #0
     7f0:	701a      	strb	r2, [r3, #0]
      BUTTON_TWO_TAKE_ACTION = true;
     7f2:	3201      	adds	r2, #1
     7f4:	4b0d      	ldr	r3, [pc, #52]	; (82c <is_button_two_pressed+0xa8>)
     7f6:	701a      	strb	r2, [r3, #0]
      return true;
     7f8:	e7f8      	b.n	7ec <is_button_two_pressed+0x68>
    LongPressB2Flag = true;
     7fa:	2201      	movs	r2, #1
     7fc:	4b0c      	ldr	r3, [pc, #48]	; (830 <is_button_two_pressed+0xac>)
     7fe:	701a      	strb	r2, [r3, #0]
    long_press_B2_delay_count = 0;
     800:	2300      	movs	r3, #0
     802:	4a07      	ldr	r2, [pc, #28]	; (820 <is_button_two_pressed+0x9c>)
     804:	6013      	str	r3, [r2, #0]
    BUTTON_TWO_READY_TAKE_ACTION = false;
     806:	4a08      	ldr	r2, [pc, #32]	; (828 <is_button_two_pressed+0xa4>)
     808:	7013      	strb	r3, [r2, #0]
    BUTTON_TWO_TAKE_ACTION = false;      
     80a:	4a08      	ldr	r2, [pc, #32]	; (82c <is_button_two_pressed+0xa8>)
     80c:	7013      	strb	r3, [r2, #0]
    return true;
     80e:	2001      	movs	r0, #1
     810:	e7ec      	b.n	7ec <is_button_two_pressed+0x68>
     812:	46c0      	nop			; (mov r8, r8)
     814:	41004400 	.word	0x41004400
     818:	2000003c 	.word	0x2000003c
     81c:	20000004 	.word	0x20000004
     820:	20000000 	.word	0x20000000
     824:	2000003e 	.word	0x2000003e
     828:	2000003d 	.word	0x2000003d
     82c:	2000003f 	.word	0x2000003f
     830:	20000040 	.word	0x20000040

00000834 <is_button_two_take_action>:

bool is_button_two_take_action(void) {

  if (BUTTON_TWO_TAKE_ACTION) {
     834:	4b03      	ldr	r3, [pc, #12]	; (844 <is_button_two_take_action+0x10>)
     836:	7818      	ldrb	r0, [r3, #0]
     838:	2800      	cmp	r0, #0
     83a:	d001      	beq.n	840 <is_button_two_take_action+0xc>
    BUTTON_TWO_TAKE_ACTION = false;
     83c:	2200      	movs	r2, #0
     83e:	701a      	strb	r2, [r3, #0]
    return true;
  }
  return false;
     840:	4770      	bx	lr
     842:	46c0      	nop			; (mov r8, r8)
     844:	2000003f 	.word	0x2000003f

00000848 <set_pwm_color_channel>:
int flash_led_counter;
// extern void flash_pwm_led(void);
bool is_cycle_led;
bool pwm_led_toggle_flag;

void set_pwm_color_channel(uint8_t channel, bool enable) {
     848:	b510      	push	{r4, lr}
  if (enable) {
     84a:	2900      	cmp	r1, #0
     84c:	d01b      	beq.n	886 <set_pwm_color_channel+0x3e>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     84e:	4b19      	ldr	r3, [pc, #100]	; (8b4 <set_pwm_color_channel+0x6c>)
     850:	681a      	ldr	r2, [r3, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     852:	2102      	movs	r1, #2
     854:	6893      	ldr	r3, [r2, #8]
     856:	4219      	tst	r1, r3
     858:	d1fc      	bne.n	854 <set_pwm_color_channel+0xc>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     85a:	6813      	ldr	r3, [r2, #0]
     85c:	2102      	movs	r1, #2
     85e:	430b      	orrs	r3, r1
     860:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
    tcc_set_compare_value(&tcc_instance, channel, INDICATION_LED_DUTY_CYCLE);
     862:	4a15      	ldr	r2, [pc, #84]	; (8b8 <set_pwm_color_channel+0x70>)
     864:	0001      	movs	r1, r0
     866:	4813      	ldr	r0, [pc, #76]	; (8b4 <set_pwm_color_channel+0x6c>)
     868:	f001 fda6 	bl	23b8 <tcc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     86c:	4b11      	ldr	r3, [pc, #68]	; (8b4 <set_pwm_color_channel+0x6c>)
     86e:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     870:	2104      	movs	r1, #4
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     872:	201f      	movs	r0, #31
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     874:	6893      	ldr	r3, [r2, #8]
     876:	4219      	tst	r1, r3
     878:	d1fc      	bne.n	874 <set_pwm_color_channel+0x2c>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     87a:	7953      	ldrb	r3, [r2, #5]
     87c:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     87e:	d015      	beq.n	8ac <set_pwm_color_channel+0x64>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     880:	2b60      	cmp	r3, #96	; 0x60
     882:	d1f7      	bne.n	874 <set_pwm_color_channel+0x2c>
     884:	e014      	b.n	8b0 <set_pwm_color_channel+0x68>
  } else {
    tcc_set_compare_value(&tcc_instance, channel, ZERO_DUTY_CYCLE);
     886:	4c0b      	ldr	r4, [pc, #44]	; (8b4 <set_pwm_color_channel+0x6c>)
     888:	2200      	movs	r2, #0
     88a:	0001      	movs	r1, r0
     88c:	0020      	movs	r0, r4
     88e:	f001 fd93 	bl	23b8 <tcc_set_compare_value>
	Tcc *const tcc_module = module_inst->hw;
     892:	6822      	ldr	r2, [r4, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     894:	2102      	movs	r1, #2
     896:	6893      	ldr	r3, [r2, #8]
     898:	4219      	tst	r1, r3
     89a:	d1fc      	bne.n	896 <set_pwm_color_channel+0x4e>
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     89c:	4b07      	ldr	r3, [pc, #28]	; (8bc <set_pwm_color_channel+0x74>)
     89e:	6253      	str	r3, [r2, #36]	; 0x24
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     8a0:	62d3      	str	r3, [r2, #44]	; 0x2c
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     8a2:	6813      	ldr	r3, [r2, #0]
     8a4:	2102      	movs	r1, #2
     8a6:	438b      	bics	r3, r1
     8a8:	6013      	str	r3, [r2, #0]
     8aa:	e7df      	b.n	86c <set_pwm_color_channel+0x24>
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     8ac:	2360      	movs	r3, #96	; 0x60
     8ae:	7153      	strb	r3, [r2, #5]
	//tcc_set_compare_value(&tcc_instance, channel, 0x0FF);
	tcc_disable(&tcc_instance);
  }

  tcc_force_double_buffer_update(&tcc_instance);
}
     8b0:	bd10      	pop	{r4, pc}
     8b2:	46c0      	nop			; (mov r8, r8)
     8b4:	200000ec 	.word	0x200000ec
     8b8:	000004fe 	.word	0x000004fe
     8bc:	000ff80f 	.word	0x000ff80f

000008c0 <pwm_led_system_cleanup>:

void pwm_led_system_cleanup(void) {
     8c0:	b510      	push	{r4, lr}
	//tcc_disable(&tcc_instance);
  set_pwm_color_channel(RED_CHANNEL, false);
     8c2:	2100      	movs	r1, #0
     8c4:	2000      	movs	r0, #0
     8c6:	f7ff ffbf 	bl	848 <set_pwm_color_channel>
  set_pwm_color_channel(BLUE_CHANNEL, false);
     8ca:	2100      	movs	r1, #0
     8cc:	2002      	movs	r0, #2
     8ce:	f7ff ffbb 	bl	848 <set_pwm_color_channel>
  set_pwm_color_channel(GREEN_CHANNEL, false);
     8d2:	2100      	movs	r1, #0
     8d4:	2001      	movs	r0, #1
     8d6:	f7ff ffb7 	bl	848 <set_pwm_color_channel>
  set_pwm_color_channel(WHITE_CHANNEL, false);
     8da:	2100      	movs	r1, #0
     8dc:	2003      	movs	r0, #3
     8de:	f7ff ffb3 	bl	848 <set_pwm_color_channel>
}
     8e2:	bd10      	pop	{r4, pc}

000008e4 <set_pwm_color>:

void set_pwm_color(int color) {
     8e4:	b510      	push	{r4, lr}

  switch (color) {
     8e6:	2806      	cmp	r0, #6
     8e8:	d807      	bhi.n	8fa <set_pwm_color+0x16>
     8ea:	0080      	lsls	r0, r0, #2
     8ec:	4b18      	ldr	r3, [pc, #96]	; (950 <set_pwm_color+0x6c>)
     8ee:	581b      	ldr	r3, [r3, r0]
     8f0:	469f      	mov	pc, r3
  case 0: // Red
    set_pwm_color_channel(RED_CHANNEL, true);
     8f2:	2101      	movs	r1, #1
     8f4:	2000      	movs	r0, #0
     8f6:	f7ff ffa7 	bl	848 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
    break;
  default:
    break;
  }
}
     8fa:	bd10      	pop	{r4, pc}
    set_pwm_color_channel(GREEN_CHANNEL, true);
     8fc:	2101      	movs	r1, #1
     8fe:	2001      	movs	r0, #1
     900:	f7ff ffa2 	bl	848 <set_pwm_color_channel>
    break;
     904:	e7f9      	b.n	8fa <set_pwm_color+0x16>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     906:	2101      	movs	r1, #1
     908:	2002      	movs	r0, #2
     90a:	f7ff ff9d 	bl	848 <set_pwm_color_channel>
    break;
     90e:	e7f4      	b.n	8fa <set_pwm_color+0x16>
    set_pwm_color_channel(WHITE_CHANNEL, true);
     910:	2101      	movs	r1, #1
     912:	2003      	movs	r0, #3
     914:	f7ff ff98 	bl	848 <set_pwm_color_channel>
    break;
     918:	e7ef      	b.n	8fa <set_pwm_color+0x16>
    set_pwm_color_channel(RED_CHANNEL, true);
     91a:	2101      	movs	r1, #1
     91c:	2000      	movs	r0, #0
     91e:	f7ff ff93 	bl	848 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
     922:	2101      	movs	r1, #1
     924:	2001      	movs	r0, #1
     926:	f7ff ff8f 	bl	848 <set_pwm_color_channel>
    break;
     92a:	e7e6      	b.n	8fa <set_pwm_color+0x16>
    set_pwm_color_channel(RED_CHANNEL, true);
     92c:	2101      	movs	r1, #1
     92e:	2000      	movs	r0, #0
     930:	f7ff ff8a 	bl	848 <set_pwm_color_channel>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     934:	2101      	movs	r1, #1
     936:	2002      	movs	r0, #2
     938:	f7ff ff86 	bl	848 <set_pwm_color_channel>
    break;
     93c:	e7dd      	b.n	8fa <set_pwm_color+0x16>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     93e:	2101      	movs	r1, #1
     940:	2002      	movs	r0, #2
     942:	f7ff ff81 	bl	848 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
     946:	2101      	movs	r1, #1
     948:	2001      	movs	r0, #1
     94a:	f7ff ff7d 	bl	848 <set_pwm_color_channel>
}
     94e:	e7d4      	b.n	8fa <set_pwm_color+0x16>
     950:	00002d4c 	.word	0x00002d4c

00000954 <configure_pwm_tcc>:

void configure_pwm_tcc(void) {
     954:	b570      	push	{r4, r5, r6, lr}
  tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     956:	4d16      	ldr	r5, [pc, #88]	; (9b0 <configure_pwm_tcc+0x5c>)
     958:	4c16      	ldr	r4, [pc, #88]	; (9b4 <configure_pwm_tcc+0x60>)
     95a:	0029      	movs	r1, r5
     95c:	0020      	movs	r0, r4
     95e:	f001 fad3 	bl	1f08 <tcc_get_config_defaults>
  config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     962:	2302      	movs	r3, #2
     964:	7623      	strb	r3, [r4, #24]
  config_tcc.counter.period = CONF_DEFAULT_PERIOD;
     966:	4b14      	ldr	r3, [pc, #80]	; (9b8 <configure_pwm_tcc+0x64>)
     968:	6063      	str	r3, [r4, #4]
  config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
     96a:	2205      	movs	r2, #5
     96c:	72e2      	strb	r2, [r4, #11]

  config_tcc.compare.match[RED_CHANNEL] = ZERO_DUTY_CYCLE;
     96e:	2300      	movs	r3, #0
     970:	61e3      	str	r3, [r4, #28]
  config_tcc.compare.match[BLUE_CHANNEL] = ZERO_DUTY_CYCLE;
     972:	6263      	str	r3, [r4, #36]	; 0x24
  config_tcc.compare.match[GREEN_CHANNEL] = ZERO_DUTY_CYCLE;
     974:	6223      	str	r3, [r4, #32]
  config_tcc.compare.match[WHITE_CHANNEL] = ZERO_DUTY_CYCLE;
     976:	62a3      	str	r3, [r4, #40]	; 0x28
  //config_tcc.compare.wave_polarity[BLUE_CHANNEL] = TCC_WAVE_POLARITY_1;
  //config_tcc.compare.wave_polarity[GREEN_CHANNEL] = TCC_WAVE_POLARITY_1;
  //config_tcc.compare.wave_polarity[WHITE_CHANNEL] = TCC_WAVE_POLARITY_1;
  

  config_tcc.pins.wave_out_pin[RED_CHANNEL] = PIN_PA04F_TCC0_WO0; // RED
     978:	2104      	movs	r1, #4
     97a:	65a1      	str	r1, [r4, #88]	; 0x58
  config_tcc.pins.wave_out_pin_mux[RED_CHANNEL] = MUX_PA04F_TCC0_WO0;
     97c:	67a2      	str	r2, [r4, #120]	; 0x78
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;
     97e:	3301      	adds	r3, #1
     980:	2098      	movs	r0, #152	; 0x98
     982:	5423      	strb	r3, [r4, r0]

  config_tcc.pins.wave_out_pin[GREEN_CHANNEL] = PIN_PA05F_TCC0_WO1; // GREEN
     984:	65e2      	str	r2, [r4, #92]	; 0x5c
  config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL] = MUX_PA05F_TCC0_WO1;
     986:	67e2      	str	r2, [r4, #124]	; 0x7c
  config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     988:	3294      	adds	r2, #148	; 0x94
     98a:	54a3      	strb	r3, [r4, r2]

  config_tcc.pins.wave_out_pin[BLUE_CHANNEL] = PIN_PA08E_TCC0_WO2; // BLUE
     98c:	3a91      	subs	r2, #145	; 0x91
     98e:	6622      	str	r2, [r4, #96]	; 0x60
  config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL] = MUX_PA08E_TCC0_WO2;
     990:	3278      	adds	r2, #120	; 0x78
     992:	50a1      	str	r1, [r4, r2]
  config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL] = true;
     994:	321a      	adds	r2, #26
     996:	54a3      	strb	r3, [r4, r2]

  config_tcc.pins.wave_out_pin[WHITE_CHANNEL] = PIN_PA09E_TCC0_WO3; // WHITE
     998:	3a91      	subs	r2, #145	; 0x91
     99a:	6662      	str	r2, [r4, #100]	; 0x64
  config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL] = MUX_PA09E_TCC0_WO3;
     99c:	327b      	adds	r2, #123	; 0x7b
     99e:	50a1      	str	r1, [r4, r2]
  config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     9a0:	3217      	adds	r2, #23
     9a2:	54a3      	strb	r3, [r4, r2]

  tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     9a4:	0022      	movs	r2, r4
     9a6:	0029      	movs	r1, r5
     9a8:	4804      	ldr	r0, [pc, #16]	; (9bc <configure_pwm_tcc+0x68>)
     9aa:	f001 fb4b 	bl	2044 <tcc_init>
  //tcc_enable(&tcc_instance);
}
     9ae:	bd70      	pop	{r4, r5, r6, pc}
     9b0:	42001400 	.word	0x42001400
     9b4:	20000148 	.word	0x20000148
     9b8:	000004ff 	.word	0x000004ff
     9bc:	200000ec 	.word	0x200000ec

000009c0 <cycle_pwm_led>:
// pwm_led_system_cleanup(); // Reset to 1 for red
// break;
//}
//}

void cycle_pwm_led(void) {
     9c0:	b510      	push	{r4, lr}
  flash_led_counter = 0;
     9c2:	2200      	movs	r2, #0
     9c4:	4b0c      	ldr	r3, [pc, #48]	; (9f8 <cycle_pwm_led+0x38>)
     9c6:	601a      	str	r2, [r3, #0]
  switch (pwm_led_toggle_count) {
     9c8:	4b0c      	ldr	r3, [pc, #48]	; (9fc <cycle_pwm_led+0x3c>)
     9ca:	781b      	ldrb	r3, [r3, #0]
     9cc:	2b01      	cmp	r3, #1
     9ce:	d002      	beq.n	9d6 <cycle_pwm_led+0x16>
     9d0:	2b06      	cmp	r3, #6
     9d2:	d00a      	beq.n	9ea <cycle_pwm_led+0x2a>
  case 6:
    pwm_led_toggle_count = 0;
    pwm_led_system_cleanup(); // Reset to 1 for red
    break;
  }
}
     9d4:	bd10      	pop	{r4, pc}
    SET_RED;
     9d6:	2000      	movs	r0, #0
     9d8:	f7ff ff84 	bl	8e4 <set_pwm_color>
    SET_BLU;
     9dc:	2002      	movs	r0, #2
     9de:	f7ff ff81 	bl	8e4 <set_pwm_color>
    SET_GRN;
     9e2:	2001      	movs	r0, #1
     9e4:	f7ff ff7e 	bl	8e4 <set_pwm_color>
    break;
     9e8:	e7f4      	b.n	9d4 <cycle_pwm_led+0x14>
    pwm_led_toggle_count = 0;
     9ea:	2200      	movs	r2, #0
     9ec:	4b03      	ldr	r3, [pc, #12]	; (9fc <cycle_pwm_led+0x3c>)
     9ee:	701a      	strb	r2, [r3, #0]
    pwm_led_system_cleanup(); // Reset to 1 for red
     9f0:	f7ff ff66 	bl	8c0 <pwm_led_system_cleanup>
}
     9f4:	e7ee      	b.n	9d4 <cycle_pwm_led+0x14>
     9f6:	46c0      	nop			; (mov r8, r8)
     9f8:	2000020c 	.word	0x2000020c
     9fc:	20000041 	.word	0x20000041

00000a00 <configure_pwm_generator>:

bool pulsating_motor_routine = false;
uint8_t motor_toggle_count = -1;
bool motor_running = false;

void configure_pwm_generator(void) {
     a00:	b500      	push	{lr}
     a02:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     a04:	aa01      	add	r2, sp, #4
     a06:	2300      	movs	r3, #0
     a08:	2100      	movs	r1, #0
     a0a:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     a0c:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     a0e:	2000      	movs	r0, #0
     a10:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     a12:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     a14:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     a16:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     a18:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     a1a:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     a1c:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     a1e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     a20:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     a22:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     a24:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     a26:	8593      	strh	r3, [r2, #44]	; 0x2c
  struct tc_config config_tc;
  tc_get_config_defaults(&config_tc);

  config_tc.clock_source = TC_CLOCK_SOURCE;
  config_tc.counter_size = TC_COUNTER_SIZE;
     a28:	3304      	adds	r3, #4
     a2a:	7093      	strb	r3, [r2, #2]
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     a2c:	21a0      	movs	r1, #160	; 0xa0
     a2e:	00c9      	lsls	r1, r1, #3
     a30:	8091      	strh	r1, [r2, #4]

  config_tc.counter_8_bit.value = 0;
  config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     a32:	2055      	movs	r0, #85	; 0x55
     a34:	2129      	movs	r1, #41	; 0x29
     a36:	5450      	strb	r0, [r2, r1]

  config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     a38:	3840      	subs	r0, #64	; 0x40
     a3a:	3101      	adds	r1, #1
     a3c:	5450      	strb	r0, [r2, r1]

  config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     a3e:	3116      	adds	r1, #22
     a40:	7191      	strb	r1, [r2, #6]
  config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     a42:	3936      	subs	r1, #54	; 0x36
     a44:	6151      	str	r1, [r2, #20]
  config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     a46:	6193      	str	r3, [r2, #24]

  config_tc.pwm_channel[0].enabled = true;
     a48:	3b03      	subs	r3, #3
     a4a:	7413      	strb	r3, [r2, #16]

  tc_init(&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     a4c:	4902      	ldr	r1, [pc, #8]	; (a58 <configure_pwm_generator+0x58>)
     a4e:	4803      	ldr	r0, [pc, #12]	; (a5c <configure_pwm_generator+0x5c>)
     a50:	f001 fd4a 	bl	24e8 <tc_init>
}
     a54:	b00f      	add	sp, #60	; 0x3c
     a56:	bd00      	pop	{pc}
     a58:	42001c00 	.word	0x42001c00
     a5c:	200001ec 	.word	0x200001ec

00000a60 <motor_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a60:	4b08      	ldr	r3, [pc, #32]	; (a84 <motor_enable+0x24>)
     a62:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     a64:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     a66:	b25b      	sxtb	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	dbfb      	blt.n	a64 <motor_enable+0x4>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     a6c:	8813      	ldrh	r3, [r2, #0]
     a6e:	2102      	movs	r1, #2
     a70:	430b      	orrs	r3, r1
     a72:	8013      	strh	r3, [r2, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a74:	2240      	movs	r2, #64	; 0x40
     a76:	4b04      	ldr	r3, [pc, #16]	; (a88 <motor_enable+0x28>)
     a78:	619a      	str	r2, [r3, #24]

void motor_enable(void) {
  tc_enable(&pwm_generator_instance);
  port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
  motor_running = true;
     a7a:	3a3f      	subs	r2, #63	; 0x3f
     a7c:	4b03      	ldr	r3, [pc, #12]	; (a8c <motor_enable+0x2c>)
     a7e:	701a      	strb	r2, [r3, #0]
  // set_motor_speed_1_indication();
}
     a80:	4770      	bx	lr
     a82:	46c0      	nop			; (mov r8, r8)
     a84:	200001ec 	.word	0x200001ec
     a88:	41004400 	.word	0x41004400
     a8c:	20000043 	.word	0x20000043

00000a90 <motor_disable>:

void motor_disable(void) {
     a90:	b510      	push	{r4, lr}
  pulsating_motor_routine = false;
     a92:	2300      	movs	r3, #0
     a94:	4a0e      	ldr	r2, [pc, #56]	; (ad0 <motor_disable+0x40>)
     a96:	7013      	strb	r3, [r2, #0]
  motor_toggle_count = -1;
     a98:	21ff      	movs	r1, #255	; 0xff
     a9a:	4a0e      	ldr	r2, [pc, #56]	; (ad4 <motor_disable+0x44>)
     a9c:	7011      	strb	r1, [r2, #0]
  motor_running = false;
     a9e:	4a0e      	ldr	r2, [pc, #56]	; (ad8 <motor_disable+0x48>)
     aa0:	7013      	strb	r3, [r2, #0]
  tc_set_compare_value(&pwm_generator_instance, TC_COMPARE_CAPTURE_CHANNEL_0,
     aa2:	4c0e      	ldr	r4, [pc, #56]	; (adc <motor_disable+0x4c>)
     aa4:	2215      	movs	r2, #21
     aa6:	2100      	movs	r1, #0
     aa8:	0020      	movs	r0, r4
     aaa:	f001 fe2d 	bl	2708 <tc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     aae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     ab0:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     ab2:	b25b      	sxtb	r3, r3
     ab4:	2b00      	cmp	r3, #0
     ab6:	dbfb      	blt.n	ab0 <motor_disable+0x20>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     ab8:	233b      	movs	r3, #59	; 0x3b
     aba:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     abc:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     abe:	8813      	ldrh	r3, [r2, #0]
     ac0:	2102      	movs	r1, #2
     ac2:	438b      	bics	r3, r1
     ac4:	8013      	strh	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     ac6:	2240      	movs	r2, #64	; 0x40
     ac8:	4b05      	ldr	r3, [pc, #20]	; (ae0 <motor_disable+0x50>)
     aca:	615a      	str	r2, [r3, #20]
                       INITIAL_DUTY_CYCLE);
  tc_disable(&pwm_generator_instance);
  port_pin_set_output_level(MOTOR_NSLEEP_PIN, LOW);
}
     acc:	bd10      	pop	{r4, pc}
     ace:	46c0      	nop			; (mov r8, r8)
     ad0:	20000044 	.word	0x20000044
     ad4:	20000008 	.word	0x20000008
     ad8:	20000043 	.word	0x20000043
     adc:	200001ec 	.word	0x200001ec
     ae0:	41004400 	.word	0x41004400

00000ae4 <cycle_pwm_motor>:

void cycle_pwm_motor(void) {
     ae4:	b510      	push	{r4, lr}
  {
    if (motor_running) {
     ae6:	4b13      	ldr	r3, [pc, #76]	; (b34 <cycle_pwm_motor+0x50>)
     ae8:	781b      	ldrb	r3, [r3, #0]
     aea:	2b00      	cmp	r3, #0
     aec:	d008      	beq.n	b00 <cycle_pwm_motor+0x1c>
      if (motor_toggle_count == 2) {
     aee:	4b12      	ldr	r3, [pc, #72]	; (b38 <cycle_pwm_motor+0x54>)
     af0:	781b      	ldrb	r3, [r3, #0]
     af2:	2b02      	cmp	r3, #2
     af4:	d005      	beq.n	b02 <cycle_pwm_motor+0x1e>
        tc_set_compare_value(&pwm_generator_instance,
                             TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
        // set_motor_speed_2_indication();
      } else if (motor_toggle_count == 3) {
     af6:	2b03      	cmp	r3, #3
     af8:	d009      	beq.n	b0e <cycle_pwm_motor+0x2a>
        tc_set_compare_value(&pwm_generator_instance,
                             TC_COMPARE_CAPTURE_CHANNEL_0, SECOND_DUTY_CYCLE);
        // set_motor_speed_3_indication();
      } else if (motor_toggle_count == 4) {
     afa:	2b04      	cmp	r3, #4
     afc:	d00d      	beq.n	b1a <cycle_pwm_motor+0x36>
        tc_set_compare_value(&pwm_generator_instance,
                             TC_COMPARE_CAPTURE_CHANNEL_0, SECOND_DUTY_CYCLE);
        // set_motor_pulsating_indication();
      }

      else if (motor_toggle_count > 4) {
     afe:	d815      	bhi.n	b2c <cycle_pwm_motor+0x48>
        motor_disable();
      }
    }
  }
}
     b00:	bd10      	pop	{r4, pc}
        tc_set_compare_value(&pwm_generator_instance,
     b02:	2222      	movs	r2, #34	; 0x22
     b04:	2100      	movs	r1, #0
     b06:	480d      	ldr	r0, [pc, #52]	; (b3c <cycle_pwm_motor+0x58>)
     b08:	f001 fdfe 	bl	2708 <tc_set_compare_value>
     b0c:	e7f8      	b.n	b00 <cycle_pwm_motor+0x1c>
        tc_set_compare_value(&pwm_generator_instance,
     b0e:	224d      	movs	r2, #77	; 0x4d
     b10:	2100      	movs	r1, #0
     b12:	480a      	ldr	r0, [pc, #40]	; (b3c <cycle_pwm_motor+0x58>)
     b14:	f001 fdf8 	bl	2708 <tc_set_compare_value>
     b18:	e7f2      	b.n	b00 <cycle_pwm_motor+0x1c>
        pulsating_motor_routine = true;
     b1a:	2201      	movs	r2, #1
     b1c:	4b08      	ldr	r3, [pc, #32]	; (b40 <cycle_pwm_motor+0x5c>)
     b1e:	701a      	strb	r2, [r3, #0]
        tc_set_compare_value(&pwm_generator_instance,
     b20:	324c      	adds	r2, #76	; 0x4c
     b22:	2100      	movs	r1, #0
     b24:	4805      	ldr	r0, [pc, #20]	; (b3c <cycle_pwm_motor+0x58>)
     b26:	f001 fdef 	bl	2708 <tc_set_compare_value>
     b2a:	e7e9      	b.n	b00 <cycle_pwm_motor+0x1c>
        motor_disable();
     b2c:	f7ff ffb0 	bl	a90 <motor_disable>
}
     b30:	e7e6      	b.n	b00 <cycle_pwm_motor+0x1c>
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	20000043 	.word	0x20000043
     b38:	20000008 	.word	0x20000008
     b3c:	200001ec 	.word	0x200001ec
     b40:	20000044 	.word	0x20000044

00000b44 <toggle_nsleep>:

void toggle_nsleep(void) {
  static bool PULSATING_MOTOR = false;
  if (pulsating_motor_routine) {
     b44:	4b0a      	ldr	r3, [pc, #40]	; (b70 <toggle_nsleep+0x2c>)
     b46:	781b      	ldrb	r3, [r3, #0]
     b48:	2b00      	cmp	r3, #0
     b4a:	d009      	beq.n	b60 <toggle_nsleep+0x1c>
    if (PULSATING_MOTOR) {
     b4c:	4b09      	ldr	r3, [pc, #36]	; (b74 <toggle_nsleep+0x30>)
     b4e:	781b      	ldrb	r3, [r3, #0]
     b50:	2b00      	cmp	r3, #0
     b52:	d106      	bne.n	b62 <toggle_nsleep+0x1e>
      port_pin_set_output_level(MOTOR_NSLEEP_PIN, LOW);
      PULSATING_MOTOR = false;
    } else {
      PULSATING_MOTOR = true;
     b54:	2201      	movs	r2, #1
     b56:	4b07      	ldr	r3, [pc, #28]	; (b74 <toggle_nsleep+0x30>)
     b58:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     b5a:	323f      	adds	r2, #63	; 0x3f
     b5c:	4b06      	ldr	r3, [pc, #24]	; (b78 <toggle_nsleep+0x34>)
     b5e:	619a      	str	r2, [r3, #24]
      port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
    }
  }
}
     b60:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
     b62:	2240      	movs	r2, #64	; 0x40
     b64:	4b04      	ldr	r3, [pc, #16]	; (b78 <toggle_nsleep+0x34>)
     b66:	615a      	str	r2, [r3, #20]
      PULSATING_MOTOR = false;
     b68:	2200      	movs	r2, #0
     b6a:	4b02      	ldr	r3, [pc, #8]	; (b74 <toggle_nsleep+0x30>)
     b6c:	701a      	strb	r2, [r3, #0]
     b6e:	e7f7      	b.n	b60 <toggle_nsleep+0x1c>
     b70:	20000044 	.word	0x20000044
     b74:	20000042 	.word	0x20000042
     b78:	41004400 	.word	0x41004400

00000b7c <system_inactive>:
  system_sleep();
}

void sys_sleep_logic(void) { put_to_sleep(); }

void system_inactive(void) {
     b7c:	b510      	push	{r4, lr}
  motor_disable(); // shutdown PWM motor
     b7e:	f7ff ff87 	bl	a90 <motor_disable>
  is_cycle_led = false;
     b82:	2300      	movs	r3, #0
     b84:	4a03      	ldr	r2, [pc, #12]	; (b94 <system_inactive+0x18>)
     b86:	7013      	strb	r3, [r2, #0]
  pwm_led_toggle_count = 0; // reset counter to start the routine from beginning
     b88:	4a03      	ldr	r2, [pc, #12]	; (b98 <system_inactive+0x1c>)
     b8a:	7013      	strb	r3, [r2, #0]
  pwm_led_system_cleanup(); // shutdown illumination led
     b8c:	f7ff fe98 	bl	8c0 <pwm_led_system_cleanup>
}
     b90:	bd10      	pop	{r4, pc}
     b92:	46c0      	nop			; (mov r8, r8)
     b94:	20000208 	.word	0x20000208
     b98:	20000041 	.word	0x20000041

00000b9c <put_to_sleep>:
void put_to_sleep(void) {
     b9c:	b510      	push	{r4, lr}
  system_inactive(); // once entered sleep mode -- sys inactive
     b9e:	f7ff ffed 	bl	b7c <system_inactive>
  reset_chip();
     ba2:	f001 fe81 	bl	28a8 <reset_chip>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
     ba6:	4a04      	ldr	r2, [pc, #16]	; (bb8 <put_to_sleep+0x1c>)
     ba8:	6913      	ldr	r3, [r2, #16]
     baa:	2104      	movs	r1, #4
     bac:	430b      	orrs	r3, r1
     bae:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     bb0:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
     bb4:	bf30      	wfi
}
     bb6:	bd10      	pop	{r4, pc}
     bb8:	e000ed00 	.word	0xe000ed00

00000bbc <regular_routine>:

void regular_routine(void) {
     bbc:	b510      	push	{r4, lr}

  /** shift from button 1 --> 2 11/17

  **/

  if (is_button_two_pressed()) {
     bbe:	f7ff fde1 	bl	784 <is_button_two_pressed>
     bc2:	2800      	cmp	r0, #0
     bc4:	d00d      	beq.n	be2 <regular_routine+0x26>
    if (LongPressB2Flag) {
     bc6:	4b35      	ldr	r3, [pc, #212]	; (c9c <regular_routine+0xe0>)
     bc8:	781b      	ldrb	r3, [r3, #0]
     bca:	2b00      	cmp	r3, #0
     bcc:	d026      	beq.n	c1c <regular_routine+0x60>
	  LongPressB2Flag = false;
     bce:	2200      	movs	r2, #0
     bd0:	4b32      	ldr	r3, [pc, #200]	; (c9c <regular_routine+0xe0>)
     bd2:	701a      	strb	r2, [r3, #0]
	  display_battery_state_before_shutdown();
     bd4:	f000 fa9e 	bl	1114 <display_battery_state_before_shutdown>
	  SleepTickCount = 25;	
     bd8:	2219      	movs	r2, #25
     bda:	4b31      	ldr	r3, [pc, #196]	; (ca0 <regular_routine+0xe4>)
     bdc:	601a      	str	r2, [r3, #0]
      system_inactive();
     bde:	f7ff ffcd 	bl	b7c <system_inactive>
        }
      }
    }
  }

  if (BUTTON_TWO_RELEASE_STATUS) {
     be2:	4b30      	ldr	r3, [pc, #192]	; (ca4 <regular_routine+0xe8>)
     be4:	781b      	ldrb	r3, [r3, #0]
     be6:	2b00      	cmp	r3, #0
     be8:	d004      	beq.n	bf4 <regular_routine+0x38>
    motor_status_changed = false;
     bea:	2300      	movs	r3, #0
     bec:	4a2e      	ldr	r2, [pc, #184]	; (ca8 <regular_routine+0xec>)
     bee:	7013      	strb	r3, [r2, #0]
    led_button_status_changed = false;
     bf0:	4a2e      	ldr	r2, [pc, #184]	; (cac <regular_routine+0xf0>)
     bf2:	7013      	strb	r3, [r2, #0]
  }

  if (BATTERY_LOWEST) {
     bf4:	4b2e      	ldr	r3, [pc, #184]	; (cb0 <regular_routine+0xf4>)
     bf6:	781b      	ldrb	r3, [r3, #0]
     bf8:	2b00      	cmp	r3, #0
     bfa:	d13f      	bne.n	c7c <regular_routine+0xc0>
  //}
  // if (BUTTON_TWO_RELEASE_STATUS) {
  // led_button_status_changed = false;
  //}

  if (Vbus_State == false) {
     bfc:	4b2d      	ldr	r3, [pc, #180]	; (cb4 <regular_routine+0xf8>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	2b00      	cmp	r3, #0
     c02:	d00a      	beq.n	c1a <regular_routine+0x5e>
    ; // Enable Motor PWM
  } else {

    if (motor_running) {
     c04:	4b2c      	ldr	r3, [pc, #176]	; (cb8 <regular_routine+0xfc>)
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d13f      	bne.n	c8c <regular_routine+0xd0>
      system_inactive();
    }
    // ITS PLUGGED IN
    if (Chargn_On_State == false) { // battery charging (plugged in)
     c0c:	4b2b      	ldr	r3, [pc, #172]	; (cbc <regular_routine+0x100>)
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	d03e      	beq.n	c92 <regular_routine+0xd6>
      BATTERY_CHARGING = true;      // show battery charge routine
    } else {
      BATTERY_CHARGING = false;
     c14:	2200      	movs	r2, #0
     c16:	4b2a      	ldr	r3, [pc, #168]	; (cc0 <regular_routine+0x104>)
     c18:	701a      	strb	r2, [r3, #0]
    }
  }
}
     c1a:	bd10      	pop	{r4, pc}
    } else if (is_button_two_take_action()) {
     c1c:	f7ff fe0a 	bl	834 <is_button_two_take_action>
     c20:	2800      	cmp	r0, #0
     c22:	d0de      	beq.n	be2 <regular_routine+0x26>
		SleepTickCount = SLEEP_TICK_COUNT;
     c24:	2232      	movs	r2, #50	; 0x32
     c26:	4b1e      	ldr	r3, [pc, #120]	; (ca0 <regular_routine+0xe4>)
     c28:	601a      	str	r2, [r3, #0]
      if (!motor_status_changed && !led_button_status_changed &&
     c2a:	4b1f      	ldr	r3, [pc, #124]	; (ca8 <regular_routine+0xec>)
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d1d7      	bne.n	be2 <regular_routine+0x26>
     c32:	4b1e      	ldr	r3, [pc, #120]	; (cac <regular_routine+0xf0>)
     c34:	781b      	ldrb	r3, [r3, #0]
     c36:	2b00      	cmp	r3, #0
     c38:	d1d3      	bne.n	be2 <regular_routine+0x26>
          !Vbus_State) { // makeshift to stop led array working when connected
     c3a:	4b1e      	ldr	r3, [pc, #120]	; (cb4 <regular_routine+0xf8>)
      if (!motor_status_changed && !led_button_status_changed &&
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	2b00      	cmp	r3, #0
     c40:	d1cf      	bne.n	be2 <regular_routine+0x26>
        led_button_status_changed = true;
     c42:	3301      	adds	r3, #1
     c44:	4a19      	ldr	r2, [pc, #100]	; (cac <regular_routine+0xf0>)
     c46:	7013      	strb	r3, [r2, #0]
        motor_status_changed = true;
     c48:	4a17      	ldr	r2, [pc, #92]	; (ca8 <regular_routine+0xec>)
     c4a:	7013      	strb	r3, [r2, #0]
        pwm_led_toggle_count++;
     c4c:	4a1d      	ldr	r2, [pc, #116]	; (cc4 <regular_routine+0x108>)
     c4e:	7813      	ldrb	r3, [r2, #0]
     c50:	3301      	adds	r3, #1
     c52:	7013      	strb	r3, [r2, #0]
        motor_toggle_count++;
     c54:	4a1c      	ldr	r2, [pc, #112]	; (cc8 <regular_routine+0x10c>)
     c56:	7813      	ldrb	r3, [r2, #0]
     c58:	3301      	adds	r3, #1
     c5a:	7013      	strb	r3, [r2, #0]
        cycle_pwm_led();
     c5c:	f7ff feb0 	bl	9c0 <cycle_pwm_led>
        if (!motor_running && motor_toggle_count == 1) {
     c60:	4b15      	ldr	r3, [pc, #84]	; (cb8 <regular_routine+0xfc>)
     c62:	781b      	ldrb	r3, [r3, #0]
     c64:	2b00      	cmp	r3, #0
     c66:	d103      	bne.n	c70 <regular_routine+0xb4>
     c68:	4b17      	ldr	r3, [pc, #92]	; (cc8 <regular_routine+0x10c>)
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	2b01      	cmp	r3, #1
     c6e:	d002      	beq.n	c76 <regular_routine+0xba>
          cycle_pwm_motor();
     c70:	f7ff ff38 	bl	ae4 <cycle_pwm_motor>
     c74:	e7b5      	b.n	be2 <regular_routine+0x26>
          motor_enable();
     c76:	f7ff fef3 	bl	a60 <motor_enable>
     c7a:	e7b2      	b.n	be2 <regular_routine+0x26>
    motor_disable();          // shutdown PWM motor
     c7c:	f7ff ff08 	bl	a90 <motor_disable>
    pwm_led_system_cleanup(); // shutdown illumination led
     c80:	f7ff fe1e 	bl	8c0 <pwm_led_system_cleanup>
    pwm_led_toggle_count = 0;
     c84:	2200      	movs	r2, #0
     c86:	4b0f      	ldr	r3, [pc, #60]	; (cc4 <regular_routine+0x108>)
     c88:	701a      	strb	r2, [r3, #0]
     c8a:	e7b7      	b.n	bfc <regular_routine+0x40>
      system_inactive();
     c8c:	f7ff ff76 	bl	b7c <system_inactive>
     c90:	e7bc      	b.n	c0c <regular_routine+0x50>
      BATTERY_CHARGING = true;      // show battery charge routine
     c92:	2201      	movs	r2, #1
     c94:	4b0a      	ldr	r3, [pc, #40]	; (cc0 <regular_routine+0x104>)
     c96:	701a      	strb	r2, [r3, #0]
     c98:	e7bf      	b.n	c1a <regular_routine+0x5e>
     c9a:	46c0      	nop			; (mov r8, r8)
     c9c:	20000040 	.word	0x20000040
     ca0:	2000000c 	.word	0x2000000c
     ca4:	2000003e 	.word	0x2000003e
     ca8:	2000004a 	.word	0x2000004a
     cac:	20000049 	.word	0x20000049
     cb0:	20000048 	.word	0x20000048
     cb4:	20000212 	.word	0x20000212
     cb8:	20000043 	.word	0x20000043
     cbc:	20000213 	.word	0x20000213
     cc0:	20000046 	.word	0x20000046
     cc4:	20000041 	.word	0x20000041
     cc8:	20000008 	.word	0x20000008

00000ccc <get_battery_level>:
//}
//}

void get_battery_level(void) {
  // bool logic = !motor_running && !Vbus_State;
  bool logic = !Vbus_State;
     ccc:	4b1f      	ldr	r3, [pc, #124]	; (d4c <get_battery_level+0x80>)
  if (logic) {
     cce:	781b      	ldrb	r3, [r3, #0]
     cd0:	2b00      	cmp	r3, #0
     cd2:	d132      	bne.n	d3a <get_battery_level+0x6e>
    if (adc_result <= VOLTAGE_THRESH_LOWEST) {
     cd4:	4b1e      	ldr	r3, [pc, #120]	; (d50 <get_battery_level+0x84>)
     cd6:	881b      	ldrh	r3, [r3, #0]
     cd8:	4a1e      	ldr	r2, [pc, #120]	; (d54 <get_battery_level+0x88>)
     cda:	4293      	cmp	r3, r2
     cdc:	d912      	bls.n	d04 <get_battery_level+0x38>
      // LOWEST SITUATION
      BATTERY_LOWEST = true;
      BATTERY_LOW = false;
      BATTERY_CHARGED = false;

    } else if (adc_result > VOLTAGE_THRESH_LOWEST &&
     cde:	4a1e      	ldr	r2, [pc, #120]	; (d58 <get_battery_level+0x8c>)
     ce0:	189a      	adds	r2, r3, r2
     ce2:	b292      	uxth	r2, r2
     ce4:	2a28      	cmp	r2, #40	; 0x28
     ce6:	d916      	bls.n	d16 <get_battery_level+0x4a>
      // LOW SITUATION
      BATTERY_LOWEST = false;
      BATTERY_LOW = true;
      BATTERY_CHARGED = false;

    } else if (adc_result > VOLTAGE_THRESH_LOW &&
     ce8:	4a1c      	ldr	r2, [pc, #112]	; (d5c <get_battery_level+0x90>)
     cea:	4694      	mov	ip, r2
     cec:	4463      	add	r3, ip
     cee:	b29b      	uxth	r3, r3
     cf0:	2bed      	cmp	r3, #237	; 0xed
     cf2:	d819      	bhi.n	d28 <get_battery_level+0x5c>
               adc_result <= VOLTAGE_THRESH_MAX) {
      BATTERY_LOWEST = false;
     cf4:	2300      	movs	r3, #0
     cf6:	4a1a      	ldr	r2, [pc, #104]	; (d60 <get_battery_level+0x94>)
     cf8:	7013      	strb	r3, [r2, #0]
      BATTERY_LOW = false;
     cfa:	4a1a      	ldr	r2, [pc, #104]	; (d64 <get_battery_level+0x98>)
     cfc:	7013      	strb	r3, [r2, #0]
      BATTERY_CHARGED = false;
     cfe:	4a1a      	ldr	r2, [pc, #104]	; (d68 <get_battery_level+0x9c>)
     d00:	7013      	strb	r3, [r2, #0]
     d02:	e021      	b.n	d48 <get_battery_level+0x7c>
      BATTERY_LOWEST = true;
     d04:	2201      	movs	r2, #1
     d06:	4b16      	ldr	r3, [pc, #88]	; (d60 <get_battery_level+0x94>)
     d08:	701a      	strb	r2, [r3, #0]
      BATTERY_LOW = false;
     d0a:	2300      	movs	r3, #0
     d0c:	4a15      	ldr	r2, [pc, #84]	; (d64 <get_battery_level+0x98>)
     d0e:	7013      	strb	r3, [r2, #0]
      BATTERY_CHARGED = false;
     d10:	4a15      	ldr	r2, [pc, #84]	; (d68 <get_battery_level+0x9c>)
     d12:	7013      	strb	r3, [r2, #0]
     d14:	e018      	b.n	d48 <get_battery_level+0x7c>
      BATTERY_LOWEST = false;
     d16:	2300      	movs	r3, #0
     d18:	4a11      	ldr	r2, [pc, #68]	; (d60 <get_battery_level+0x94>)
     d1a:	7013      	strb	r3, [r2, #0]
      BATTERY_LOW = true;
     d1c:	2101      	movs	r1, #1
     d1e:	4a11      	ldr	r2, [pc, #68]	; (d64 <get_battery_level+0x98>)
     d20:	7011      	strb	r1, [r2, #0]
      BATTERY_CHARGED = false;
     d22:	4a11      	ldr	r2, [pc, #68]	; (d68 <get_battery_level+0x9c>)
     d24:	7013      	strb	r3, [r2, #0]
     d26:	e00f      	b.n	d48 <get_battery_level+0x7c>
    } else {
      BATTERY_LOWEST = false;
     d28:	2300      	movs	r3, #0
     d2a:	4a0d      	ldr	r2, [pc, #52]	; (d60 <get_battery_level+0x94>)
     d2c:	7013      	strb	r3, [r2, #0]
      BATTERY_LOW = false;
     d2e:	4a0d      	ldr	r2, [pc, #52]	; (d64 <get_battery_level+0x98>)
     d30:	7013      	strb	r3, [r2, #0]
      BATTERY_CHARGED = true;
     d32:	2201      	movs	r2, #1
     d34:	4b0c      	ldr	r3, [pc, #48]	; (d68 <get_battery_level+0x9c>)
     d36:	701a      	strb	r2, [r3, #0]
     d38:	e006      	b.n	d48 <get_battery_level+0x7c>
    }
  } else {
    if (Charged_State) {
     d3a:	4b0c      	ldr	r3, [pc, #48]	; (d6c <get_battery_level+0xa0>)
     d3c:	781b      	ldrb	r3, [r3, #0]
     d3e:	2b00      	cmp	r3, #0
     d40:	d002      	beq.n	d48 <get_battery_level+0x7c>
      BATTERY_CHARGED = true;
     d42:	2201      	movs	r2, #1
     d44:	4b08      	ldr	r3, [pc, #32]	; (d68 <get_battery_level+0x9c>)
     d46:	701a      	strb	r2, [r3, #0]
    }
  }
}
     d48:	4770      	bx	lr
     d4a:	46c0      	nop			; (mov r8, r8)
     d4c:	20000212 	.word	0x20000212
     d50:	2000009c 	.word	0x2000009c
     d54:	00000c6d 	.word	0x00000c6d
     d58:	fffff392 	.word	0xfffff392
     d5c:	fffff369 	.word	0xfffff369
     d60:	20000048 	.word	0x20000048
     d64:	20000047 	.word	0x20000047
     d68:	20000045 	.word	0x20000045
     d6c:	20000214 	.word	0x20000214

00000d70 <system_logic>:

/************************************************************************/
/* LOGIC MACHINE */
/************************************************************************/

void system_logic(void) {
     d70:	b510      	push	{r4, lr}
  if (SYS_TICK_10MS) {
     d72:	4b1a      	ldr	r3, [pc, #104]	; (ddc <system_logic+0x6c>)
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b00      	cmp	r3, #0
     d78:	d108      	bne.n	d8c <system_logic+0x1c>
  // if (is_cycle_led){
  // flicker_pwm_led();
  //}
  //}

  if (SYS_TICK_200MS) {
     d7a:	4b19      	ldr	r3, [pc, #100]	; (de0 <system_logic+0x70>)
     d7c:	781b      	ldrb	r3, [r3, #0]
     d7e:	2b00      	cmp	r3, #0
     d80:	d10c      	bne.n	d9c <system_logic+0x2c>
		  // LongPressB2Flag = false;
		  SYS_SLEEP = true;
		}
  }

  if (SYS_SLEEP) {
     d82:	4b18      	ldr	r3, [pc, #96]	; (de4 <system_logic+0x74>)
     d84:	781b      	ldrb	r3, [r3, #0]
     d86:	2b00      	cmp	r3, #0
     d88:	d11b      	bne.n	dc2 <system_logic+0x52>
    SYS_SLEEP = false;
    sys_sleep_logic();
  }
}
     d8a:	bd10      	pop	{r4, pc}
    SYS_TICK_10MS = false;
     d8c:	2200      	movs	r2, #0
     d8e:	4b13      	ldr	r3, [pc, #76]	; (ddc <system_logic+0x6c>)
     d90:	701a      	strb	r2, [r3, #0]
    system_state(); // Get latest system_state
     d92:	f000 f9db 	bl	114c <system_state>
    regular_routine();
     d96:	f7ff ff11 	bl	bbc <regular_routine>
     d9a:	e7ee      	b.n	d7a <system_logic+0xa>
    SYS_TICK_200MS = false;
     d9c:	2200      	movs	r2, #0
     d9e:	4b10      	ldr	r3, [pc, #64]	; (de0 <system_logic+0x70>)
     da0:	701a      	strb	r2, [r3, #0]
    sample_adc();
     da2:	f7ff f9c7 	bl	134 <sample_adc>
    get_battery_level();
     da6:	f7ff ff91 	bl	ccc <get_battery_level>
    toggle_nsleep();
     daa:	f7ff fecb 	bl	b44 <toggle_nsleep>
    SleepTickCount--;
     dae:	4a0e      	ldr	r2, [pc, #56]	; (de8 <system_logic+0x78>)
     db0:	6813      	ldr	r3, [r2, #0]
     db2:	3b01      	subs	r3, #1
     db4:	6013      	str	r3, [r2, #0]
     if (SleepTickCount == 10) {
     db6:	2b0a      	cmp	r3, #10
     db8:	d009      	beq.n	dce <system_logic+0x5e>
	if (SleepTickCount < 1) {
     dba:	4b0b      	ldr	r3, [pc, #44]	; (de8 <system_logic+0x78>)
     dbc:	681b      	ldr	r3, [r3, #0]
     dbe:	2b00      	cmp	r3, #0
     dc0:	dcdf      	bgt.n	d82 <system_logic+0x12>
    SYS_SLEEP = false;
     dc2:	2200      	movs	r2, #0
     dc4:	4b07      	ldr	r3, [pc, #28]	; (de4 <system_logic+0x74>)
     dc6:	701a      	strb	r2, [r3, #0]
void sys_sleep_logic(void) { put_to_sleep(); }
     dc8:	f7ff fee8 	bl	b9c <put_to_sleep>
}
     dcc:	e7dd      	b.n	d8a <system_logic+0x1a>
		LongPressB2Flag = true;
     dce:	2201      	movs	r2, #1
     dd0:	4b06      	ldr	r3, [pc, #24]	; (dec <system_logic+0x7c>)
     dd2:	701a      	strb	r2, [r3, #0]
		display_battery_state_before_shutdown();		
     dd4:	f000 f99e 	bl	1114 <display_battery_state_before_shutdown>
     dd8:	e7ef      	b.n	dba <system_logic+0x4a>
     dda:	46c0      	nop			; (mov r8, r8)
     ddc:	2000004d 	.word	0x2000004d
     de0:	2000004e 	.word	0x2000004e
     de4:	2000004b 	.word	0x2000004b
     de8:	2000000c 	.word	0x2000000c
     dec:	20000040 	.word	0x20000040

00000df0 <sys_tc_callback>:
  static int tick_count_100ms;
  static int tick_count_200ms;
  // static int tick_count_500ms;
  // static int tick_count_1000ms;

  tick_count_1ms++;
     df0:	4a21      	ldr	r2, [pc, #132]	; (e78 <sys_tc_callback+0x88>)
     df2:	6813      	ldr	r3, [r2, #0]
     df4:	3301      	adds	r3, #1
     df6:	6013      	str	r3, [r2, #0]

  // port_pin_toggle_output_level (LED0_PIN);
  // // visually check sys clock on PA16

  // Check for 10ms interval
  if (tick_count_1ms >= 10) {
     df8:	2b09      	cmp	r3, #9
     dfa:	dd09      	ble.n	e10 <sys_tc_callback+0x20>
    tick_count_10ms++;
     dfc:	4a1f      	ldr	r2, [pc, #124]	; (e7c <sys_tc_callback+0x8c>)
     dfe:	6813      	ldr	r3, [r2, #0]
     e00:	3301      	adds	r3, #1
     e02:	6013      	str	r3, [r2, #0]
    tick_count_1ms = 0;
     e04:	2200      	movs	r2, #0
     e06:	4b1c      	ldr	r3, [pc, #112]	; (e78 <sys_tc_callback+0x88>)
     e08:	601a      	str	r2, [r3, #0]
    SYS_TICK_10MS = true; // Flag for 10ms interval
     e0a:	3201      	adds	r2, #1
     e0c:	4b1c      	ldr	r3, [pc, #112]	; (e80 <sys_tc_callback+0x90>)
     e0e:	701a      	strb	r2, [r3, #0]
                          // port_pin_toggle_output_level (LED0_PIN);
                          // //
    // visually check sys clock on PA16
  }

  if (tick_count_10ms >= 2) {
     e10:	4b1a      	ldr	r3, [pc, #104]	; (e7c <sys_tc_callback+0x8c>)
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	2b01      	cmp	r3, #1
     e16:	dd06      	ble.n	e26 <sys_tc_callback+0x36>
    tick_count_20ms++;
     e18:	491a      	ldr	r1, [pc, #104]	; (e84 <sys_tc_callback+0x94>)
     e1a:	680a      	ldr	r2, [r1, #0]
     e1c:	3201      	adds	r2, #1
     e1e:	600a      	str	r2, [r1, #0]
    // tick_count_10ms = 0;
    SYS_TICK_20MS = true; // Flag for 18ms interval
     e20:	2101      	movs	r1, #1
     e22:	4a19      	ldr	r2, [pc, #100]	; (e88 <sys_tc_callback+0x98>)
     e24:	7011      	strb	r1, [r2, #0]
  }

  // Check for 50ms interval
  if (tick_count_10ms >= 5) {
     e26:	2b04      	cmp	r3, #4
     e28:	dd09      	ble.n	e3e <sys_tc_callback+0x4e>
    tick_count_50ms++;
     e2a:	4a18      	ldr	r2, [pc, #96]	; (e8c <sys_tc_callback+0x9c>)
     e2c:	6813      	ldr	r3, [r2, #0]
     e2e:	3301      	adds	r3, #1
     e30:	6013      	str	r3, [r2, #0]
    tick_count_10ms = 0;
     e32:	2200      	movs	r2, #0
     e34:	4b11      	ldr	r3, [pc, #68]	; (e7c <sys_tc_callback+0x8c>)
     e36:	601a      	str	r2, [r3, #0]
    SYS_TICK_50MS = true; // Flag for 50ms interval
     e38:	3201      	adds	r2, #1
     e3a:	4b15      	ldr	r3, [pc, #84]	; (e90 <sys_tc_callback+0xa0>)
     e3c:	701a      	strb	r2, [r3, #0]
                          // //
    // visually check sys clock on PA16
  }

  // Check for 100ms interval
  if (tick_count_50ms >= 2) {
     e3e:	4b13      	ldr	r3, [pc, #76]	; (e8c <sys_tc_callback+0x9c>)
     e40:	681b      	ldr	r3, [r3, #0]
     e42:	2b01      	cmp	r3, #1
     e44:	dd09      	ble.n	e5a <sys_tc_callback+0x6a>
    tick_count_100ms++;
     e46:	4a13      	ldr	r2, [pc, #76]	; (e94 <sys_tc_callback+0xa4>)
     e48:	6813      	ldr	r3, [r2, #0]
     e4a:	3301      	adds	r3, #1
     e4c:	6013      	str	r3, [r2, #0]
    tick_count_50ms = 0;
     e4e:	2200      	movs	r2, #0
     e50:	4b0e      	ldr	r3, [pc, #56]	; (e8c <sys_tc_callback+0x9c>)
     e52:	601a      	str	r2, [r3, #0]
    SYS_TICK_100MS = true; // Flag for 100ms interval
     e54:	3201      	adds	r2, #1
     e56:	4b10      	ldr	r3, [pc, #64]	; (e98 <sys_tc_callback+0xa8>)
     e58:	701a      	strb	r2, [r3, #0]
                           // //
    // visually check sys clock on PA16
  }

  // Check for 200ms interval
  if (tick_count_100ms >= 2) {
     e5a:	4b0e      	ldr	r3, [pc, #56]	; (e94 <sys_tc_callback+0xa4>)
     e5c:	681b      	ldr	r3, [r3, #0]
     e5e:	2b01      	cmp	r3, #1
     e60:	dd09      	ble.n	e76 <sys_tc_callback+0x86>
    tick_count_200ms++;
     e62:	4a0e      	ldr	r2, [pc, #56]	; (e9c <sys_tc_callback+0xac>)
     e64:	6813      	ldr	r3, [r2, #0]
     e66:	3301      	adds	r3, #1
     e68:	6013      	str	r3, [r2, #0]
    tick_count_100ms = 0;
     e6a:	2200      	movs	r2, #0
     e6c:	4b09      	ldr	r3, [pc, #36]	; (e94 <sys_tc_callback+0xa4>)
     e6e:	601a      	str	r2, [r3, #0]
    SYS_TICK_200MS = true; // Flag for 200ms interval
     e70:	3201      	adds	r2, #1
     e72:	4b0b      	ldr	r3, [pc, #44]	; (ea0 <sys_tc_callback+0xb0>)
     e74:	701a      	strb	r2, [r3, #0]
                           // port_pin_toggle_output_level (LED0_PIN);
  }

}
     e76:	4770      	bx	lr
     e78:	2000005c 	.word	0x2000005c
     e7c:	20000058 	.word	0x20000058
     e80:	2000004d 	.word	0x2000004d
     e84:	20000064 	.word	0x20000064
     e88:	2000004f 	.word	0x2000004f
     e8c:	20000068 	.word	0x20000068
     e90:	20000050 	.word	0x20000050
     e94:	20000054 	.word	0x20000054
     e98:	2000004c 	.word	0x2000004c
     e9c:	20000060 	.word	0x20000060
     ea0:	2000004e 	.word	0x2000004e

00000ea4 <extint_detection_callback>:
    extint_chan_enable_callback(PA_11_EIC_LINE_custom,
                                EXTINT_CALLBACK_TYPE_DETECT);
  }

  void extint_detection_callback(void){ 
	  SleepTickCount = SLEEP_TICK_COUNT; 
     ea4:	2232      	movs	r2, #50	; 0x32
     ea6:	4b01      	ldr	r3, [pc, #4]	; (eac <extint_detection_callback+0x8>)
     ea8:	601a      	str	r2, [r3, #0]
	}
     eaa:	4770      	bx	lr
     eac:	2000000c 	.word	0x2000000c

00000eb0 <configure_port_pins>:
void configure_port_pins(void) {
     eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     eb2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     eb4:	ac01      	add	r4, sp, #4
     eb6:	2600      	movs	r6, #0
     eb8:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
     eba:	70a6      	strb	r6, [r4, #2]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     ebc:	2702      	movs	r7, #2
     ebe:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(VBUS_PIN, &config_port_pin);
     ec0:	0021      	movs	r1, r4
     ec2:	201b      	movs	r0, #27
     ec4:	f000 f980 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     ec8:	2501      	movs	r5, #1
     eca:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     ecc:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     ece:	0021      	movs	r1, r4
     ed0:	2006      	movs	r0, #6
     ed2:	f000 f979 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     ed6:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP; // START AT PULL UP.
     ed8:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     eda:	0021      	movs	r1, r4
     edc:	2007      	movs	r0, #7
     ede:	f000 f973 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     ee2:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP; // START AT PULL DOWN.
     ee4:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(BUTTON_2, &config_port_pin);
     ee6:	0021      	movs	r1, r4
     ee8:	200f      	movs	r0, #15
     eea:	f000 f96d 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     eee:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     ef0:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(BAT_CHARGED_PIN, &config_port_pin);
     ef2:	0021      	movs	r1, r4
     ef4:	200b      	movs	r0, #11
     ef6:	f000 f967 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     efa:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     efc:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     efe:	0021      	movs	r1, r4
     f00:	2003      	movs	r0, #3
     f02:	f000 f961 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     f06:	7025      	strb	r5, [r4, #0]
  port_pin_set_config(XPLAINED_LED, &config_port_pin);
     f08:	0021      	movs	r1, r4
     f0a:	2010      	movs	r0, #16
     f0c:	f000 f95c 	bl	11c8 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     f10:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP;
     f12:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(BUTTON_1, &config_port_pin);
     f14:	0021      	movs	r1, r4
     f16:	200e      	movs	r0, #14
     f18:	f000 f956 	bl	11c8 <port_pin_set_config>
}
     f1c:	b003      	add	sp, #12
     f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f20 <configure_system_tc>:
void configure_system_tc(void) {
     f20:	b510      	push	{r4, lr}
     f22:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
     f24:	aa01      	add	r2, sp, #4
     f26:	2300      	movs	r3, #0
     f28:	2100      	movs	r1, #0
     f2a:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     f2c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     f2e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     f30:	2000      	movs	r0, #0
     f32:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     f34:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     f36:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     f38:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     f3a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     f3c:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     f3e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     f40:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     f42:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     f44:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     f46:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     f48:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     f4a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     f4c:	8593      	strh	r3, [r2, #44]	; 0x2c
  config_tc.counter_size = TC_COUNTER_SIZE;
     f4e:	3304      	adds	r3, #4
     f50:	7093      	strb	r3, [r2, #2]
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     f52:	23a0      	movs	r3, #160	; 0xa0
     f54:	00db      	lsls	r3, r3, #3
     f56:	8093      	strh	r3, [r2, #4]
  config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     f58:	216f      	movs	r1, #111	; 0x6f
     f5a:	2329      	movs	r3, #41	; 0x29
     f5c:	54d1      	strb	r1, [r2, r3]
  config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     f5e:	3b28      	subs	r3, #40	; 0x28
     f60:	7413      	strb	r3, [r2, #16]
  tc_init(&system_timer_instance, SYSTEM_TC, &config_tc);
     f62:	4c08      	ldr	r4, [pc, #32]	; (f84 <configure_system_tc+0x64>)
     f64:	4908      	ldr	r1, [pc, #32]	; (f88 <configure_system_tc+0x68>)
     f66:	0020      	movs	r0, r4
     f68:	f001 fabe 	bl	24e8 <tc_init>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     f6c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     f6e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     f70:	b25b      	sxtb	r3, r3
     f72:	2b00      	cmp	r3, #0
     f74:	dbfb      	blt.n	f6e <configure_system_tc+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     f76:	8813      	ldrh	r3, [r2, #0]
     f78:	2102      	movs	r1, #2
     f7a:	430b      	orrs	r3, r1
     f7c:	8013      	strh	r3, [r2, #0]
}
     f7e:	b00e      	add	sp, #56	; 0x38
     f80:	bd10      	pop	{r4, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	2000012c 	.word	0x2000012c
     f88:	42001800 	.word	0x42001800

00000f8c <system_tc_callbacks>:
void system_tc_callbacks(void) {
     f8c:	b510      	push	{r4, lr}
  tc_register_callback(&system_timer_instance, sys_tc_callback,
     f8e:	4c0c      	ldr	r4, [pc, #48]	; (fc0 <system_tc_callbacks+0x34>)
     f90:	2200      	movs	r2, #0
     f92:	490c      	ldr	r1, [pc, #48]	; (fc4 <system_tc_callbacks+0x38>)
     f94:	0020      	movs	r0, r4
     f96:	f001 fa40 	bl	241a <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     f9a:	6820      	ldr	r0, [r4, #0]
     f9c:	f001 fa92 	bl	24c4 <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     fa0:	4b09      	ldr	r3, [pc, #36]	; (fc8 <system_tc_callbacks+0x3c>)
     fa2:	5c1a      	ldrb	r2, [r3, r0]
     fa4:	231f      	movs	r3, #31
     fa6:	4013      	ands	r3, r2
     fa8:	2201      	movs	r2, #1
     faa:	0011      	movs	r1, r2
     fac:	4099      	lsls	r1, r3
     fae:	4b07      	ldr	r3, [pc, #28]	; (fcc <system_tc_callbacks+0x40>)
     fb0:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     fb2:	7e63      	ldrb	r3, [r4, #25]
     fb4:	2101      	movs	r1, #1
     fb6:	430b      	orrs	r3, r1
     fb8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     fba:	6823      	ldr	r3, [r4, #0]
     fbc:	735a      	strb	r2, [r3, #13]
}
     fbe:	bd10      	pop	{r4, pc}
     fc0:	2000012c 	.word	0x2000012c
     fc4:	00000df1 	.word	0x00000df1
     fc8:	00002d68 	.word	0x00002d68
     fcc:	e000e100 	.word	0xe000e100

00000fd0 <configure_extint_channel>:
  void configure_extint_channel(void) {
     fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd2:	b085      	sub	sp, #20
    extint_chan_get_config_defaults(&config_extint_chan);
     fd4:	ac01      	add	r4, sp, #4
     fd6:	0020      	movs	r0, r4
     fd8:	f7ff fb90 	bl	6fc <extint_chan_get_config_defaults>
    config_extint_chan.gpio_pin = PIN_PA15A_EIC_EXTINT1;
     fdc:	230f      	movs	r3, #15
     fde:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux = MUX_PA15A_EIC_EXTINT1;
     fe0:	2700      	movs	r7, #0
     fe2:	6067      	str	r7, [r4, #4]
    config_extint_chan.wake_if_sleeping = true;
     fe4:	2501      	movs	r5, #1
     fe6:	7265      	strb	r5, [r4, #9]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     fe8:	7225      	strb	r5, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     fea:	2602      	movs	r6, #2
     fec:	72e6      	strb	r6, [r4, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
     fee:	0021      	movs	r1, r4
     ff0:	2001      	movs	r0, #1
     ff2:	f7ff fb8d 	bl	710 <extint_chan_set_config>
    extint_chan_get_config_defaults(&config_extint_chan);
     ff6:	0020      	movs	r0, r4
     ff8:	f7ff fb80 	bl	6fc <extint_chan_get_config_defaults>
    config_extint_chan.gpio_pin = PIN_PA11A_EIC_EXTINT3;
     ffc:	230b      	movs	r3, #11
     ffe:	9301      	str	r3, [sp, #4]
    config_extint_chan.gpio_pin_mux = MUX_PA11A_EIC_EXTINT3;
    1000:	6067      	str	r7, [r4, #4]
    config_extint_chan.wake_if_sleeping = true;
    1002:	7265      	strb	r5, [r4, #9]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1004:	7225      	strb	r5, [r4, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    1006:	72e6      	strb	r6, [r4, #11]
    extint_chan_set_config(PA_11_EIC_LINE_custom, &config_extint_chan);
    1008:	0021      	movs	r1, r4
    100a:	2003      	movs	r0, #3
    100c:	f7ff fb80 	bl	710 <extint_chan_set_config>
  }
    1010:	b005      	add	sp, #20
    1012:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001014 <configure_extint_callbacks>:
  void configure_extint_callbacks(void) {
    1014:	b510      	push	{r4, lr}
    extint_register_callback(extint_detection_callback,
    1016:	4c0a      	ldr	r4, [pc, #40]	; (1040 <configure_extint_callbacks+0x2c>)
    1018:	2200      	movs	r2, #0
    101a:	2101      	movs	r1, #1
    101c:	0020      	movs	r0, r4
    101e:	f7ff fae1 	bl	5e4 <extint_register_callback>
    extint_chan_enable_callback(BUTTON_0_EIC_LINE_custom,
    1022:	2100      	movs	r1, #0
    1024:	2001      	movs	r0, #1
    1026:	f7ff faf3 	bl	610 <extint_chan_enable_callback>
    extint_register_callback(extint_detection_callback, PA_11_EIC_LINE_custom,
    102a:	2200      	movs	r2, #0
    102c:	2103      	movs	r1, #3
    102e:	0020      	movs	r0, r4
    1030:	f7ff fad8 	bl	5e4 <extint_register_callback>
    extint_chan_enable_callback(PA_11_EIC_LINE_custom,
    1034:	2100      	movs	r1, #0
    1036:	2003      	movs	r0, #3
    1038:	f7ff faea 	bl	610 <extint_chan_enable_callback>
  }
    103c:	bd10      	pop	{r4, pc}
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	00000ea5 	.word	0x00000ea5

00001044 <configure_sleep_clock>:
    1044:	4a02      	ldr	r2, [pc, #8]	; (1050 <configure_sleep_clock+0xc>)
    1046:	6993      	ldr	r3, [r2, #24]
    1048:	2140      	movs	r1, #64	; 0x40
    104a:	430b      	orrs	r3, r1
    104c:	6193      	str	r3, [r2, #24]
        system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, mask);

    if (result != STATUS_OK) {
      Assert(false);
    }
  }
    104e:	4770      	bx	lr
    1050:	40000400 	.word	0x40000400

00001054 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
    1054:	4b06      	ldr	r3, [pc, #24]	; (1070 <startup_default_pin_state+0x1c>)
    1056:	2240      	movs	r2, #64	; 0x40
    1058:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    105a:	3240      	adds	r2, #64	; 0x40
    105c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    105e:	2280      	movs	r2, #128	; 0x80
    1060:	0212      	lsls	r2, r2, #8
    1062:	615a      	str	r2, [r3, #20]
    1064:	2280      	movs	r2, #128	; 0x80
    1066:	0112      	lsls	r2, r2, #4
    1068:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    106a:	2208      	movs	r2, #8
    106c:	619a      	str	r2, [r3, #24]
    port_pin_set_output_level(SWITCH_OFF_PIN, HIGH); // at high rev 2
    port_pin_set_output_level(BUTTON_2, LOW);
    port_pin_set_output_level(BAT_CHARGED_PIN, LOW);
    port_pin_set_output_level(CHARGN_OFF_PIN, HIGH);
    // port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
  }
    106e:	4770      	bx	lr
    1070:	41004400 	.word	0x41004400

00001074 <startup_sys_configs>:

  /************************************************************************/
  /* SYSTEM startup function call (config functions)
   */
  /************************************************************************/
  void startup_sys_configs(void) {
    1074:	b510      	push	{r4, lr}
    system_init();                    // System Initialize
    1076:	f000 ff0e 	bl	1e96 <system_init>
	cpu_irq_enable();
    107a:	2201      	movs	r2, #1
    107c:	4b0f      	ldr	r3, [pc, #60]	; (10bc <startup_sys_configs+0x48>)
    107e:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1080:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1084:	b662      	cpsie	i
    system_interrupt_enable_global(); // System Interrupts
    configure_port_pins();            // System PORTs
    1086:	f7ff ff13 	bl	eb0 <configure_port_pins>
    startup_default_pin_state();
    108a:	f7ff ffe3 	bl	1054 <startup_default_pin_state>
    i2c_master_setup();    // Startup I2C
    108e:	f001 fcb9 	bl	2a04 <i2c_master_setup>
    configure_system_tc(); // System Clock
    1092:	f7ff ff45 	bl	f20 <configure_system_tc>
    system_tc_callbacks(); // System Clock Callback
    1096:	f7ff ff79 	bl	f8c <system_tc_callbacks>
    configure_pwm_tcc();   // Startup PWM
    109a:	f7ff fc5b 	bl	954 <configure_pwm_tcc>
    configure_adc();
    109e:	f7ff f825 	bl	ec <configure_adc>
    configure_pwm_generator();
    10a2:	f7ff fcad 	bl	a00 <configure_pwm_generator>

    configure_sleep_clock();
    10a6:	f7ff ffcd 	bl	1044 <configure_sleep_clock>
    configure_extint_channel();
    10aa:	f7ff ff91 	bl	fd0 <configure_extint_channel>
    configure_extint_callbacks();
    10ae:	f7ff ffb1 	bl	1014 <configure_extint_callbacks>
	  SleepTickCount = SLEEP_TICK_COUNT; 
    10b2:	2232      	movs	r2, #50	; 0x32
    10b4:	4b02      	ldr	r3, [pc, #8]	; (10c0 <startup_sys_configs+0x4c>)
    10b6:	601a      	str	r2, [r3, #0]
    extint_detection_callback();
  }
    10b8:	bd10      	pop	{r4, pc}
    10ba:	46c0      	nop			; (mov r8, r8)
    10bc:	20000010 	.word	0x20000010
    10c0:	2000000c 	.word	0x2000000c

000010c4 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
    10c4:	4906      	ldr	r1, [pc, #24]	; (10e0 <update_battery_states+0x1c>)
    10c6:	6a0b      	ldr	r3, [r1, #32]
    10c8:	0edb      	lsrs	r3, r3, #27
    10ca:	2201      	movs	r2, #1
    10cc:	4013      	ands	r3, r2
#define VBUS_STATE port_pin_get_input_level(VBUS_PIN)
#define CHARGED_STATE port_pin_get_input_level(BAT_CHARGED_PIN)
// #define CHARGN_OFF_STATE port_pin_get_input_level(CHARGN_OFF_PIN)

void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
    10ce:	4805      	ldr	r0, [pc, #20]	; (10e4 <update_battery_states+0x20>)
    10d0:	7003      	strb	r3, [r0, #0]
    10d2:	6a0b      	ldr	r3, [r1, #32]
    10d4:	0adb      	lsrs	r3, r3, #11
    10d6:	401a      	ands	r2, r3
  Charged_State = CHARGED_STATE;
    10d8:	4b03      	ldr	r3, [pc, #12]	; (10e8 <update_battery_states+0x24>)
    10da:	701a      	strb	r2, [r3, #0]
}
    10dc:	4770      	bx	lr
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	41004400 	.word	0x41004400
    10e4:	20000212 	.word	0x20000212
    10e8:	20000214 	.word	0x20000214

000010ec <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
    10ec:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

  if (Vbus_State) {
    10ee:	4b07      	ldr	r3, [pc, #28]	; (110c <display_battery_state+0x20>)
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d005      	beq.n	1102 <display_battery_state+0x16>
    // port_pin_set_output_level(BAT_CHARGED_PIN, false);
    // system_inactive();
    // // turn  off all motor/ led array if plugged in
    if (!Charged_State) {
    10f6:	4b06      	ldr	r3, [pc, #24]	; (1110 <display_battery_state+0x24>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d002      	beq.n	1104 <display_battery_state+0x18>
      set_battery_charge_routine(); //  blink
    } else {
      set_color_green_indication();
    10fe:	f001 fb9b 	bl	2838 <set_color_green_indication>
    //}
    //} else {
    //}
    //}
  }
}
    1102:	bd10      	pop	{r4, pc}
      set_battery_charge_routine(); //  blink
    1104:	f001 fbec 	bl	28e0 <set_battery_charge_routine>
    1108:	e7fb      	b.n	1102 <display_battery_state+0x16>
    110a:	46c0      	nop			; (mov r8, r8)
    110c:	20000212 	.word	0x20000212
    1110:	20000214 	.word	0x20000214

00001114 <display_battery_state_before_shutdown>:

void display_battery_state_before_shutdown(void) {
    1114:	b510      	push	{r4, lr}

  if (BATTERY_LOWEST) {
    1116:	4b0a      	ldr	r3, [pc, #40]	; (1140 <display_battery_state_before_shutdown+0x2c>)
    1118:	781b      	ldrb	r3, [r3, #0]
    111a:	2b00      	cmp	r3, #0
    111c:	d109      	bne.n	1132 <display_battery_state_before_shutdown+0x1e>
     //set_battery_low_routine();					// blink
  } else if (BATTERY_LOW) {
    111e:	4b09      	ldr	r3, [pc, #36]	; (1144 <display_battery_state_before_shutdown+0x30>)
    1120:	781b      	ldrb	r3, [r3, #0]
    1122:	2b00      	cmp	r3, #0
    1124:	d106      	bne.n	1134 <display_battery_state_before_shutdown+0x20>
	set_battery_low_routine();					// blink
  } else if (BATTERY_CHARGED) {
    1126:	4b08      	ldr	r3, [pc, #32]	; (1148 <display_battery_state_before_shutdown+0x34>)
    1128:	781b      	ldrb	r3, [r3, #0]
    112a:	2b00      	cmp	r3, #0
    112c:	d105      	bne.n	113a <display_battery_state_before_shutdown+0x26>
    set_color_green_indication();
  } else {
    set_color_red_indication();
    112e:	f001 fb9f 	bl	2870 <set_color_red_indication>
  }
}
    1132:	bd10      	pop	{r4, pc}
	set_battery_low_routine();					// blink
    1134:	f001 fc20 	bl	2978 <set_battery_low_routine>
    1138:	e7fb      	b.n	1132 <display_battery_state_before_shutdown+0x1e>
    set_color_green_indication();
    113a:	f001 fb7d 	bl	2838 <set_color_green_indication>
    113e:	e7f8      	b.n	1132 <display_battery_state_before_shutdown+0x1e>
    1140:	20000048 	.word	0x20000048
    1144:	20000047 	.word	0x20000047
    1148:	20000045 	.word	0x20000045

0000114c <system_state>:

/************************************************************************/
/* STATE MACHINE */
/************************************************************************/

void system_state(void) {
    114c:	b510      	push	{r4, lr}
  update_battery_states();
    114e:	f7ff ffb9 	bl	10c4 <update_battery_states>
  display_battery_state();
    1152:	f7ff ffcb 	bl	10ec <display_battery_state>
    1156:	bd10      	pop	{r4, pc}

00001158 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1158:	4b0c      	ldr	r3, [pc, #48]	; (118c <cpu_irq_enter_critical+0x34>)
    115a:	681b      	ldr	r3, [r3, #0]
    115c:	2b00      	cmp	r3, #0
    115e:	d106      	bne.n	116e <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1160:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1164:	2b00      	cmp	r3, #0
    1166:	d007      	beq.n	1178 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1168:	2200      	movs	r2, #0
    116a:	4b09      	ldr	r3, [pc, #36]	; (1190 <cpu_irq_enter_critical+0x38>)
    116c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    116e:	4a07      	ldr	r2, [pc, #28]	; (118c <cpu_irq_enter_critical+0x34>)
    1170:	6813      	ldr	r3, [r2, #0]
    1172:	3301      	adds	r3, #1
    1174:	6013      	str	r3, [r2, #0]
}
    1176:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1178:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    117a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    117e:	2200      	movs	r2, #0
    1180:	4b04      	ldr	r3, [pc, #16]	; (1194 <cpu_irq_enter_critical+0x3c>)
    1182:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1184:	3201      	adds	r2, #1
    1186:	4b02      	ldr	r3, [pc, #8]	; (1190 <cpu_irq_enter_critical+0x38>)
    1188:	701a      	strb	r2, [r3, #0]
    118a:	e7f0      	b.n	116e <cpu_irq_enter_critical+0x16>
    118c:	2000006c 	.word	0x2000006c
    1190:	20000070 	.word	0x20000070
    1194:	20000010 	.word	0x20000010

00001198 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1198:	4b08      	ldr	r3, [pc, #32]	; (11bc <cpu_irq_leave_critical+0x24>)
    119a:	681a      	ldr	r2, [r3, #0]
    119c:	3a01      	subs	r2, #1
    119e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    11a0:	681b      	ldr	r3, [r3, #0]
    11a2:	2b00      	cmp	r3, #0
    11a4:	d109      	bne.n	11ba <cpu_irq_leave_critical+0x22>
    11a6:	4b06      	ldr	r3, [pc, #24]	; (11c0 <cpu_irq_leave_critical+0x28>)
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d005      	beq.n	11ba <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    11ae:	2201      	movs	r2, #1
    11b0:	4b04      	ldr	r3, [pc, #16]	; (11c4 <cpu_irq_leave_critical+0x2c>)
    11b2:	701a      	strb	r2, [r3, #0]
    11b4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11b8:	b662      	cpsie	i
	}
}
    11ba:	4770      	bx	lr
    11bc:	2000006c 	.word	0x2000006c
    11c0:	20000070 	.word	0x20000070
    11c4:	20000010 	.word	0x20000010

000011c8 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    11c8:	b500      	push	{lr}
    11ca:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11cc:	ab01      	add	r3, sp, #4
    11ce:	2280      	movs	r2, #128	; 0x80
    11d0:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    11d2:	780a      	ldrb	r2, [r1, #0]
    11d4:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    11d6:	784a      	ldrb	r2, [r1, #1]
    11d8:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    11da:	788a      	ldrb	r2, [r1, #2]
    11dc:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    11de:	0019      	movs	r1, r3
    11e0:	f000 fe42 	bl	1e68 <system_pinmux_pin_set_config>
}
    11e4:	b003      	add	sp, #12
    11e6:	bd00      	pop	{pc}

000011e8 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    11e8:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    11ea:	2207      	movs	r2, #7
    11ec:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    11ee:	421a      	tst	r2, r3
    11f0:	d1fc      	bne.n	11ec <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    11f2:	4770      	bx	lr

000011f4 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    11f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    11f6:	46ce      	mov	lr, r9
    11f8:	4647      	mov	r7, r8
    11fa:	b580      	push	{r7, lr}
    11fc:	b083      	sub	sp, #12
    11fe:	0007      	movs	r7, r0
    1200:	000d      	movs	r5, r1
    1202:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    1204:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1206:	0008      	movs	r0, r1
    1208:	f000 fb4e 	bl	18a8 <_sercom_get_sercom_inst_index>
			PM->APBCMASK.reg |= mask;
    120c:	4a58      	ldr	r2, [pc, #352]	; (1370 <i2c_master_init+0x17c>)
    120e:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    1210:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1212:	2301      	movs	r3, #1
    1214:	40a3      	lsls	r3, r4
    1216:	430b      	orrs	r3, r1
    1218:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    121a:	a901      	add	r1, sp, #4
    121c:	7b33      	ldrb	r3, [r6, #12]
    121e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1220:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1222:	b2c4      	uxtb	r4, r0
    1224:	0020      	movs	r0, r4
    1226:	f000 fdab 	bl	1d80 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    122a:	0020      	movs	r0, r4
    122c:	f000 fd6a 	bl	1d04 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    1230:	7b30      	ldrb	r0, [r6, #12]
    1232:	2100      	movs	r1, #0
    1234:	f000 fab6 	bl	17a4 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1238:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    123a:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    123c:	079b      	lsls	r3, r3, #30
    123e:	d504      	bpl.n	124a <i2c_master_init+0x56>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    1240:	b003      	add	sp, #12
    1242:	bc0c      	pop	{r2, r3}
    1244:	4690      	mov	r8, r2
    1246:	4699      	mov	r9, r3
    1248:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    124a:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    124c:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    124e:	07db      	lsls	r3, r3, #31
    1250:	d4f6      	bmi.n	1240 <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1252:	6838      	ldr	r0, [r7, #0]
    1254:	f000 fb28 	bl	18a8 <_sercom_get_sercom_inst_index>
    1258:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    125a:	4946      	ldr	r1, [pc, #280]	; (1374 <i2c_master_init+0x180>)
    125c:	f000 fb42 	bl	18e4 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
    1260:	00a4      	lsls	r4, r4, #2
    1262:	4b45      	ldr	r3, [pc, #276]	; (1378 <i2c_master_init+0x184>)
    1264:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    1266:	2300      	movs	r3, #0
    1268:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    126a:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    126c:	2200      	movs	r2, #0
    126e:	4690      	mov	r8, r2
    1270:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    1272:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    1274:	2225      	movs	r2, #37	; 0x25
    1276:	4641      	mov	r1, r8
    1278:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
    127a:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    127c:	3314      	adds	r3, #20
    127e:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1280:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1282:	0020      	movs	r0, r4
    1284:	f000 fb10 	bl	18a8 <_sercom_get_sercom_inst_index>
    1288:	4681      	mov	r9, r0
    128a:	2380      	movs	r3, #128	; 0x80
    128c:	466a      	mov	r2, sp
    128e:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1290:	466b      	mov	r3, sp
    1292:	4642      	mov	r2, r8
    1294:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1296:	2301      	movs	r3, #1
    1298:	466a      	mov	r2, sp
    129a:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    129c:	466b      	mov	r3, sp
    129e:	4642      	mov	r2, r8
    12a0:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
    12a2:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    12a4:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    12a6:	2800      	cmp	r0, #0
    12a8:	d057      	beq.n	135a <i2c_master_init+0x166>
	pin_conf.mux_position = pad0 & 0xFFFF;
    12aa:	466b      	mov	r3, sp
    12ac:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12ae:	2302      	movs	r3, #2
    12b0:	466a      	mov	r2, sp
    12b2:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    12b4:	0c00      	lsrs	r0, r0, #16
    12b6:	b2c0      	uxtb	r0, r0
    12b8:	4669      	mov	r1, sp
    12ba:	f000 fdd5 	bl	1e68 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
    12be:	2d00      	cmp	r5, #0
    12c0:	d050      	beq.n	1364 <i2c_master_init+0x170>
	pin_conf.mux_position = pad1 & 0xFFFF;
    12c2:	466b      	mov	r3, sp
    12c4:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12c6:	2302      	movs	r3, #2
    12c8:	466a      	mov	r2, sp
    12ca:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    12cc:	0c28      	lsrs	r0, r5, #16
    12ce:	b2c0      	uxtb	r0, r0
    12d0:	4669      	mov	r1, sp
    12d2:	f000 fdc9 	bl	1e68 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    12d6:	8ab3      	ldrh	r3, [r6, #20]
    12d8:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    12da:	8af3      	ldrh	r3, [r6, #22]
    12dc:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    12de:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    12e0:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    12e2:	2b00      	cmp	r3, #0
    12e4:	d104      	bne.n	12f0 <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12e6:	4b25      	ldr	r3, [pc, #148]	; (137c <i2c_master_init+0x188>)
    12e8:	789b      	ldrb	r3, [r3, #2]
    12ea:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    12ec:	0fdb      	lsrs	r3, r3, #31
    12ee:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    12f0:	68b1      	ldr	r1, [r6, #8]
    12f2:	6933      	ldr	r3, [r6, #16]
    12f4:	430b      	orrs	r3, r1
    12f6:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    12f8:	2224      	movs	r2, #36	; 0x24
    12fa:	5cb2      	ldrb	r2, [r6, r2]
    12fc:	2a00      	cmp	r2, #0
    12fe:	d002      	beq.n	1306 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1300:	2280      	movs	r2, #128	; 0x80
    1302:	05d2      	lsls	r2, r2, #23
    1304:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    1306:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    1308:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    130a:	222c      	movs	r2, #44	; 0x2c
    130c:	5cb2      	ldrb	r2, [r6, r2]
    130e:	2a00      	cmp	r2, #0
    1310:	d103      	bne.n	131a <i2c_master_init+0x126>
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	0492      	lsls	r2, r2, #18
    1316:	4291      	cmp	r1, r2
    1318:	d102      	bne.n	1320 <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    131a:	2280      	movs	r2, #128	; 0x80
    131c:	0512      	lsls	r2, r2, #20
    131e:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1320:	222d      	movs	r2, #45	; 0x2d
    1322:	5cb2      	ldrb	r2, [r6, r2]
    1324:	2a00      	cmp	r2, #0
    1326:	d002      	beq.n	132e <i2c_master_init+0x13a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1328:	2280      	movs	r2, #128	; 0x80
    132a:	0412      	lsls	r2, r2, #16
    132c:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    132e:	222e      	movs	r2, #46	; 0x2e
    1330:	5cb2      	ldrb	r2, [r6, r2]
    1332:	2a00      	cmp	r2, #0
    1334:	d002      	beq.n	133c <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1336:	2280      	movs	r2, #128	; 0x80
    1338:	03d2      	lsls	r2, r2, #15
    133a:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    133c:	6822      	ldr	r2, [r4, #0]
    133e:	4313      	orrs	r3, r2
    1340:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    1342:	2380      	movs	r3, #128	; 0x80
    1344:	005b      	lsls	r3, r3, #1
    1346:	6063      	str	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1348:	464d      	mov	r5, r9
    134a:	350e      	adds	r5, #14
    134c:	b2e8      	uxtb	r0, r5
    134e:	f000 fd23 	bl	1d98 <system_gclk_chan_get_hz>
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1352:	2323      	movs	r3, #35	; 0x23
    1354:	60e3      	str	r3, [r4, #12]
	return _i2c_master_set_config(module, config);
    1356:	2000      	movs	r0, #0
    1358:	e772      	b.n	1240 <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    135a:	2100      	movs	r1, #0
    135c:	0020      	movs	r0, r4
    135e:	f000 fa43 	bl	17e8 <_sercom_get_default_pad>
    1362:	e7a2      	b.n	12aa <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1364:	2101      	movs	r1, #1
    1366:	0020      	movs	r0, r4
    1368:	f000 fa3e 	bl	17e8 <_sercom_get_default_pad>
    136c:	0005      	movs	r5, r0
    136e:	e7a8      	b.n	12c2 <i2c_master_init+0xce>
    1370:	40000400 	.word	0x40000400
    1374:	000015c5 	.word	0x000015c5
    1378:	20000218 	.word	0x20000218
    137c:	41002000 	.word	0x41002000

00001380 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1380:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1382:	7e1a      	ldrb	r2, [r3, #24]
    1384:	0792      	lsls	r2, r2, #30
    1386:	d507      	bpl.n	1398 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1388:	2202      	movs	r2, #2
    138a:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    138c:	8b5b      	ldrh	r3, [r3, #26]
    138e:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1390:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1392:	17db      	asrs	r3, r3, #31
    1394:	4018      	ands	r0, r3
}
    1396:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1398:	8b5a      	ldrh	r2, [r3, #26]
    139a:	0752      	lsls	r2, r2, #29
    139c:	d506      	bpl.n	13ac <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    139e:	6859      	ldr	r1, [r3, #4]
    13a0:	22c0      	movs	r2, #192	; 0xc0
    13a2:	0292      	lsls	r2, r2, #10
    13a4:	430a      	orrs	r2, r1
    13a6:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    13a8:	2018      	movs	r0, #24
    13aa:	e7f4      	b.n	1396 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    13ac:	2000      	movs	r0, #0
    13ae:	e7f2      	b.n	1396 <_i2c_master_address_response+0x16>

000013b0 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    13b0:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13b2:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    13b4:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13b6:	2401      	movs	r4, #1
    13b8:	2502      	movs	r5, #2
    13ba:	7e11      	ldrb	r1, [r2, #24]
    13bc:	4221      	tst	r1, r4
    13be:	d10b      	bne.n	13d8 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    13c0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13c2:	4229      	tst	r1, r5
    13c4:	d106      	bne.n	13d4 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    13c6:	3301      	adds	r3, #1
    13c8:	b29b      	uxth	r3, r3
    13ca:	8901      	ldrh	r1, [r0, #8]
    13cc:	4299      	cmp	r1, r3
    13ce:	d8f4      	bhi.n	13ba <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    13d0:	2012      	movs	r0, #18
    13d2:	e002      	b.n	13da <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    13d4:	2000      	movs	r0, #0
    13d6:	e000      	b.n	13da <_i2c_master_wait_for_bus+0x2a>
    13d8:	2000      	movs	r0, #0
}
    13da:	bd30      	pop	{r4, r5, pc}

000013dc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13dc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13de:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13e0:	6862      	ldr	r2, [r4, #4]
    13e2:	2380      	movs	r3, #128	; 0x80
    13e4:	02db      	lsls	r3, r3, #11
    13e6:	4313      	orrs	r3, r2
    13e8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13ea:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13ec:	f7ff ffe0 	bl	13b0 <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    13f0:	2301      	movs	r3, #1
    13f2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    13f4:	bd10      	pop	{r4, pc}
	...

000013f8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    13f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    13fa:	46de      	mov	lr, fp
    13fc:	4657      	mov	r7, sl
    13fe:	464e      	mov	r6, r9
    1400:	4645      	mov	r5, r8
    1402:	b5e0      	push	{r5, r6, r7, lr}
    1404:	b083      	sub	sp, #12
    1406:	0006      	movs	r6, r0
    1408:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    140a:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    140c:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    140e:	f7ff feeb 	bl	11e8 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1412:	7a7b      	ldrb	r3, [r7, #9]
    1414:	2b00      	cmp	r3, #0
    1416:	d11d      	bne.n	1454 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1418:	686b      	ldr	r3, [r5, #4]
    141a:	4a30      	ldr	r2, [pc, #192]	; (14dc <_i2c_master_write_packet+0xe4>)
    141c:	4013      	ands	r3, r2
    141e:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1420:	7a3b      	ldrb	r3, [r7, #8]
    1422:	2b00      	cmp	r3, #0
    1424:	d01b      	beq.n	145e <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1426:	883b      	ldrh	r3, [r7, #0]
    1428:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    142a:	7a7a      	ldrb	r2, [r7, #9]
    142c:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    142e:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1430:	2280      	movs	r2, #128	; 0x80
    1432:	0212      	lsls	r2, r2, #8
    1434:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1436:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1438:	0030      	movs	r0, r6
    143a:	f7ff ffb9 	bl	13b0 <_i2c_master_wait_for_bus>
    143e:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1440:	2800      	cmp	r0, #0
    1442:	d013      	beq.n	146c <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1444:	9801      	ldr	r0, [sp, #4]
    1446:	b003      	add	sp, #12
    1448:	bc3c      	pop	{r2, r3, r4, r5}
    144a:	4690      	mov	r8, r2
    144c:	4699      	mov	r9, r3
    144e:	46a2      	mov	sl, r4
    1450:	46ab      	mov	fp, r5
    1452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1454:	7ab9      	ldrb	r1, [r7, #10]
    1456:	0030      	movs	r0, r6
    1458:	f7ff ffc0 	bl	13dc <_i2c_master_send_hs_master_code>
    145c:	e7dc      	b.n	1418 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    145e:	883b      	ldrh	r3, [r7, #0]
    1460:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1462:	7a7a      	ldrb	r2, [r7, #9]
    1464:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1466:	4313      	orrs	r3, r2
    1468:	626b      	str	r3, [r5, #36]	; 0x24
    146a:	e7e5      	b.n	1438 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    146c:	0030      	movs	r0, r6
    146e:	f7ff ff87 	bl	1380 <_i2c_master_address_response>
    1472:	1e03      	subs	r3, r0, #0
    1474:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1476:	d1e5      	bne.n	1444 <_i2c_master_write_packet+0x4c>
    1478:	46a0      	mov	r8, r4
    147a:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    147c:	3320      	adds	r3, #32
    147e:	4699      	mov	r9, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1480:	3308      	adds	r3, #8
    1482:	469a      	mov	sl, r3
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1484:	3b24      	subs	r3, #36	; 0x24
    1486:	469b      	mov	fp, r3
		while (tmp_data_length--) {
    1488:	4544      	cmp	r4, r8
    148a:	d018      	beq.n	14be <_i2c_master_write_packet+0xc6>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    148c:	8b6b      	ldrh	r3, [r5, #26]
    148e:	464a      	mov	r2, r9
    1490:	4213      	tst	r3, r2
    1492:	d020      	beq.n	14d6 <_i2c_master_write_packet+0xde>
			_i2c_master_wait_for_sync(module);
    1494:	0030      	movs	r0, r6
    1496:	f7ff fea7 	bl	11e8 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    149a:	687b      	ldr	r3, [r7, #4]
    149c:	5d1b      	ldrb	r3, [r3, r4]
    149e:	4652      	mov	r2, sl
    14a0:	54ab      	strb	r3, [r5, r2]
			tmp_status = _i2c_master_wait_for_bus(module);
    14a2:	0030      	movs	r0, r6
    14a4:	f7ff ff84 	bl	13b0 <_i2c_master_wait_for_bus>
			if (tmp_status != STATUS_OK) {
    14a8:	2800      	cmp	r0, #0
    14aa:	d107      	bne.n	14bc <_i2c_master_write_packet+0xc4>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    14ac:	8b6b      	ldrh	r3, [r5, #26]
    14ae:	3401      	adds	r4, #1
    14b0:	465a      	mov	r2, fp
    14b2:	4213      	tst	r3, r2
    14b4:	d0e8      	beq.n	1488 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    14b6:	231e      	movs	r3, #30
    14b8:	9301      	str	r3, [sp, #4]
    14ba:	e000      	b.n	14be <_i2c_master_write_packet+0xc6>
			tmp_status = _i2c_master_wait_for_bus(module);
    14bc:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    14be:	7ab3      	ldrb	r3, [r6, #10]
    14c0:	2b00      	cmp	r3, #0
    14c2:	d0bf      	beq.n	1444 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    14c4:	0030      	movs	r0, r6
    14c6:	f7ff fe8f 	bl	11e8 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    14ca:	686a      	ldr	r2, [r5, #4]
    14cc:	23c0      	movs	r3, #192	; 0xc0
    14ce:	029b      	lsls	r3, r3, #10
    14d0:	4313      	orrs	r3, r2
    14d2:	606b      	str	r3, [r5, #4]
    14d4:	e7b6      	b.n	1444 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    14d6:	2341      	movs	r3, #65	; 0x41
    14d8:	9301      	str	r3, [sp, #4]
    14da:	e7b3      	b.n	1444 <_i2c_master_write_packet+0x4c>
    14dc:	fffbffff 	.word	0xfffbffff

000014e0 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    14e0:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    14e2:	8b83      	ldrh	r3, [r0, #28]
    14e4:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    14e6:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    14e8:	2b00      	cmp	r3, #0
    14ea:	d001      	beq.n	14f0 <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    14ec:	0010      	movs	r0, r2
    14ee:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    14f0:	3301      	adds	r3, #1
    14f2:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    14f4:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    14f6:	f7ff ff7f 	bl	13f8 <_i2c_master_write_packet>
    14fa:	0002      	movs	r2, r0
    14fc:	e7f6      	b.n	14ec <i2c_master_write_packet_wait+0xc>

000014fe <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    14fe:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1500:	2207      	movs	r2, #7
    1502:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1504:	421a      	tst	r2, r3
    1506:	d1fc      	bne.n	1502 <_i2c_master_wait_for_sync+0x4>
}
    1508:	4770      	bx	lr

0000150a <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    150a:	b570      	push	{r4, r5, r6, lr}
    150c:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    150e:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1510:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1512:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1514:	8b83      	ldrh	r3, [r0, #28]
    1516:	1aed      	subs	r5, r5, r3
    1518:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    151a:	8b83      	ldrh	r3, [r0, #28]
    151c:	3b01      	subs	r3, #1
    151e:	b29b      	uxth	r3, r3
    1520:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1522:	0113      	lsls	r3, r2, #4
    1524:	d51d      	bpl.n	1562 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1526:	7ac3      	ldrb	r3, [r0, #11]
    1528:	2b00      	cmp	r3, #0
    152a:	d003      	beq.n	1534 <_i2c_master_read+0x2a>
    152c:	8b83      	ldrh	r3, [r0, #28]
    152e:	b29b      	uxth	r3, r3
    1530:	2b01      	cmp	r3, #1
    1532:	d010      	beq.n	1556 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1534:	8ba3      	ldrh	r3, [r4, #28]
    1536:	b29b      	uxth	r3, r3
    1538:	2b00      	cmp	r3, #0
    153a:	d102      	bne.n	1542 <_i2c_master_read+0x38>
		if (module->send_stop) {
    153c:	7aa3      	ldrb	r3, [r4, #10]
    153e:	2b00      	cmp	r3, #0
    1540:	d11c      	bne.n	157c <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1542:	0020      	movs	r0, r4
    1544:	f7ff ffdb 	bl	14fe <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1548:	6a23      	ldr	r3, [r4, #32]
    154a:	195d      	adds	r5, r3, r5
    154c:	2328      	movs	r3, #40	; 0x28
    154e:	5cf3      	ldrb	r3, [r6, r3]
    1550:	b2db      	uxtb	r3, r3
    1552:	702b      	strb	r3, [r5, #0]
}
    1554:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1556:	6872      	ldr	r2, [r6, #4]
    1558:	2380      	movs	r3, #128	; 0x80
    155a:	02db      	lsls	r3, r3, #11
    155c:	4313      	orrs	r3, r2
    155e:	6073      	str	r3, [r6, #4]
    1560:	e7e8      	b.n	1534 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1562:	7ac3      	ldrb	r3, [r0, #11]
    1564:	2b00      	cmp	r3, #0
    1566:	d0e5      	beq.n	1534 <_i2c_master_read+0x2a>
    1568:	8b83      	ldrh	r3, [r0, #28]
    156a:	b29b      	uxth	r3, r3
    156c:	2b00      	cmp	r3, #0
    156e:	d1e1      	bne.n	1534 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1570:	6872      	ldr	r2, [r6, #4]
    1572:	2380      	movs	r3, #128	; 0x80
    1574:	02db      	lsls	r3, r3, #11
    1576:	4313      	orrs	r3, r2
    1578:	6073      	str	r3, [r6, #4]
    157a:	e7db      	b.n	1534 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    157c:	0020      	movs	r0, r4
    157e:	f7ff ffbe 	bl	14fe <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1582:	6872      	ldr	r2, [r6, #4]
    1584:	23c0      	movs	r3, #192	; 0xc0
    1586:	029b      	lsls	r3, r3, #10
    1588:	4313      	orrs	r3, r2
    158a:	6073      	str	r3, [r6, #4]
    158c:	e7d9      	b.n	1542 <_i2c_master_read+0x38>

0000158e <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    158e:	b570      	push	{r4, r5, r6, lr}
    1590:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1592:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1594:	8b6b      	ldrh	r3, [r5, #26]
    1596:	075b      	lsls	r3, r3, #29
    1598:	d503      	bpl.n	15a2 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    159a:	221e      	movs	r2, #30
    159c:	2325      	movs	r3, #37	; 0x25
    159e:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    15a0:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    15a2:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    15a4:	8b83      	ldrh	r3, [r0, #28]
    15a6:	1af6      	subs	r6, r6, r3
    15a8:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    15aa:	8b83      	ldrh	r3, [r0, #28]
    15ac:	3b01      	subs	r3, #1
    15ae:	b29b      	uxth	r3, r3
    15b0:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    15b2:	f7ff ffa4 	bl	14fe <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    15b6:	6a23      	ldr	r3, [r4, #32]
    15b8:	199e      	adds	r6, r3, r6
    15ba:	7833      	ldrb	r3, [r6, #0]
    15bc:	b2db      	uxtb	r3, r3
    15be:	2228      	movs	r2, #40	; 0x28
    15c0:	54ab      	strb	r3, [r5, r2]
    15c2:	e7ed      	b.n	15a0 <_i2c_master_write+0x12>

000015c4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    15c4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    15c6:	0080      	lsls	r0, r0, #2
    15c8:	4b75      	ldr	r3, [pc, #468]	; (17a0 <_i2c_master_interrupt_handler+0x1dc>)
    15ca:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15cc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    15ce:	682b      	ldr	r3, [r5, #0]
    15d0:	011b      	lsls	r3, r3, #4
    15d2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    15d4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    15d6:	7e26      	ldrb	r6, [r4, #24]
    15d8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    15da:	8b63      	ldrh	r3, [r4, #26]
    15dc:	b29b      	uxth	r3, r3
    15de:	2b00      	cmp	r3, #0
    15e0:	d103      	bne.n	15ea <_i2c_master_interrupt_handler+0x26>
    15e2:	8ba3      	ldrh	r3, [r4, #28]
    15e4:	b29b      	uxth	r3, r3
    15e6:	2b00      	cmp	r3, #0
    15e8:	d123      	bne.n	1632 <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    15ea:	8b63      	ldrh	r3, [r4, #26]
    15ec:	b29b      	uxth	r3, r3
    15ee:	2b00      	cmp	r3, #0
    15f0:	d008      	beq.n	1604 <_i2c_master_interrupt_handler+0x40>
    15f2:	8ba3      	ldrh	r3, [r4, #28]
    15f4:	b29b      	uxth	r3, r3
    15f6:	2b00      	cmp	r3, #0
    15f8:	d104      	bne.n	1604 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    15fa:	3325      	adds	r3, #37	; 0x25
    15fc:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    15fe:	2b05      	cmp	r3, #5
    1600:	d100      	bne.n	1604 <_i2c_master_interrupt_handler+0x40>
    1602:	e06d      	b.n	16e0 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1604:	8b63      	ldrh	r3, [r4, #26]
    1606:	b29b      	uxth	r3, r3
    1608:	2b00      	cmp	r3, #0
    160a:	d024      	beq.n	1656 <_i2c_master_interrupt_handler+0x92>
    160c:	8ba3      	ldrh	r3, [r4, #28]
    160e:	b29b      	uxth	r3, r3
    1610:	2b00      	cmp	r3, #0
    1612:	d020      	beq.n	1656 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1614:	8b6b      	ldrh	r3, [r5, #26]
    1616:	069b      	lsls	r3, r3, #26
    1618:	d500      	bpl.n	161c <_i2c_master_interrupt_handler+0x58>
    161a:	e081      	b.n	1720 <_i2c_master_interrupt_handler+0x15c>
    161c:	2a00      	cmp	r2, #0
    161e:	d004      	beq.n	162a <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1620:	8ba3      	ldrh	r3, [r4, #28]
    1622:	b29b      	uxth	r3, r3
    1624:	2b01      	cmp	r3, #1
    1626:	d100      	bne.n	162a <_i2c_master_interrupt_handler+0x66>
    1628:	e07a      	b.n	1720 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    162a:	2241      	movs	r2, #65	; 0x41
    162c:	2325      	movs	r3, #37	; 0x25
    162e:	54e2      	strb	r2, [r4, r3]
    1630:	e011      	b.n	1656 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1632:	7e2b      	ldrb	r3, [r5, #24]
    1634:	07db      	lsls	r3, r3, #31
    1636:	d507      	bpl.n	1648 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1638:	2301      	movs	r3, #1
    163a:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    163c:	8b6b      	ldrh	r3, [r5, #26]
    163e:	079b      	lsls	r3, r3, #30
    1640:	d52e      	bpl.n	16a0 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1642:	2241      	movs	r2, #65	; 0x41
    1644:	2325      	movs	r3, #37	; 0x25
    1646:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1648:	8ba3      	ldrh	r3, [r4, #28]
    164a:	b29b      	uxth	r3, r3
    164c:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    164e:	2325      	movs	r3, #37	; 0x25
    1650:	5ce3      	ldrb	r3, [r4, r3]
    1652:	2b05      	cmp	r3, #5
    1654:	d038      	beq.n	16c8 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1656:	8b63      	ldrh	r3, [r4, #26]
    1658:	b29b      	uxth	r3, r3
    165a:	2b00      	cmp	r3, #0
    165c:	d007      	beq.n	166e <_i2c_master_interrupt_handler+0xaa>
    165e:	8ba3      	ldrh	r3, [r4, #28]
    1660:	b29b      	uxth	r3, r3
    1662:	2b00      	cmp	r3, #0
    1664:	d103      	bne.n	166e <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1666:	3325      	adds	r3, #37	; 0x25
    1668:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    166a:	2b05      	cmp	r3, #5
    166c:	d064      	beq.n	1738 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    166e:	2325      	movs	r3, #37	; 0x25
    1670:	5ce3      	ldrb	r3, [r4, r3]
    1672:	2b05      	cmp	r3, #5
    1674:	d013      	beq.n	169e <_i2c_master_interrupt_handler+0xda>
    1676:	2325      	movs	r3, #37	; 0x25
    1678:	5ce3      	ldrb	r3, [r4, r3]
    167a:	2b00      	cmp	r3, #0
    167c:	d00f      	beq.n	169e <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    167e:	2303      	movs	r3, #3
    1680:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1682:	2300      	movs	r3, #0
    1684:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1686:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1688:	3325      	adds	r3, #37	; 0x25
    168a:	5ce3      	ldrb	r3, [r4, r3]
    168c:	2b41      	cmp	r3, #65	; 0x41
    168e:	d003      	beq.n	1698 <_i2c_master_interrupt_handler+0xd4>
    1690:	7aa3      	ldrb	r3, [r4, #10]
    1692:	2b00      	cmp	r3, #0
    1694:	d000      	beq.n	1698 <_i2c_master_interrupt_handler+0xd4>
    1696:	e075      	b.n	1784 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1698:	0773      	lsls	r3, r6, #29
    169a:	d500      	bpl.n	169e <_i2c_master_interrupt_handler+0xda>
    169c:	e07b      	b.n	1796 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    169e:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    16a0:	8b6b      	ldrh	r3, [r5, #26]
    16a2:	075b      	lsls	r3, r3, #29
    16a4:	d5d0      	bpl.n	1648 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    16a6:	2218      	movs	r2, #24
    16a8:	2325      	movs	r3, #37	; 0x25
    16aa:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    16ac:	2300      	movs	r3, #0
    16ae:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    16b0:	7aa3      	ldrb	r3, [r4, #10]
    16b2:	2b00      	cmp	r3, #0
    16b4:	d0c8      	beq.n	1648 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    16b6:	0020      	movs	r0, r4
    16b8:	f7ff ff21 	bl	14fe <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16bc:	686a      	ldr	r2, [r5, #4]
    16be:	23c0      	movs	r3, #192	; 0xc0
    16c0:	029b      	lsls	r3, r3, #10
    16c2:	4313      	orrs	r3, r2
    16c4:	606b      	str	r3, [r5, #4]
    16c6:	e7bf      	b.n	1648 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    16c8:	331f      	adds	r3, #31
    16ca:	5ce3      	ldrb	r3, [r4, r3]
    16cc:	2b00      	cmp	r3, #0
    16ce:	d003      	beq.n	16d8 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    16d0:	0020      	movs	r0, r4
    16d2:	f7ff ff1a 	bl	150a <_i2c_master_read>
    16d6:	e7be      	b.n	1656 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    16d8:	0020      	movs	r0, r4
    16da:	f7ff ff58 	bl	158e <_i2c_master_write>
    16de:	e7ba      	b.n	1656 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    16e0:	331f      	adds	r3, #31
    16e2:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    16e4:	2b00      	cmp	r3, #0
    16e6:	d000      	beq.n	16ea <_i2c_master_interrupt_handler+0x126>
    16e8:	e78c      	b.n	1604 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    16ea:	3303      	adds	r3, #3
    16ec:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    16ee:	2300      	movs	r3, #0
    16f0:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    16f2:	3325      	adds	r3, #37	; 0x25
    16f4:	2200      	movs	r2, #0
    16f6:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    16f8:	7aa3      	ldrb	r3, [r4, #10]
    16fa:	2b00      	cmp	r3, #0
    16fc:	d107      	bne.n	170e <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    16fe:	2301      	movs	r3, #1
    1700:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1702:	07f3      	lsls	r3, r6, #31
    1704:	d5a7      	bpl.n	1656 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1706:	68e3      	ldr	r3, [r4, #12]
    1708:	0020      	movs	r0, r4
    170a:	4798      	blx	r3
    170c:	e7a3      	b.n	1656 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    170e:	0020      	movs	r0, r4
    1710:	f7ff fef5 	bl	14fe <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1714:	686a      	ldr	r2, [r5, #4]
    1716:	23c0      	movs	r3, #192	; 0xc0
    1718:	029b      	lsls	r3, r3, #10
    171a:	4313      	orrs	r3, r2
    171c:	606b      	str	r3, [r5, #4]
    171e:	e7f0      	b.n	1702 <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1720:	2324      	movs	r3, #36	; 0x24
    1722:	5ce3      	ldrb	r3, [r4, r3]
    1724:	2b00      	cmp	r3, #0
    1726:	d103      	bne.n	1730 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1728:	0020      	movs	r0, r4
    172a:	f7ff ff30 	bl	158e <_i2c_master_write>
    172e:	e792      	b.n	1656 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1730:	0020      	movs	r0, r4
    1732:	f7ff feea 	bl	150a <_i2c_master_read>
    1736:	e78e      	b.n	1656 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1738:	331f      	adds	r3, #31
    173a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    173c:	2b01      	cmp	r3, #1
    173e:	d196      	bne.n	166e <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1740:	7e2b      	ldrb	r3, [r5, #24]
    1742:	079b      	lsls	r3, r3, #30
    1744:	d501      	bpl.n	174a <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1746:	2302      	movs	r3, #2
    1748:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    174a:	2303      	movs	r3, #3
    174c:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    174e:	2300      	movs	r3, #0
    1750:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1752:	3325      	adds	r3, #37	; 0x25
    1754:	2200      	movs	r2, #0
    1756:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1758:	07b3      	lsls	r3, r6, #30
    175a:	d503      	bpl.n	1764 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    175c:	2324      	movs	r3, #36	; 0x24
    175e:	5ce3      	ldrb	r3, [r4, r3]
    1760:	2b01      	cmp	r3, #1
    1762:	d00b      	beq.n	177c <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1764:	07f3      	lsls	r3, r6, #31
    1766:	d400      	bmi.n	176a <_i2c_master_interrupt_handler+0x1a6>
    1768:	e781      	b.n	166e <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    176a:	2324      	movs	r3, #36	; 0x24
    176c:	5ce3      	ldrb	r3, [r4, r3]
    176e:	2b00      	cmp	r3, #0
    1770:	d000      	beq.n	1774 <_i2c_master_interrupt_handler+0x1b0>
    1772:	e77c      	b.n	166e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1774:	68e3      	ldr	r3, [r4, #12]
    1776:	0020      	movs	r0, r4
    1778:	4798      	blx	r3
    177a:	e778      	b.n	166e <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    177c:	6923      	ldr	r3, [r4, #16]
    177e:	0020      	movs	r0, r4
    1780:	4798      	blx	r3
    1782:	e774      	b.n	166e <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1784:	0020      	movs	r0, r4
    1786:	f7ff feba 	bl	14fe <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    178a:	686a      	ldr	r2, [r5, #4]
    178c:	23e0      	movs	r3, #224	; 0xe0
    178e:	02db      	lsls	r3, r3, #11
    1790:	4313      	orrs	r3, r2
    1792:	606b      	str	r3, [r5, #4]
    1794:	e780      	b.n	1698 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1796:	6963      	ldr	r3, [r4, #20]
    1798:	0020      	movs	r0, r4
    179a:	4798      	blx	r3
}
    179c:	e77f      	b.n	169e <_i2c_master_interrupt_handler+0xda>
    179e:	46c0      	nop			; (mov r8, r8)
    17a0:	20000218 	.word	0x20000218

000017a4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    17a4:	b510      	push	{r4, lr}
    17a6:	b082      	sub	sp, #8
    17a8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    17aa:	4b0e      	ldr	r3, [pc, #56]	; (17e4 <sercom_set_gclk_generator+0x40>)
    17ac:	781b      	ldrb	r3, [r3, #0]
    17ae:	2b00      	cmp	r3, #0
    17b0:	d007      	beq.n	17c2 <sercom_set_gclk_generator+0x1e>
    17b2:	2900      	cmp	r1, #0
    17b4:	d105      	bne.n	17c2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    17b6:	4b0b      	ldr	r3, [pc, #44]	; (17e4 <sercom_set_gclk_generator+0x40>)
    17b8:	785b      	ldrb	r3, [r3, #1]
    17ba:	4283      	cmp	r3, r0
    17bc:	d010      	beq.n	17e0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    17be:	201d      	movs	r0, #29
    17c0:	e00c      	b.n	17dc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    17c2:	a901      	add	r1, sp, #4
    17c4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    17c6:	200d      	movs	r0, #13
    17c8:	f000 fada 	bl	1d80 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    17cc:	200d      	movs	r0, #13
    17ce:	f000 fa99 	bl	1d04 <system_gclk_chan_enable>
		_sercom_config.generator_source = generator_source;
    17d2:	4b04      	ldr	r3, [pc, #16]	; (17e4 <sercom_set_gclk_generator+0x40>)
    17d4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    17d6:	2201      	movs	r2, #1
    17d8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    17da:	2000      	movs	r0, #0
}
    17dc:	b002      	add	sp, #8
    17de:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    17e0:	2000      	movs	r0, #0
    17e2:	e7fb      	b.n	17dc <sercom_set_gclk_generator+0x38>
    17e4:	20000074 	.word	0x20000074

000017e8 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    17e8:	4b20      	ldr	r3, [pc, #128]	; (186c <_sercom_get_default_pad+0x84>)
    17ea:	4298      	cmp	r0, r3
    17ec:	d017      	beq.n	181e <_sercom_get_default_pad+0x36>
    17ee:	4b20      	ldr	r3, [pc, #128]	; (1870 <_sercom_get_default_pad+0x88>)
    17f0:	4298      	cmp	r0, r3
    17f2:	d024      	beq.n	183e <_sercom_get_default_pad+0x56>
    17f4:	4b1f      	ldr	r3, [pc, #124]	; (1874 <_sercom_get_default_pad+0x8c>)
    17f6:	4298      	cmp	r0, r3
    17f8:	d001      	beq.n	17fe <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    17fa:	2000      	movs	r0, #0
}
    17fc:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17fe:	2901      	cmp	r1, #1
    1800:	d007      	beq.n	1812 <_sercom_get_default_pad+0x2a>
    1802:	2900      	cmp	r1, #0
    1804:	d02b      	beq.n	185e <_sercom_get_default_pad+0x76>
    1806:	2902      	cmp	r1, #2
    1808:	d005      	beq.n	1816 <_sercom_get_default_pad+0x2e>
    180a:	2903      	cmp	r1, #3
    180c:	d005      	beq.n	181a <_sercom_get_default_pad+0x32>
	return 0;
    180e:	2000      	movs	r0, #0
    1810:	e7f4      	b.n	17fc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1812:	4819      	ldr	r0, [pc, #100]	; (1878 <_sercom_get_default_pad+0x90>)
    1814:	e7f2      	b.n	17fc <_sercom_get_default_pad+0x14>
    1816:	4819      	ldr	r0, [pc, #100]	; (187c <_sercom_get_default_pad+0x94>)
    1818:	e7f0      	b.n	17fc <_sercom_get_default_pad+0x14>
    181a:	4819      	ldr	r0, [pc, #100]	; (1880 <_sercom_get_default_pad+0x98>)
    181c:	e7ee      	b.n	17fc <_sercom_get_default_pad+0x14>
    181e:	2901      	cmp	r1, #1
    1820:	d007      	beq.n	1832 <_sercom_get_default_pad+0x4a>
    1822:	2900      	cmp	r1, #0
    1824:	d01d      	beq.n	1862 <_sercom_get_default_pad+0x7a>
    1826:	2902      	cmp	r1, #2
    1828:	d005      	beq.n	1836 <_sercom_get_default_pad+0x4e>
    182a:	2903      	cmp	r1, #3
    182c:	d005      	beq.n	183a <_sercom_get_default_pad+0x52>
	return 0;
    182e:	2000      	movs	r0, #0
    1830:	e7e4      	b.n	17fc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1832:	4814      	ldr	r0, [pc, #80]	; (1884 <_sercom_get_default_pad+0x9c>)
    1834:	e7e2      	b.n	17fc <_sercom_get_default_pad+0x14>
    1836:	4814      	ldr	r0, [pc, #80]	; (1888 <_sercom_get_default_pad+0xa0>)
    1838:	e7e0      	b.n	17fc <_sercom_get_default_pad+0x14>
    183a:	4814      	ldr	r0, [pc, #80]	; (188c <_sercom_get_default_pad+0xa4>)
    183c:	e7de      	b.n	17fc <_sercom_get_default_pad+0x14>
    183e:	2901      	cmp	r1, #1
    1840:	d007      	beq.n	1852 <_sercom_get_default_pad+0x6a>
    1842:	2900      	cmp	r1, #0
    1844:	d00f      	beq.n	1866 <_sercom_get_default_pad+0x7e>
    1846:	2902      	cmp	r1, #2
    1848:	d005      	beq.n	1856 <_sercom_get_default_pad+0x6e>
    184a:	2903      	cmp	r1, #3
    184c:	d005      	beq.n	185a <_sercom_get_default_pad+0x72>
	return 0;
    184e:	2000      	movs	r0, #0
    1850:	e7d4      	b.n	17fc <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1852:	480f      	ldr	r0, [pc, #60]	; (1890 <_sercom_get_default_pad+0xa8>)
    1854:	e7d2      	b.n	17fc <_sercom_get_default_pad+0x14>
    1856:	480f      	ldr	r0, [pc, #60]	; (1894 <_sercom_get_default_pad+0xac>)
    1858:	e7d0      	b.n	17fc <_sercom_get_default_pad+0x14>
    185a:	480f      	ldr	r0, [pc, #60]	; (1898 <_sercom_get_default_pad+0xb0>)
    185c:	e7ce      	b.n	17fc <_sercom_get_default_pad+0x14>
    185e:	480f      	ldr	r0, [pc, #60]	; (189c <_sercom_get_default_pad+0xb4>)
    1860:	e7cc      	b.n	17fc <_sercom_get_default_pad+0x14>
    1862:	480f      	ldr	r0, [pc, #60]	; (18a0 <_sercom_get_default_pad+0xb8>)
    1864:	e7ca      	b.n	17fc <_sercom_get_default_pad+0x14>
    1866:	480f      	ldr	r0, [pc, #60]	; (18a4 <_sercom_get_default_pad+0xbc>)
    1868:	e7c8      	b.n	17fc <_sercom_get_default_pad+0x14>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	42000c00 	.word	0x42000c00
    1870:	42001000 	.word	0x42001000
    1874:	42000800 	.word	0x42000800
    1878:	00050003 	.word	0x00050003
    187c:	00060003 	.word	0x00060003
    1880:	00070003 	.word	0x00070003
    1884:	00170002 	.word	0x00170002
    1888:	001e0003 	.word	0x001e0003
    188c:	001f0003 	.word	0x001f0003
    1890:	00170003 	.word	0x00170003
    1894:	00100003 	.word	0x00100003
    1898:	00190003 	.word	0x00190003
    189c:	00040003 	.word	0x00040003
    18a0:	00160002 	.word	0x00160002
    18a4:	00160003 	.word	0x00160003

000018a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    18a8:	b530      	push	{r4, r5, lr}
    18aa:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    18ac:	aa01      	add	r2, sp, #4
    18ae:	4b0b      	ldr	r3, [pc, #44]	; (18dc <_sercom_get_sercom_inst_index+0x34>)
    18b0:	cb32      	ldmia	r3!, {r1, r4, r5}
    18b2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18b4:	0003      	movs	r3, r0
    18b6:	9a01      	ldr	r2, [sp, #4]
    18b8:	4282      	cmp	r2, r0
    18ba:	d00c      	beq.n	18d6 <_sercom_get_sercom_inst_index+0x2e>
    18bc:	9a02      	ldr	r2, [sp, #8]
    18be:	4282      	cmp	r2, r0
    18c0:	d007      	beq.n	18d2 <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18c2:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18c4:	9a03      	ldr	r2, [sp, #12]
    18c6:	429a      	cmp	r2, r3
    18c8:	d001      	beq.n	18ce <_sercom_get_sercom_inst_index+0x26>
}
    18ca:	b005      	add	sp, #20
    18cc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18ce:	3002      	adds	r0, #2
    18d0:	e002      	b.n	18d8 <_sercom_get_sercom_inst_index+0x30>
    18d2:	2001      	movs	r0, #1
    18d4:	e000      	b.n	18d8 <_sercom_get_sercom_inst_index+0x30>
    18d6:	2000      	movs	r0, #0
			return i;
    18d8:	b2c0      	uxtb	r0, r0
    18da:	e7f6      	b.n	18ca <_sercom_get_sercom_inst_index+0x22>
    18dc:	00002d6c 	.word	0x00002d6c

000018e0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    18e0:	4770      	bx	lr
	...

000018e4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    18e4:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    18e6:	4b0a      	ldr	r3, [pc, #40]	; (1910 <_sercom_set_handler+0x2c>)
    18e8:	781b      	ldrb	r3, [r3, #0]
    18ea:	2b00      	cmp	r3, #0
    18ec:	d10c      	bne.n	1908 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18ee:	4c09      	ldr	r4, [pc, #36]	; (1914 <_sercom_set_handler+0x30>)
    18f0:	4d09      	ldr	r5, [pc, #36]	; (1918 <_sercom_set_handler+0x34>)
    18f2:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    18f4:	4b09      	ldr	r3, [pc, #36]	; (191c <_sercom_set_handler+0x38>)
    18f6:	2200      	movs	r2, #0
    18f8:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18fa:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    18fc:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18fe:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    1900:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    1902:	3201      	adds	r2, #1
    1904:	4b02      	ldr	r3, [pc, #8]	; (1910 <_sercom_set_handler+0x2c>)
    1906:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1908:	0080      	lsls	r0, r0, #2
    190a:	4b02      	ldr	r3, [pc, #8]	; (1914 <_sercom_set_handler+0x30>)
    190c:	50c1      	str	r1, [r0, r3]
}
    190e:	bd30      	pop	{r4, r5, pc}
    1910:	20000076 	.word	0x20000076
    1914:	20000078 	.word	0x20000078
    1918:	000018e1 	.word	0x000018e1
    191c:	20000218 	.word	0x20000218

00001920 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1920:	b510      	push	{r4, lr}
    1922:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1924:	ac01      	add	r4, sp, #4
    1926:	2309      	movs	r3, #9
    1928:	7023      	strb	r3, [r4, #0]
    192a:	3301      	adds	r3, #1
    192c:	7063      	strb	r3, [r4, #1]
    192e:	3301      	adds	r3, #1
    1930:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1932:	f7ff ffb9 	bl	18a8 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1936:	5620      	ldrsb	r0, [r4, r0]
}
    1938:	b002      	add	sp, #8
    193a:	bd10      	pop	{r4, pc}

0000193c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    193c:	b510      	push	{r4, lr}
    193e:	4b02      	ldr	r3, [pc, #8]	; (1948 <SERCOM0_Handler+0xc>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2000      	movs	r0, #0
    1944:	4798      	blx	r3
    1946:	bd10      	pop	{r4, pc}
    1948:	20000078 	.word	0x20000078

0000194c <SERCOM1_Handler>:
    194c:	b510      	push	{r4, lr}
    194e:	4b02      	ldr	r3, [pc, #8]	; (1958 <SERCOM1_Handler+0xc>)
    1950:	685b      	ldr	r3, [r3, #4]
    1952:	2001      	movs	r0, #1
    1954:	4798      	blx	r3
    1956:	bd10      	pop	{r4, pc}
    1958:	20000078 	.word	0x20000078

0000195c <SERCOM2_Handler>:
    195c:	b510      	push	{r4, lr}
    195e:	4b02      	ldr	r3, [pc, #8]	; (1968 <SERCOM2_Handler+0xc>)
    1960:	689b      	ldr	r3, [r3, #8]
    1962:	2002      	movs	r0, #2
    1964:	4798      	blx	r3
    1966:	bd10      	pop	{r4, pc}
    1968:	20000078 	.word	0x20000078

0000196c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    196c:	b510      	push	{r4, lr}
	switch (clock_source) {
    196e:	2808      	cmp	r0, #8
    1970:	d803      	bhi.n	197a <system_clock_source_get_hz+0xe>
    1972:	0080      	lsls	r0, r0, #2
    1974:	4b1c      	ldr	r3, [pc, #112]	; (19e8 <system_clock_source_get_hz+0x7c>)
    1976:	581b      	ldr	r3, [r3, r0]
    1978:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    197a:	2000      	movs	r0, #0
    197c:	e032      	b.n	19e4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    197e:	4b1b      	ldr	r3, [pc, #108]	; (19ec <system_clock_source_get_hz+0x80>)
    1980:	6918      	ldr	r0, [r3, #16]
    1982:	e02f      	b.n	19e4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1984:	4b1a      	ldr	r3, [pc, #104]	; (19f0 <system_clock_source_get_hz+0x84>)
    1986:	6a1b      	ldr	r3, [r3, #32]
    1988:	059b      	lsls	r3, r3, #22
    198a:	0f9b      	lsrs	r3, r3, #30
    198c:	4819      	ldr	r0, [pc, #100]	; (19f4 <system_clock_source_get_hz+0x88>)
    198e:	40d8      	lsrs	r0, r3
    1990:	e028      	b.n	19e4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1992:	4b16      	ldr	r3, [pc, #88]	; (19ec <system_clock_source_get_hz+0x80>)
    1994:	6958      	ldr	r0, [r3, #20]
    1996:	e025      	b.n	19e4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1998:	4b14      	ldr	r3, [pc, #80]	; (19ec <system_clock_source_get_hz+0x80>)
    199a:	681b      	ldr	r3, [r3, #0]
			return 0;
    199c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    199e:	079b      	lsls	r3, r3, #30
    19a0:	d520      	bpl.n	19e4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19a2:	4913      	ldr	r1, [pc, #76]	; (19f0 <system_clock_source_get_hz+0x84>)
    19a4:	2210      	movs	r2, #16
    19a6:	68cb      	ldr	r3, [r1, #12]
    19a8:	421a      	tst	r2, r3
    19aa:	d0fc      	beq.n	19a6 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    19ac:	4b0f      	ldr	r3, [pc, #60]	; (19ec <system_clock_source_get_hz+0x80>)
    19ae:	681a      	ldr	r2, [r3, #0]
    19b0:	2324      	movs	r3, #36	; 0x24
    19b2:	4013      	ands	r3, r2
    19b4:	2b04      	cmp	r3, #4
    19b6:	d001      	beq.n	19bc <system_clock_source_get_hz+0x50>
			return 48000000UL;
    19b8:	480f      	ldr	r0, [pc, #60]	; (19f8 <system_clock_source_get_hz+0x8c>)
    19ba:	e013      	b.n	19e4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19bc:	2000      	movs	r0, #0
    19be:	f000 f9eb 	bl	1d98 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    19c2:	4b0a      	ldr	r3, [pc, #40]	; (19ec <system_clock_source_get_hz+0x80>)
    19c4:	689b      	ldr	r3, [r3, #8]
    19c6:	041b      	lsls	r3, r3, #16
    19c8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19ca:	4358      	muls	r0, r3
    19cc:	e00a      	b.n	19e4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19ce:	2350      	movs	r3, #80	; 0x50
    19d0:	4a07      	ldr	r2, [pc, #28]	; (19f0 <system_clock_source_get_hz+0x84>)
    19d2:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    19d4:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19d6:	075b      	lsls	r3, r3, #29
    19d8:	d504      	bpl.n	19e4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    19da:	4b04      	ldr	r3, [pc, #16]	; (19ec <system_clock_source_get_hz+0x80>)
    19dc:	68d8      	ldr	r0, [r3, #12]
    19de:	e001      	b.n	19e4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    19e0:	2080      	movs	r0, #128	; 0x80
    19e2:	0200      	lsls	r0, r0, #8
	}
}
    19e4:	bd10      	pop	{r4, pc}
    19e6:	46c0      	nop			; (mov r8, r8)
    19e8:	00002d78 	.word	0x00002d78
    19ec:	20000084 	.word	0x20000084
    19f0:	40000800 	.word	0x40000800
    19f4:	007a1200 	.word	0x007a1200
    19f8:	02dc6c00 	.word	0x02dc6c00

000019fc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    19fc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    19fe:	490c      	ldr	r1, [pc, #48]	; (1a30 <system_clock_source_osc8m_set_config+0x34>)
    1a00:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1a02:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a04:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1a06:	7840      	ldrb	r0, [r0, #1]
    1a08:	2201      	movs	r2, #1
    1a0a:	4010      	ands	r0, r2
    1a0c:	0180      	lsls	r0, r0, #6
    1a0e:	2640      	movs	r6, #64	; 0x40
    1a10:	43b3      	bics	r3, r6
    1a12:	4303      	orrs	r3, r0
    1a14:	402a      	ands	r2, r5
    1a16:	01d2      	lsls	r2, r2, #7
    1a18:	2080      	movs	r0, #128	; 0x80
    1a1a:	4383      	bics	r3, r0
    1a1c:	4313      	orrs	r3, r2
    1a1e:	2203      	movs	r2, #3
    1a20:	4022      	ands	r2, r4
    1a22:	0212      	lsls	r2, r2, #8
    1a24:	4803      	ldr	r0, [pc, #12]	; (1a34 <system_clock_source_osc8m_set_config+0x38>)
    1a26:	4003      	ands	r3, r0
    1a28:	4313      	orrs	r3, r2
    1a2a:	620b      	str	r3, [r1, #32]
}
    1a2c:	bd70      	pop	{r4, r5, r6, pc}
    1a2e:	46c0      	nop			; (mov r8, r8)
    1a30:	40000800 	.word	0x40000800
    1a34:	fffffcff 	.word	0xfffffcff

00001a38 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a38:	2808      	cmp	r0, #8
    1a3a:	d803      	bhi.n	1a44 <system_clock_source_enable+0xc>
    1a3c:	0080      	lsls	r0, r0, #2
    1a3e:	4b25      	ldr	r3, [pc, #148]	; (1ad4 <system_clock_source_enable+0x9c>)
    1a40:	581b      	ldr	r3, [r3, r0]
    1a42:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a44:	2017      	movs	r0, #23
    1a46:	e044      	b.n	1ad2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a48:	4a23      	ldr	r2, [pc, #140]	; (1ad8 <system_clock_source_enable+0xa0>)
    1a4a:	6a13      	ldr	r3, [r2, #32]
    1a4c:	2102      	movs	r1, #2
    1a4e:	430b      	orrs	r3, r1
    1a50:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a52:	2000      	movs	r0, #0
    1a54:	e03d      	b.n	1ad2 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a56:	4a20      	ldr	r2, [pc, #128]	; (1ad8 <system_clock_source_enable+0xa0>)
    1a58:	6993      	ldr	r3, [r2, #24]
    1a5a:	2102      	movs	r1, #2
    1a5c:	430b      	orrs	r3, r1
    1a5e:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1a60:	2000      	movs	r0, #0
		break;
    1a62:	e036      	b.n	1ad2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a64:	4a1c      	ldr	r2, [pc, #112]	; (1ad8 <system_clock_source_enable+0xa0>)
    1a66:	8a13      	ldrh	r3, [r2, #16]
    1a68:	2102      	movs	r1, #2
    1a6a:	430b      	orrs	r3, r1
    1a6c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a6e:	2000      	movs	r0, #0
		break;
    1a70:	e02f      	b.n	1ad2 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a72:	4a19      	ldr	r2, [pc, #100]	; (1ad8 <system_clock_source_enable+0xa0>)
    1a74:	8a93      	ldrh	r3, [r2, #20]
    1a76:	2102      	movs	r1, #2
    1a78:	430b      	orrs	r3, r1
    1a7a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1a7c:	2000      	movs	r0, #0
		break;
    1a7e:	e028      	b.n	1ad2 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a80:	4916      	ldr	r1, [pc, #88]	; (1adc <system_clock_source_enable+0xa4>)
    1a82:	680b      	ldr	r3, [r1, #0]
    1a84:	2202      	movs	r2, #2
    1a86:	4313      	orrs	r3, r2
    1a88:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1a8a:	4b13      	ldr	r3, [pc, #76]	; (1ad8 <system_clock_source_enable+0xa0>)
    1a8c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a8e:	0019      	movs	r1, r3
    1a90:	320e      	adds	r2, #14
    1a92:	68cb      	ldr	r3, [r1, #12]
    1a94:	421a      	tst	r2, r3
    1a96:	d0fc      	beq.n	1a92 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a98:	4a10      	ldr	r2, [pc, #64]	; (1adc <system_clock_source_enable+0xa4>)
    1a9a:	6891      	ldr	r1, [r2, #8]
    1a9c:	4b0e      	ldr	r3, [pc, #56]	; (1ad8 <system_clock_source_enable+0xa0>)
    1a9e:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1aa0:	6852      	ldr	r2, [r2, #4]
    1aa2:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1aa4:	2200      	movs	r2, #0
    1aa6:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1aa8:	0019      	movs	r1, r3
    1aaa:	3210      	adds	r2, #16
    1aac:	68cb      	ldr	r3, [r1, #12]
    1aae:	421a      	tst	r2, r3
    1ab0:	d0fc      	beq.n	1aac <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ab2:	4b0a      	ldr	r3, [pc, #40]	; (1adc <system_clock_source_enable+0xa4>)
    1ab4:	681b      	ldr	r3, [r3, #0]
    1ab6:	b29b      	uxth	r3, r3
    1ab8:	4a07      	ldr	r2, [pc, #28]	; (1ad8 <system_clock_source_enable+0xa0>)
    1aba:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1abc:	2000      	movs	r0, #0
    1abe:	e008      	b.n	1ad2 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1ac0:	4905      	ldr	r1, [pc, #20]	; (1ad8 <system_clock_source_enable+0xa0>)
    1ac2:	2244      	movs	r2, #68	; 0x44
    1ac4:	5c8b      	ldrb	r3, [r1, r2]
    1ac6:	2002      	movs	r0, #2
    1ac8:	4303      	orrs	r3, r0
    1aca:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1acc:	2000      	movs	r0, #0
		break;
    1ace:	e000      	b.n	1ad2 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1ad0:	2000      	movs	r0, #0
}
    1ad2:	4770      	bx	lr
    1ad4:	00002d9c 	.word	0x00002d9c
    1ad8:	40000800 	.word	0x40000800
    1adc:	20000084 	.word	0x20000084

00001ae0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ae0:	b570      	push	{r4, r5, r6, lr}
    1ae2:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ae4:	22c2      	movs	r2, #194	; 0xc2
    1ae6:	00d2      	lsls	r2, r2, #3
    1ae8:	4b20      	ldr	r3, [pc, #128]	; (1b6c <system_clock_init+0x8c>)
    1aea:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1aec:	4a20      	ldr	r2, [pc, #128]	; (1b70 <system_clock_init+0x90>)
    1aee:	6853      	ldr	r3, [r2, #4]
    1af0:	211e      	movs	r1, #30
    1af2:	438b      	bics	r3, r1
    1af4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1af6:	2301      	movs	r3, #1
    1af8:	466a      	mov	r2, sp
    1afa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1afc:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1afe:	b2e0      	uxtb	r0, r4
    1b00:	4669      	mov	r1, sp
    1b02:	f000 f93d 	bl	1d80 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b06:	3401      	adds	r4, #1
    1b08:	2c18      	cmp	r4, #24
    1b0a:	d1f8      	bne.n	1afe <system_clock_init+0x1e>

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1b0c:	a803      	add	r0, sp, #12
    1b0e:	2400      	movs	r4, #0
    1b10:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1b12:	7084      	strb	r4, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1b14:	2501      	movs	r5, #1
    1b16:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b18:	f7ff ff70 	bl	19fc <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b1c:	2006      	movs	r0, #6
    1b1e:	f7ff ff8b 	bl	1a38 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b22:	f000 f829 	bl	1b78 <system_gclk_init>
	config->division_factor    = 1;
    1b26:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1b28:	466b      	mov	r3, sp
    1b2a:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b2c:	2606      	movs	r6, #6
    1b2e:	701e      	strb	r6, [r3, #0]
	config->run_in_standby     = false;
    1b30:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1b32:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1b34:	4669      	mov	r1, sp
    1b36:	2005      	movs	r0, #5
    1b38:	f000 f830 	bl	1b9c <system_gclk_gen_set_config>
    1b3c:	2005      	movs	r0, #5
    1b3e:	f000 f885 	bl	1c4c <system_gclk_gen_enable>
	PM->CPUSEL.reg = (uint32_t)divider;
    1b42:	4b0c      	ldr	r3, [pc, #48]	; (1b74 <system_clock_init+0x94>)
    1b44:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1b46:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1b48:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1b4a:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1b4c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1b4e:	466b      	mov	r3, sp
    1b50:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b52:	701e      	strb	r6, [r3, #0]
	config->output_enable      = false;
    1b54:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1b56:	721d      	strb	r5, [r3, #8]
    1b58:	4669      	mov	r1, sp
    1b5a:	2000      	movs	r0, #0
    1b5c:	f000 f81e 	bl	1b9c <system_gclk_gen_set_config>
    1b60:	2000      	movs	r0, #0
    1b62:	f000 f873 	bl	1c4c <system_gclk_gen_enable>
#endif
}
    1b66:	b004      	add	sp, #16
    1b68:	bd70      	pop	{r4, r5, r6, pc}
    1b6a:	46c0      	nop			; (mov r8, r8)
    1b6c:	40000800 	.word	0x40000800
    1b70:	41004000 	.word	0x41004000
    1b74:	40000400 	.word	0x40000400

00001b78 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1b78:	4a06      	ldr	r2, [pc, #24]	; (1b94 <system_gclk_init+0x1c>)
    1b7a:	6993      	ldr	r3, [r2, #24]
    1b7c:	2108      	movs	r1, #8
    1b7e:	430b      	orrs	r3, r1
    1b80:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1b82:	2201      	movs	r2, #1
    1b84:	4b04      	ldr	r3, [pc, #16]	; (1b98 <system_gclk_init+0x20>)
    1b86:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1b88:	0019      	movs	r1, r3
    1b8a:	780b      	ldrb	r3, [r1, #0]
    1b8c:	4213      	tst	r3, r2
    1b8e:	d1fc      	bne.n	1b8a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1b90:	4770      	bx	lr
    1b92:	46c0      	nop			; (mov r8, r8)
    1b94:	40000400 	.word	0x40000400
    1b98:	40000c00 	.word	0x40000c00

00001b9c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1b9c:	b570      	push	{r4, r5, r6, lr}
    1b9e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1ba0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1ba2:	780d      	ldrb	r5, [r1, #0]
    1ba4:	022d      	lsls	r5, r5, #8
    1ba6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ba8:	784b      	ldrb	r3, [r1, #1]
    1baa:	2b00      	cmp	r3, #0
    1bac:	d002      	beq.n	1bb4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1bae:	2380      	movs	r3, #128	; 0x80
    1bb0:	02db      	lsls	r3, r3, #11
    1bb2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1bb4:	7a4b      	ldrb	r3, [r1, #9]
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d002      	beq.n	1bc0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1bba:	2380      	movs	r3, #128	; 0x80
    1bbc:	031b      	lsls	r3, r3, #12
    1bbe:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1bc0:	6848      	ldr	r0, [r1, #4]
    1bc2:	2801      	cmp	r0, #1
    1bc4:	d910      	bls.n	1be8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1bc6:	1e43      	subs	r3, r0, #1
    1bc8:	4218      	tst	r0, r3
    1bca:	d134      	bne.n	1c36 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1bcc:	2802      	cmp	r0, #2
    1bce:	d930      	bls.n	1c32 <system_gclk_gen_set_config+0x96>
    1bd0:	2302      	movs	r3, #2
    1bd2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1bd4:	3201      	adds	r2, #1
						mask <<= 1) {
    1bd6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1bd8:	4298      	cmp	r0, r3
    1bda:	d8fb      	bhi.n	1bd4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1bdc:	0212      	lsls	r2, r2, #8
    1bde:	4332      	orrs	r2, r6
    1be0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1be2:	2380      	movs	r3, #128	; 0x80
    1be4:	035b      	lsls	r3, r3, #13
    1be6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1be8:	7a0b      	ldrb	r3, [r1, #8]
    1bea:	2b00      	cmp	r3, #0
    1bec:	d002      	beq.n	1bf4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1bee:	2380      	movs	r3, #128	; 0x80
    1bf0:	039b      	lsls	r3, r3, #14
    1bf2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bf4:	4a13      	ldr	r2, [pc, #76]	; (1c44 <system_gclk_gen_set_config+0xa8>)
    1bf6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1bf8:	b25b      	sxtb	r3, r3
    1bfa:	2b00      	cmp	r3, #0
    1bfc:	dbfb      	blt.n	1bf6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1bfe:	f7ff faab 	bl	1158 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c02:	4b11      	ldr	r3, [pc, #68]	; (1c48 <system_gclk_gen_set_config+0xac>)
    1c04:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c06:	4a0f      	ldr	r2, [pc, #60]	; (1c44 <system_gclk_gen_set_config+0xa8>)
    1c08:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1c0a:	b25b      	sxtb	r3, r3
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	dbfb      	blt.n	1c08 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1c10:	4b0c      	ldr	r3, [pc, #48]	; (1c44 <system_gclk_gen_set_config+0xa8>)
    1c12:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c14:	001a      	movs	r2, r3
    1c16:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1c18:	b25b      	sxtb	r3, r3
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	dbfb      	blt.n	1c16 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1c1e:	4a09      	ldr	r2, [pc, #36]	; (1c44 <system_gclk_gen_set_config+0xa8>)
    1c20:	6853      	ldr	r3, [r2, #4]
    1c22:	2180      	movs	r1, #128	; 0x80
    1c24:	0249      	lsls	r1, r1, #9
    1c26:	400b      	ands	r3, r1
    1c28:	431d      	orrs	r5, r3
    1c2a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1c2c:	f7ff fab4 	bl	1198 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1c30:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1c32:	2200      	movs	r2, #0
    1c34:	e7d2      	b.n	1bdc <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1c36:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1c38:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c3a:	2380      	movs	r3, #128	; 0x80
    1c3c:	029b      	lsls	r3, r3, #10
    1c3e:	431d      	orrs	r5, r3
    1c40:	e7d2      	b.n	1be8 <system_gclk_gen_set_config+0x4c>
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	40000c00 	.word	0x40000c00
    1c48:	40000c08 	.word	0x40000c08

00001c4c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1c4c:	b510      	push	{r4, lr}
    1c4e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c50:	4a0b      	ldr	r2, [pc, #44]	; (1c80 <system_gclk_gen_enable+0x34>)
    1c52:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c54:	b25b      	sxtb	r3, r3
    1c56:	2b00      	cmp	r3, #0
    1c58:	dbfb      	blt.n	1c52 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1c5a:	f7ff fa7d 	bl	1158 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c5e:	4b09      	ldr	r3, [pc, #36]	; (1c84 <system_gclk_gen_enable+0x38>)
    1c60:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c62:	4a07      	ldr	r2, [pc, #28]	; (1c80 <system_gclk_gen_enable+0x34>)
    1c64:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c66:	b25b      	sxtb	r3, r3
    1c68:	2b00      	cmp	r3, #0
    1c6a:	dbfb      	blt.n	1c64 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1c6c:	4a04      	ldr	r2, [pc, #16]	; (1c80 <system_gclk_gen_enable+0x34>)
    1c6e:	6851      	ldr	r1, [r2, #4]
    1c70:	2380      	movs	r3, #128	; 0x80
    1c72:	025b      	lsls	r3, r3, #9
    1c74:	430b      	orrs	r3, r1
    1c76:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1c78:	f7ff fa8e 	bl	1198 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1c7c:	bd10      	pop	{r4, pc}
    1c7e:	46c0      	nop			; (mov r8, r8)
    1c80:	40000c00 	.word	0x40000c00
    1c84:	40000c04 	.word	0x40000c04

00001c88 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1c88:	b570      	push	{r4, r5, r6, lr}
    1c8a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c8c:	4a1a      	ldr	r2, [pc, #104]	; (1cf8 <system_gclk_gen_get_hz+0x70>)
    1c8e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c90:	b25b      	sxtb	r3, r3
    1c92:	2b00      	cmp	r3, #0
    1c94:	dbfb      	blt.n	1c8e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1c96:	f7ff fa5f 	bl	1158 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c9a:	4b18      	ldr	r3, [pc, #96]	; (1cfc <system_gclk_gen_get_hz+0x74>)
    1c9c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c9e:	4a16      	ldr	r2, [pc, #88]	; (1cf8 <system_gclk_gen_get_hz+0x70>)
    1ca0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1ca2:	b25b      	sxtb	r3, r3
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	dbfb      	blt.n	1ca0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1ca8:	4e13      	ldr	r6, [pc, #76]	; (1cf8 <system_gclk_gen_get_hz+0x70>)
    1caa:	6870      	ldr	r0, [r6, #4]
    1cac:	04c0      	lsls	r0, r0, #19
    1cae:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1cb0:	f7ff fe5c 	bl	196c <system_clock_source_get_hz>
    1cb4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1cb6:	4b11      	ldr	r3, [pc, #68]	; (1cfc <system_gclk_gen_get_hz+0x74>)
    1cb8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1cba:	6876      	ldr	r6, [r6, #4]
    1cbc:	02f6      	lsls	r6, r6, #11
    1cbe:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1cc0:	4b0f      	ldr	r3, [pc, #60]	; (1d00 <system_gclk_gen_get_hz+0x78>)
    1cc2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cc4:	4a0c      	ldr	r2, [pc, #48]	; (1cf8 <system_gclk_gen_get_hz+0x70>)
    1cc6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1cc8:	b25b      	sxtb	r3, r3
    1cca:	2b00      	cmp	r3, #0
    1ccc:	dbfb      	blt.n	1cc6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1cce:	4b0a      	ldr	r3, [pc, #40]	; (1cf8 <system_gclk_gen_get_hz+0x70>)
    1cd0:	689c      	ldr	r4, [r3, #8]
    1cd2:	0224      	lsls	r4, r4, #8
    1cd4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1cd6:	f7ff fa5f 	bl	1198 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1cda:	2e00      	cmp	r6, #0
    1cdc:	d107      	bne.n	1cee <system_gclk_gen_get_hz+0x66>
    1cde:	2c01      	cmp	r4, #1
    1ce0:	d907      	bls.n	1cf2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1ce2:	0021      	movs	r1, r4
    1ce4:	0028      	movs	r0, r5
    1ce6:	f000 fee5 	bl	2ab4 <__udivsi3>
    1cea:	0005      	movs	r5, r0
    1cec:	e001      	b.n	1cf2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1cee:	3401      	adds	r4, #1
    1cf0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1cf2:	0028      	movs	r0, r5
    1cf4:	bd70      	pop	{r4, r5, r6, pc}
    1cf6:	46c0      	nop			; (mov r8, r8)
    1cf8:	40000c00 	.word	0x40000c00
    1cfc:	40000c04 	.word	0x40000c04
    1d00:	40000c08 	.word	0x40000c08

00001d04 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1d04:	b510      	push	{r4, lr}
    1d06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d08:	f7ff fa26 	bl	1158 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d0c:	4b05      	ldr	r3, [pc, #20]	; (1d24 <system_gclk_chan_enable+0x20>)
    1d0e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1d10:	4a05      	ldr	r2, [pc, #20]	; (1d28 <system_gclk_chan_enable+0x24>)
    1d12:	8853      	ldrh	r3, [r2, #2]
    1d14:	2180      	movs	r1, #128	; 0x80
    1d16:	01c9      	lsls	r1, r1, #7
    1d18:	430b      	orrs	r3, r1
    1d1a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1d1c:	f7ff fa3c 	bl	1198 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d20:	bd10      	pop	{r4, pc}
    1d22:	46c0      	nop			; (mov r8, r8)
    1d24:	40000c02 	.word	0x40000c02
    1d28:	40000c00 	.word	0x40000c00

00001d2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1d2c:	b510      	push	{r4, lr}
    1d2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d30:	f7ff fa12 	bl	1158 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d34:	4b0e      	ldr	r3, [pc, #56]	; (1d70 <system_gclk_chan_disable+0x44>)
    1d36:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d38:	4a0e      	ldr	r2, [pc, #56]	; (1d74 <system_gclk_chan_disable+0x48>)
    1d3a:	8853      	ldrh	r3, [r2, #2]
    1d3c:	051b      	lsls	r3, r3, #20
    1d3e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1d40:	8853      	ldrh	r3, [r2, #2]
    1d42:	490d      	ldr	r1, [pc, #52]	; (1d78 <system_gclk_chan_disable+0x4c>)
    1d44:	400b      	ands	r3, r1
    1d46:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1d48:	8853      	ldrh	r3, [r2, #2]
    1d4a:	490c      	ldr	r1, [pc, #48]	; (1d7c <system_gclk_chan_disable+0x50>)
    1d4c:	400b      	ands	r3, r1
    1d4e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1d50:	0011      	movs	r1, r2
    1d52:	2280      	movs	r2, #128	; 0x80
    1d54:	01d2      	lsls	r2, r2, #7
    1d56:	884b      	ldrh	r3, [r1, #2]
    1d58:	4213      	tst	r3, r2
    1d5a:	d1fc      	bne.n	1d56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1d5c:	4905      	ldr	r1, [pc, #20]	; (1d74 <system_gclk_chan_disable+0x48>)
    1d5e:	884a      	ldrh	r2, [r1, #2]
    1d60:	0203      	lsls	r3, r0, #8
    1d62:	4805      	ldr	r0, [pc, #20]	; (1d78 <system_gclk_chan_disable+0x4c>)
    1d64:	4002      	ands	r2, r0
    1d66:	4313      	orrs	r3, r2
    1d68:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1d6a:	f7ff fa15 	bl	1198 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d6e:	bd10      	pop	{r4, pc}
    1d70:	40000c02 	.word	0x40000c02
    1d74:	40000c00 	.word	0x40000c00
    1d78:	fffff0ff 	.word	0xfffff0ff
    1d7c:	ffffbfff 	.word	0xffffbfff

00001d80 <system_gclk_chan_set_config>:
{
    1d80:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d82:	780c      	ldrb	r4, [r1, #0]
    1d84:	0224      	lsls	r4, r4, #8
    1d86:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1d88:	f7ff ffd0 	bl	1d2c <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d8c:	b2a4      	uxth	r4, r4
    1d8e:	4b01      	ldr	r3, [pc, #4]	; (1d94 <system_gclk_chan_set_config+0x14>)
    1d90:	805c      	strh	r4, [r3, #2]
}
    1d92:	bd10      	pop	{r4, pc}
    1d94:	40000c00 	.word	0x40000c00

00001d98 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d98:	b510      	push	{r4, lr}
    1d9a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d9c:	f7ff f9dc 	bl	1158 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1da0:	4b05      	ldr	r3, [pc, #20]	; (1db8 <system_gclk_chan_get_hz+0x20>)
    1da2:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1da4:	4b05      	ldr	r3, [pc, #20]	; (1dbc <system_gclk_chan_get_hz+0x24>)
    1da6:	885c      	ldrh	r4, [r3, #2]
    1da8:	0524      	lsls	r4, r4, #20
    1daa:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1dac:	f7ff f9f4 	bl	1198 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1db0:	0020      	movs	r0, r4
    1db2:	f7ff ff69 	bl	1c88 <system_gclk_gen_get_hz>
}
    1db6:	bd10      	pop	{r4, pc}
    1db8:	40000c02 	.word	0x40000c02
    1dbc:	40000c00 	.word	0x40000c00

00001dc0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1dc0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1dc2:	78d3      	ldrb	r3, [r2, #3]
    1dc4:	2b00      	cmp	r3, #0
    1dc6:	d135      	bne.n	1e34 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1dc8:	7813      	ldrb	r3, [r2, #0]
    1dca:	2b80      	cmp	r3, #128	; 0x80
    1dcc:	d029      	beq.n	1e22 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1dce:	061b      	lsls	r3, r3, #24
    1dd0:	2480      	movs	r4, #128	; 0x80
    1dd2:	0264      	lsls	r4, r4, #9
    1dd4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1dd6:	7854      	ldrb	r4, [r2, #1]
    1dd8:	2502      	movs	r5, #2
    1dda:	43ac      	bics	r4, r5
    1ddc:	d106      	bne.n	1dec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1dde:	7894      	ldrb	r4, [r2, #2]
    1de0:	2c00      	cmp	r4, #0
    1de2:	d120      	bne.n	1e26 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1de4:	2480      	movs	r4, #128	; 0x80
    1de6:	02a4      	lsls	r4, r4, #10
    1de8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1dea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1dec:	7854      	ldrb	r4, [r2, #1]
    1dee:	3c01      	subs	r4, #1
    1df0:	2c01      	cmp	r4, #1
    1df2:	d91c      	bls.n	1e2e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1df4:	040d      	lsls	r5, r1, #16
    1df6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1df8:	24a0      	movs	r4, #160	; 0xa0
    1dfa:	05e4      	lsls	r4, r4, #23
    1dfc:	432c      	orrs	r4, r5
    1dfe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e00:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1e02:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1e04:	24d0      	movs	r4, #208	; 0xd0
    1e06:	0624      	lsls	r4, r4, #24
    1e08:	432c      	orrs	r4, r5
    1e0a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e0c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1e0e:	78d4      	ldrb	r4, [r2, #3]
    1e10:	2c00      	cmp	r4, #0
    1e12:	d122      	bne.n	1e5a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1e14:	035b      	lsls	r3, r3, #13
    1e16:	d51c      	bpl.n	1e52 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1e18:	7893      	ldrb	r3, [r2, #2]
    1e1a:	2b01      	cmp	r3, #1
    1e1c:	d01e      	beq.n	1e5c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1e1e:	6141      	str	r1, [r0, #20]
    1e20:	e017      	b.n	1e52 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1e22:	2300      	movs	r3, #0
    1e24:	e7d7      	b.n	1dd6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e26:	24c0      	movs	r4, #192	; 0xc0
    1e28:	02e4      	lsls	r4, r4, #11
    1e2a:	4323      	orrs	r3, r4
    1e2c:	e7dd      	b.n	1dea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1e2e:	4c0d      	ldr	r4, [pc, #52]	; (1e64 <_system_pinmux_config+0xa4>)
    1e30:	4023      	ands	r3, r4
    1e32:	e7df      	b.n	1df4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1e34:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1e36:	040c      	lsls	r4, r1, #16
    1e38:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1e3a:	23a0      	movs	r3, #160	; 0xa0
    1e3c:	05db      	lsls	r3, r3, #23
    1e3e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e40:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1e42:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1e44:	23d0      	movs	r3, #208	; 0xd0
    1e46:	061b      	lsls	r3, r3, #24
    1e48:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e4a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1e4c:	78d3      	ldrb	r3, [r2, #3]
    1e4e:	2b00      	cmp	r3, #0
    1e50:	d103      	bne.n	1e5a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e52:	7853      	ldrb	r3, [r2, #1]
    1e54:	3b01      	subs	r3, #1
    1e56:	2b01      	cmp	r3, #1
    1e58:	d902      	bls.n	1e60 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1e5a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1e5c:	6181      	str	r1, [r0, #24]
    1e5e:	e7f8      	b.n	1e52 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1e60:	6081      	str	r1, [r0, #8]
}
    1e62:	e7fa      	b.n	1e5a <_system_pinmux_config+0x9a>
    1e64:	fffbffff 	.word	0xfffbffff

00001e68 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e68:	b510      	push	{r4, lr}
    1e6a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e6c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1e6e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1e70:	2900      	cmp	r1, #0
    1e72:	d104      	bne.n	1e7e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1e74:	0943      	lsrs	r3, r0, #5
    1e76:	01db      	lsls	r3, r3, #7
    1e78:	4905      	ldr	r1, [pc, #20]	; (1e90 <system_pinmux_pin_set_config+0x28>)
    1e7a:	468c      	mov	ip, r1
    1e7c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e7e:	241f      	movs	r4, #31
    1e80:	4020      	ands	r0, r4
    1e82:	2101      	movs	r1, #1
    1e84:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1e86:	0018      	movs	r0, r3
    1e88:	f7ff ff9a 	bl	1dc0 <_system_pinmux_config>
}
    1e8c:	bd10      	pop	{r4, pc}
    1e8e:	46c0      	nop			; (mov r8, r8)
    1e90:	41004400 	.word	0x41004400

00001e94 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e94:	4770      	bx	lr

00001e96 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e96:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e98:	f7ff fe22 	bl	1ae0 <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1e9c:	f7ff fffa 	bl	1e94 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1ea0:	f7fe fbfc 	bl	69c <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1ea4:	f7ff fff6 	bl	1e94 <_system_dummy_init>
}
    1ea8:	bd10      	pop	{r4, pc}

00001eaa <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1eaa:	2000      	movs	r0, #0
    1eac:	4770      	bx	lr
	...

00001eb0 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1eb0:	b530      	push	{r4, r5, lr}
    1eb2:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1eb4:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1eb6:	2903      	cmp	r1, #3
    1eb8:	d900      	bls.n	1ebc <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1eba:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    1ebc:	4d11      	ldr	r5, [pc, #68]	; (1f04 <_tcc_set_compare_value+0x54>)
    1ebe:	42aa      	cmp	r2, r5
    1ec0:	d8fb      	bhi.n	1eba <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    1ec2:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    1ec4:	2b00      	cmp	r3, #0
    1ec6:	d010      	beq.n	1eea <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    1ec8:	2480      	movs	r4, #128	; 0x80
    1eca:	0264      	lsls	r4, r4, #9
    1ecc:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    1ece:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ed0:	421c      	tst	r4, r3
    1ed2:	d1fc      	bne.n	1ece <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1ed4:	2480      	movs	r4, #128	; 0x80
    1ed6:	0324      	lsls	r4, r4, #12
    1ed8:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    1eda:	6883      	ldr	r3, [r0, #8]
    1edc:	421c      	tst	r4, r3
    1ede:	d1fc      	bne.n	1eda <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    1ee0:	311c      	adds	r1, #28
    1ee2:	0089      	lsls	r1, r1, #2
    1ee4:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    1ee6:	2000      	movs	r0, #0
    1ee8:	e7e7      	b.n	1eba <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1eea:	2480      	movs	r4, #128	; 0x80
    1eec:	0064      	lsls	r4, r4, #1
    1eee:	408c      	lsls	r4, r1
    1ef0:	6883      	ldr	r3, [r0, #8]
    1ef2:	421c      	tst	r4, r3
    1ef4:	d1fc      	bne.n	1ef0 <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    1ef6:	3110      	adds	r1, #16
    1ef8:	0089      	lsls	r1, r1, #2
    1efa:	1841      	adds	r1, r0, r1
    1efc:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1efe:	2000      	movs	r0, #0
    1f00:	e7db      	b.n	1eba <_tcc_set_compare_value+0xa>
    1f02:	46c0      	nop			; (mov r8, r8)
    1f04:	00ffffff 	.word	0x00ffffff

00001f08 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    1f08:	2300      	movs	r3, #0
    1f0a:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    1f0c:	4a4c      	ldr	r2, [pc, #304]	; (2040 <tcc_get_config_defaults+0x138>)
    1f0e:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    1f10:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1f12:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1f14:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1f16:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1f18:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1f1a:	61c3      	str	r3, [r0, #28]
    1f1c:	6203      	str	r3, [r0, #32]
    1f1e:	6243      	str	r3, [r0, #36]	; 0x24
    1f20:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1f22:	7503      	strb	r3, [r0, #20]
    1f24:	7543      	strb	r3, [r0, #21]
    1f26:	7583      	strb	r3, [r0, #22]
    1f28:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1f2a:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1f2c:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1f2e:	7403      	strb	r3, [r0, #16]
    1f30:	7443      	strb	r3, [r0, #17]
    1f32:	7483      	strb	r3, [r0, #18]
    1f34:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1f36:	222c      	movs	r2, #44	; 0x2c
    1f38:	5483      	strb	r3, [r0, r2]
    1f3a:	3201      	adds	r2, #1
    1f3c:	5483      	strb	r3, [r0, r2]
    1f3e:	3201      	adds	r2, #1
    1f40:	5483      	strb	r3, [r0, r2]
    1f42:	3201      	adds	r2, #1
    1f44:	5483      	strb	r3, [r0, r2]
    1f46:	3201      	adds	r2, #1
    1f48:	5483      	strb	r3, [r0, r2]
    1f4a:	3201      	adds	r2, #1
    1f4c:	5483      	strb	r3, [r0, r2]
    1f4e:	3201      	adds	r2, #1
    1f50:	5483      	strb	r3, [r0, r2]
    1f52:	3201      	adds	r2, #1
    1f54:	5483      	strb	r3, [r0, r2]
    1f56:	3201      	adds	r2, #1
    1f58:	5483      	strb	r3, [r0, r2]
    1f5a:	3201      	adds	r2, #1
    1f5c:	5483      	strb	r3, [r0, r2]
    1f5e:	3201      	adds	r2, #1
    1f60:	5483      	strb	r3, [r0, r2]
    1f62:	3201      	adds	r2, #1
    1f64:	5483      	strb	r3, [r0, r2]
    1f66:	3201      	adds	r2, #1
    1f68:	5483      	strb	r3, [r0, r2]
    1f6a:	3201      	adds	r2, #1
    1f6c:	5483      	strb	r3, [r0, r2]
    1f6e:	3201      	adds	r2, #1
    1f70:	5483      	strb	r3, [r0, r2]
    1f72:	3201      	adds	r2, #1
    1f74:	5483      	strb	r3, [r0, r2]
    1f76:	3201      	adds	r2, #1
    1f78:	5483      	strb	r3, [r0, r2]
    1f7a:	3201      	adds	r2, #1
    1f7c:	5483      	strb	r3, [r0, r2]
    1f7e:	3201      	adds	r2, #1
    1f80:	5483      	strb	r3, [r0, r2]
    1f82:	3201      	adds	r2, #1
    1f84:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1f86:	3201      	adds	r2, #1
    1f88:	5483      	strb	r3, [r0, r2]
    1f8a:	3201      	adds	r2, #1
    1f8c:	5483      	strb	r3, [r0, r2]
    1f8e:	3201      	adds	r2, #1
    1f90:	5483      	strb	r3, [r0, r2]
    1f92:	3201      	adds	r2, #1
    1f94:	5483      	strb	r3, [r0, r2]
    1f96:	3201      	adds	r2, #1
    1f98:	5483      	strb	r3, [r0, r2]
    1f9a:	3201      	adds	r2, #1
    1f9c:	5483      	strb	r3, [r0, r2]
    1f9e:	3201      	adds	r2, #1
    1fa0:	5483      	strb	r3, [r0, r2]
    1fa2:	3201      	adds	r2, #1
    1fa4:	5483      	strb	r3, [r0, r2]
    1fa6:	3201      	adds	r2, #1
    1fa8:	5483      	strb	r3, [r0, r2]
    1faa:	3201      	adds	r2, #1
    1fac:	5483      	strb	r3, [r0, r2]
    1fae:	3201      	adds	r2, #1
    1fb0:	5483      	strb	r3, [r0, r2]
    1fb2:	3201      	adds	r2, #1
    1fb4:	5483      	strb	r3, [r0, r2]
    1fb6:	3201      	adds	r2, #1
    1fb8:	5483      	strb	r3, [r0, r2]
    1fba:	3201      	adds	r2, #1
    1fbc:	5483      	strb	r3, [r0, r2]
    1fbe:	3201      	adds	r2, #1
    1fc0:	5483      	strb	r3, [r0, r2]
    1fc2:	3201      	adds	r2, #1
    1fc4:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1fc6:	3201      	adds	r2, #1
    1fc8:	5483      	strb	r3, [r0, r2]
    1fca:	3201      	adds	r2, #1
    1fcc:	5483      	strb	r3, [r0, r2]
    1fce:	3201      	adds	r2, #1
    1fd0:	5483      	strb	r3, [r0, r2]
    1fd2:	3201      	adds	r2, #1
    1fd4:	5483      	strb	r3, [r0, r2]
    1fd6:	3201      	adds	r2, #1
    1fd8:	5483      	strb	r3, [r0, r2]
    1fda:	3201      	adds	r2, #1
    1fdc:	5483      	strb	r3, [r0, r2]
    1fde:	3201      	adds	r2, #1
    1fe0:	5483      	strb	r3, [r0, r2]
    1fe2:	3201      	adds	r2, #1
    1fe4:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1fe6:	3241      	adds	r2, #65	; 0x41
    1fe8:	5483      	strb	r3, [r0, r2]
    1fea:	6583      	str	r3, [r0, #88]	; 0x58
    1fec:	6783      	str	r3, [r0, #120]	; 0x78
    1fee:	3201      	adds	r2, #1
    1ff0:	5483      	strb	r3, [r0, r2]
    1ff2:	65c3      	str	r3, [r0, #92]	; 0x5c
    1ff4:	67c3      	str	r3, [r0, #124]	; 0x7c
    1ff6:	3201      	adds	r2, #1
    1ff8:	5483      	strb	r3, [r0, r2]
    1ffa:	6603      	str	r3, [r0, #96]	; 0x60
    1ffc:	3a1a      	subs	r2, #26
    1ffe:	5083      	str	r3, [r0, r2]
    2000:	321b      	adds	r2, #27
    2002:	5483      	strb	r3, [r0, r2]
    2004:	6643      	str	r3, [r0, #100]	; 0x64
    2006:	3a17      	subs	r2, #23
    2008:	5083      	str	r3, [r0, r2]
    200a:	3218      	adds	r2, #24
    200c:	5483      	strb	r3, [r0, r2]
    200e:	6683      	str	r3, [r0, #104]	; 0x68
    2010:	3a14      	subs	r2, #20
    2012:	5083      	str	r3, [r0, r2]
    2014:	3215      	adds	r2, #21
    2016:	5483      	strb	r3, [r0, r2]
    2018:	66c3      	str	r3, [r0, #108]	; 0x6c
    201a:	3a11      	subs	r2, #17
    201c:	5083      	str	r3, [r0, r2]
    201e:	3212      	adds	r2, #18
    2020:	5483      	strb	r3, [r0, r2]
    2022:	6703      	str	r3, [r0, #112]	; 0x70
    2024:	3a0e      	subs	r2, #14
    2026:	5083      	str	r3, [r0, r2]
    2028:	320f      	adds	r2, #15
    202a:	5483      	strb	r3, [r0, r2]
    202c:	6743      	str	r3, [r0, #116]	; 0x74
    202e:	3a0b      	subs	r2, #11
    2030:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    2032:	2101      	movs	r1, #1
    2034:	320c      	adds	r2, #12
    2036:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    2038:	3201      	adds	r2, #1
    203a:	5483      	strb	r3, [r0, r2]
}
    203c:	4770      	bx	lr
    203e:	46c0      	nop			; (mov r8, r8)
    2040:	00ffffff 	.word	0x00ffffff

00002044 <tcc_init>:
{
    2044:	b5f0      	push	{r4, r5, r6, r7, lr}
    2046:	46de      	mov	lr, fp
    2048:	4657      	mov	r7, sl
    204a:	464e      	mov	r6, r9
    204c:	4645      	mov	r5, r8
    204e:	b5e0      	push	{r5, r6, r7, lr}
    2050:	b08d      	sub	sp, #52	; 0x34
    2052:	0006      	movs	r6, r0
    2054:	000c      	movs	r4, r1
    2056:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    2058:	0008      	movs	r0, r1
    205a:	f7ff ff26 	bl	1eaa <_tcc_get_inst_index>
    205e:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    2060:	49cc      	ldr	r1, [pc, #816]	; (2394 <tcc_init+0x350>)
    2062:	6a0a      	ldr	r2, [r1, #32]
    2064:	2020      	movs	r0, #32
    2066:	4302      	orrs	r2, r0
    2068:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    206a:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    206c:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    206e:	0792      	lsls	r2, r2, #30
    2070:	d506      	bpl.n	2080 <tcc_init+0x3c>
}
    2072:	b00d      	add	sp, #52	; 0x34
    2074:	bc3c      	pop	{r2, r3, r4, r5}
    2076:	4690      	mov	r8, r2
    2078:	4699      	mov	r9, r3
    207a:	46a2      	mov	sl, r4
    207c:	46ab      	mov	fp, r5
    207e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2080:	6822      	ldr	r2, [r4, #0]
    2082:	2701      	movs	r7, #1
    2084:	4017      	ands	r7, r2
    2086:	d1f4      	bne.n	2072 <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    2088:	4ac3      	ldr	r2, [pc, #780]	; (2398 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    208a:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    208c:	6829      	ldr	r1, [r5, #0]
    208e:	4291      	cmp	r1, r2
    2090:	d8ef      	bhi.n	2072 <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    2092:	6869      	ldr	r1, [r5, #4]
    2094:	4291      	cmp	r1, r2
    2096:	d8ec      	bhi.n	2072 <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    2098:	69e9      	ldr	r1, [r5, #28]
    209a:	4291      	cmp	r1, r2
    209c:	d900      	bls.n	20a0 <tcc_init+0x5c>
    209e:	e175      	b.n	238c <tcc_init+0x348>
    20a0:	6a29      	ldr	r1, [r5, #32]
    20a2:	4291      	cmp	r1, r2
    20a4:	d900      	bls.n	20a8 <tcc_init+0x64>
    20a6:	e173      	b.n	2390 <tcc_init+0x34c>
    20a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    20aa:	4291      	cmp	r1, r2
    20ac:	d900      	bls.n	20b0 <tcc_init+0x6c>
    20ae:	e17d      	b.n	23ac <tcc_init+0x368>
    20b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    20b2:	4291      	cmp	r1, r2
    20b4:	d900      	bls.n	20b8 <tcc_init+0x74>
    20b6:	e17b      	b.n	23b0 <tcc_init+0x36c>
		if (config->capture.channel_function[i] ==
    20b8:	7c2a      	ldrb	r2, [r5, #16]
    20ba:	3a01      	subs	r2, #1
    20bc:	4250      	negs	r0, r2
    20be:	4150      	adcs	r0, r2
    20c0:	0602      	lsls	r2, r0, #24
    20c2:	9201      	str	r2, [sp, #4]
    20c4:	7c6a      	ldrb	r2, [r5, #17]
    20c6:	2a01      	cmp	r2, #1
    20c8:	d031      	beq.n	212e <tcc_init+0xea>
    20ca:	7caa      	ldrb	r2, [r5, #18]
    20cc:	2a01      	cmp	r2, #1
    20ce:	d034      	beq.n	213a <tcc_init+0xf6>
    20d0:	7cea      	ldrb	r2, [r5, #19]
    20d2:	2a01      	cmp	r2, #1
    20d4:	d037      	beq.n	2146 <tcc_init+0x102>
	if (config->run_in_standby) {
    20d6:	22a1      	movs	r2, #161	; 0xa1
    20d8:	5caa      	ldrb	r2, [r5, r2]
    20da:	2a00      	cmp	r2, #0
    20dc:	d004      	beq.n	20e8 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    20de:	2280      	movs	r2, #128	; 0x80
    20e0:	0112      	lsls	r2, r2, #4
    20e2:	9901      	ldr	r1, [sp, #4]
    20e4:	4311      	orrs	r1, r2
    20e6:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    20e8:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    20ea:	1e51      	subs	r1, r2, #1
    20ec:	418a      	sbcs	r2, r1
    20ee:	0092      	lsls	r2, r2, #2
    20f0:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    20f2:	7a6a      	ldrb	r2, [r5, #9]
    20f4:	2a01      	cmp	r2, #1
    20f6:	d02c      	beq.n	2152 <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    20f8:	2235      	movs	r2, #53	; 0x35
    20fa:	5caa      	ldrb	r2, [r5, r2]
    20fc:	2a03      	cmp	r2, #3
    20fe:	d900      	bls.n	2102 <tcc_init+0xbe>
    2100:	e158      	b.n	23b4 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
    2102:	212c      	movs	r1, #44	; 0x2c
    2104:	5c69      	ldrb	r1, [r5, r1]
    2106:	290f      	cmp	r1, #15
    2108:	d900      	bls.n	210c <tcc_init+0xc8>
    210a:	e153      	b.n	23b4 <tcc_init+0x370>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    210c:	7b28      	ldrb	r0, [r5, #12]
    210e:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2110:	7ae8      	ldrb	r0, [r5, #11]
    2112:	9005      	str	r0, [sp, #20]
    2114:	202d      	movs	r0, #45	; 0x2d
    2116:	4682      	mov	sl, r0
    2118:	44aa      	add	sl, r5
    211a:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    211c:	9702      	str	r7, [sp, #8]
    211e:	4684      	mov	ip, r0
    2120:	9606      	str	r6, [sp, #24]
    2122:	000e      	movs	r6, r1
    2124:	46a0      	mov	r8, r4
    2126:	4654      	mov	r4, sl
    2128:	46a9      	mov	r9, r5
    212a:	9307      	str	r3, [sp, #28]
    212c:	e047      	b.n	21be <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    212e:	2280      	movs	r2, #128	; 0x80
    2130:	0492      	lsls	r2, r2, #18
    2132:	9901      	ldr	r1, [sp, #4]
    2134:	4311      	orrs	r1, r2
    2136:	9101      	str	r1, [sp, #4]
    2138:	e7c7      	b.n	20ca <tcc_init+0x86>
    213a:	2280      	movs	r2, #128	; 0x80
    213c:	04d2      	lsls	r2, r2, #19
    213e:	9901      	ldr	r1, [sp, #4]
    2140:	4311      	orrs	r1, r2
    2142:	9101      	str	r1, [sp, #4]
    2144:	e7c4      	b.n	20d0 <tcc_init+0x8c>
    2146:	2280      	movs	r2, #128	; 0x80
    2148:	0512      	lsls	r2, r2, #20
    214a:	9901      	ldr	r1, [sp, #4]
    214c:	4311      	orrs	r1, r2
    214e:	9101      	str	r1, [sp, #4]
    2150:	e7c1      	b.n	20d6 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    2152:	9903      	ldr	r1, [sp, #12]
    2154:	4311      	orrs	r1, r2
    2156:	9103      	str	r1, [sp, #12]
    2158:	e7ce      	b.n	20f8 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    215a:	0292      	lsls	r2, r2, #10
    215c:	25c0      	movs	r5, #192	; 0xc0
    215e:	012d      	lsls	r5, r5, #4
    2160:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2162:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    2164:	790d      	ldrb	r5, [r1, #4]
    2166:	2603      	movs	r6, #3
    2168:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    216a:	4332      	orrs	r2, r6
    216c:	4655      	mov	r5, sl
    216e:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    2170:	794e      	ldrb	r6, [r1, #5]
    2172:	0176      	lsls	r6, r6, #5
    2174:	2560      	movs	r5, #96	; 0x60
    2176:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2178:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    217a:	798d      	ldrb	r5, [r1, #6]
    217c:	022d      	lsls	r5, r5, #8
    217e:	26c0      	movs	r6, #192	; 0xc0
    2180:	00b6      	lsls	r6, r6, #2
    2182:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2184:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2186:	79cd      	ldrb	r5, [r1, #7]
    2188:	032d      	lsls	r5, r5, #12
    218a:	26e0      	movs	r6, #224	; 0xe0
    218c:	01f6      	lsls	r6, r6, #7
    218e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2190:	432a      	orrs	r2, r5
    2192:	4310      	orrs	r0, r2
    2194:	4303      	orrs	r3, r0
    2196:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    2198:	ab08      	add	r3, sp, #32
    219a:	4662      	mov	r2, ip
    219c:	2008      	movs	r0, #8
    219e:	181b      	adds	r3, r3, r0
    21a0:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    21a2:	2a04      	cmp	r2, #4
    21a4:	d028      	beq.n	21f8 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    21a6:	7c8a      	ldrb	r2, [r1, #18]
    21a8:	2a03      	cmp	r2, #3
    21aa:	d900      	bls.n	21ae <tcc_init+0x16a>
    21ac:	e102      	b.n	23b4 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
    21ae:	7a4e      	ldrb	r6, [r1, #9]
    21b0:	340a      	adds	r4, #10
    21b2:	2304      	movs	r3, #4
    21b4:	469a      	mov	sl, r3
    21b6:	44d4      	add	ip, sl
    21b8:	2e0f      	cmp	r6, #15
    21ba:	d900      	bls.n	21be <tcc_init+0x17a>
    21bc:	e0fa      	b.n	23b4 <tcc_init+0x370>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    21be:	0636      	lsls	r6, r6, #24
    21c0:	23f0      	movs	r3, #240	; 0xf0
    21c2:	051b      	lsls	r3, r3, #20
    21c4:	401e      	ands	r6, r3
    21c6:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    21c8:	7825      	ldrb	r5, [r4, #0]
    21ca:	042d      	lsls	r5, r5, #16
    21cc:	23ff      	movs	r3, #255	; 0xff
    21ce:	041b      	lsls	r3, r3, #16
    21d0:	401d      	ands	r5, r3
    21d2:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    21d4:	7863      	ldrb	r3, [r4, #1]
    21d6:	2080      	movs	r0, #128	; 0x80
    21d8:	2b00      	cmp	r3, #0
    21da:	d100      	bne.n	21de <tcc_init+0x19a>
    21dc:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    21de:	788f      	ldrb	r7, [r1, #2]
    21e0:	2308      	movs	r3, #8
    21e2:	2f00      	cmp	r7, #0
    21e4:	d100      	bne.n	21e8 <tcc_init+0x1a4>
    21e6:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    21e8:	78cf      	ldrb	r7, [r1, #3]
    21ea:	46bb      	mov	fp, r7
    21ec:	2710      	movs	r7, #16
    21ee:	465d      	mov	r5, fp
    21f0:	2d00      	cmp	r5, #0
    21f2:	d1b2      	bne.n	215a <tcc_init+0x116>
    21f4:	9f02      	ldr	r7, [sp, #8]
    21f6:	e7b0      	b.n	215a <tcc_init+0x116>
    21f8:	9e06      	ldr	r6, [sp, #24]
    21fa:	4644      	mov	r4, r8
    21fc:	464d      	mov	r5, r9
    21fe:	9b07      	ldr	r3, [sp, #28]
    2200:	4648      	mov	r0, r9
    2202:	3050      	adds	r0, #80	; 0x50
    2204:	4649      	mov	r1, r9
    2206:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2208:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    220a:	2780      	movs	r7, #128	; 0x80
    220c:	027f      	lsls	r7, r7, #9
    220e:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2210:	2701      	movs	r7, #1
    2212:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2214:	2702      	movs	r7, #2
    2216:	37ff      	adds	r7, #255	; 0xff
    2218:	46ba      	mov	sl, r7
    221a:	001f      	movs	r7, r3
    221c:	0013      	movs	r3, r2
    221e:	46a0      	mov	r8, r4
    2220:	003c      	movs	r4, r7
    2222:	e007      	b.n	2234 <tcc_init+0x1f0>
    2224:	4657      	mov	r7, sl
    2226:	4097      	lsls	r7, r2
    2228:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    222a:	3201      	adds	r2, #1
    222c:	3001      	adds	r0, #1
    222e:	3102      	adds	r1, #2
    2230:	2a08      	cmp	r2, #8
    2232:	d00e      	beq.n	2252 <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    2234:	7807      	ldrb	r7, [r0, #0]
    2236:	2f00      	cmp	r7, #0
    2238:	d002      	beq.n	2240 <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    223a:	4667      	mov	r7, ip
    223c:	4097      	lsls	r7, r2
    223e:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2240:	780f      	ldrb	r7, [r1, #0]
    2242:	2f00      	cmp	r7, #0
    2244:	d0f1      	beq.n	222a <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    2246:	2f02      	cmp	r7, #2
    2248:	d0ec      	beq.n	2224 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    224a:	464f      	mov	r7, r9
    224c:	4097      	lsls	r7, r2
    224e:	433b      	orrs	r3, r7
    2250:	e7eb      	b.n	222a <tcc_init+0x1e6>
    2252:	0022      	movs	r2, r4
    2254:	4644      	mov	r4, r8
    2256:	4698      	mov	r8, r3
    2258:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    225a:	7e6a      	ldrb	r2, [r5, #25]
    225c:	0112      	lsls	r2, r2, #4
    225e:	2130      	movs	r1, #48	; 0x30
    2260:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    2262:	7e28      	ldrb	r0, [r5, #24]
    2264:	2207      	movs	r2, #7
    2266:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2268:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    226a:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    226c:	2080      	movs	r0, #128	; 0x80
    226e:	0240      	lsls	r0, r0, #9
    2270:	000f      	movs	r7, r1
    2272:	e002      	b.n	227a <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2274:	3201      	adds	r2, #1
    2276:	2a04      	cmp	r2, #4
    2278:	d007      	beq.n	228a <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    227a:	18a9      	adds	r1, r5, r2
    227c:	7d09      	ldrb	r1, [r1, #20]
    227e:	2900      	cmp	r1, #0
    2280:	d0f8      	beq.n	2274 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    2282:	0001      	movs	r1, r0
    2284:	4091      	lsls	r1, r2
    2286:	430f      	orrs	r7, r1
    2288:	e7f4      	b.n	2274 <tcc_init+0x230>
    228a:	46ba      	mov	sl, r7
    228c:	1d32      	adds	r2, r6, #4
    228e:	0030      	movs	r0, r6
    2290:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    2292:	2100      	movs	r1, #0
    2294:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2296:	4290      	cmp	r0, r2
    2298:	d1fc      	bne.n	2294 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    229a:	2200      	movs	r2, #0
    229c:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    229e:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    22a0:	009b      	lsls	r3, r3, #2
    22a2:	4a3e      	ldr	r2, [pc, #248]	; (239c <tcc_init+0x358>)
    22a4:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    22a6:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    22a8:	23a0      	movs	r3, #160	; 0xa0
    22aa:	5cea      	ldrb	r2, [r5, r3]
    22ac:	3b64      	subs	r3, #100	; 0x64
    22ae:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    22b0:	a909      	add	r1, sp, #36	; 0x24
    22b2:	7aab      	ldrb	r3, [r5, #10]
    22b4:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    22b6:	2011      	movs	r0, #17
    22b8:	f7ff fd62 	bl	1d80 <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    22bc:	2011      	movs	r0, #17
    22be:	f7ff fd21 	bl	1d04 <system_gclk_chan_enable>
    22c2:	002f      	movs	r7, r5
    22c4:	3798      	adds	r7, #152	; 0x98
    22c6:	002e      	movs	r6, r5
    22c8:	3658      	adds	r6, #88	; 0x58
    22ca:	2378      	movs	r3, #120	; 0x78
    22cc:	4699      	mov	r9, r3
    22ce:	44a9      	add	r9, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22d0:	3b77      	subs	r3, #119	; 0x77
    22d2:	469b      	mov	fp, r3
	config->powersave    = false;
    22d4:	0023      	movs	r3, r4
    22d6:	464c      	mov	r4, r9
    22d8:	4699      	mov	r9, r3
    22da:	e003      	b.n	22e4 <tcc_init+0x2a0>
    22dc:	3701      	adds	r7, #1
    22de:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    22e0:	42b4      	cmp	r4, r6
    22e2:	d012      	beq.n	230a <tcc_init+0x2c6>
		if (!config->pins.enable_wave_out_pin[i]) {
    22e4:	783b      	ldrb	r3, [r7, #0]
    22e6:	2b00      	cmp	r3, #0
    22e8:	d0f8      	beq.n	22dc <tcc_init+0x298>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22ea:	ab08      	add	r3, sp, #32
    22ec:	465a      	mov	r2, fp
    22ee:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    22f0:	2200      	movs	r2, #0
    22f2:	70da      	strb	r2, [r3, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    22f4:	2220      	movs	r2, #32
    22f6:	18b2      	adds	r2, r6, r2
    22f8:	7812      	ldrb	r2, [r2, #0]
    22fa:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    22fc:	465a      	mov	r2, fp
    22fe:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    2300:	7830      	ldrb	r0, [r6, #0]
    2302:	0019      	movs	r1, r3
    2304:	f7ff fdb0 	bl	1e68 <system_pinmux_pin_set_config>
    2308:	e7e8      	b.n	22dc <tcc_init+0x298>
    230a:	464c      	mov	r4, r9
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    230c:	9b04      	ldr	r3, [sp, #16]
    230e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2310:	9a05      	ldr	r2, [sp, #20]
    2312:	0212      	lsls	r2, r2, #8
    2314:	4313      	orrs	r3, r2
    2316:	9a01      	ldr	r2, [sp, #4]
    2318:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    231a:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    231c:	2204      	movs	r2, #4
    231e:	68a3      	ldr	r3, [r4, #8]
    2320:	421a      	tst	r2, r3
    2322:	d1fc      	bne.n	231e <tcc_init+0x2da>
	hw->CTRLBCLR.reg = 0xFF;
    2324:	23ff      	movs	r3, #255	; 0xff
    2326:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2328:	2204      	movs	r2, #4
    232a:	68a3      	ldr	r3, [r4, #8]
    232c:	421a      	tst	r2, r3
    232e:	d1fc      	bne.n	232a <tcc_init+0x2e6>
	hw->CTRLBSET.reg = ctrlb;
    2330:	466b      	mov	r3, sp
    2332:	7b1b      	ldrb	r3, [r3, #12]
    2334:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    2336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2338:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    233a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    233c:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    233e:	4643      	mov	r3, r8
    2340:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    2342:	4a17      	ldr	r2, [pc, #92]	; (23a0 <tcc_init+0x35c>)
    2344:	68a3      	ldr	r3, [r4, #8]
    2346:	4213      	tst	r3, r2
    2348:	d1fc      	bne.n	2344 <tcc_init+0x300>
	hw->WAVE.reg = waves[0];
    234a:	4653      	mov	r3, sl
    234c:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    234e:	2210      	movs	r2, #16
    2350:	68a3      	ldr	r3, [r4, #8]
    2352:	421a      	tst	r2, r3
    2354:	d1fc      	bne.n	2350 <tcc_init+0x30c>
	hw->COUNT.reg = config->counter.count;
    2356:	682b      	ldr	r3, [r5, #0]
    2358:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    235a:	4a12      	ldr	r2, [pc, #72]	; (23a4 <tcc_init+0x360>)
    235c:	68a3      	ldr	r3, [r4, #8]
    235e:	4213      	tst	r3, r2
    2360:	d1fc      	bne.n	235c <tcc_init+0x318>
	hw->PER.reg = (config->counter.period);
    2362:	686b      	ldr	r3, [r5, #4]
    2364:	6423      	str	r3, [r4, #64]	; 0x40
    2366:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2368:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    236a:	480f      	ldr	r0, [pc, #60]	; (23a8 <tcc_init+0x364>)
    236c:	0002      	movs	r2, r0
    236e:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    2370:	68a3      	ldr	r3, [r4, #8]
    2372:	421a      	tst	r2, r3
    2374:	d1fc      	bne.n	2370 <tcc_init+0x32c>
		hw->CC[i].reg = (config->compare.match[i]);
    2376:	cd04      	ldmia	r5!, {r2}
    2378:	000b      	movs	r3, r1
    237a:	3310      	adds	r3, #16
    237c:	009b      	lsls	r3, r3, #2
    237e:	18e3      	adds	r3, r4, r3
    2380:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2382:	3101      	adds	r1, #1
    2384:	2904      	cmp	r1, #4
    2386:	d1f1      	bne.n	236c <tcc_init+0x328>
	return STATUS_OK;
    2388:	2000      	movs	r0, #0
    238a:	e672      	b.n	2072 <tcc_init+0x2e>
			return STATUS_ERR_INVALID_ARG;
    238c:	2017      	movs	r0, #23
    238e:	e670      	b.n	2072 <tcc_init+0x2e>
    2390:	2017      	movs	r0, #23
    2392:	e66e      	b.n	2072 <tcc_init+0x2e>
    2394:	40000400 	.word	0x40000400
    2398:	00ffffff 	.word	0x00ffffff
    239c:	20000224 	.word	0x20000224
    23a0:	00020040 	.word	0x00020040
    23a4:	00040080 	.word	0x00040080
    23a8:	00080100 	.word	0x00080100
    23ac:	2017      	movs	r0, #23
    23ae:	e660      	b.n	2072 <tcc_init+0x2e>
    23b0:	2017      	movs	r0, #23
    23b2:	e65e      	b.n	2072 <tcc_init+0x2e>
    23b4:	2017      	movs	r0, #23
    23b6:	e65c      	b.n	2072 <tcc_init+0x2e>

000023b8 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    23b8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    23ba:	233c      	movs	r3, #60	; 0x3c
    23bc:	5cc3      	ldrb	r3, [r0, r3]
    23be:	f7ff fd77 	bl	1eb0 <_tcc_set_compare_value>
			module_inst->double_buffering_enabled);
}
    23c2:	bd10      	pop	{r4, pc}

000023c4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    23c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23c6:	46c6      	mov	lr, r8
    23c8:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    23ca:	0080      	lsls	r0, r0, #2
    23cc:	4b0e      	ldr	r3, [pc, #56]	; (2408 <_tcc_interrupt_handler+0x44>)
    23ce:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    23d0:	683b      	ldr	r3, [r7, #0]
    23d2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    23d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23d8:	4013      	ands	r3, r2
    23da:	401e      	ands	r6, r3
    23dc:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    23de:	4b0b      	ldr	r3, [pc, #44]	; (240c <_tcc_interrupt_handler+0x48>)
    23e0:	4698      	mov	r8, r3
    23e2:	e002      	b.n	23ea <_tcc_interrupt_handler+0x26>
    23e4:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    23e6:	2c30      	cmp	r4, #48	; 0x30
    23e8:	d00a      	beq.n	2400 <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    23ea:	4643      	mov	r3, r8
    23ec:	58e5      	ldr	r5, [r4, r3]
    23ee:	4235      	tst	r5, r6
    23f0:	d0f8      	beq.n	23e4 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    23f2:	193b      	adds	r3, r7, r4
    23f4:	685b      	ldr	r3, [r3, #4]
    23f6:	0038      	movs	r0, r7
    23f8:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    23fa:	683b      	ldr	r3, [r7, #0]
    23fc:	62dd      	str	r5, [r3, #44]	; 0x2c
    23fe:	e7f1      	b.n	23e4 <_tcc_interrupt_handler+0x20>
		}
	}
}
    2400:	bc04      	pop	{r2}
    2402:	4690      	mov	r8, r2
    2404:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2406:	46c0      	nop			; (mov r8, r8)
    2408:	20000224 	.word	0x20000224
    240c:	00002dc0 	.word	0x00002dc0

00002410 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2410:	b510      	push	{r4, lr}
    2412:	2000      	movs	r0, #0
    2414:	f7ff ffd6 	bl	23c4 <_tcc_interrupt_handler>
    2418:	bd10      	pop	{r4, pc}

0000241a <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    241a:	1c93      	adds	r3, r2, #2
    241c:	009b      	lsls	r3, r3, #2
    241e:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2420:	2a02      	cmp	r2, #2
    2422:	d009      	beq.n	2438 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2424:	2a03      	cmp	r2, #3
    2426:	d00c      	beq.n	2442 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2428:	2301      	movs	r3, #1
    242a:	4093      	lsls	r3, r2
    242c:	001a      	movs	r2, r3
    242e:	7e03      	ldrb	r3, [r0, #24]
    2430:	4313      	orrs	r3, r2
    2432:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2434:	2000      	movs	r0, #0
    2436:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2438:	7e03      	ldrb	r3, [r0, #24]
    243a:	2210      	movs	r2, #16
    243c:	4313      	orrs	r3, r2
    243e:	7603      	strb	r3, [r0, #24]
    2440:	e7f8      	b.n	2434 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2442:	7e03      	ldrb	r3, [r0, #24]
    2444:	2220      	movs	r2, #32
    2446:	4313      	orrs	r3, r2
    2448:	7603      	strb	r3, [r0, #24]
    244a:	e7f3      	b.n	2434 <tc_register_callback+0x1a>

0000244c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    244c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    244e:	0080      	lsls	r0, r0, #2
    2450:	4b16      	ldr	r3, [pc, #88]	; (24ac <_tc_interrupt_handler+0x60>)
    2452:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2454:	6823      	ldr	r3, [r4, #0]
    2456:	7b9d      	ldrb	r5, [r3, #14]
    2458:	7e22      	ldrb	r2, [r4, #24]
    245a:	7e63      	ldrb	r3, [r4, #25]
    245c:	4013      	ands	r3, r2
    245e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2460:	07eb      	lsls	r3, r5, #31
    2462:	d406      	bmi.n	2472 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2464:	07ab      	lsls	r3, r5, #30
    2466:	d40b      	bmi.n	2480 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2468:	06eb      	lsls	r3, r5, #27
    246a:	d410      	bmi.n	248e <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    246c:	06ab      	lsls	r3, r5, #26
    246e:	d415      	bmi.n	249c <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2470:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    2472:	0020      	movs	r0, r4
    2474:	68a3      	ldr	r3, [r4, #8]
    2476:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2478:	2301      	movs	r3, #1
    247a:	6822      	ldr	r2, [r4, #0]
    247c:	7393      	strb	r3, [r2, #14]
    247e:	e7f1      	b.n	2464 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2480:	0020      	movs	r0, r4
    2482:	68e3      	ldr	r3, [r4, #12]
    2484:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2486:	2302      	movs	r3, #2
    2488:	6822      	ldr	r2, [r4, #0]
    248a:	7393      	strb	r3, [r2, #14]
    248c:	e7ec      	b.n	2468 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    248e:	0020      	movs	r0, r4
    2490:	6923      	ldr	r3, [r4, #16]
    2492:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2494:	2310      	movs	r3, #16
    2496:	6822      	ldr	r2, [r4, #0]
    2498:	7393      	strb	r3, [r2, #14]
    249a:	e7e7      	b.n	246c <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    249c:	0020      	movs	r0, r4
    249e:	6963      	ldr	r3, [r4, #20]
    24a0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    24a2:	6823      	ldr	r3, [r4, #0]
    24a4:	2220      	movs	r2, #32
    24a6:	739a      	strb	r2, [r3, #14]
}
    24a8:	e7e2      	b.n	2470 <_tc_interrupt_handler+0x24>
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	20000228 	.word	0x20000228

000024b0 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    24b0:	b510      	push	{r4, lr}
    24b2:	2000      	movs	r0, #0
    24b4:	f7ff ffca 	bl	244c <_tc_interrupt_handler>
    24b8:	bd10      	pop	{r4, pc}

000024ba <TC2_Handler>:
    24ba:	b510      	push	{r4, lr}
    24bc:	2001      	movs	r0, #1
    24be:	f7ff ffc5 	bl	244c <_tc_interrupt_handler>
    24c2:	bd10      	pop	{r4, pc}

000024c4 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    24c4:	4b06      	ldr	r3, [pc, #24]	; (24e0 <_tc_get_inst_index+0x1c>)
    24c6:	4298      	cmp	r0, r3
    24c8:	d008      	beq.n	24dc <_tc_get_inst_index+0x18>
    24ca:	4a06      	ldr	r2, [pc, #24]	; (24e4 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    24cc:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    24ce:	4290      	cmp	r0, r2
    24d0:	d001      	beq.n	24d6 <_tc_get_inst_index+0x12>
}
    24d2:	0018      	movs	r0, r3
    24d4:	4770      	bx	lr
    24d6:	3301      	adds	r3, #1
			return i;
    24d8:	b2db      	uxtb	r3, r3
    24da:	e7fa      	b.n	24d2 <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    24dc:	2300      	movs	r3, #0
    24de:	e7fb      	b.n	24d8 <_tc_get_inst_index+0x14>
    24e0:	42001800 	.word	0x42001800
    24e4:	42001c00 	.word	0x42001c00

000024e8 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    24e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    24ea:	b085      	sub	sp, #20
    24ec:	0004      	movs	r4, r0
    24ee:	000d      	movs	r5, r1
    24f0:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    24f2:	0008      	movs	r0, r1
    24f4:	f7ff ffe6 	bl	24c4 <_tc_get_inst_index>
    24f8:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    24fa:	ab03      	add	r3, sp, #12
    24fc:	2212      	movs	r2, #18
    24fe:	701a      	strb	r2, [r3, #0]
    2500:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2502:	ab02      	add	r3, sp, #8
    2504:	322e      	adds	r2, #46	; 0x2e
    2506:	801a      	strh	r2, [r3, #0]
    2508:	3240      	adds	r2, #64	; 0x40
    250a:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    250c:	2300      	movs	r3, #0
    250e:	60a3      	str	r3, [r4, #8]
    2510:	60e3      	str	r3, [r4, #12]
    2512:	6123      	str	r3, [r4, #16]
    2514:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2516:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2518:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    251a:	0082      	lsls	r2, r0, #2
    251c:	4b78      	ldr	r3, [pc, #480]	; (2700 <tc_init+0x218>)
    251e:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2520:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2522:	78b3      	ldrb	r3, [r6, #2]
    2524:	2b08      	cmp	r3, #8
    2526:	d006      	beq.n	2536 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2528:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    252a:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    252c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    252e:	07db      	lsls	r3, r3, #31
    2530:	d505      	bpl.n	253e <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2532:	b005      	add	sp, #20
    2534:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2536:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2538:	07fa      	lsls	r2, r7, #31
    253a:	d4fa      	bmi.n	2532 <tc_init+0x4a>
    253c:	e7f4      	b.n	2528 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    253e:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    2540:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2542:	06db      	lsls	r3, r3, #27
    2544:	d4f5      	bmi.n	2532 <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2546:	882b      	ldrh	r3, [r5, #0]
    2548:	079b      	lsls	r3, r3, #30
    254a:	d4f2      	bmi.n	2532 <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    254c:	7c33      	ldrb	r3, [r6, #16]
    254e:	2b00      	cmp	r3, #0
    2550:	d000      	beq.n	2554 <tc_init+0x6c>
    2552:	e07a      	b.n	264a <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    2554:	7f33      	ldrb	r3, [r6, #28]
    2556:	2b00      	cmp	r3, #0
    2558:	d000      	beq.n	255c <tc_init+0x74>
    255a:	e082      	b.n	2662 <tc_init+0x17a>
    255c:	4969      	ldr	r1, [pc, #420]	; (2704 <tc_init+0x21c>)
    255e:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    2560:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2562:	ab02      	add	r3, sp, #8
    2564:	5ad3      	ldrh	r3, [r2, r3]
    2566:	4303      	orrs	r3, r0
    2568:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    256a:	78b3      	ldrb	r3, [r6, #2]
    256c:	2b08      	cmp	r3, #8
    256e:	d100      	bne.n	2572 <tc_init+0x8a>
    2570:	e087      	b.n	2682 <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    2572:	7833      	ldrb	r3, [r6, #0]
    2574:	466a      	mov	r2, sp
    2576:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2578:	ab03      	add	r3, sp, #12
    257a:	5ddf      	ldrb	r7, [r3, r7]
    257c:	4669      	mov	r1, sp
    257e:	0038      	movs	r0, r7
    2580:	f7ff fbfe 	bl	1d80 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2584:	0038      	movs	r0, r7
    2586:	f7ff fbbd 	bl	1d04 <system_gclk_chan_enable>
	ctrla_tmp =
    258a:	8931      	ldrh	r1, [r6, #8]
    258c:	88b3      	ldrh	r3, [r6, #4]
    258e:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    2590:	78b1      	ldrb	r1, [r6, #2]
    2592:	79b2      	ldrb	r2, [r6, #6]
    2594:	4311      	orrs	r1, r2
	ctrla_tmp =
    2596:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2598:	7873      	ldrb	r3, [r6, #1]
    259a:	2b00      	cmp	r3, #0
    259c:	d002      	beq.n	25a4 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    259e:	2380      	movs	r3, #128	; 0x80
    25a0:	011b      	lsls	r3, r3, #4
    25a2:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25a4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25a6:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25a8:	b25b      	sxtb	r3, r3
    25aa:	2b00      	cmp	r3, #0
    25ac:	dbfb      	blt.n	25a6 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    25ae:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    25b0:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    25b2:	1e4b      	subs	r3, r1, #1
    25b4:	4199      	sbcs	r1, r3
    25b6:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    25b8:	7bb3      	ldrb	r3, [r6, #14]
    25ba:	2b00      	cmp	r3, #0
    25bc:	d001      	beq.n	25c2 <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25be:	2301      	movs	r3, #1
    25c0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25c2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25c4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25c6:	b25b      	sxtb	r3, r3
    25c8:	2b00      	cmp	r3, #0
    25ca:	dbfb      	blt.n	25c4 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25cc:	23ff      	movs	r3, #255	; 0xff
    25ce:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    25d0:	2900      	cmp	r1, #0
    25d2:	d005      	beq.n	25e0 <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25d4:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25d6:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    25d8:	b25b      	sxtb	r3, r3
    25da:	2b00      	cmp	r3, #0
    25dc:	dbfb      	blt.n	25d6 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    25de:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    25e0:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    25e2:	7af3      	ldrb	r3, [r6, #11]
    25e4:	2b00      	cmp	r3, #0
    25e6:	d001      	beq.n	25ec <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25e8:	2310      	movs	r3, #16
    25ea:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    25ec:	7b33      	ldrb	r3, [r6, #12]
    25ee:	2b00      	cmp	r3, #0
    25f0:	d001      	beq.n	25f6 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25f2:	2320      	movs	r3, #32
    25f4:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25f6:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25f8:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25fa:	b25b      	sxtb	r3, r3
    25fc:	2b00      	cmp	r3, #0
    25fe:	dbfb      	blt.n	25f8 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2600:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2602:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2604:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2606:	b25b      	sxtb	r3, r3
    2608:	2b00      	cmp	r3, #0
    260a:	dbfb      	blt.n	2604 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    260c:	7923      	ldrb	r3, [r4, #4]
    260e:	2b04      	cmp	r3, #4
    2610:	d03f      	beq.n	2692 <tc_init+0x1aa>
    2612:	2b08      	cmp	r3, #8
    2614:	d05e      	beq.n	26d4 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    2616:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2618:	2b00      	cmp	r3, #0
    261a:	d000      	beq.n	261e <tc_init+0x136>
    261c:	e789      	b.n	2532 <tc_init+0x4a>
    261e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2620:	b25b      	sxtb	r3, r3
    2622:	2b00      	cmp	r3, #0
    2624:	dbfb      	blt.n	261e <tc_init+0x136>
				= config->counter_16_bit.value;
    2626:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2628:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    262a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    262c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    262e:	b25b      	sxtb	r3, r3
    2630:	2b00      	cmp	r3, #0
    2632:	dbfb      	blt.n	262c <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    2634:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2636:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2638:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    263a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    263c:	b25b      	sxtb	r3, r3
    263e:	2b00      	cmp	r3, #0
    2640:	dbfb      	blt.n	263a <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    2642:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2644:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2646:	2000      	movs	r0, #0
    2648:	e773      	b.n	2532 <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    264a:	a901      	add	r1, sp, #4
    264c:	2301      	movs	r3, #1
    264e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2650:	2200      	movs	r2, #0
    2652:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2654:	7e32      	ldrb	r2, [r6, #24]
    2656:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2658:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    265a:	7d30      	ldrb	r0, [r6, #20]
    265c:	f7ff fc04 	bl	1e68 <system_pinmux_pin_set_config>
    2660:	e778      	b.n	2554 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2662:	a901      	add	r1, sp, #4
    2664:	2301      	movs	r3, #1
    2666:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2668:	2200      	movs	r2, #0
    266a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    266c:	3224      	adds	r2, #36	; 0x24
    266e:	18b2      	adds	r2, r6, r2
    2670:	7812      	ldrb	r2, [r2, #0]
    2672:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2674:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2676:	331f      	adds	r3, #31
    2678:	18f3      	adds	r3, r6, r3
    267a:	7818      	ldrb	r0, [r3, #0]
    267c:	f7ff fbf4 	bl	1e68 <system_pinmux_pin_set_config>
    2680:	e76c      	b.n	255c <tc_init+0x74>
    2682:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2684:	1c7a      	adds	r2, r7, #1
    2686:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2688:	ab02      	add	r3, sp, #8
    268a:	5ad3      	ldrh	r3, [r2, r3]
    268c:	4303      	orrs	r3, r0
    268e:	620b      	str	r3, [r1, #32]
    2690:	e76f      	b.n	2572 <tc_init+0x8a>
    2692:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2694:	b25b      	sxtb	r3, r3
    2696:	2b00      	cmp	r3, #0
    2698:	dbfb      	blt.n	2692 <tc_init+0x1aa>
					config->counter_8_bit.value;
    269a:	2328      	movs	r3, #40	; 0x28
    269c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    269e:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26a0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26a4:	b25b      	sxtb	r3, r3
    26a6:	2b00      	cmp	r3, #0
    26a8:	dbfb      	blt.n	26a2 <tc_init+0x1ba>
					config->counter_8_bit.period;
    26aa:	2329      	movs	r3, #41	; 0x29
    26ac:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    26ae:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26b0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26b2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26b4:	b25b      	sxtb	r3, r3
    26b6:	2b00      	cmp	r3, #0
    26b8:	dbfb      	blt.n	26b2 <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    26ba:	232a      	movs	r3, #42	; 0x2a
    26bc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    26be:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26c2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26c4:	b25b      	sxtb	r3, r3
    26c6:	2b00      	cmp	r3, #0
    26c8:	dbfb      	blt.n	26c2 <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    26ca:	232b      	movs	r3, #43	; 0x2b
    26cc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    26ce:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    26d0:	2000      	movs	r0, #0
    26d2:	e72e      	b.n	2532 <tc_init+0x4a>
    26d4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26d6:	b25b      	sxtb	r3, r3
    26d8:	2b00      	cmp	r3, #0
    26da:	dbfb      	blt.n	26d4 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    26dc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    26de:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26e0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26e2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26e4:	b25b      	sxtb	r3, r3
    26e6:	2b00      	cmp	r3, #0
    26e8:	dbfb      	blt.n	26e2 <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    26ea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    26ec:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26f0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26f2:	b25b      	sxtb	r3, r3
    26f4:	2b00      	cmp	r3, #0
    26f6:	dbfb      	blt.n	26f0 <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    26f8:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    26fa:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    26fc:	2000      	movs	r0, #0
    26fe:	e718      	b.n	2532 <tc_init+0x4a>
    2700:	20000228 	.word	0x20000228
    2704:	40000400 	.word	0x40000400

00002708 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2708:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    270a:	6804      	ldr	r4, [r0, #0]
    270c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    270e:	b25b      	sxtb	r3, r3
    2710:	2b00      	cmp	r3, #0
    2712:	dbfb      	blt.n	270c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2714:	7903      	ldrb	r3, [r0, #4]
    2716:	2b04      	cmp	r3, #4
    2718:	d005      	beq.n	2726 <tc_set_compare_value+0x1e>
    271a:	2b08      	cmp	r3, #8
    271c:	d014      	beq.n	2748 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    271e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2720:	2b00      	cmp	r3, #0
    2722:	d008      	beq.n	2736 <tc_set_compare_value+0x2e>
}
    2724:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2726:	2017      	movs	r0, #23
			if (channel_index <
    2728:	2901      	cmp	r1, #1
    272a:	d8fb      	bhi.n	2724 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    272c:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    272e:	1861      	adds	r1, r4, r1
    2730:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    2732:	2000      	movs	r0, #0
    2734:	e7f6      	b.n	2724 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2736:	2017      	movs	r0, #23
			if (channel_index <
    2738:	2901      	cmp	r1, #1
    273a:	d8f3      	bhi.n	2724 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    273c:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    273e:	310c      	adds	r1, #12
    2740:	0049      	lsls	r1, r1, #1
    2742:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    2744:	2000      	movs	r0, #0
    2746:	e7ed      	b.n	2724 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2748:	2017      	movs	r0, #23
			if (channel_index <
    274a:	2901      	cmp	r1, #1
    274c:	d8ea      	bhi.n	2724 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    274e:	3106      	adds	r1, #6
    2750:	0089      	lsls	r1, r1, #2
    2752:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2754:	2000      	movs	r0, #0
    2756:	e7e5      	b.n	2724 <tc_set_compare_value+0x1c>

00002758 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2758:	e7fe      	b.n	2758 <Dummy_Handler>
	...

0000275c <Reset_Handler>:
{
    275c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    275e:	4a2a      	ldr	r2, [pc, #168]	; (2808 <Reset_Handler+0xac>)
    2760:	4b2a      	ldr	r3, [pc, #168]	; (280c <Reset_Handler+0xb0>)
    2762:	429a      	cmp	r2, r3
    2764:	d011      	beq.n	278a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2766:	001a      	movs	r2, r3
    2768:	4b29      	ldr	r3, [pc, #164]	; (2810 <Reset_Handler+0xb4>)
    276a:	429a      	cmp	r2, r3
    276c:	d20d      	bcs.n	278a <Reset_Handler+0x2e>
    276e:	4a29      	ldr	r2, [pc, #164]	; (2814 <Reset_Handler+0xb8>)
    2770:	3303      	adds	r3, #3
    2772:	1a9b      	subs	r3, r3, r2
    2774:	089b      	lsrs	r3, r3, #2
    2776:	3301      	adds	r3, #1
    2778:	009b      	lsls	r3, r3, #2
    277a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    277c:	4823      	ldr	r0, [pc, #140]	; (280c <Reset_Handler+0xb0>)
    277e:	4922      	ldr	r1, [pc, #136]	; (2808 <Reset_Handler+0xac>)
    2780:	588c      	ldr	r4, [r1, r2]
    2782:	5084      	str	r4, [r0, r2]
    2784:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2786:	429a      	cmp	r2, r3
    2788:	d1fa      	bne.n	2780 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    278a:	4a23      	ldr	r2, [pc, #140]	; (2818 <Reset_Handler+0xbc>)
    278c:	4b23      	ldr	r3, [pc, #140]	; (281c <Reset_Handler+0xc0>)
    278e:	429a      	cmp	r2, r3
    2790:	d20a      	bcs.n	27a8 <Reset_Handler+0x4c>
    2792:	43d3      	mvns	r3, r2
    2794:	4921      	ldr	r1, [pc, #132]	; (281c <Reset_Handler+0xc0>)
    2796:	185b      	adds	r3, r3, r1
    2798:	2103      	movs	r1, #3
    279a:	438b      	bics	r3, r1
    279c:	3304      	adds	r3, #4
    279e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    27a0:	2100      	movs	r1, #0
    27a2:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    27a4:	4293      	cmp	r3, r2
    27a6:	d1fc      	bne.n	27a2 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    27a8:	4a1d      	ldr	r2, [pc, #116]	; (2820 <Reset_Handler+0xc4>)
    27aa:	21ff      	movs	r1, #255	; 0xff
    27ac:	4b1d      	ldr	r3, [pc, #116]	; (2824 <Reset_Handler+0xc8>)
    27ae:	438b      	bics	r3, r1
    27b0:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    27b2:	39fd      	subs	r1, #253	; 0xfd
    27b4:	2390      	movs	r3, #144	; 0x90
    27b6:	005b      	lsls	r3, r3, #1
    27b8:	4a1b      	ldr	r2, [pc, #108]	; (2828 <Reset_Handler+0xcc>)
    27ba:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    27bc:	4a1b      	ldr	r2, [pc, #108]	; (282c <Reset_Handler+0xd0>)
    27be:	78d3      	ldrb	r3, [r2, #3]
    27c0:	2503      	movs	r5, #3
    27c2:	43ab      	bics	r3, r5
    27c4:	2402      	movs	r4, #2
    27c6:	4323      	orrs	r3, r4
    27c8:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    27ca:	78d3      	ldrb	r3, [r2, #3]
    27cc:	270c      	movs	r7, #12
    27ce:	43bb      	bics	r3, r7
    27d0:	2608      	movs	r6, #8
    27d2:	4333      	orrs	r3, r6
    27d4:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    27d6:	4b16      	ldr	r3, [pc, #88]	; (2830 <Reset_Handler+0xd4>)
    27d8:	7b98      	ldrb	r0, [r3, #14]
    27da:	2230      	movs	r2, #48	; 0x30
    27dc:	4390      	bics	r0, r2
    27de:	2220      	movs	r2, #32
    27e0:	4310      	orrs	r0, r2
    27e2:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27e4:	7b99      	ldrb	r1, [r3, #14]
    27e6:	43b9      	bics	r1, r7
    27e8:	4331      	orrs	r1, r6
    27ea:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27ec:	7b9a      	ldrb	r2, [r3, #14]
    27ee:	43aa      	bics	r2, r5
    27f0:	4322      	orrs	r2, r4
    27f2:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    27f4:	4a0f      	ldr	r2, [pc, #60]	; (2834 <Reset_Handler+0xd8>)
    27f6:	6853      	ldr	r3, [r2, #4]
    27f8:	2180      	movs	r1, #128	; 0x80
    27fa:	430b      	orrs	r3, r1
    27fc:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27fe:	f000 f9e5 	bl	2bcc <__libc_init_array>
        main();
    2802:	f000 f94f 	bl	2aa4 <main>
    2806:	e7fe      	b.n	2806 <Reset_Handler+0xaa>
    2808:	00002e4c 	.word	0x00002e4c
    280c:	20000000 	.word	0x20000000
    2810:	20000020 	.word	0x20000020
    2814:	20000004 	.word	0x20000004
    2818:	20000020 	.word	0x20000020
    281c:	20000258 	.word	0x20000258
    2820:	e000ed00 	.word	0xe000ed00
    2824:	00000000 	.word	0x00000000
    2828:	41007000 	.word	0x41007000
    282c:	41005000 	.word	0x41005000
    2830:	41004800 	.word	0x41004800
    2834:	41004000 	.word	0x41004000

00002838 <set_color_green_indication>:
#define BUFFER_SET_COLOR_BLUE_PWM_TIMER                                        \
  { 0x02, 0x19 }
#define BUFFER_SET_COLOR_BLUE_PWM_FLASH                                        \
  { 0x01, 0x82 }

void set_color_green_indication(void) {
    2838:	b530      	push	{r4, r5, lr}
    283a:	b083      	sub	sp, #12
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    283c:	aa01      	add	r2, sp, #4
    283e:	4b09      	ldr	r3, [pc, #36]	; (2864 <set_color_green_indication+0x2c>)
    2840:	881b      	ldrh	r3, [r3, #0]
    2842:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_green;
    2844:	4b08      	ldr	r3, [pc, #32]	; (2868 <set_color_green_indication+0x30>)
    2846:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2848:	2231      	movs	r2, #49	; 0x31
    284a:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    284c:	3a2f      	subs	r2, #47	; 0x2f
    284e:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2850:	001d      	movs	r5, r3
    2852:	4c06      	ldr	r4, [pc, #24]	; (286c <set_color_green_indication+0x34>)
    2854:	0029      	movs	r1, r5
    2856:	0020      	movs	r0, r4
    2858:	f7fe fe42 	bl	14e0 <i2c_master_write_packet_wait>
    285c:	2800      	cmp	r0, #0
    285e:	d1f9      	bne.n	2854 <set_color_green_indication+0x1c>
         STATUS_OK) {
  }
}
    2860:	b003      	add	sp, #12
    2862:	bd30      	pop	{r4, r5, pc}
    2864:	00002df0 	.word	0x00002df0
    2868:	20000014 	.word	0x20000014
    286c:	20000230 	.word	0x20000230

00002870 <set_color_red_indication>:

void set_color_red_indication(void) {
    2870:	b530      	push	{r4, r5, lr}
    2872:	b083      	sub	sp, #12
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    2874:	aa01      	add	r2, sp, #4
    2876:	4b09      	ldr	r3, [pc, #36]	; (289c <set_color_red_indication+0x2c>)
    2878:	889b      	ldrh	r3, [r3, #4]
    287a:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_red;
    287c:	4b08      	ldr	r3, [pc, #32]	; (28a0 <set_color_red_indication+0x30>)
    287e:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2880:	2231      	movs	r2, #49	; 0x31
    2882:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2884:	3a2f      	subs	r2, #47	; 0x2f
    2886:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2888:	001d      	movs	r5, r3
    288a:	4c06      	ldr	r4, [pc, #24]	; (28a4 <set_color_red_indication+0x34>)
    288c:	0029      	movs	r1, r5
    288e:	0020      	movs	r0, r4
    2890:	f7fe fe26 	bl	14e0 <i2c_master_write_packet_wait>
    2894:	2800      	cmp	r0, #0
    2896:	d1f9      	bne.n	288c <set_color_red_indication+0x1c>
         STATUS_OK) {
  }
}
    2898:	b003      	add	sp, #12
    289a:	bd30      	pop	{r4, r5, pc}
    289c:	00002df0 	.word	0x00002df0
    28a0:	20000014 	.word	0x20000014
    28a4:	20000230 	.word	0x20000230

000028a8 <reset_chip>:
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
         STATUS_OK) {
  }
}

void reset_chip(void) {
    28a8:	b530      	push	{r4, r5, lr}
    28aa:	b083      	sub	sp, #12

  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] =
    28ac:	aa01      	add	r2, sp, #4
    28ae:	2304      	movs	r3, #4
    28b0:	7013      	strb	r3, [r2, #0]
    28b2:	2300      	movs	r3, #0
    28b4:	7053      	strb	r3, [r2, #1]
      BUFFER_TURN_OFF_MAIN_DIGITAL;
  packet.data = buffer_reset_green_red_channel;
    28b6:	4b08      	ldr	r3, [pc, #32]	; (28d8 <reset_chip+0x30>)
    28b8:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    28ba:	2231      	movs	r2, #49	; 0x31
    28bc:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    28be:	3a2f      	subs	r2, #47	; 0x2f
    28c0:	805a      	strh	r2, [r3, #2]

  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    28c2:	001d      	movs	r5, r3
    28c4:	4c05      	ldr	r4, [pc, #20]	; (28dc <reset_chip+0x34>)
    28c6:	0029      	movs	r1, r5
    28c8:	0020      	movs	r0, r4
    28ca:	f7fe fe09 	bl	14e0 <i2c_master_write_packet_wait>
    28ce:	2800      	cmp	r0, #0
    28d0:	d1f9      	bne.n	28c6 <reset_chip+0x1e>
         STATUS_OK) {
  }
}
    28d2:	b003      	add	sp, #12
    28d4:	bd30      	pop	{r4, r5, pc}
    28d6:	46c0      	nop			; (mov r8, r8)
    28d8:	20000014 	.word	0x20000014
    28dc:	20000230 	.word	0x20000230

000028e0 <set_battery_charge_routine>:

void set_battery_charge_routine(void) {
    28e0:	b530      	push	{r4, r5, lr}
    28e2:	b085      	sub	sp, #20

  uint8_t buffer_set_color_green_PWM[DATA_LENGTH_PRIMARY] =
    28e4:	aa03      	add	r2, sp, #12
    28e6:	2304      	movs	r3, #4
    28e8:	7013      	strb	r3, [r2, #0]
    28ea:	3304      	adds	r3, #4
    28ec:	7053      	strb	r3, [r2, #1]
      BUFFER_SET_COLOR_GREEN_PWM;
  uint8_t buffer_set_charge_routine_flash_period[DATA_LENGTH_PRIMARY] =
    28ee:	ab02      	add	r3, sp, #8
    28f0:	2101      	movs	r1, #1
    28f2:	7019      	strb	r1, [r3, #0]
    28f4:	310f      	adds	r1, #15
    28f6:	7059      	strb	r1, [r3, #1]
      BUFFER_SET_CHARGE_ROUTINE_FLASH_PERIOD;
  uint8_t buffer_set_charge_routine_trise_tfall[DATA_LENGTH_PRIMARY] =
    28f8:	ab01      	add	r3, sp, #4
    28fa:	390b      	subs	r1, #11
    28fc:	7019      	strb	r1, [r3, #0]
    28fe:	31ea      	adds	r1, #234	; 0xea
    2900:	7059      	strb	r1, [r3, #1]
      BUFFER_SET_CHARGE_ROUTINE_TRISE_TFALL;
  uint8_t buffer_set_charge_routine_PWM1_timer[DATA_LENGTH_PRIMARY] =
    2902:	39ed      	subs	r1, #237	; 0xed
    2904:	466b      	mov	r3, sp
    2906:	7019      	strb	r1, [r3, #0]
    2908:	231c      	movs	r3, #28
    290a:	4668      	mov	r0, sp
    290c:	7043      	strb	r3, [r0, #1]
      BUFFER_SET_CHARGE_ROUTINE_PWM1_TIMER;
  uint8_t buffer_set_charge_brightness[DATA_LENGTH_PRIMARY] =
	  BUFFER_SET_COLOR_GREEN_BRIGHTNESS; 

  packet.address = KTD2026_DEVICE_ADDRESS;
    290e:	4b18      	ldr	r3, [pc, #96]	; (2970 <set_battery_charge_routine+0x90>)
    2910:	2031      	movs	r0, #49	; 0x31
    2912:	8018      	strh	r0, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2914:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_green_PWM;
    2916:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2918:	001d      	movs	r5, r3
    291a:	4c16      	ldr	r4, [pc, #88]	; (2974 <set_battery_charge_routine+0x94>)
    291c:	0029      	movs	r1, r5
    291e:	0020      	movs	r0, r4
    2920:	f7fe fdde 	bl	14e0 <i2c_master_write_packet_wait>
    2924:	2800      	cmp	r0, #0
    2926:	d1f9      	bne.n	291c <set_battery_charge_routine+0x3c>
  //packet.data = buffer_set_charge_brightness;
  //while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
  //STATUS_OK) {
  //}
  
  packet.data = buffer_set_charge_routine_flash_period;
    2928:	aa02      	add	r2, sp, #8
    292a:	4b11      	ldr	r3, [pc, #68]	; (2970 <set_battery_charge_routine+0x90>)
    292c:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    292e:	001d      	movs	r5, r3
    2930:	4c10      	ldr	r4, [pc, #64]	; (2974 <set_battery_charge_routine+0x94>)
    2932:	0029      	movs	r1, r5
    2934:	0020      	movs	r0, r4
    2936:	f7fe fdd3 	bl	14e0 <i2c_master_write_packet_wait>
    293a:	2800      	cmp	r0, #0
    293c:	d1f9      	bne.n	2932 <set_battery_charge_routine+0x52>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_trise_tfall;
    293e:	aa01      	add	r2, sp, #4
    2940:	4b0b      	ldr	r3, [pc, #44]	; (2970 <set_battery_charge_routine+0x90>)
    2942:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2944:	001d      	movs	r5, r3
    2946:	4c0b      	ldr	r4, [pc, #44]	; (2974 <set_battery_charge_routine+0x94>)
    2948:	0029      	movs	r1, r5
    294a:	0020      	movs	r0, r4
    294c:	f7fe fdc8 	bl	14e0 <i2c_master_write_packet_wait>
    2950:	2800      	cmp	r0, #0
    2952:	d1f9      	bne.n	2948 <set_battery_charge_routine+0x68>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_PWM1_timer;
    2954:	4b06      	ldr	r3, [pc, #24]	; (2970 <set_battery_charge_routine+0x90>)
    2956:	466a      	mov	r2, sp
    2958:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    295a:	001d      	movs	r5, r3
    295c:	4c05      	ldr	r4, [pc, #20]	; (2974 <set_battery_charge_routine+0x94>)
    295e:	0029      	movs	r1, r5
    2960:	0020      	movs	r0, r4
    2962:	f7fe fdbd 	bl	14e0 <i2c_master_write_packet_wait>
    2966:	2800      	cmp	r0, #0
    2968:	d1f9      	bne.n	295e <set_battery_charge_routine+0x7e>
         STATUS_OK) {
  }
  
  
  
}
    296a:	b005      	add	sp, #20
    296c:	bd30      	pop	{r4, r5, pc}
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	20000014 	.word	0x20000014
    2974:	20000230 	.word	0x20000230

00002978 <set_battery_low_routine>:

void set_battery_low_routine(void) {
    2978:	b530      	push	{r4, r5, lr}
    297a:	b085      	sub	sp, #20

  uint8_t buffer_set_color_red_PWM[DATA_LENGTH_PRIMARY] =
    297c:	aa03      	add	r2, sp, #12
    297e:	4b1e      	ldr	r3, [pc, #120]	; (29f8 <set_battery_low_routine+0x80>)
    2980:	8b19      	ldrh	r1, [r3, #24]
    2982:	8011      	strh	r1, [r2, #0]
      BUFFER_SET_COLOR_RED_PWM;
  uint8_t buffer_set_low_routine_flash_period[DATA_LENGTH_PRIMARY] =
    2984:	8b98      	ldrh	r0, [r3, #28]
    2986:	a902      	add	r1, sp, #8
    2988:	8008      	strh	r0, [r1, #0]
      BUFFER_SET_LOW_ROUTINE_FLASH_PERIOD;
  uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY] =
    298a:	8c18      	ldrh	r0, [r3, #32]
    298c:	a901      	add	r1, sp, #4
    298e:	8008      	strh	r0, [r1, #0]
      BUFFER_SET_LOW_ROUTINE_TRISE_TFALL;
  uint8_t buffer_set_low_routine_brightness[DATA_LENGTH_PRIMARY] =
    2990:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2992:	4669      	mov	r1, sp
    2994:	800b      	strh	r3, [r1, #0]
      BUFFER_SET_COLOR_RED_BRIGHTNESS;

  packet.address = KTD2026_DEVICE_ADDRESS;
    2996:	4b19      	ldr	r3, [pc, #100]	; (29fc <set_battery_low_routine+0x84>)
    2998:	2131      	movs	r1, #49	; 0x31
    299a:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    299c:	392f      	subs	r1, #47	; 0x2f
    299e:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_red_PWM;
    29a0:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    29a2:	001d      	movs	r5, r3
    29a4:	4c16      	ldr	r4, [pc, #88]	; (2a00 <set_battery_low_routine+0x88>)
    29a6:	0029      	movs	r1, r5
    29a8:	0020      	movs	r0, r4
    29aa:	f7fe fd99 	bl	14e0 <i2c_master_write_packet_wait>
    29ae:	2800      	cmp	r0, #0
    29b0:	d1f9      	bne.n	29a6 <set_battery_low_routine+0x2e>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_flash_period;
    29b2:	aa02      	add	r2, sp, #8
    29b4:	4b11      	ldr	r3, [pc, #68]	; (29fc <set_battery_low_routine+0x84>)
    29b6:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    29b8:	001d      	movs	r5, r3
    29ba:	4c11      	ldr	r4, [pc, #68]	; (2a00 <set_battery_low_routine+0x88>)
    29bc:	0029      	movs	r1, r5
    29be:	0020      	movs	r0, r4
    29c0:	f7fe fd8e 	bl	14e0 <i2c_master_write_packet_wait>
    29c4:	2800      	cmp	r0, #0
    29c6:	d1f9      	bne.n	29bc <set_battery_low_routine+0x44>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_brightness;
    29c8:	4b0c      	ldr	r3, [pc, #48]	; (29fc <set_battery_low_routine+0x84>)
    29ca:	466a      	mov	r2, sp
    29cc:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    29ce:	001d      	movs	r5, r3
    29d0:	4c0b      	ldr	r4, [pc, #44]	; (2a00 <set_battery_low_routine+0x88>)
    29d2:	0029      	movs	r1, r5
    29d4:	0020      	movs	r0, r4
    29d6:	f7fe fd83 	bl	14e0 <i2c_master_write_packet_wait>
    29da:	2800      	cmp	r0, #0
    29dc:	d1f9      	bne.n	29d2 <set_battery_low_routine+0x5a>
         STATUS_OK) {
  }

  packet.data = buffer_set_low_routine_trise_tfall;
    29de:	aa01      	add	r2, sp, #4
    29e0:	4b06      	ldr	r3, [pc, #24]	; (29fc <set_battery_low_routine+0x84>)
    29e2:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    29e4:	001d      	movs	r5, r3
    29e6:	4c06      	ldr	r4, [pc, #24]	; (2a00 <set_battery_low_routine+0x88>)
    29e8:	0029      	movs	r1, r5
    29ea:	0020      	movs	r0, r4
    29ec:	f7fe fd78 	bl	14e0 <i2c_master_write_packet_wait>
    29f0:	2800      	cmp	r0, #0
    29f2:	d1f9      	bne.n	29e8 <set_battery_low_routine+0x70>
         STATUS_OK) {
  }
}
    29f4:	b005      	add	sp, #20
    29f6:	bd30      	pop	{r4, r5, pc}
    29f8:	00002df0 	.word	0x00002df0
    29fc:	20000014 	.word	0x20000014
    2a00:	20000230 	.word	0x20000230

00002a04 <i2c_master_setup>:
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
         STATUS_OK) {
  }
}

void i2c_master_setup(void) {
    2a04:	b530      	push	{r4, r5, lr}
    2a06:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2a08:	aa01      	add	r2, sp, #4
    2a0a:	2364      	movs	r3, #100	; 0x64
    2a0c:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2a0e:	4b20      	ldr	r3, [pc, #128]	; (2a90 <i2c_master_setup+0x8c>)
    2a10:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2a12:	2300      	movs	r3, #0
    2a14:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2a16:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2a18:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2a1a:	2180      	movs	r1, #128	; 0x80
    2a1c:	0389      	lsls	r1, r1, #14
    2a1e:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2a20:	2101      	movs	r1, #1
    2a22:	4249      	negs	r1, r1
    2a24:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2a26:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2a28:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    2a2a:	3125      	adds	r1, #37	; 0x25
    2a2c:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2a2e:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2a30:	3108      	adds	r1, #8
    2a32:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2a34:	3101      	adds	r1, #1
    2a36:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2a38:	3101      	adds	r1, #1
    2a3a:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2a3c:	33d7      	adds	r3, #215	; 0xd7
    2a3e:	8613      	strh	r3, [r2, #48]	; 0x30
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
    2a40:	4b14      	ldr	r3, [pc, #80]	; (2a94 <i2c_master_setup+0x90>)
    2a42:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    2a44:	4c14      	ldr	r4, [pc, #80]	; (2a98 <i2c_master_setup+0x94>)
    2a46:	4915      	ldr	r1, [pc, #84]	; (2a9c <i2c_master_setup+0x98>)
    2a48:	0020      	movs	r0, r4
    2a4a:	f7fe fbd3 	bl	11f4 <i2c_master_init>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2a4e:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2a50:	2207      	movs	r2, #7
    2a52:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2a54:	421a      	tst	r2, r3
    2a56:	d1fc      	bne.n	2a52 <i2c_master_setup+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2a58:	6823      	ldr	r3, [r4, #0]
    2a5a:	2202      	movs	r2, #2
    2a5c:	4313      	orrs	r3, r2
    2a5e:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2a60:	4d0d      	ldr	r5, [pc, #52]	; (2a98 <i2c_master_setup+0x94>)
    2a62:	6828      	ldr	r0, [r5, #0]
    2a64:	f7fe ff5c 	bl	1920 <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2a68:	231f      	movs	r3, #31
    2a6a:	4018      	ands	r0, r3
    2a6c:	3b1e      	subs	r3, #30
    2a6e:	4083      	lsls	r3, r0
    2a70:	4a0b      	ldr	r2, [pc, #44]	; (2aa0 <i2c_master_setup+0x9c>)
    2a72:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2a74:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2a76:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2a78:	2110      	movs	r1, #16
    2a7a:	8b62      	ldrh	r2, [r4, #26]
    2a7c:	420a      	tst	r2, r1
    2a7e:	d104      	bne.n	2a8a <i2c_master_setup+0x86>
		timeout_counter++;
    2a80:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2a82:	4283      	cmp	r3, r0
    2a84:	d3f9      	bcc.n	2a7a <i2c_master_setup+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2a86:	2310      	movs	r3, #16
    2a88:	8363      	strh	r3, [r4, #26]
  i2c_master_enable(&i2c_master_instance);
}
    2a8a:	b00f      	add	sp, #60	; 0x3c
    2a8c:	bd30      	pop	{r4, r5, pc}
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	00000d48 	.word	0x00000d48
    2a94:	00002710 	.word	0x00002710
    2a98:	20000230 	.word	0x20000230
    2a9c:	42001000 	.word	0x42001000
    2aa0:	e000e100 	.word	0xe000e100

00002aa4 <main>:

#include "system_logic.h"

#include "adc_sample.h"

int main(void) {
    2aa4:	b510      	push	{r4, lr}
  startup_sys_configs();
    2aa6:	f7fe fae5 	bl	1074 <startup_sys_configs>
  while (true) {
    system_state(); // Get latest system_state
    2aaa:	f7fe fb4f 	bl	114c <system_state>
    system_logic(); // Invoke System Logic
    2aae:	f7fe f95f 	bl	d70 <system_logic>
    2ab2:	e7fa      	b.n	2aaa <main+0x6>

00002ab4 <__udivsi3>:
    2ab4:	2200      	movs	r2, #0
    2ab6:	0843      	lsrs	r3, r0, #1
    2ab8:	428b      	cmp	r3, r1
    2aba:	d374      	bcc.n	2ba6 <__udivsi3+0xf2>
    2abc:	0903      	lsrs	r3, r0, #4
    2abe:	428b      	cmp	r3, r1
    2ac0:	d35f      	bcc.n	2b82 <__udivsi3+0xce>
    2ac2:	0a03      	lsrs	r3, r0, #8
    2ac4:	428b      	cmp	r3, r1
    2ac6:	d344      	bcc.n	2b52 <__udivsi3+0x9e>
    2ac8:	0b03      	lsrs	r3, r0, #12
    2aca:	428b      	cmp	r3, r1
    2acc:	d328      	bcc.n	2b20 <__udivsi3+0x6c>
    2ace:	0c03      	lsrs	r3, r0, #16
    2ad0:	428b      	cmp	r3, r1
    2ad2:	d30d      	bcc.n	2af0 <__udivsi3+0x3c>
    2ad4:	22ff      	movs	r2, #255	; 0xff
    2ad6:	0209      	lsls	r1, r1, #8
    2ad8:	ba12      	rev	r2, r2
    2ada:	0c03      	lsrs	r3, r0, #16
    2adc:	428b      	cmp	r3, r1
    2ade:	d302      	bcc.n	2ae6 <__udivsi3+0x32>
    2ae0:	1212      	asrs	r2, r2, #8
    2ae2:	0209      	lsls	r1, r1, #8
    2ae4:	d065      	beq.n	2bb2 <__udivsi3+0xfe>
    2ae6:	0b03      	lsrs	r3, r0, #12
    2ae8:	428b      	cmp	r3, r1
    2aea:	d319      	bcc.n	2b20 <__udivsi3+0x6c>
    2aec:	e000      	b.n	2af0 <__udivsi3+0x3c>
    2aee:	0a09      	lsrs	r1, r1, #8
    2af0:	0bc3      	lsrs	r3, r0, #15
    2af2:	428b      	cmp	r3, r1
    2af4:	d301      	bcc.n	2afa <__udivsi3+0x46>
    2af6:	03cb      	lsls	r3, r1, #15
    2af8:	1ac0      	subs	r0, r0, r3
    2afa:	4152      	adcs	r2, r2
    2afc:	0b83      	lsrs	r3, r0, #14
    2afe:	428b      	cmp	r3, r1
    2b00:	d301      	bcc.n	2b06 <__udivsi3+0x52>
    2b02:	038b      	lsls	r3, r1, #14
    2b04:	1ac0      	subs	r0, r0, r3
    2b06:	4152      	adcs	r2, r2
    2b08:	0b43      	lsrs	r3, r0, #13
    2b0a:	428b      	cmp	r3, r1
    2b0c:	d301      	bcc.n	2b12 <__udivsi3+0x5e>
    2b0e:	034b      	lsls	r3, r1, #13
    2b10:	1ac0      	subs	r0, r0, r3
    2b12:	4152      	adcs	r2, r2
    2b14:	0b03      	lsrs	r3, r0, #12
    2b16:	428b      	cmp	r3, r1
    2b18:	d301      	bcc.n	2b1e <__udivsi3+0x6a>
    2b1a:	030b      	lsls	r3, r1, #12
    2b1c:	1ac0      	subs	r0, r0, r3
    2b1e:	4152      	adcs	r2, r2
    2b20:	0ac3      	lsrs	r3, r0, #11
    2b22:	428b      	cmp	r3, r1
    2b24:	d301      	bcc.n	2b2a <__udivsi3+0x76>
    2b26:	02cb      	lsls	r3, r1, #11
    2b28:	1ac0      	subs	r0, r0, r3
    2b2a:	4152      	adcs	r2, r2
    2b2c:	0a83      	lsrs	r3, r0, #10
    2b2e:	428b      	cmp	r3, r1
    2b30:	d301      	bcc.n	2b36 <__udivsi3+0x82>
    2b32:	028b      	lsls	r3, r1, #10
    2b34:	1ac0      	subs	r0, r0, r3
    2b36:	4152      	adcs	r2, r2
    2b38:	0a43      	lsrs	r3, r0, #9
    2b3a:	428b      	cmp	r3, r1
    2b3c:	d301      	bcc.n	2b42 <__udivsi3+0x8e>
    2b3e:	024b      	lsls	r3, r1, #9
    2b40:	1ac0      	subs	r0, r0, r3
    2b42:	4152      	adcs	r2, r2
    2b44:	0a03      	lsrs	r3, r0, #8
    2b46:	428b      	cmp	r3, r1
    2b48:	d301      	bcc.n	2b4e <__udivsi3+0x9a>
    2b4a:	020b      	lsls	r3, r1, #8
    2b4c:	1ac0      	subs	r0, r0, r3
    2b4e:	4152      	adcs	r2, r2
    2b50:	d2cd      	bcs.n	2aee <__udivsi3+0x3a>
    2b52:	09c3      	lsrs	r3, r0, #7
    2b54:	428b      	cmp	r3, r1
    2b56:	d301      	bcc.n	2b5c <__udivsi3+0xa8>
    2b58:	01cb      	lsls	r3, r1, #7
    2b5a:	1ac0      	subs	r0, r0, r3
    2b5c:	4152      	adcs	r2, r2
    2b5e:	0983      	lsrs	r3, r0, #6
    2b60:	428b      	cmp	r3, r1
    2b62:	d301      	bcc.n	2b68 <__udivsi3+0xb4>
    2b64:	018b      	lsls	r3, r1, #6
    2b66:	1ac0      	subs	r0, r0, r3
    2b68:	4152      	adcs	r2, r2
    2b6a:	0943      	lsrs	r3, r0, #5
    2b6c:	428b      	cmp	r3, r1
    2b6e:	d301      	bcc.n	2b74 <__udivsi3+0xc0>
    2b70:	014b      	lsls	r3, r1, #5
    2b72:	1ac0      	subs	r0, r0, r3
    2b74:	4152      	adcs	r2, r2
    2b76:	0903      	lsrs	r3, r0, #4
    2b78:	428b      	cmp	r3, r1
    2b7a:	d301      	bcc.n	2b80 <__udivsi3+0xcc>
    2b7c:	010b      	lsls	r3, r1, #4
    2b7e:	1ac0      	subs	r0, r0, r3
    2b80:	4152      	adcs	r2, r2
    2b82:	08c3      	lsrs	r3, r0, #3
    2b84:	428b      	cmp	r3, r1
    2b86:	d301      	bcc.n	2b8c <__udivsi3+0xd8>
    2b88:	00cb      	lsls	r3, r1, #3
    2b8a:	1ac0      	subs	r0, r0, r3
    2b8c:	4152      	adcs	r2, r2
    2b8e:	0883      	lsrs	r3, r0, #2
    2b90:	428b      	cmp	r3, r1
    2b92:	d301      	bcc.n	2b98 <__udivsi3+0xe4>
    2b94:	008b      	lsls	r3, r1, #2
    2b96:	1ac0      	subs	r0, r0, r3
    2b98:	4152      	adcs	r2, r2
    2b9a:	0843      	lsrs	r3, r0, #1
    2b9c:	428b      	cmp	r3, r1
    2b9e:	d301      	bcc.n	2ba4 <__udivsi3+0xf0>
    2ba0:	004b      	lsls	r3, r1, #1
    2ba2:	1ac0      	subs	r0, r0, r3
    2ba4:	4152      	adcs	r2, r2
    2ba6:	1a41      	subs	r1, r0, r1
    2ba8:	d200      	bcs.n	2bac <__udivsi3+0xf8>
    2baa:	4601      	mov	r1, r0
    2bac:	4152      	adcs	r2, r2
    2bae:	4610      	mov	r0, r2
    2bb0:	4770      	bx	lr
    2bb2:	e7ff      	b.n	2bb4 <__udivsi3+0x100>
    2bb4:	b501      	push	{r0, lr}
    2bb6:	2000      	movs	r0, #0
    2bb8:	f000 f806 	bl	2bc8 <__aeabi_idiv0>
    2bbc:	bd02      	pop	{r1, pc}
    2bbe:	46c0      	nop			; (mov r8, r8)

00002bc0 <__aeabi_uidivmod>:
    2bc0:	2900      	cmp	r1, #0
    2bc2:	d0f7      	beq.n	2bb4 <__udivsi3+0x100>
    2bc4:	e776      	b.n	2ab4 <__udivsi3>
    2bc6:	4770      	bx	lr

00002bc8 <__aeabi_idiv0>:
    2bc8:	4770      	bx	lr
    2bca:	46c0      	nop			; (mov r8, r8)

00002bcc <__libc_init_array>:
    2bcc:	b570      	push	{r4, r5, r6, lr}
    2bce:	2600      	movs	r6, #0
    2bd0:	4d0c      	ldr	r5, [pc, #48]	; (2c04 <__libc_init_array+0x38>)
    2bd2:	4c0d      	ldr	r4, [pc, #52]	; (2c08 <__libc_init_array+0x3c>)
    2bd4:	1b64      	subs	r4, r4, r5
    2bd6:	10a4      	asrs	r4, r4, #2
    2bd8:	42a6      	cmp	r6, r4
    2bda:	d109      	bne.n	2bf0 <__libc_init_array+0x24>
    2bdc:	2600      	movs	r6, #0
    2bde:	f000 f925 	bl	2e2c <_init>
    2be2:	4d0a      	ldr	r5, [pc, #40]	; (2c0c <__libc_init_array+0x40>)
    2be4:	4c0a      	ldr	r4, [pc, #40]	; (2c10 <__libc_init_array+0x44>)
    2be6:	1b64      	subs	r4, r4, r5
    2be8:	10a4      	asrs	r4, r4, #2
    2bea:	42a6      	cmp	r6, r4
    2bec:	d105      	bne.n	2bfa <__libc_init_array+0x2e>
    2bee:	bd70      	pop	{r4, r5, r6, pc}
    2bf0:	00b3      	lsls	r3, r6, #2
    2bf2:	58eb      	ldr	r3, [r5, r3]
    2bf4:	4798      	blx	r3
    2bf6:	3601      	adds	r6, #1
    2bf8:	e7ee      	b.n	2bd8 <__libc_init_array+0xc>
    2bfa:	00b3      	lsls	r3, r6, #2
    2bfc:	58eb      	ldr	r3, [r5, r3]
    2bfe:	4798      	blx	r3
    2c00:	3601      	adds	r6, #1
    2c02:	e7f2      	b.n	2bea <__libc_init_array+0x1e>
    2c04:	00002e38 	.word	0x00002e38
    2c08:	00002e38 	.word	0x00002e38
    2c0c:	00002e38 	.word	0x00002e38
    2c10:	00002e3c 	.word	0x00002e3c

00002c14 <memcpy>:
    2c14:	2300      	movs	r3, #0
    2c16:	b510      	push	{r4, lr}
    2c18:	429a      	cmp	r2, r3
    2c1a:	d100      	bne.n	2c1e <memcpy+0xa>
    2c1c:	bd10      	pop	{r4, pc}
    2c1e:	5ccc      	ldrb	r4, [r1, r3]
    2c20:	54c4      	strb	r4, [r0, r3]
    2c22:	3301      	adds	r3, #1
    2c24:	e7f8      	b.n	2c18 <memcpy+0x4>
    2c26:	0000      	movs	r0, r0
    2c28:	0000039c 	.word	0x0000039c
    2c2c:	000005d4 	.word	0x000005d4
    2c30:	000005d4 	.word	0x000005d4
    2c34:	000005d4 	.word	0x000005d4
    2c38:	000005d4 	.word	0x000005d4
    2c3c:	000005d4 	.word	0x000005d4
    2c40:	000005d4 	.word	0x000005d4
    2c44:	000005d4 	.word	0x000005d4
    2c48:	000005d4 	.word	0x000005d4
    2c4c:	000005d4 	.word	0x000005d4
    2c50:	000005d4 	.word	0x000005d4
    2c54:	000005d4 	.word	0x000005d4
    2c58:	000005d4 	.word	0x000005d4
    2c5c:	000005d4 	.word	0x000005d4
    2c60:	000005d4 	.word	0x000005d4
    2c64:	000005d4 	.word	0x000005d4
    2c68:	00000384 	.word	0x00000384
    2c6c:	000005d4 	.word	0x000005d4
    2c70:	000005d4 	.word	0x000005d4
    2c74:	000005d4 	.word	0x000005d4
    2c78:	000005d4 	.word	0x000005d4
    2c7c:	000005d4 	.word	0x000005d4
    2c80:	000005d4 	.word	0x000005d4
    2c84:	000005d4 	.word	0x000005d4
    2c88:	000005d4 	.word	0x000005d4
    2c8c:	000005d4 	.word	0x000005d4
    2c90:	000005d4 	.word	0x000005d4
    2c94:	000005d4 	.word	0x000005d4
    2c98:	000005d4 	.word	0x000005d4
    2c9c:	000005d4 	.word	0x000005d4
    2ca0:	000005d4 	.word	0x000005d4
    2ca4:	000005d4 	.word	0x000005d4
    2ca8:	00000394 	.word	0x00000394
    2cac:	000005d4 	.word	0x000005d4
    2cb0:	000005d4 	.word	0x000005d4
    2cb4:	000005d4 	.word	0x000005d4
    2cb8:	000005d4 	.word	0x000005d4
    2cbc:	000005d4 	.word	0x000005d4
    2cc0:	000005d4 	.word	0x000005d4
    2cc4:	000005d4 	.word	0x000005d4
    2cc8:	000005d4 	.word	0x000005d4
    2ccc:	000005d4 	.word	0x000005d4
    2cd0:	000005d4 	.word	0x000005d4
    2cd4:	000005d4 	.word	0x000005d4
    2cd8:	000005d4 	.word	0x000005d4
    2cdc:	000005d4 	.word	0x000005d4
    2ce0:	000005d4 	.word	0x000005d4
    2ce4:	000005d4 	.word	0x000005d4
    2ce8:	0000038c 	.word	0x0000038c
    2cec:	000003a4 	.word	0x000003a4
    2cf0:	0000036c 	.word	0x0000036c
    2cf4:	0000037c 	.word	0x0000037c
    2cf8:	00000374 	.word	0x00000374
    2cfc:	00000002 	.word	0x00000002
    2d00:	00000003 	.word	0x00000003
    2d04:	00000004 	.word	0x00000004
    2d08:	00000005 	.word	0x00000005
    2d0c:	00000006 	.word	0x00000006
    2d10:	00000007 	.word	0x00000007
    2d14:	0000000e 	.word	0x0000000e
    2d18:	0000000f 	.word	0x0000000f
    2d1c:	0000000a 	.word	0x0000000a
    2d20:	0000000b 	.word	0x0000000b
    2d24:	0000ffff 	.word	0x0000ffff
    2d28:	0000ffff 	.word	0x0000ffff
    2d2c:	0000ffff 	.word	0x0000ffff
    2d30:	0000ffff 	.word	0x0000ffff
    2d34:	0000ffff 	.word	0x0000ffff
    2d38:	0000ffff 	.word	0x0000ffff
    2d3c:	0000ffff 	.word	0x0000ffff
    2d40:	0000ffff 	.word	0x0000ffff
    2d44:	0000ffff 	.word	0x0000ffff
    2d48:	0000ffff 	.word	0x0000ffff
    2d4c:	000008f2 	.word	0x000008f2
    2d50:	000008fc 	.word	0x000008fc
    2d54:	00000906 	.word	0x00000906
    2d58:	00000910 	.word	0x00000910
    2d5c:	0000091a 	.word	0x0000091a
    2d60:	0000092c 	.word	0x0000092c
    2d64:	0000093e 	.word	0x0000093e

00002d68 <tc_interrupt_vectors.12581>:
    2d68:	00000e0d 42000800 42000c00 42001000     .......B...B...B
    2d78:	0000197e 0000197a 0000197a 000019e0     ~...z...z.......
    2d88:	000019e0 00001992 00001984 00001998     ................
    2d98:	000019ce 00001a64 00001a44 00001a44     ....d...D...D...
    2da8:	00001ad0 00001a56 00001a72 00001a48     ....V...r...H...
    2db8:	00001a80 00001ac0                       ........

00002dc0 <_tcc_intflag>:
    2dc0:	00000001 00000002 00000004 00000008     ................
    2dd0:	00001000 00002000 00004000 00008000     ..... ...@......
    2de0:	00010000 00020000 00040000 00080000     ................
    2df0:	00000404 00000104 00001004 00000504     ................
    2e00:	00001404 00001504 00000204 00008201     ................
    2e10:	00003202 00005006 00002004 00000308     .2...P... ......
    2e20:	00000908 00001508 00001902              ............

00002e2c <_init>:
    2e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e32:	bc08      	pop	{r3}
    2e34:	469e      	mov	lr, r3
    2e36:	4770      	bx	lr

00002e38 <__init_array_start>:
    2e38:	000000b5 	.word	0x000000b5

00002e3c <_fini>:
    2e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2e42:	bc08      	pop	{r3}
    2e44:	469e      	mov	lr, r3
    2e46:	4770      	bx	lr

00002e48 <__fini_array_start>:
    2e48:	0000008d 	.word	0x0000008d
