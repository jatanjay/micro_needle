
micro_needle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000030b8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  000030b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000224  20000020  000030d8  00020020  2**2
                  ALLOC
  3 .stack        00000404  20000244  000032fc  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00057a8a  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f06  00000000  00000000  00077b2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000073a6  00000000  00000000  0007da33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a8  00000000  00000000  00084dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c90  00000000  00000000  00085681  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b439  00000000  00000000  00086311  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001539a  00000000  00000000  000a174a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007d21c  00000000  00000000  000b6ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000149c  00000000  00000000  00133d00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 06 00 20 89 28 00 00 87 28 00 00 87 28 00 00     H.. .(...(...(..
	...
      2c:	87 28 00 00 00 00 00 00 00 00 00 00 87 28 00 00     .(...........(..
      3c:	87 28 00 00 87 28 00 00 87 28 00 00 87 28 00 00     .(...(...(...(..
      4c:	87 28 00 00 11 07 00 00 87 28 00 00 87 28 00 00     .(.......(...(..
      5c:	87 28 00 00 87 28 00 00 dd 19 00 00 ed 19 00 00     .(...(..........
      6c:	fd 19 00 00 19 25 00 00 b9 25 00 00 c3 25 00 00     .....%...%...%..
      7c:	87 28 00 00 87 28 00 00 87 28 00 00 87 28 00 00     .(...(...(...(..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	000030b8 	.word	0x000030b8

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	000030b8 	.word	0x000030b8
      e4:	000030b8 	.word	0x000030b8
      e8:	00000000 	.word	0x00000000

000000ec <configure_adc>:
#include <adc_sample.h>

uint16_t adc_result;

void configure_adc(void)
{
      ec:	b510      	push	{r4, lr}
      ee:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
      f0:	4668      	mov	r0, sp
      f2:	f000 fa9f 	bl	634 <adc_get_config_defaults>
	//config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
	adc_init(&adc_instance, ADC, &config_adc);
      f6:	4c12      	ldr	r4, [pc, #72]	; (140 <configure_adc+0x54>)
      f8:	466a      	mov	r2, sp
      fa:	4912      	ldr	r1, [pc, #72]	; (144 <configure_adc+0x58>)
      fc:	0020      	movs	r0, r4
      fe:	f000 fabd 	bl	67c <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     102:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     104:	7e53      	ldrb	r3, [r2, #25]
     106:	b25b      	sxtb	r3, r3
     108:	2b00      	cmp	r3, #0
     10a:	db15      	blt.n	138 <configure_adc+0x4c>
		return true;
	}

	return false;
     10c:	2100      	movs	r1, #0

	while (adc_is_syncing(module_inst)) {
     10e:	2900      	cmp	r1, #0
     110:	d1f8      	bne.n	104 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     112:	230f      	movs	r3, #15
     114:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     116:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     118:	7813      	ldrb	r3, [r2, #0]
     11a:	2002      	movs	r0, #2
     11c:	4303      	orrs	r3, r0
     11e:	b2db      	uxtb	r3, r3
     120:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     122:	4b07      	ldr	r3, [pc, #28]	; (140 <configure_adc+0x54>)
     124:	681b      	ldr	r3, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     126:	7e5b      	ldrb	r3, [r3, #25]
     128:	b25b      	sxtb	r3, r3
     12a:	2b00      	cmp	r3, #0
     12c:	db06      	blt.n	13c <configure_adc+0x50>
	return false;
     12e:	000b      	movs	r3, r1

	while (adc_is_syncing(module_inst)) {
     130:	2b00      	cmp	r3, #0
     132:	d1f6      	bne.n	122 <configure_adc+0x36>
	adc_enable(&adc_instance);
}
     134:	b00c      	add	sp, #48	; 0x30
     136:	bd10      	pop	{r4, pc}
		return true;
     138:	2101      	movs	r1, #1
     13a:	e7e8      	b.n	10e <configure_adc+0x22>
     13c:	2301      	movs	r3, #1
     13e:	e7f7      	b.n	130 <configure_adc+0x44>
     140:	20000098 	.word	0x20000098
     144:	42002000 	.word	0x42002000

00000148 <sample_adc>:


void sample_adc(void){
     148:	b510      	push	{r4, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14a:	4b2c      	ldr	r3, [pc, #176]	; (1fc <sample_adc+0xb4>)
     14c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	7e53      	ldrb	r3, [r2, #25]
     150:	b25b      	sxtb	r3, r3
     152:	2b00      	cmp	r3, #0
     154:	db0f      	blt.n	176 <sample_adc+0x2e>
	return false;
     156:	2100      	movs	r1, #0

	while (adc_is_syncing(module_inst)) {
     158:	2900      	cmp	r1, #0
     15a:	d1f8      	bne.n	14e <sample_adc+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     15c:	7b13      	ldrb	r3, [r2, #12]
     15e:	2002      	movs	r0, #2
     160:	4303      	orrs	r3, r0
     162:	b2db      	uxtb	r3, r3
     164:	7313      	strb	r3, [r2, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     166:	7e53      	ldrb	r3, [r2, #25]
     168:	b25b      	sxtb	r3, r3
     16a:	2b00      	cmp	r3, #0
     16c:	db05      	blt.n	17a <sample_adc+0x32>
	return false;
     16e:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
     170:	2800      	cmp	r0, #0
     172:	d1f8      	bne.n	166 <sample_adc+0x1e>
     174:	e00a      	b.n	18c <sample_adc+0x44>
		return true;
     176:	2101      	movs	r1, #1
     178:	e7ee      	b.n	158 <sample_adc+0x10>
     17a:	2001      	movs	r0, #1
     17c:	e7f8      	b.n	170 <sample_adc+0x28>
		status_flags |= ADC_STATUS_RESULT_READY;
     17e:	2201      	movs	r2, #1
     180:	e00b      	b.n	19a <sample_adc+0x52>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     182:	07d3      	lsls	r3, r2, #31
     184:	d412      	bmi.n	1ac <sample_adc+0x64>
		/* Result not ready */
		return STATUS_BUSY;
     186:	2305      	movs	r3, #5
	adc_start_conversion(&adc_instance);
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     188:	2b05      	cmp	r3, #5
     18a:	d136      	bne.n	1fa <sample_adc+0xb2>
	Adc *const adc_module = module_inst->hw;
     18c:	4b1b      	ldr	r3, [pc, #108]	; (1fc <sample_adc+0xb4>)
     18e:	6819      	ldr	r1, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     190:	7e0b      	ldrb	r3, [r1, #24]
     192:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     194:	07da      	lsls	r2, r3, #31
     196:	d4f2      	bmi.n	17e <sample_adc+0x36>
	uint32_t status_flags = 0;
     198:	2200      	movs	r2, #0
	if (int_flags & ADC_INTFLAG_WINMON) {
     19a:	075c      	lsls	r4, r3, #29
     19c:	d501      	bpl.n	1a2 <sample_adc+0x5a>
		status_flags |= ADC_STATUS_WINDOW;
     19e:	2402      	movs	r4, #2
     1a0:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     1a2:	079b      	lsls	r3, r3, #30
     1a4:	d5ed      	bpl.n	182 <sample_adc+0x3a>
		status_flags |= ADC_STATUS_OVERRUN;
     1a6:	2304      	movs	r3, #4
     1a8:	431a      	orrs	r2, r3
     1aa:	e7ea      	b.n	182 <sample_adc+0x3a>
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1ac:	7e4b      	ldrb	r3, [r1, #25]
     1ae:	b25b      	sxtb	r3, r3
     1b0:	2b00      	cmp	r3, #0
     1b2:	db1c      	blt.n	1ee <sample_adc+0xa6>
	return false;
     1b4:	0003      	movs	r3, r0
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
     1b6:	2b00      	cmp	r3, #0
     1b8:	d1f8      	bne.n	1ac <sample_adc+0x64>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     1ba:	8b4a      	ldrh	r2, [r1, #26]
     1bc:	4b10      	ldr	r3, [pc, #64]	; (200 <sample_adc+0xb8>)
     1be:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
     1c0:	4b0e      	ldr	r3, [pc, #56]	; (1fc <sample_adc+0xb4>)
     1c2:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     1c4:	2301      	movs	r3, #1
     1c6:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     1c8:	7e0b      	ldrb	r3, [r1, #24]
     1ca:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     1cc:	07da      	lsls	r2, r3, #31
     1ce:	d410      	bmi.n	1f2 <sample_adc+0xaa>
	uint32_t status_flags = 0;
     1d0:	2200      	movs	r2, #0
	if (int_flags & ADC_INTFLAG_WINMON) {
     1d2:	075c      	lsls	r4, r3, #29
     1d4:	d501      	bpl.n	1da <sample_adc+0x92>
		status_flags |= ADC_STATUS_WINDOW;
     1d6:	2402      	movs	r4, #2
     1d8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     1da:	079b      	lsls	r3, r3, #30
     1dc:	d501      	bpl.n	1e2 <sample_adc+0x9a>
		status_flags |= ADC_STATUS_OVERRUN;
     1de:	2304      	movs	r3, #4
     1e0:	431a      	orrs	r2, r3

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     1e2:	0753      	lsls	r3, r2, #29
     1e4:	d507      	bpl.n	1f6 <sample_adc+0xae>
	adc_module->INTFLAG.reg = int_flags;
     1e6:	2302      	movs	r3, #2
     1e8:	760b      	strb	r3, [r1, #24]
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
     1ea:	331c      	adds	r3, #28
     1ec:	e7cc      	b.n	188 <sample_adc+0x40>
		return true;
     1ee:	2301      	movs	r3, #1
     1f0:	e7e1      	b.n	1b6 <sample_adc+0x6e>
		status_flags |= ADC_STATUS_RESULT_READY;
     1f2:	2201      	movs	r2, #1
     1f4:	e7ed      	b.n	1d2 <sample_adc+0x8a>
	}

	return STATUS_OK;
     1f6:	2300      	movs	r3, #0
     1f8:	e7c6      	b.n	188 <sample_adc+0x40>
     1fa:	bd10      	pop	{r4, pc}
     1fc:	20000098 	.word	0x20000098
     200:	20000094 	.word	0x20000094

00000204 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     204:	b5f0      	push	{r4, r5, r6, r7, lr}
     206:	46d6      	mov	lr, sl
     208:	464f      	mov	r7, r9
     20a:	4646      	mov	r6, r8
     20c:	b5c0      	push	{r6, r7, lr}
     20e:	b096      	sub	sp, #88	; 0x58
     210:	4682      	mov	sl, r0
     212:	000f      	movs	r7, r1
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     214:	6803      	ldr	r3, [r0, #0]
     216:	4699      	mov	r9, r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     218:	a915      	add	r1, sp, #84	; 0x54

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     21a:	783b      	ldrb	r3, [r7, #0]
     21c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     21e:	2013      	movs	r0, #19
     220:	f001 fe2a 	bl	1e78 <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     224:	2013      	movs	r0, #19
     226:	f001 fdeb 	bl	1e00 <system_gclk_chan_enable>

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     22a:	232c      	movs	r3, #44	; 0x2c
     22c:	5cfb      	ldrb	r3, [r7, r3]
     22e:	2b00      	cmp	r3, #0
     230:	d054      	beq.n	2dc <_adc_set_config+0xd8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     232:	222b      	movs	r2, #43	; 0x2b
     234:	5cbe      	ldrb	r6, [r7, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     236:	7b3d      	ldrb	r5, [r7, #12]
		uint8_t start_pin =
     238:	1975      	adds	r5, r6, r5
     23a:	b2ed      	uxtb	r5, r5
		uint8_t end_pin =
     23c:	195b      	adds	r3, r3, r5
     23e:	b2db      	uxtb	r3, r3
     240:	4698      	mov	r8, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     242:	e003      	b.n	24c <_adc_set_config+0x48>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
     244:	3501      	adds	r5, #1
     246:	b2ed      	uxtb	r5, r5
			offset++;
     248:	3601      	adds	r6, #1
     24a:	b2f6      	uxtb	r6, r6
		while (start_pin < end_pin) {
     24c:	4545      	cmp	r5, r8
     24e:	d219      	bcs.n	284 <_adc_set_config+0x80>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     250:	240f      	movs	r4, #15
     252:	4034      	ands	r4, r6
     254:	7b3b      	ldrb	r3, [r7, #12]
     256:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     258:	2250      	movs	r2, #80	; 0x50
     25a:	49a7      	ldr	r1, [pc, #668]	; (4f8 <STACK_SIZE+0xf8>)
     25c:	a801      	add	r0, sp, #4
     25e:	f002 fdfd 	bl	2e5c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     262:	2c09      	cmp	r4, #9
     264:	d8ee      	bhi.n	244 <_adc_set_config+0x40>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     266:	00a4      	lsls	r4, r4, #2
     268:	ab01      	add	r3, sp, #4
     26a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     26c:	2300      	movs	r3, #0
     26e:	466a      	mov	r2, sp
     270:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     272:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     274:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     276:	3301      	adds	r3, #1
     278:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     27a:	b2c0      	uxtb	r0, r0
     27c:	4669      	mov	r1, sp
     27e:	f001 fe65 	bl	1f4c <system_pinmux_pin_set_config>
     282:	e7df      	b.n	244 <_adc_set_config+0x40>
		}
		_adc_configure_ain_pin(config->negative_input);
     284:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
     286:	2250      	movs	r2, #80	; 0x50
     288:	499b      	ldr	r1, [pc, #620]	; (4f8 <STACK_SIZE+0xf8>)
     28a:	a801      	add	r0, sp, #4
     28c:	f002 fde6 	bl	2e5c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     290:	2c09      	cmp	r4, #9
     292:	d914      	bls.n	2be <_adc_set_config+0xba>
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     294:	7d7b      	ldrb	r3, [r7, #21]
     296:	009b      	lsls	r3, r3, #2
     298:	b2db      	uxtb	r3, r3
     29a:	464a      	mov	r2, r9
     29c:	7013      	strb	r3, [r2, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     29e:	7dba      	ldrb	r2, [r7, #22]
     2a0:	01d2      	lsls	r2, r2, #7
			(config->reference);
     2a2:	2301      	movs	r3, #1
     2a4:	56fb      	ldrsb	r3, [r7, r3]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2a6:	4313      	orrs	r3, r2
     2a8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2aa:	464a      	mov	r2, r9
     2ac:	7053      	strb	r3, [r2, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     2ae:	793b      	ldrb	r3, [r7, #4]
     2b0:	2b34      	cmp	r3, #52	; 0x34
     2b2:	d900      	bls.n	2b6 <_adc_set_config+0xb2>
     2b4:	e1b1      	b.n	61a <STACK_SIZE+0x21a>
     2b6:	009b      	lsls	r3, r3, #2
     2b8:	4a90      	ldr	r2, [pc, #576]	; (4fc <STACK_SIZE+0xfc>)
     2ba:	58d3      	ldr	r3, [r2, r3]
     2bc:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab01      	add	r3, sp, #4
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	2300      	movs	r3, #0
     2c6:	466a      	mov	r2, sp
     2c8:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     2ca:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4669      	mov	r1, sp
     2d6:	f001 fe39 	bl	1f4c <system_pinmux_pin_set_config>
     2da:	e7db      	b.n	294 <_adc_set_config+0x90>
		_adc_configure_ain_pin(config->positive_input);
     2dc:	7b3c      	ldrb	r4, [r7, #12]
	const uint32_t pinmapping[] = {
     2de:	2250      	movs	r2, #80	; 0x50
     2e0:	4985      	ldr	r1, [pc, #532]	; (4f8 <STACK_SIZE+0xf8>)
     2e2:	a801      	add	r0, sp, #4
     2e4:	f002 fdba 	bl	2e5c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e8:	2c09      	cmp	r4, #9
     2ea:	d916      	bls.n	31a <_adc_set_config+0x116>
		_adc_configure_ain_pin(config->negative_input);
     2ec:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
     2ee:	2250      	movs	r2, #80	; 0x50
     2f0:	4981      	ldr	r1, [pc, #516]	; (4f8 <STACK_SIZE+0xf8>)
     2f2:	a801      	add	r0, sp, #4
     2f4:	f002 fdb2 	bl	2e5c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2f8:	2c09      	cmp	r4, #9
     2fa:	d8cb      	bhi.n	294 <_adc_set_config+0x90>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2fc:	00a4      	lsls	r4, r4, #2
     2fe:	ab01      	add	r3, sp, #4
     300:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     302:	2300      	movs	r3, #0
     304:	466a      	mov	r2, sp
     306:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     308:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     30a:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     30c:	3301      	adds	r3, #1
     30e:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     310:	b2c0      	uxtb	r0, r0
     312:	4669      	mov	r1, sp
     314:	f001 fe1a 	bl	1f4c <system_pinmux_pin_set_config>
     318:	e7bc      	b.n	294 <_adc_set_config+0x90>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31a:	00a4      	lsls	r4, r4, #2
     31c:	ab01      	add	r3, sp, #4
     31e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     320:	2300      	movs	r3, #0
     322:	466a      	mov	r2, sp
     324:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     326:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     328:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     32a:	3301      	adds	r3, #1
     32c:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     32e:	b2c0      	uxtb	r0, r0
     330:	4669      	mov	r1, sp
     332:	f001 fe0b 	bl	1f4c <system_pinmux_pin_set_config>
     336:	e7d9      	b.n	2ec <_adc_set_config+0xe8>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     338:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     33a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     33c:	2301      	movs	r3, #1
     33e:	e01a      	b.n	376 <_adc_set_config+0x172>
		adjres = config->divide_result;
     340:	7c7b      	ldrb	r3, [r7, #17]
		accumulate = config->accumulate_samples;
     342:	7c3a      	ldrb	r2, [r7, #16]
		resolution = ADC_RESOLUTION_16BIT;
     344:	2010      	movs	r0, #16
		break;
     346:	e016      	b.n	376 <_adc_set_config+0x172>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     348:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     34a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     34c:	2301      	movs	r3, #1
		break;
     34e:	e012      	b.n	376 <_adc_set_config+0x172>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     350:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     352:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     354:	2300      	movs	r3, #0
		break;
     356:	e00e      	b.n	376 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     358:	2200      	movs	r2, #0
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     35a:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     35c:	2300      	movs	r3, #0
		break;
     35e:	e00a      	b.n	376 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     360:	2200      	movs	r2, #0
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     362:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     364:	2300      	movs	r3, #0
		break;
     366:	e006      	b.n	376 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     368:	2200      	movs	r2, #0
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     36a:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     36c:	2300      	movs	r3, #0
		break;
     36e:	e002      	b.n	376 <_adc_set_config+0x172>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     370:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     372:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     374:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     376:	011b      	lsls	r3, r3, #4
     378:	2170      	movs	r1, #112	; 0x70
     37a:	400b      	ands	r3, r1
     37c:	4313      	orrs	r3, r2
     37e:	464a      	mov	r2, r9
     380:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     382:	7dfb      	ldrb	r3, [r7, #23]
     384:	2b3f      	cmp	r3, #63	; 0x3f
     386:	d906      	bls.n	396 <_adc_set_config+0x192>
		return STATUS_ERR_INVALID_ARG;
     388:	2017      	movs	r0, #23
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
}
     38a:	b016      	add	sp, #88	; 0x58
     38c:	bc1c      	pop	{r2, r3, r4}
     38e:	4690      	mov	r8, r2
     390:	4699      	mov	r9, r3
     392:	46a2      	mov	sl, r4
     394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adc_module->SAMPCTRL.reg =
     396:	70d3      	strb	r3, [r2, #3]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     398:	4653      	mov	r3, sl
     39a:	681b      	ldr	r3, [r3, #0]
     39c:	7e5b      	ldrb	r3, [r3, #25]
     39e:	b25b      	sxtb	r3, r3
     3a0:	2b00      	cmp	r3, #0
     3a2:	db27      	blt.n	3f4 <_adc_set_config+0x1f0>
	return false;
     3a4:	2200      	movs	r2, #0
	while (adc_is_syncing(module_inst)) {
     3a6:	2a00      	cmp	r2, #0
     3a8:	d1f6      	bne.n	398 <_adc_set_config+0x194>
			config->clock_prescaler |
     3aa:	887b      	ldrh	r3, [r7, #2]
     3ac:	4303      	orrs	r3, r0
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3ae:	2124      	movs	r1, #36	; 0x24
     3b0:	5c79      	ldrb	r1, [r7, r1]
     3b2:	00c9      	lsls	r1, r1, #3
			resolution |
     3b4:	430b      	orrs	r3, r1
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3b6:	7d39      	ldrb	r1, [r7, #20]
     3b8:	0089      	lsls	r1, r1, #2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3ba:	430b      	orrs	r3, r1
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3bc:	7cb9      	ldrb	r1, [r7, #18]
     3be:	0049      	lsls	r1, r1, #1
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3c0:	430b      	orrs	r3, r1
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3c2:	7cf9      	ldrb	r1, [r7, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3c4:	430b      	orrs	r3, r1
	adc_module->CTRLB.reg =
     3c6:	4649      	mov	r1, r9
     3c8:	808b      	strh	r3, [r1, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ca:	7e3b      	ldrb	r3, [r7, #24]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d100      	bne.n	3d2 <_adc_set_config+0x1ce>
     3d0:	e0a8      	b.n	524 <STACK_SIZE+0x124>
		switch (resolution) {
     3d2:	2810      	cmp	r0, #16
     3d4:	d06c      	beq.n	4b0 <STACK_SIZE+0xb0>
     3d6:	d90f      	bls.n	3f8 <_adc_set_config+0x1f4>
     3d8:	2820      	cmp	r0, #32
     3da:	d030      	beq.n	43e <STACK_SIZE+0x3e>
     3dc:	2830      	cmp	r0, #48	; 0x30
     3de:	d000      	beq.n	3e2 <_adc_set_config+0x1de>
     3e0:	e0a0      	b.n	524 <STACK_SIZE+0x124>
			if (config->differential_mode &&
     3e2:	7cf9      	ldrb	r1, [r7, #19]
     3e4:	2900      	cmp	r1, #0
     3e6:	d020      	beq.n	42a <STACK_SIZE+0x2a>
					(config->window.window_lower_value > 127 ||
     3e8:	69f9      	ldr	r1, [r7, #28]
     3ea:	3180      	adds	r1, #128	; 0x80
			if (config->differential_mode &&
     3ec:	29ff      	cmp	r1, #255	; 0xff
     3ee:	d913      	bls.n	418 <STACK_SIZE+0x18>
				return STATUS_ERR_INVALID_ARG;
     3f0:	2017      	movs	r0, #23
     3f2:	e7ca      	b.n	38a <_adc_set_config+0x186>
		return true;
     3f4:	2201      	movs	r2, #1
     3f6:	e7d6      	b.n	3a6 <_adc_set_config+0x1a2>
		switch (resolution) {
     3f8:	2800      	cmp	r0, #0
     3fa:	d000      	beq.n	3fe <_adc_set_config+0x1fa>
     3fc:	e092      	b.n	524 <STACK_SIZE+0x124>
			if (config->differential_mode &&
     3fe:	7cf9      	ldrb	r1, [r7, #19]
     400:	2900      	cmp	r1, #0
     402:	d04a      	beq.n	49a <STACK_SIZE+0x9a>
					(config->window.window_lower_value > 2047 ||
     404:	69f9      	ldr	r1, [r7, #28]
     406:	2080      	movs	r0, #128	; 0x80
     408:	0100      	lsls	r0, r0, #4
     40a:	4684      	mov	ip, r0
     40c:	4461      	add	r1, ip
			if (config->differential_mode &&
     40e:	483c      	ldr	r0, [pc, #240]	; (500 <STACK_SIZE+0x100>)
     410:	4281      	cmp	r1, r0
     412:	d937      	bls.n	484 <STACK_SIZE+0x84>
				return STATUS_ERR_INVALID_ARG;
     414:	2017      	movs	r0, #23
     416:	e7b8      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 127 ||
     418:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -128 ||
     41a:	297f      	cmp	r1, #127	; 0x7f
     41c:	dd01      	ble.n	422 <STACK_SIZE+0x22>
				return STATUS_ERR_INVALID_ARG;
     41e:	2017      	movs	r0, #23
     420:	e7b3      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 127 ||
     422:	3180      	adds	r1, #128	; 0x80
     424:	da01      	bge.n	42a <STACK_SIZE+0x2a>
				return STATUS_ERR_INVALID_ARG;
     426:	2017      	movs	r0, #23
     428:	e7af      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 255 ||
     42a:	69f9      	ldr	r1, [r7, #28]
     42c:	29ff      	cmp	r1, #255	; 0xff
     42e:	dd01      	ble.n	434 <STACK_SIZE+0x34>
				return STATUS_ERR_INVALID_ARG;
     430:	2017      	movs	r0, #23
     432:	e7aa      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 255 ||
     434:	6a39      	ldr	r1, [r7, #32]
     436:	29ff      	cmp	r1, #255	; 0xff
     438:	dd74      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     43a:	2017      	movs	r0, #23
     43c:	e7a5      	b.n	38a <_adc_set_config+0x186>
			if (config->differential_mode &&
     43e:	7cf9      	ldrb	r1, [r7, #19]
     440:	2900      	cmp	r1, #0
     442:	d014      	beq.n	46e <STACK_SIZE+0x6e>
					(config->window.window_lower_value > 511 ||
     444:	69f9      	ldr	r1, [r7, #28]
     446:	2080      	movs	r0, #128	; 0x80
     448:	0080      	lsls	r0, r0, #2
     44a:	4684      	mov	ip, r0
     44c:	4461      	add	r1, ip
			if (config->differential_mode &&
     44e:	482d      	ldr	r0, [pc, #180]	; (504 <STACK_SIZE+0x104>)
     450:	4281      	cmp	r1, r0
     452:	d901      	bls.n	458 <STACK_SIZE+0x58>
				return STATUS_ERR_INVALID_ARG;
     454:	2017      	movs	r0, #23
     456:	e798      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 511 ||
     458:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -512 ||
     45a:	482b      	ldr	r0, [pc, #172]	; (508 <STACK_SIZE+0x108>)
     45c:	4281      	cmp	r1, r0
     45e:	dd01      	ble.n	464 <STACK_SIZE+0x64>
				return STATUS_ERR_INVALID_ARG;
     460:	2017      	movs	r0, #23
     462:	e792      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 511 ||
     464:	4829      	ldr	r0, [pc, #164]	; (50c <STACK_SIZE+0x10c>)
     466:	4281      	cmp	r1, r0
     468:	da01      	bge.n	46e <STACK_SIZE+0x6e>
				return STATUS_ERR_INVALID_ARG;
     46a:	2017      	movs	r0, #23
     46c:	e78d      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 1023 ||
     46e:	4925      	ldr	r1, [pc, #148]	; (504 <STACK_SIZE+0x104>)
     470:	69f8      	ldr	r0, [r7, #28]
     472:	4288      	cmp	r0, r1
     474:	dd01      	ble.n	47a <STACK_SIZE+0x7a>
				return STATUS_ERR_INVALID_ARG;
     476:	2017      	movs	r0, #23
     478:	e787      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 1023 ||
     47a:	6a38      	ldr	r0, [r7, #32]
     47c:	4288      	cmp	r0, r1
     47e:	dd51      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     480:	2017      	movs	r0, #23
     482:	e782      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 2047 ||
     484:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -2048 ||
     486:	4822      	ldr	r0, [pc, #136]	; (510 <STACK_SIZE+0x110>)
     488:	4281      	cmp	r1, r0
     48a:	dd01      	ble.n	490 <STACK_SIZE+0x90>
				return STATUS_ERR_INVALID_ARG;
     48c:	2017      	movs	r0, #23
     48e:	e77c      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 2047 ||
     490:	4820      	ldr	r0, [pc, #128]	; (514 <STACK_SIZE+0x114>)
     492:	4281      	cmp	r1, r0
     494:	da01      	bge.n	49a <STACK_SIZE+0x9a>
				return STATUS_ERR_INVALID_ARG;
     496:	2017      	movs	r0, #23
     498:	e777      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 4095 ||
     49a:	4919      	ldr	r1, [pc, #100]	; (500 <STACK_SIZE+0x100>)
     49c:	69f8      	ldr	r0, [r7, #28]
     49e:	4288      	cmp	r0, r1
     4a0:	dd01      	ble.n	4a6 <STACK_SIZE+0xa6>
				return STATUS_ERR_INVALID_ARG;
     4a2:	2017      	movs	r0, #23
     4a4:	e771      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 4095 ||
     4a6:	6a38      	ldr	r0, [r7, #32]
     4a8:	4288      	cmp	r0, r1
     4aa:	dd3b      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     4ac:	2017      	movs	r0, #23
     4ae:	e76c      	b.n	38a <_adc_set_config+0x186>
			if (config->differential_mode &&
     4b0:	7cf9      	ldrb	r1, [r7, #19]
     4b2:	2900      	cmp	r1, #0
     4b4:	d014      	beq.n	4e0 <STACK_SIZE+0xe0>
					(config->window.window_lower_value > 32767 ||
     4b6:	69f9      	ldr	r1, [r7, #28]
     4b8:	2080      	movs	r0, #128	; 0x80
     4ba:	0200      	lsls	r0, r0, #8
     4bc:	4684      	mov	ip, r0
     4be:	4461      	add	r1, ip
			if (config->differential_mode &&
     4c0:	4815      	ldr	r0, [pc, #84]	; (518 <STACK_SIZE+0x118>)
     4c2:	4281      	cmp	r1, r0
     4c4:	d901      	bls.n	4ca <STACK_SIZE+0xca>
				return STATUS_ERR_INVALID_ARG;
     4c6:	2017      	movs	r0, #23
     4c8:	e75f      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 32767 ||
     4ca:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -32768 ||
     4cc:	4813      	ldr	r0, [pc, #76]	; (51c <STACK_SIZE+0x11c>)
     4ce:	4281      	cmp	r1, r0
     4d0:	dd01      	ble.n	4d6 <STACK_SIZE+0xd6>
				return STATUS_ERR_INVALID_ARG;
     4d2:	2017      	movs	r0, #23
     4d4:	e759      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 32767 ||
     4d6:	4812      	ldr	r0, [pc, #72]	; (520 <STACK_SIZE+0x120>)
     4d8:	4281      	cmp	r1, r0
     4da:	da01      	bge.n	4e0 <STACK_SIZE+0xe0>
				return STATUS_ERR_INVALID_ARG;
     4dc:	2017      	movs	r0, #23
     4de:	e754      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 65535 ||
     4e0:	490d      	ldr	r1, [pc, #52]	; (518 <STACK_SIZE+0x118>)
     4e2:	69f8      	ldr	r0, [r7, #28]
     4e4:	4288      	cmp	r0, r1
     4e6:	dd01      	ble.n	4ec <STACK_SIZE+0xec>
				return STATUS_ERR_INVALID_ARG;
     4e8:	2017      	movs	r0, #23
     4ea:	e74e      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 65535 ||
     4ec:	6a38      	ldr	r0, [r7, #32]
     4ee:	4288      	cmp	r0, r1
     4f0:	dd18      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     4f2:	2017      	movs	r0, #23
     4f4:	e749      	b.n	38a <_adc_set_config+0x186>
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00002f44 	.word	0x00002f44
     4fc:	00002e70 	.word	0x00002e70
     500:	00000fff 	.word	0x00000fff
     504:	000003ff 	.word	0x000003ff
     508:	000001ff 	.word	0x000001ff
     50c:	fffffe00 	.word	0xfffffe00
     510:	000007ff 	.word	0x000007ff
     514:	fffff800 	.word	0xfffff800
     518:	0000ffff 	.word	0x0000ffff
     51c:	00007fff 	.word	0x00007fff
     520:	ffff8000 	.word	0xffff8000
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     524:	4651      	mov	r1, sl
     526:	6809      	ldr	r1, [r1, #0]
     528:	7e49      	ldrb	r1, [r1, #25]
     52a:	b249      	sxtb	r1, r1
     52c:	2900      	cmp	r1, #0
     52e:	db26      	blt.n	57e <STACK_SIZE+0x17e>
	return false;
     530:	0011      	movs	r1, r2
	while (adc_is_syncing(module_inst)) {
     532:	2900      	cmp	r1, #0
     534:	d1f6      	bne.n	524 <STACK_SIZE+0x124>
	adc_module->WINCTRL.reg = config->window.window_mode;
     536:	464a      	mov	r2, r9
     538:	7213      	strb	r3, [r2, #8]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     53a:	4653      	mov	r3, sl
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	7e5b      	ldrb	r3, [r3, #25]
     540:	b25b      	sxtb	r3, r3
     542:	2b00      	cmp	r3, #0
     544:	db1d      	blt.n	582 <STACK_SIZE+0x182>
	return false;
     546:	000a      	movs	r2, r1
	while (adc_is_syncing(module_inst)) {
     548:	2a00      	cmp	r2, #0
     54a:	d1f6      	bne.n	53a <STACK_SIZE+0x13a>
	adc_module->WINLT.reg =
     54c:	8bbb      	ldrh	r3, [r7, #28]
     54e:	4649      	mov	r1, r9
     550:	838b      	strh	r3, [r1, #28]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     552:	4653      	mov	r3, sl
     554:	681b      	ldr	r3, [r3, #0]
     556:	7e5b      	ldrb	r3, [r3, #25]
     558:	b25b      	sxtb	r3, r3
     55a:	2b00      	cmp	r3, #0
     55c:	db13      	blt.n	586 <STACK_SIZE+0x186>
	return false;
     55e:	0011      	movs	r1, r2
	while (adc_is_syncing(module_inst)) {
     560:	2900      	cmp	r1, #0
     562:	d1f6      	bne.n	552 <STACK_SIZE+0x152>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     564:	8c3b      	ldrh	r3, [r7, #32]
     566:	464a      	mov	r2, r9
     568:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     56a:	232c      	movs	r3, #44	; 0x2c
     56c:	5cfb      	ldrb	r3, [r7, r3]
	if (inputs_to_scan > 0) {
     56e:	2b00      	cmp	r3, #0
     570:	d001      	beq.n	576 <STACK_SIZE+0x176>
		inputs_to_scan--;
     572:	3b01      	subs	r3, #1
     574:	b2db      	uxtb	r3, r3
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     576:	2b0f      	cmp	r3, #15
     578:	d907      	bls.n	58a <STACK_SIZE+0x18a>
		return STATUS_ERR_INVALID_ARG;
     57a:	2017      	movs	r0, #23
     57c:	e705      	b.n	38a <_adc_set_config+0x186>
		return true;
     57e:	2101      	movs	r1, #1
     580:	e7d7      	b.n	532 <STACK_SIZE+0x132>
     582:	2201      	movs	r2, #1
     584:	e7e0      	b.n	548 <STACK_SIZE+0x148>
     586:	2101      	movs	r1, #1
     588:	e7ea      	b.n	560 <STACK_SIZE+0x160>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     58a:	222b      	movs	r2, #43	; 0x2b
     58c:	5cba      	ldrb	r2, [r7, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     58e:	2a0f      	cmp	r2, #15
     590:	d901      	bls.n	596 <STACK_SIZE+0x196>
		return STATUS_ERR_INVALID_ARG;
     592:	2017      	movs	r0, #23
     594:	e6f9      	b.n	38a <_adc_set_config+0x186>
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     596:	4650      	mov	r0, sl
     598:	6800      	ldr	r0, [r0, #0]
     59a:	7e40      	ldrb	r0, [r0, #25]
     59c:	b240      	sxtb	r0, r0
     59e:	2800      	cmp	r0, #0
     5a0:	da39      	bge.n	616 <STACK_SIZE+0x216>
		return true;
     5a2:	2001      	movs	r0, #1
	while (adc_is_syncing(module_inst)) {
     5a4:	2800      	cmp	r0, #0
     5a6:	d1f6      	bne.n	596 <STACK_SIZE+0x196>
			(config->pin_scan.offset_start_scan <<
     5a8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     5aa:	68b9      	ldr	r1, [r7, #8]
     5ac:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     5ae:	041b      	lsls	r3, r3, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     5b0:	4313      	orrs	r3, r2
			config->negative_input |
     5b2:	89fa      	ldrh	r2, [r7, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     5b4:	4313      	orrs	r3, r2
			config->positive_input;
     5b6:	7b3a      	ldrb	r2, [r7, #12]
			config->negative_input |
     5b8:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     5ba:	464a      	mov	r2, r9
     5bc:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     5be:	232a      	movs	r3, #42	; 0x2a
     5c0:	5cfb      	ldrb	r3, [r7, r3]
     5c2:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     5c4:	230f      	movs	r3, #15
     5c6:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     5c8:	3315      	adds	r3, #21
     5ca:	5cfb      	ldrb	r3, [r7, r3]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d00f      	beq.n	5f0 <STACK_SIZE+0x1f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     5d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     5d2:	4a15      	ldr	r2, [pc, #84]	; (628 <STACK_SIZE+0x228>)
     5d4:	4293      	cmp	r3, r2
     5d6:	d822      	bhi.n	61e <STACK_SIZE+0x21e>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     5d8:	464a      	mov	r2, r9
     5da:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     5dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     5de:	2380      	movs	r3, #128	; 0x80
     5e0:	011b      	lsls	r3, r3, #4
     5e2:	18d3      	adds	r3, r2, r3
     5e4:	b29b      	uxth	r3, r3
     5e6:	4910      	ldr	r1, [pc, #64]	; (628 <STACK_SIZE+0x228>)
     5e8:	428b      	cmp	r3, r1
     5ea:	d81a      	bhi.n	622 <STACK_SIZE+0x222>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     5ec:	464b      	mov	r3, r9
     5ee:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     5f0:	4b0e      	ldr	r3, [pc, #56]	; (62c <STACK_SIZE+0x22c>)
     5f2:	681b      	ldr	r3, [r3, #0]
     5f4:	08db      	lsrs	r3, r3, #3
     5f6:	021b      	lsls	r3, r3, #8
     5f8:	22e0      	movs	r2, #224	; 0xe0
     5fa:	00d2      	lsls	r2, r2, #3
     5fc:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     5fe:	490c      	ldr	r1, [pc, #48]	; (630 <STACK_SIZE+0x230>)
     600:	680a      	ldr	r2, [r1, #0]
     602:	6849      	ldr	r1, [r1, #4]
     604:	0149      	lsls	r1, r1, #5
     606:	0ed2      	lsrs	r2, r2, #27
     608:	430a      	orrs	r2, r1
     60a:	b2d2      	uxtb	r2, r2
			) |
     60c:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     60e:	464a      	mov	r2, r9
     610:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     612:	2000      	movs	r0, #0
     614:	e6b9      	b.n	38a <_adc_set_config+0x186>
	return false;
     616:	0008      	movs	r0, r1
     618:	e7c4      	b.n	5a4 <STACK_SIZE+0x1a4>
		return STATUS_ERR_INVALID_ARG;
     61a:	2017      	movs	r0, #23
     61c:	e6b5      	b.n	38a <_adc_set_config+0x186>
			return STATUS_ERR_INVALID_ARG;
     61e:	2017      	movs	r0, #23
     620:	e6b3      	b.n	38a <_adc_set_config+0x186>
			return STATUS_ERR_INVALID_ARG;
     622:	2017      	movs	r0, #23
     624:	e6b1      	b.n	38a <_adc_set_config+0x186>
     626:	46c0      	nop			; (mov r8, r8)
     628:	00000fff 	.word	0x00000fff
     62c:	00806024 	.word	0x00806024
     630:	00806020 	.word	0x00806020

00000634 <adc_get_config_defaults>:
{
     634:	b510      	push	{r4, lr}
	config->clock_source                  = GCLK_GENERATOR_0;
     636:	2200      	movs	r2, #0
     638:	2300      	movs	r3, #0
     63a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     63c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     63e:	2100      	movs	r1, #0
     640:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     642:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     644:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     646:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     648:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     64a:	6082      	str	r2, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     64c:	7303      	strb	r3, [r0, #12]
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     64e:	24c0      	movs	r4, #192	; 0xc0
     650:	0164      	lsls	r4, r4, #5
     652:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     654:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     656:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     658:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     65a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     65c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     65e:	242a      	movs	r4, #42	; 0x2a
     660:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     662:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     664:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     666:	3c06      	subs	r4, #6
     668:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     66a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     66c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     66e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     670:	232b      	movs	r3, #43	; 0x2b
     672:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     674:	3301      	adds	r3, #1
     676:	54c1      	strb	r1, [r0, r3]
}
     678:	bd10      	pop	{r4, pc}
	...

0000067c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     67c:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     67e:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     680:	4c0e      	ldr	r4, [pc, #56]	; (6bc <adc_init+0x40>)
     682:	6a25      	ldr	r5, [r4, #32]
     684:	2380      	movs	r3, #128	; 0x80
     686:	005b      	lsls	r3, r3, #1
     688:	432b      	orrs	r3, r5
     68a:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     68c:	780b      	ldrb	r3, [r1, #0]
     68e:	07db      	lsls	r3, r3, #31
     690:	d501      	bpl.n	696 <adc_init+0x1a>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     692:	2005      	movs	r0, #5
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     694:	bd70      	pop	{r4, r5, r6, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     696:	780b      	ldrb	r3, [r1, #0]
     698:	079b      	lsls	r3, r3, #30
     69a:	d501      	bpl.n	6a0 <adc_init+0x24>
		return STATUS_ERR_DENIED;
     69c:	201c      	movs	r0, #28
     69e:	e7f9      	b.n	694 <adc_init+0x18>
	module_inst->reference = config->reference;
     6a0:	7853      	ldrb	r3, [r2, #1]
     6a2:	7103      	strb	r3, [r0, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     6a4:	2b00      	cmp	r3, #0
     6a6:	d104      	bne.n	6b2 <adc_init+0x36>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     6a8:	4905      	ldr	r1, [pc, #20]	; (6c0 <adc_init+0x44>)
     6aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     6ac:	2404      	movs	r4, #4
     6ae:	4323      	orrs	r3, r4
     6b0:	640b      	str	r3, [r1, #64]	; 0x40
	return _adc_set_config(module_inst, config);
     6b2:	0011      	movs	r1, r2
     6b4:	f7ff fda6 	bl	204 <_adc_set_config>
     6b8:	e7ec      	b.n	694 <adc_init+0x18>
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	40000400 	.word	0x40000400
     6c0:	40000800 	.word	0x40000800

000006c4 <extint_register_callback>:
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     6c4:	2a00      	cmp	r2, #0
     6c6:	d001      	beq.n	6cc <extint_register_callback+0x8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6c8:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6ca:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     6cc:	008b      	lsls	r3, r1, #2
     6ce:	4a07      	ldr	r2, [pc, #28]	; (6ec <extint_register_callback+0x28>)
     6d0:	589b      	ldr	r3, [r3, r2]
     6d2:	2b00      	cmp	r3, #0
     6d4:	d003      	beq.n	6de <extint_register_callback+0x1a>
	} else if (_extint_dev.callbacks[channel] == callback) {
     6d6:	4283      	cmp	r3, r0
     6d8:	d005      	beq.n	6e6 <extint_register_callback+0x22>
	return STATUS_ERR_ALREADY_INITIALIZED;
     6da:	201d      	movs	r0, #29
     6dc:	e7f5      	b.n	6ca <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     6de:	0089      	lsls	r1, r1, #2
     6e0:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     6e2:	2000      	movs	r0, #0
     6e4:	e7f1      	b.n	6ca <extint_register_callback+0x6>
		return STATUS_OK;
     6e6:	2000      	movs	r0, #0
     6e8:	e7ef      	b.n	6ca <extint_register_callback+0x6>
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	200000a4 	.word	0x200000a4

000006f0 <extint_chan_enable_callback>:
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6f0:	2900      	cmp	r1, #0
     6f2:	d001      	beq.n	6f8 <extint_chan_enable_callback+0x8>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6f4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     6f6:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     6f8:	281f      	cmp	r0, #31
     6fa:	d905      	bls.n	708 <extint_chan_enable_callback+0x18>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     6fc:	2200      	movs	r2, #0
		eic->INTENSET.reg = (1UL << channel);
     6fe:	2301      	movs	r3, #1
     700:	4083      	lsls	r3, r0
     702:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     704:	2000      	movs	r0, #0
     706:	e7f6      	b.n	6f6 <extint_chan_enable_callback+0x6>
		return eics[eic_index];
     708:	4a00      	ldr	r2, [pc, #0]	; (70c <extint_chan_enable_callback+0x1c>)
     70a:	e7f8      	b.n	6fe <extint_chan_enable_callback+0xe>
     70c:	40001800 	.word	0x40001800

00000710 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     710:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     712:	2200      	movs	r2, #0
     714:	4b0f      	ldr	r3, [pc, #60]	; (754 <EIC_Handler+0x44>)
     716:	701a      	strb	r2, [r3, #0]
     718:	e005      	b.n	726 <EIC_Handler+0x16>
     71a:	480f      	ldr	r0, [pc, #60]	; (758 <EIC_Handler+0x48>)
     71c:	e00a      	b.n	734 <EIC_Handler+0x24>
     71e:	4a0d      	ldr	r2, [pc, #52]	; (754 <EIC_Handler+0x44>)
     720:	7813      	ldrb	r3, [r2, #0]
     722:	3301      	adds	r3, #1
     724:	7013      	strb	r3, [r2, #0]
     726:	4b0b      	ldr	r3, [pc, #44]	; (754 <EIC_Handler+0x44>)
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	2b0f      	cmp	r3, #15
     72c:	d811      	bhi.n	752 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     72e:	2b1f      	cmp	r3, #31
     730:	d9f3      	bls.n	71a <EIC_Handler+0xa>
		return NULL;
     732:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     734:	211f      	movs	r1, #31
     736:	4019      	ands	r1, r3
     738:	2201      	movs	r2, #1
     73a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     73c:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     73e:	4211      	tst	r1, r2
     740:	d0ed      	beq.n	71e <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     742:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     744:	009b      	lsls	r3, r3, #2
     746:	4a05      	ldr	r2, [pc, #20]	; (75c <EIC_Handler+0x4c>)
     748:	589b      	ldr	r3, [r3, r2]
     74a:	2b00      	cmp	r3, #0
     74c:	d0e7      	beq.n	71e <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     74e:	4798      	blx	r3
     750:	e7e5      	b.n	71e <EIC_Handler+0xe>
			}
		}
	}
}
     752:	bd10      	pop	{r4, pc}
     754:	200000a0 	.word	0x200000a0
     758:	40001800 	.word	0x40001800
     75c:	200000a4 	.word	0x200000a4

00000760 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     760:	2200      	movs	r2, #0
     762:	2a00      	cmp	r2, #0
     764:	d006      	beq.n	774 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     766:	2300      	movs	r3, #0
     768:	2b00      	cmp	r3, #0
     76a:	d00b      	beq.n	784 <_extint_enable+0x24>
	return false;
     76c:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     76e:	2b00      	cmp	r3, #0
     770:	d1f9      	bne.n	766 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     772:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     774:	4908      	ldr	r1, [pc, #32]	; (798 <_extint_enable+0x38>)
     776:	780b      	ldrb	r3, [r1, #0]
     778:	2002      	movs	r0, #2
     77a:	4303      	orrs	r3, r0
     77c:	b2db      	uxtb	r3, r3
     77e:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     780:	3201      	adds	r2, #1
     782:	e7ee      	b.n	762 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     784:	4a04      	ldr	r2, [pc, #16]	; (798 <_extint_enable+0x38>)
     786:	7852      	ldrb	r2, [r2, #1]
     788:	b252      	sxtb	r2, r2
     78a:	2a00      	cmp	r2, #0
     78c:	db01      	blt.n	792 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     78e:	3301      	adds	r3, #1
     790:	e7ea      	b.n	768 <_extint_enable+0x8>
			return true;
     792:	2301      	movs	r3, #1
     794:	e7eb      	b.n	76e <_extint_enable+0xe>
     796:	46c0      	nop			; (mov r8, r8)
     798:	40001800 	.word	0x40001800

0000079c <_system_extint_init>:
{
     79c:	b500      	push	{lr}
     79e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     7a0:	4a1b      	ldr	r2, [pc, #108]	; (810 <_system_extint_init+0x74>)
     7a2:	6993      	ldr	r3, [r2, #24]
     7a4:	2140      	movs	r1, #64	; 0x40
     7a6:	430b      	orrs	r3, r1
     7a8:	6193      	str	r3, [r2, #24]
     7aa:	a901      	add	r1, sp, #4
     7ac:	2300      	movs	r3, #0
     7ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     7b0:	2005      	movs	r0, #5
     7b2:	f001 fb61 	bl	1e78 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     7b6:	2005      	movs	r0, #5
     7b8:	f001 fb22 	bl	1e00 <system_gclk_chan_enable>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7bc:	2200      	movs	r2, #0
     7be:	2a00      	cmp	r2, #0
     7c0:	d006      	beq.n	7d0 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7c2:	2300      	movs	r3, #0
     7c4:	2b00      	cmp	r3, #0
     7c6:	d00b      	beq.n	7e0 <_system_extint_init+0x44>
	return false;
     7c8:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     7ca:	2b00      	cmp	r3, #0
     7cc:	d1f9      	bne.n	7c2 <_system_extint_init+0x26>
     7ce:	e016      	b.n	7fe <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     7d0:	4910      	ldr	r1, [pc, #64]	; (814 <_system_extint_init+0x78>)
     7d2:	780b      	ldrb	r3, [r1, #0]
     7d4:	2001      	movs	r0, #1
     7d6:	4303      	orrs	r3, r0
     7d8:	b2db      	uxtb	r3, r3
     7da:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7dc:	3201      	adds	r2, #1
     7de:	e7ee      	b.n	7be <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     7e0:	4a0c      	ldr	r2, [pc, #48]	; (814 <_system_extint_init+0x78>)
     7e2:	7852      	ldrb	r2, [r2, #1]
     7e4:	b252      	sxtb	r2, r2
     7e6:	2a00      	cmp	r2, #0
     7e8:	db01      	blt.n	7ee <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7ea:	3301      	adds	r3, #1
     7ec:	e7ea      	b.n	7c4 <_system_extint_init+0x28>
			return true;
     7ee:	2301      	movs	r3, #1
     7f0:	e7eb      	b.n	7ca <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     7f2:	0099      	lsls	r1, r3, #2
     7f4:	2000      	movs	r0, #0
     7f6:	4a08      	ldr	r2, [pc, #32]	; (818 <_system_extint_init+0x7c>)
     7f8:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     7fa:	3301      	adds	r3, #1
     7fc:	b2db      	uxtb	r3, r3
     7fe:	2b0f      	cmp	r3, #15
     800:	d9f7      	bls.n	7f2 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     802:	2210      	movs	r2, #16
     804:	4b05      	ldr	r3, [pc, #20]	; (81c <_system_extint_init+0x80>)
     806:	601a      	str	r2, [r3, #0]
	_extint_enable();
     808:	f7ff ffaa 	bl	760 <_extint_enable>
}
     80c:	b003      	add	sp, #12
     80e:	bd00      	pop	{pc}
     810:	40000400 	.word	0x40000400
     814:	40001800 	.word	0x40001800
     818:	200000a4 	.word	0x200000a4
     81c:	e000e100 	.word	0xe000e100

00000820 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     820:	2300      	movs	r3, #0
     822:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     824:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     826:	2201      	movs	r2, #1
     828:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     82a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     82c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     82e:	3302      	adds	r3, #2
     830:	72c3      	strb	r3, [r0, #11]
}
     832:	4770      	bx	lr

00000834 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     834:	b5f0      	push	{r4, r5, r6, r7, lr}
     836:	b083      	sub	sp, #12
     838:	0005      	movs	r5, r0
     83a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     83c:	a901      	add	r1, sp, #4
     83e:	2300      	movs	r3, #0
     840:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     842:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     844:	7923      	ldrb	r3, [r4, #4]
     846:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     848:	7a23      	ldrb	r3, [r4, #8]
     84a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     84c:	7820      	ldrb	r0, [r4, #0]
     84e:	f001 fb7d 	bl	1f4c <system_pinmux_pin_set_config>
	if (eic_index < EIC_INST_NUM) {
     852:	2d1f      	cmp	r5, #31
     854:	d920      	bls.n	898 <extint_chan_set_config+0x64>
		return NULL;
     856:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     858:	2207      	movs	r2, #7
     85a:	402a      	ands	r2, r5
     85c:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     85e:	7ae3      	ldrb	r3, [r4, #11]
     860:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     862:	7aa1      	ldrb	r1, [r4, #10]
     864:	2900      	cmp	r1, #0
     866:	d002      	beq.n	86e <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     868:	2608      	movs	r6, #8
     86a:	431e      	orrs	r6, r3
     86c:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     86e:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
     870:	3306      	adds	r3, #6
     872:	009b      	lsls	r3, r3, #2
     874:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     876:	270f      	movs	r7, #15
     878:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     87a:	43b9      	bics	r1, r7
			(new_config << config_pos);
     87c:	4096      	lsls	r6, r2
     87e:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     880:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     882:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     884:	7a63      	ldrb	r3, [r4, #9]
     886:	2b00      	cmp	r3, #0
     888:	d108      	bne.n	89c <extint_chan_set_config+0x68>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     88a:	6943      	ldr	r3, [r0, #20]
     88c:	2201      	movs	r2, #1
     88e:	40aa      	lsls	r2, r5
     890:	4393      	bics	r3, r2
     892:	6143      	str	r3, [r0, #20]
	}
}
     894:	b003      	add	sp, #12
     896:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
     898:	4803      	ldr	r0, [pc, #12]	; (8a8 <extint_chan_set_config+0x74>)
     89a:	e7dd      	b.n	858 <extint_chan_set_config+0x24>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     89c:	6943      	ldr	r3, [r0, #20]
     89e:	2201      	movs	r2, #1
     8a0:	40aa      	lsls	r2, r5
     8a2:	4313      	orrs	r3, r2
     8a4:	6143      	str	r3, [r0, #20]
     8a6:	e7f5      	b.n	894 <extint_chan_set_config+0x60>
     8a8:	40001800 	.word	0x40001800

000008ac <is_button_two_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     8ac:	4b1a      	ldr	r3, [pc, #104]	; (918 <is_button_two_pressed+0x6c>)
     8ae:	6a1b      	ldr	r3, [r3, #32]
/************************************************************************/
/* Button 2 function													*/
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     8b0:	041b      	lsls	r3, r3, #16
     8b2:	d417      	bmi.n	8e4 <is_button_two_pressed+0x38>
    BUTTON_TWO_PRESS_STATUS = true;
     8b4:	2201      	movs	r2, #1
     8b6:	4b19      	ldr	r3, [pc, #100]	; (91c <is_button_two_pressed+0x70>)
     8b8:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count--;
     8ba:	4a19      	ldr	r2, [pc, #100]	; (920 <is_button_two_pressed+0x74>)
     8bc:	6813      	ldr	r3, [r2, #0]
     8be:	3b01      	subs	r3, #1
     8c0:	6013      	str	r3, [r2, #0]
    long_press_B2_delay_count--;
     8c2:	4a18      	ldr	r2, [pc, #96]	; (924 <is_button_two_pressed+0x78>)
     8c4:	6813      	ldr	r3, [r2, #0]
     8c6:	3b01      	subs	r3, #1
     8c8:	6013      	str	r3, [r2, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;

  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     8ca:	4b16      	ldr	r3, [pc, #88]	; (924 <is_button_two_pressed+0x78>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	dd13      	ble.n	8fa <is_button_two_pressed+0x4e>
    LongPressB2Flag = true;
    long_press_B2_delay_count = 0;
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <is_button_two_pressed+0x74>)
     8d4:	681b      	ldr	r3, [r3, #0]
     8d6:	2b00      	cmp	r3, #0
     8d8:	dd16      	ble.n	908 <is_button_two_pressed+0x5c>
    BUTTON_TWO_RELEASE_STATUS = false;
    press_B2_delay_count = 0;
    return true;

  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
     8da:	2201      	movs	r2, #1
     8dc:	4b12      	ldr	r3, [pc, #72]	; (928 <is_button_two_pressed+0x7c>)
     8de:	701a      	strb	r2, [r3, #0]
    return false;
     8e0:	2000      	movs	r0, #0
  }
     8e2:	4770      	bx	lr
    BUTTON_TWO_PRESS_STATUS = false;
     8e4:	2200      	movs	r2, #0
     8e6:	4b0d      	ldr	r3, [pc, #52]	; (91c <is_button_two_pressed+0x70>)
     8e8:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     8ea:	320a      	adds	r2, #10
     8ec:	4b0c      	ldr	r3, [pc, #48]	; (920 <is_button_two_pressed+0x74>)
     8ee:	601a      	str	r2, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     8f0:	3223      	adds	r2, #35	; 0x23
     8f2:	32ff      	adds	r2, #255	; 0xff
     8f4:	4b0b      	ldr	r3, [pc, #44]	; (924 <is_button_two_pressed+0x78>)
     8f6:	601a      	str	r2, [r3, #0]
     8f8:	e7e7      	b.n	8ca <is_button_two_pressed+0x1e>
    LongPressB2Flag = true;
     8fa:	2201      	movs	r2, #1
     8fc:	4b0b      	ldr	r3, [pc, #44]	; (92c <is_button_two_pressed+0x80>)
     8fe:	701a      	strb	r2, [r3, #0]
    long_press_B2_delay_count = 0;
     900:	2200      	movs	r2, #0
     902:	4b08      	ldr	r3, [pc, #32]	; (924 <is_button_two_pressed+0x78>)
     904:	601a      	str	r2, [r3, #0]
     906:	e7e4      	b.n	8d2 <is_button_two_pressed+0x26>
    BUTTON_TWO_RELEASE_STATUS = false;
     908:	2300      	movs	r3, #0
     90a:	4a07      	ldr	r2, [pc, #28]	; (928 <is_button_two_pressed+0x7c>)
     90c:	7013      	strb	r3, [r2, #0]
    press_B2_delay_count = 0;
     90e:	4a04      	ldr	r2, [pc, #16]	; (920 <is_button_two_pressed+0x74>)
     910:	6013      	str	r3, [r2, #0]
    return true;
     912:	2001      	movs	r0, #1
     914:	e7e5      	b.n	8e2 <is_button_two_pressed+0x36>
     916:	46c0      	nop			; (mov r8, r8)
     918:	41004400 	.word	0x41004400
     91c:	2000003c 	.word	0x2000003c
     920:	20000004 	.word	0x20000004
     924:	20000000 	.word	0x20000000
     928:	2000003d 	.word	0x2000003d
     92c:	2000003e 	.word	0x2000003e

00000930 <set_pwm_color_channel>:
#include "pwm_led.h"

uint8_t pwm_led_toggle_count = 0;


void set_pwm_color_channel(uint8_t channel, bool enable) {
     930:	b510      	push	{r4, lr}
	if (enable){
     932:	2900      	cmp	r1, #0
     934:	d010      	beq.n	958 <set_pwm_color_channel+0x28>
		tcc_set_compare_value(&tcc_instance,
     936:	4a0d      	ldr	r2, [pc, #52]	; (96c <set_pwm_color_channel+0x3c>)
     938:	0001      	movs	r1, r0
     93a:	480d      	ldr	r0, [pc, #52]	; (970 <set_pwm_color_channel+0x40>)
     93c:	f001 fdc6 	bl	24cc <tcc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     940:	4b0b      	ldr	r3, [pc, #44]	; (970 <set_pwm_color_channel+0x40>)
     942:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     944:	6893      	ldr	r3, [r2, #8]
     946:	075b      	lsls	r3, r3, #29
     948:	d4fc      	bmi.n	944 <set_pwm_color_channel+0x14>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     94a:	7953      	ldrb	r3, [r2, #5]
     94c:	211f      	movs	r1, #31
     94e:	438b      	bics	r3, r1
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     950:	d008      	beq.n	964 <set_pwm_color_channel+0x34>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     952:	2b60      	cmp	r3, #96	; 0x60
     954:	d1f6      	bne.n	944 <set_pwm_color_channel+0x14>
     956:	e007      	b.n	968 <set_pwm_color_channel+0x38>
		channel,
		INDICATION_LED_DUTY_CYCLE);
	}else{
		tcc_set_compare_value(&tcc_instance,
     958:	2200      	movs	r2, #0
     95a:	0001      	movs	r1, r0
     95c:	4804      	ldr	r0, [pc, #16]	; (970 <set_pwm_color_channel+0x40>)
     95e:	f001 fdb5 	bl	24cc <tcc_set_compare_value>
     962:	e7ed      	b.n	940 <set_pwm_color_channel+0x10>
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     964:	2360      	movs	r3, #96	; 0x60
     966:	7153      	strb	r3, [r2, #5]
		channel,
		ZERO_DUTY_CYCLE);
	}
	
	tcc_force_double_buffer_update(&tcc_instance);
}
     968:	bd10      	pop	{r4, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	00000fff 	.word	0x00000fff
     970:	200000e4 	.word	0x200000e4

00000974 <pwm_led_system_cleanup>:



void pwm_led_system_cleanup(void) {
     974:	b510      	push	{r4, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     976:	2100      	movs	r1, #0
     978:	2000      	movs	r0, #0
     97a:	f7ff ffd9 	bl	930 <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     97e:	2100      	movs	r1, #0
     980:	2002      	movs	r0, #2
     982:	f7ff ffd5 	bl	930 <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     986:	2100      	movs	r1, #0
     988:	2001      	movs	r0, #1
     98a:	f7ff ffd1 	bl	930 <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     98e:	2100      	movs	r1, #0
     990:	2003      	movs	r0, #3
     992:	f7ff ffcd 	bl	930 <set_pwm_color_channel>
}
     996:	bd10      	pop	{r4, pc}

00000998 <set_pwm_color>:



void set_pwm_color(int color) {
     998:	b510      	push	{r4, lr}
	
	
	
	switch (color) {
     99a:	2806      	cmp	r0, #6
     99c:	d807      	bhi.n	9ae <set_pwm_color+0x16>
     99e:	0080      	lsls	r0, r0, #2
     9a0:	4b18      	ldr	r3, [pc, #96]	; (a04 <set_pwm_color+0x6c>)
     9a2:	581b      	ldr	r3, [r3, r0]
     9a4:	469f      	mov	pc, r3
		case 0:  // Red
		set_pwm_color_channel(RED_CHANNEL, true);
     9a6:	2101      	movs	r1, #1
     9a8:	2000      	movs	r0, #0
     9aa:	f7ff ffc1 	bl	930 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
		break;
		default:
		break;
	}
}
     9ae:	bd10      	pop	{r4, pc}
		set_pwm_color_channel(GREEN_CHANNEL, true);
     9b0:	2101      	movs	r1, #1
     9b2:	2001      	movs	r0, #1
     9b4:	f7ff ffbc 	bl	930 <set_pwm_color_channel>
		break;
     9b8:	e7f9      	b.n	9ae <set_pwm_color+0x16>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     9ba:	2101      	movs	r1, #1
     9bc:	2002      	movs	r0, #2
     9be:	f7ff ffb7 	bl	930 <set_pwm_color_channel>
		break;
     9c2:	e7f4      	b.n	9ae <set_pwm_color+0x16>
		set_pwm_color_channel(WHITE_CHANNEL, true);
     9c4:	2101      	movs	r1, #1
     9c6:	2003      	movs	r0, #3
     9c8:	f7ff ffb2 	bl	930 <set_pwm_color_channel>
		break;
     9cc:	e7ef      	b.n	9ae <set_pwm_color+0x16>
		set_pwm_color_channel(RED_CHANNEL, true);
     9ce:	2101      	movs	r1, #1
     9d0:	2000      	movs	r0, #0
     9d2:	f7ff ffad 	bl	930 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     9d6:	2101      	movs	r1, #1
     9d8:	2001      	movs	r0, #1
     9da:	f7ff ffa9 	bl	930 <set_pwm_color_channel>
		break;
     9de:	e7e6      	b.n	9ae <set_pwm_color+0x16>
		set_pwm_color_channel(RED_CHANNEL, true);
     9e0:	2101      	movs	r1, #1
     9e2:	2000      	movs	r0, #0
     9e4:	f7ff ffa4 	bl	930 <set_pwm_color_channel>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     9e8:	2101      	movs	r1, #1
     9ea:	2002      	movs	r0, #2
     9ec:	f7ff ffa0 	bl	930 <set_pwm_color_channel>
		break;
     9f0:	e7dd      	b.n	9ae <set_pwm_color+0x16>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     9f2:	2101      	movs	r1, #1
     9f4:	2002      	movs	r0, #2
     9f6:	f7ff ff9b 	bl	930 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     9fa:	2101      	movs	r1, #1
     9fc:	2001      	movs	r0, #1
     9fe:	f7ff ff97 	bl	930 <set_pwm_color_channel>
}
     a02:	e7d4      	b.n	9ae <set_pwm_color+0x16>
     a04:	00002f94 	.word	0x00002f94

00000a08 <configure_pwm_tcc>:


void configure_pwm_tcc(void)
{
     a08:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     a0a:	4d1a      	ldr	r5, [pc, #104]	; (a74 <configure_pwm_tcc+0x6c>)
     a0c:	4c1a      	ldr	r4, [pc, #104]	; (a78 <configure_pwm_tcc+0x70>)
     a0e:	0029      	movs	r1, r5
     a10:	0020      	movs	r0, r4
     a12:	f001 faff 	bl	2014 <tcc_get_config_defaults>
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     a16:	2302      	movs	r3, #2
     a18:	7623      	strb	r3, [r4, #24]
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     a1a:	4b18      	ldr	r3, [pc, #96]	; (a7c <configure_pwm_tcc+0x74>)
     a1c:	6063      	str	r3, [r4, #4]
	
	
	config_tcc.compare.match[RED_CHANNEL]								= ZERO_DUTY_CYCLE;
     a1e:	2300      	movs	r3, #0
     a20:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[BLUE_CHANNEL]								= ZERO_DUTY_CYCLE;
     a22:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.compare.match[GREEN_CHANNEL]								= ZERO_DUTY_CYCLE;
     a24:	6223      	str	r3, [r4, #32]
	config_tcc.compare.match[WHITE_CHANNEL]								= ZERO_DUTY_CYCLE;
     a26:	62a3      	str	r3, [r4, #40]	; 0x28

	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     a28:	2204      	movs	r2, #4
     a2a:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     a2c:	2105      	movs	r1, #5
     a2e:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL]					= true;
     a30:	3301      	adds	r3, #1
     a32:	2098      	movs	r0, #152	; 0x98
     a34:	5423      	strb	r3, [r4, r0]
	
	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]							= PIN_PA05F_TCC0_WO1;		// GREEN
     a36:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]						= MUX_PA05F_TCC0_WO1;
     a38:	67e1      	str	r1, [r4, #124]	; 0x7c
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL]					= true;
     a3a:	3194      	adds	r1, #148	; 0x94
     a3c:	5463      	strb	r3, [r4, r1]

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]							= PIN_PA08E_TCC0_WO2;		// BLUE
     a3e:	3991      	subs	r1, #145	; 0x91
     a40:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]						= MUX_PA08E_TCC0_WO2;
     a42:	3178      	adds	r1, #120	; 0x78
     a44:	5062      	str	r2, [r4, r1]
	config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL]					= true;
     a46:	311a      	adds	r1, #26
     a48:	5463      	strb	r3, [r4, r1]

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]							= PIN_PA09E_TCC0_WO3;		// WHITE
     a4a:	3991      	subs	r1, #145	; 0x91
     a4c:	6661      	str	r1, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     a4e:	317b      	adds	r1, #123	; 0x7b
     a50:	5062      	str	r2, [r4, r1]
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL]				    = true;
     a52:	3297      	adds	r2, #151	; 0x97
     a54:	54a3      	strb	r3, [r4, r2]
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     a56:	4e0a      	ldr	r6, [pc, #40]	; (a80 <configure_pwm_tcc+0x78>)
     a58:	0022      	movs	r2, r4
     a5a:	0029      	movs	r1, r5
     a5c:	0030      	movs	r0, r6
     a5e:	f001 fb7b 	bl	2158 <tcc_init>
	Tcc *const tcc_module = module_inst->hw;
     a62:	6832      	ldr	r2, [r6, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     a64:	6893      	ldr	r3, [r2, #8]
     a66:	079b      	lsls	r3, r3, #30
     a68:	d4fc      	bmi.n	a64 <configure_pwm_tcc+0x5c>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     a6a:	6813      	ldr	r3, [r2, #0]
     a6c:	2102      	movs	r1, #2
     a6e:	430b      	orrs	r3, r1
     a70:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
	
}
     a72:	bd70      	pop	{r4, r5, r6, pc}
     a74:	42001400 	.word	0x42001400
     a78:	20000140 	.word	0x20000140
     a7c:	00000fff 	.word	0x00000fff
     a80:	200000e4 	.word	0x200000e4

00000a84 <cycle_pwm_led>:
//void enter_sleep(void){
	//system_set_sleepmode(SYSTEM_SLEEPMODE_IDLE_0);
	//system_sleep();
//}

void cycle_pwm_led(void) {
     a84:	b510      	push	{r4, lr}
	switch (pwm_led_toggle_count) {
     a86:	4b08      	ldr	r3, [pc, #32]	; (aa8 <cycle_pwm_led+0x24>)
     a88:	781b      	ldrb	r3, [r3, #0]
     a8a:	2b01      	cmp	r3, #1
     a8c:	d002      	beq.n	a94 <cycle_pwm_led+0x10>
     a8e:	2b06      	cmp	r3, #6
     a90:	d004      	beq.n	a9c <cycle_pwm_led+0x18>
		case 6:
		pwm_led_toggle_count = 0;
		pwm_led_system_cleanup();							// Reset to 1 for red
		break;
	}
     a92:	bd10      	pop	{r4, pc}
		SET_RED;
     a94:	2000      	movs	r0, #0
     a96:	f7ff ff7f 	bl	998 <set_pwm_color>
		break;
     a9a:	e7fa      	b.n	a92 <cycle_pwm_led+0xe>
		pwm_led_toggle_count = 0;
     a9c:	2200      	movs	r2, #0
     a9e:	4b02      	ldr	r3, [pc, #8]	; (aa8 <cycle_pwm_led+0x24>)
     aa0:	701a      	strb	r2, [r3, #0]
		pwm_led_system_cleanup();							// Reset to 1 for red
     aa2:	f7ff ff67 	bl	974 <pwm_led_system_cleanup>
     aa6:	e7f4      	b.n	a92 <cycle_pwm_led+0xe>
     aa8:	2000003f 	.word	0x2000003f

00000aac <configure_pwm_generator>:
bool pulsating_motor_routine = false;
uint8_t motor_toggle_count = -1;
bool motor_running = false;

void configure_pwm_generator (void)
{
     aac:	b500      	push	{lr}
     aae:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     ab0:	aa01      	add	r2, sp, #4
     ab2:	2300      	movs	r3, #0
     ab4:	2100      	movs	r1, #0
     ab6:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     ab8:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     aba:	2000      	movs	r0, #0
     abc:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     abe:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     ac0:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     ac2:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     ac4:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     ac6:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     ac8:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     aca:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     acc:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     ace:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     ad0:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     ad2:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
     ad4:	3304      	adds	r3, #4
     ad6:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     ad8:	21a0      	movs	r1, #160	; 0xa0
     ada:	00c9      	lsls	r1, r1, #3
     adc:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     ade:	2055      	movs	r0, #85	; 0x55
     ae0:	2129      	movs	r1, #41	; 0x29
     ae2:	5450      	strb	r0, [r2, r1]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     ae4:	3840      	subs	r0, #64	; 0x40
     ae6:	3101      	adds	r1, #1
     ae8:	5450      	strb	r0, [r2, r1]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     aea:	3116      	adds	r1, #22
     aec:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     aee:	3936      	subs	r1, #54	; 0x36
     af0:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     af2:	6193      	str	r3, [r2, #24]

	config_tc.pwm_channel[0].enabled = true;
     af4:	3b03      	subs	r3, #3
     af6:	7413      	strb	r3, [r2, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     af8:	4902      	ldr	r1, [pc, #8]	; (b04 <configure_pwm_generator+0x58>)
     afa:	4803      	ldr	r0, [pc, #12]	; (b08 <configure_pwm_generator+0x5c>)
     afc:	f001 fd7e 	bl	25fc <tc_init>
}
     b00:	b00f      	add	sp, #60	; 0x3c
     b02:	bd00      	pop	{pc}
     b04:	42001c00 	.word	0x42001c00
     b08:	200001e4 	.word	0x200001e4

00000b0c <motor_enable>:



void motor_enable(void){
     b0c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b0e:	4b0a      	ldr	r3, [pc, #40]	; (b38 <motor_enable+0x2c>)
     b10:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b12:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     b14:	b25b      	sxtb	r3, r3
     b16:	2b00      	cmp	r3, #0
     b18:	dbfb      	blt.n	b12 <motor_enable+0x6>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     b1a:	8813      	ldrh	r3, [r2, #0]
     b1c:	2102      	movs	r1, #2
     b1e:	430b      	orrs	r3, r1
     b20:	b29b      	uxth	r3, r3
     b22:	8013      	strh	r3, [r2, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b24:	2240      	movs	r2, #64	; 0x40
     b26:	4b05      	ldr	r3, [pc, #20]	; (b3c <motor_enable+0x30>)
     b28:	619a      	str	r2, [r3, #24]
	tc_enable(&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
	motor_running = true;
     b2a:	3a3f      	subs	r2, #63	; 0x3f
     b2c:	4b04      	ldr	r3, [pc, #16]	; (b40 <motor_enable+0x34>)
     b2e:	701a      	strb	r2, [r3, #0]
	set_motor_speed_1_indication();
     b30:	f001 ffd8 	bl	2ae4 <set_motor_speed_1_indication>
}
     b34:	bd10      	pop	{r4, pc}
     b36:	46c0      	nop			; (mov r8, r8)
     b38:	200001e4 	.word	0x200001e4
     b3c:	41004400 	.word	0x41004400
     b40:	20000041 	.word	0x20000041

00000b44 <motor_disable>:


void motor_disable(void){
     b44:	b510      	push	{r4, lr}
	pulsating_motor_routine = false;
     b46:	2300      	movs	r3, #0
     b48:	4a0e      	ldr	r2, [pc, #56]	; (b84 <motor_disable+0x40>)
     b4a:	7013      	strb	r3, [r2, #0]
	motor_toggle_count = -1;
     b4c:	21ff      	movs	r1, #255	; 0xff
     b4e:	4a0e      	ldr	r2, [pc, #56]	; (b88 <motor_disable+0x44>)
     b50:	7011      	strb	r1, [r2, #0]
	motor_running = false;
     b52:	4a0e      	ldr	r2, [pc, #56]	; (b8c <motor_disable+0x48>)
     b54:	7013      	strb	r3, [r2, #0]
	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     b56:	4c0e      	ldr	r4, [pc, #56]	; (b90 <motor_disable+0x4c>)
     b58:	2215      	movs	r2, #21
     b5a:	2100      	movs	r1, #0
     b5c:	0020      	movs	r0, r4
     b5e:	f001 fe6b 	bl	2838 <tc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b62:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b64:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     b66:	b25b      	sxtb	r3, r3
     b68:	2b00      	cmp	r3, #0
     b6a:	dbfb      	blt.n	b64 <motor_disable+0x20>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     b6c:	233b      	movs	r3, #59	; 0x3b
     b6e:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     b70:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     b72:	8813      	ldrh	r3, [r2, #0]
     b74:	2102      	movs	r1, #2
     b76:	438b      	bics	r3, r1
     b78:	8013      	strh	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b7a:	2240      	movs	r2, #64	; 0x40
     b7c:	4b05      	ldr	r3, [pc, #20]	; (b94 <motor_disable+0x50>)
     b7e:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
     b80:	bd10      	pop	{r4, pc}
     b82:	46c0      	nop			; (mov r8, r8)
     b84:	20000042 	.word	0x20000042
     b88:	20000008 	.word	0x20000008
     b8c:	20000041 	.word	0x20000041
     b90:	200001e4 	.word	0x200001e4
     b94:	41004400 	.word	0x41004400

00000b98 <cycle_pwm_motor>:



void cycle_pwm_motor (void)
{
     b98:	b510      	push	{r4, lr}
	{
		if (motor_running)
     b9a:	4b16      	ldr	r3, [pc, #88]	; (bf4 <cycle_pwm_motor+0x5c>)
     b9c:	781b      	ldrb	r3, [r3, #0]
     b9e:	2b00      	cmp	r3, #0
     ba0:	d008      	beq.n	bb4 <cycle_pwm_motor+0x1c>
		{
			if (motor_toggle_count == 2)
     ba2:	4b15      	ldr	r3, [pc, #84]	; (bf8 <cycle_pwm_motor+0x60>)
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	2b02      	cmp	r3, #2
     ba8:	d005      	beq.n	bb6 <cycle_pwm_motor+0x1e>
			{
				tc_set_compare_value (&pwm_generator_instance,
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
				set_motor_speed_2_indication();
			}
			else if (motor_toggle_count == 3)
     baa:	2b03      	cmp	r3, #3
     bac:	d00b      	beq.n	bc6 <cycle_pwm_motor+0x2e>
				tc_set_compare_value (&pwm_generator_instance,
				TC_COMPARE_CAPTURE_CHANNEL_0,
				SECOND_DUTY_CYCLE);
				set_motor_speed_3_indication();
			}
			else if (motor_toggle_count == 4)
     bae:	2b04      	cmp	r3, #4
     bb0:	d011      	beq.n	bd6 <cycle_pwm_motor+0x3e>
				TC_COMPARE_CAPTURE_CHANNEL_0,
				SECOND_DUTY_CYCLE);
				set_motor_pulsating_indication();
			}
			
			else if (motor_toggle_count > 4)
     bb2:	d81b      	bhi.n	bec <cycle_pwm_motor+0x54>
					motor_disable();
			}
		}
	}

}
     bb4:	bd10      	pop	{r4, pc}
				tc_set_compare_value (&pwm_generator_instance,
     bb6:	2222      	movs	r2, #34	; 0x22
     bb8:	2100      	movs	r1, #0
     bba:	4810      	ldr	r0, [pc, #64]	; (bfc <cycle_pwm_motor+0x64>)
     bbc:	f001 fe3c 	bl	2838 <tc_set_compare_value>
				set_motor_speed_2_indication();
     bc0:	f001 ffb6 	bl	2b30 <set_motor_speed_2_indication>
     bc4:	e7f6      	b.n	bb4 <cycle_pwm_motor+0x1c>
				tc_set_compare_value (&pwm_generator_instance,
     bc6:	224d      	movs	r2, #77	; 0x4d
     bc8:	2100      	movs	r1, #0
     bca:	480c      	ldr	r0, [pc, #48]	; (bfc <cycle_pwm_motor+0x64>)
     bcc:	f001 fe34 	bl	2838 <tc_set_compare_value>
				set_motor_speed_3_indication();
     bd0:	f001 ffd6 	bl	2b80 <set_motor_speed_3_indication>
     bd4:	e7ee      	b.n	bb4 <cycle_pwm_motor+0x1c>
				pulsating_motor_routine = true;
     bd6:	2201      	movs	r2, #1
     bd8:	4b09      	ldr	r3, [pc, #36]	; (c00 <cycle_pwm_motor+0x68>)
     bda:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
     bdc:	324c      	adds	r2, #76	; 0x4c
     bde:	2100      	movs	r1, #0
     be0:	4806      	ldr	r0, [pc, #24]	; (bfc <cycle_pwm_motor+0x64>)
     be2:	f001 fe29 	bl	2838 <tc_set_compare_value>
				set_motor_pulsating_indication();
     be6:	f001 fff3 	bl	2bd0 <set_motor_pulsating_indication>
     bea:	e7e3      	b.n	bb4 <cycle_pwm_motor+0x1c>
					motor_disable();
     bec:	f7ff ffaa 	bl	b44 <motor_disable>
}
     bf0:	e7e0      	b.n	bb4 <cycle_pwm_motor+0x1c>
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	20000041 	.word	0x20000041
     bf8:	20000008 	.word	0x20000008
     bfc:	200001e4 	.word	0x200001e4
     c00:	20000042 	.word	0x20000042

00000c04 <toggle_nsleep>:



 void toggle_nsleep(void){
	 static bool PULSATING_MOTOR = false;
	 if (pulsating_motor_routine){
     c04:	4b0a      	ldr	r3, [pc, #40]	; (c30 <toggle_nsleep+0x2c>)
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	2b00      	cmp	r3, #0
     c0a:	d009      	beq.n	c20 <toggle_nsleep+0x1c>
		 if (PULSATING_MOTOR){
     c0c:	4b09      	ldr	r3, [pc, #36]	; (c34 <toggle_nsleep+0x30>)
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	d106      	bne.n	c22 <toggle_nsleep+0x1e>
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			 PULSATING_MOTOR = false;
			 }else{
			 PULSATING_MOTOR = true;
     c14:	2201      	movs	r2, #1
     c16:	4b07      	ldr	r3, [pc, #28]	; (c34 <toggle_nsleep+0x30>)
     c18:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     c1a:	323f      	adds	r2, #63	; 0x3f
     c1c:	4b06      	ldr	r3, [pc, #24]	; (c38 <toggle_nsleep+0x34>)
     c1e:	619a      	str	r2, [r3, #24]
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
		 }
	 }
 }
     c20:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
     c22:	2240      	movs	r2, #64	; 0x40
     c24:	4b04      	ldr	r3, [pc, #16]	; (c38 <toggle_nsleep+0x34>)
     c26:	615a      	str	r2, [r3, #20]
			 PULSATING_MOTOR = false;
     c28:	2200      	movs	r2, #0
     c2a:	4b02      	ldr	r3, [pc, #8]	; (c34 <toggle_nsleep+0x30>)
     c2c:	701a      	strb	r2, [r3, #0]
     c2e:	e7f7      	b.n	c20 <toggle_nsleep+0x1c>
     c30:	20000042 	.word	0x20000042
     c34:	20000040 	.word	0x20000040
     c38:	41004400 	.word	0x41004400

00000c3c <system_inactive>:
bool SYS_SLEEP;

int SleepTickCount;


 void system_inactive(void) {
     c3c:	b510      	push	{r4, lr}
	 motor_disable();							// shutdown PWM motor
     c3e:	f7ff ff81 	bl	b44 <motor_disable>
	 pwm_led_system_cleanup();					// shutdown illumination led
     c42:	f7ff fe97 	bl	974 <pwm_led_system_cleanup>
	 pwm_led_toggle_count = 0;					// reset counter to start the routine from beginning
     c46:	2200      	movs	r2, #0
     c48:	4b02      	ldr	r3, [pc, #8]	; (c54 <system_inactive+0x18>)
     c4a:	701a      	strb	r2, [r3, #0]
	 reset_chip();
     c4c:	f001 feb4 	bl	29b8 <reset_chip>
	 //port_pin_set_output_level(SWITCH_OFF_PIN,HIGH); // at high rev 2
 }
     c50:	bd10      	pop	{r4, pc}
     c52:	46c0      	nop			; (mov r8, r8)
     c54:	2000003f 	.word	0x2000003f

00000c58 <regular_routine>:


void regular_routine(void) {
     c58:	b510      	push	{r4, lr}

	/** shift from button 1 --> 2 11/17
	
	**/
	
		if (is_button_two_pressed()) {
     c5a:	f7ff fe27 	bl	8ac <is_button_two_pressed>
     c5e:	2800      	cmp	r0, #0
     c60:	d031      	beq.n	cc6 <regular_routine+0x6e>
			SleepTickCount = SLEEP_TICK_COUNT;
     c62:	4a2a      	ldr	r2, [pc, #168]	; (d0c <regular_routine+0xb4>)
     c64:	4b2a      	ldr	r3, [pc, #168]	; (d10 <regular_routine+0xb8>)
     c66:	601a      	str	r2, [r3, #0]
		if (LongPressB2Flag) {
     c68:	4b2a      	ldr	r3, [pc, #168]	; (d14 <regular_routine+0xbc>)
     c6a:	781b      	ldrb	r3, [r3, #0]
     c6c:	2b00      	cmp	r3, #0
     c6e:	d125      	bne.n	cbc <regular_routine+0x64>
			system_inactive();
			LongPressB2Flag = false;															// ALLOW IT TO CYCLE AGAIN
			} else {

			if (!motor_status_changed && !led_button_status_changed && !Vbus_State) {			// makeshift to stop led array working when connected
     c70:	4b29      	ldr	r3, [pc, #164]	; (d18 <regular_routine+0xc0>)
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	2b00      	cmp	r3, #0
     c76:	d126      	bne.n	cc6 <regular_routine+0x6e>
     c78:	4b28      	ldr	r3, [pc, #160]	; (d1c <regular_routine+0xc4>)
     c7a:	781b      	ldrb	r3, [r3, #0]
     c7c:	2b00      	cmp	r3, #0
     c7e:	d122      	bne.n	cc6 <regular_routine+0x6e>
     c80:	4b27      	ldr	r3, [pc, #156]	; (d20 <regular_routine+0xc8>)
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	2b00      	cmp	r3, #0
     c86:	d11e      	bne.n	cc6 <regular_routine+0x6e>
				led_button_status_changed = true;
     c88:	3301      	adds	r3, #1
     c8a:	4a24      	ldr	r2, [pc, #144]	; (d1c <regular_routine+0xc4>)
     c8c:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
     c8e:	4a22      	ldr	r2, [pc, #136]	; (d18 <regular_routine+0xc0>)
     c90:	7013      	strb	r3, [r2, #0]
				pwm_led_toggle_count++;
     c92:	4a24      	ldr	r2, [pc, #144]	; (d24 <regular_routine+0xcc>)
     c94:	7813      	ldrb	r3, [r2, #0]
     c96:	3301      	adds	r3, #1
     c98:	7013      	strb	r3, [r2, #0]
				motor_toggle_count++;
     c9a:	4a23      	ldr	r2, [pc, #140]	; (d28 <regular_routine+0xd0>)
     c9c:	7813      	ldrb	r3, [r2, #0]
     c9e:	3301      	adds	r3, #1
     ca0:	7013      	strb	r3, [r2, #0]
				cycle_pwm_led();
     ca2:	f7ff feef 	bl	a84 <cycle_pwm_led>
				if (!motor_running && motor_toggle_count == 1) {
     ca6:	4b21      	ldr	r3, [pc, #132]	; (d2c <regular_routine+0xd4>)
     ca8:	781b      	ldrb	r3, [r3, #0]
     caa:	2b00      	cmp	r3, #0
     cac:	d103      	bne.n	cb6 <regular_routine+0x5e>
     cae:	4b1e      	ldr	r3, [pc, #120]	; (d28 <regular_routine+0xd0>)
     cb0:	781b      	ldrb	r3, [r3, #0]
     cb2:	2b01      	cmp	r3, #1
     cb4:	d020      	beq.n	cf8 <regular_routine+0xa0>
					motor_enable();
					} else {
					cycle_pwm_motor();
     cb6:	f7ff ff6f 	bl	b98 <cycle_pwm_motor>
     cba:	e004      	b.n	cc6 <regular_routine+0x6e>
			system_inactive();
     cbc:	f7ff ffbe 	bl	c3c <system_inactive>
			LongPressB2Flag = false;															// ALLOW IT TO CYCLE AGAIN
     cc0:	2200      	movs	r2, #0
     cc2:	4b14      	ldr	r3, [pc, #80]	; (d14 <regular_routine+0xbc>)
     cc4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}

	if (BUTTON_TWO_RELEASE_STATUS) {
     cc6:	4b1a      	ldr	r3, [pc, #104]	; (d30 <regular_routine+0xd8>)
     cc8:	781b      	ldrb	r3, [r3, #0]
     cca:	2b00      	cmp	r3, #0
     ccc:	d004      	beq.n	cd8 <regular_routine+0x80>
		motor_status_changed = false;
     cce:	2300      	movs	r3, #0
     cd0:	4a11      	ldr	r2, [pc, #68]	; (d18 <regular_routine+0xc0>)
     cd2:	7013      	strb	r3, [r2, #0]
		led_button_status_changed = false;
     cd4:	4a11      	ldr	r2, [pc, #68]	; (d1c <regular_routine+0xc4>)
     cd6:	7013      	strb	r3, [r2, #0]
	//}
	//if (BUTTON_TWO_RELEASE_STATUS) {
		//led_button_status_changed = false;
	//}

	if (Vbus_State == false) {
     cd8:	4b11      	ldr	r3, [pc, #68]	; (d20 <regular_routine+0xc8>)
     cda:	781b      	ldrb	r3, [r3, #0]
     cdc:	2b00      	cmp	r3, #0
     cde:	d00a      	beq.n	cf6 <regular_routine+0x9e>
		;																							// Enable Motor PWM
		} else {
		
		if (motor_running){
     ce0:	4b12      	ldr	r3, [pc, #72]	; (d2c <regular_routine+0xd4>)
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	2b00      	cmp	r3, #0
     ce6:	d10a      	bne.n	cfe <regular_routine+0xa6>
			system_inactive();
		}
		// ITS PLUGGED IN
		if (Chargn_On_State == false) {																// battery charging (plugged in)
     ce8:	4b12      	ldr	r3, [pc, #72]	; (d34 <regular_routine+0xdc>)
     cea:	781b      	ldrb	r3, [r3, #0]
     cec:	2b00      	cmp	r3, #0
     cee:	d009      	beq.n	d04 <regular_routine+0xac>
			BATTERY_CHARGING = true;																// show battery charge routine
			} else {
			BATTERY_CHARGING = false;
     cf0:	2200      	movs	r2, #0
     cf2:	4b11      	ldr	r3, [pc, #68]	; (d38 <regular_routine+0xe0>)
     cf4:	701a      	strb	r2, [r3, #0]
		}
		
	}
}
     cf6:	bd10      	pop	{r4, pc}
					motor_enable();
     cf8:	f7ff ff08 	bl	b0c <motor_enable>
     cfc:	e7e3      	b.n	cc6 <regular_routine+0x6e>
			system_inactive();
     cfe:	f7ff ff9d 	bl	c3c <system_inactive>
     d02:	e7f1      	b.n	ce8 <regular_routine+0x90>
			BATTERY_CHARGING = true;																// show battery charge routine
     d04:	2201      	movs	r2, #1
     d06:	4b0c      	ldr	r3, [pc, #48]	; (d38 <regular_routine+0xe0>)
     d08:	701a      	strb	r2, [r3, #0]
     d0a:	e7f4      	b.n	cf6 <regular_routine+0x9e>
     d0c:	00000bb8 	.word	0x00000bb8
     d10:	2000000c 	.word	0x2000000c
     d14:	2000003e 	.word	0x2000003e
     d18:	20000048 	.word	0x20000048
     d1c:	20000047 	.word	0x20000047
     d20:	20000201 	.word	0x20000201
     d24:	2000003f 	.word	0x2000003f
     d28:	20000008 	.word	0x20000008
     d2c:	20000041 	.word	0x20000041
     d30:	2000003d 	.word	0x2000003d
     d34:	20000202 	.word	0x20000202
     d38:	20000044 	.word	0x20000044

00000d3c <get_battery_level>:
			//BATTERY_LOW = false;
			//BATTERY_CHARGED = true;
//
	//}
	
	bool logic = !motor_running && !Vbus_State;
     d3c:	4b25      	ldr	r3, [pc, #148]	; (dd4 <get_battery_level+0x98>)
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	2b00      	cmp	r3, #0
     d42:	d105      	bne.n	d50 <get_battery_level+0x14>
     d44:	4b24      	ldr	r3, [pc, #144]	; (dd8 <get_battery_level+0x9c>)
     d46:	781b      	ldrb	r3, [r3, #0]
     d48:	2b00      	cmp	r3, #0
     d4a:	d01d      	beq.n	d88 <get_battery_level+0x4c>
     d4c:	2300      	movs	r3, #0
     d4e:	e000      	b.n	d52 <get_battery_level+0x16>
     d50:	2300      	movs	r3, #0
	
	if (logic){
     d52:	2b00      	cmp	r3, #0
     d54:	d035      	beq.n	dc2 <get_battery_level+0x86>
			if (adc_result <= VOLTAGE_THRESH_LOWEST) {
     d56:	4b21      	ldr	r3, [pc, #132]	; (ddc <get_battery_level+0xa0>)
     d58:	881b      	ldrh	r3, [r3, #0]
     d5a:	22dd      	movs	r2, #221	; 0xdd
     d5c:	0112      	lsls	r2, r2, #4
     d5e:	4293      	cmp	r3, r2
     d60:	d914      	bls.n	d8c <get_battery_level+0x50>
				// LOWEST SITUATION
				BATTERY_LOWEST = true;
				BATTERY_LOW = false;
				BATTERY_CHARGED = false;
			}
			else if (adc_result > VOLTAGE_THRESH_LOWEST && adc_result <= VOLTAGE_THRESH_LOW) { // Ensure adc_result > VOLTAGE_THRESH_LOWEST
     d62:	4a1f      	ldr	r2, [pc, #124]	; (de0 <get_battery_level+0xa4>)
     d64:	189a      	adds	r2, r3, r2
     d66:	b292      	uxth	r2, r2
     d68:	2a03      	cmp	r2, #3
     d6a:	d918      	bls.n	d9e <get_battery_level+0x62>
				// LOW SITUATION
				BATTERY_LOWEST = false;
				BATTERY_LOW = true;
				BATTERY_CHARGED = false;
			} else if (adc_result > VOLTAGE_THRESH_LOW && adc_result <= VOLTAGE_THRESH_MAX){
     d6c:	4a1d      	ldr	r2, [pc, #116]	; (de4 <get_battery_level+0xa8>)
     d6e:	4694      	mov	ip, r2
     d70:	4463      	add	r3, ip
     d72:	b29b      	uxth	r3, r3
     d74:	2b08      	cmp	r3, #8
     d76:	d81b      	bhi.n	db0 <get_battery_level+0x74>
				BATTERY_LOWEST = false;
     d78:	2300      	movs	r3, #0
     d7a:	4a1b      	ldr	r2, [pc, #108]	; (de8 <get_battery_level+0xac>)
     d7c:	7013      	strb	r3, [r2, #0]
				BATTERY_LOW = false;
     d7e:	4a1b      	ldr	r2, [pc, #108]	; (dec <get_battery_level+0xb0>)
     d80:	7013      	strb	r3, [r2, #0]
				BATTERY_CHARGED = false;
     d82:	4a1b      	ldr	r2, [pc, #108]	; (df0 <get_battery_level+0xb4>)
     d84:	7013      	strb	r3, [r2, #0]
     d86:	e023      	b.n	dd0 <get_battery_level+0x94>
	bool logic = !motor_running && !Vbus_State;
     d88:	2301      	movs	r3, #1
     d8a:	e7e2      	b.n	d52 <get_battery_level+0x16>
				BATTERY_LOWEST = true;
     d8c:	2201      	movs	r2, #1
     d8e:	4b16      	ldr	r3, [pc, #88]	; (de8 <get_battery_level+0xac>)
     d90:	701a      	strb	r2, [r3, #0]
				BATTERY_LOW = false;
     d92:	2300      	movs	r3, #0
     d94:	4a15      	ldr	r2, [pc, #84]	; (dec <get_battery_level+0xb0>)
     d96:	7013      	strb	r3, [r2, #0]
				BATTERY_CHARGED = false;
     d98:	4a15      	ldr	r2, [pc, #84]	; (df0 <get_battery_level+0xb4>)
     d9a:	7013      	strb	r3, [r2, #0]
     d9c:	e018      	b.n	dd0 <get_battery_level+0x94>
				BATTERY_LOWEST = false;
     d9e:	2300      	movs	r3, #0
     da0:	4a11      	ldr	r2, [pc, #68]	; (de8 <get_battery_level+0xac>)
     da2:	7013      	strb	r3, [r2, #0]
				BATTERY_LOW = true;
     da4:	2101      	movs	r1, #1
     da6:	4a11      	ldr	r2, [pc, #68]	; (dec <get_battery_level+0xb0>)
     da8:	7011      	strb	r1, [r2, #0]
				BATTERY_CHARGED = false;
     daa:	4a11      	ldr	r2, [pc, #68]	; (df0 <get_battery_level+0xb4>)
     dac:	7013      	strb	r3, [r2, #0]
     dae:	e00f      	b.n	dd0 <get_battery_level+0x94>
				//Charged_State = false;
			} 
			else{
				BATTERY_LOWEST = false;
     db0:	2300      	movs	r3, #0
     db2:	4a0d      	ldr	r2, [pc, #52]	; (de8 <get_battery_level+0xac>)
     db4:	7013      	strb	r3, [r2, #0]
				BATTERY_LOW = false;
     db6:	4a0d      	ldr	r2, [pc, #52]	; (dec <get_battery_level+0xb0>)
     db8:	7013      	strb	r3, [r2, #0]
				BATTERY_CHARGED = true;
     dba:	2201      	movs	r2, #1
     dbc:	4b0c      	ldr	r3, [pc, #48]	; (df0 <get_battery_level+0xb4>)
     dbe:	701a      	strb	r2, [r3, #0]
     dc0:	e006      	b.n	dd0 <get_battery_level+0x94>
			}		

	} 
	else 
	{
		if (Charged_State)
     dc2:	4b0c      	ldr	r3, [pc, #48]	; (df4 <get_battery_level+0xb8>)
     dc4:	781b      	ldrb	r3, [r3, #0]
     dc6:	2b00      	cmp	r3, #0
     dc8:	d002      	beq.n	dd0 <get_battery_level+0x94>
		{
			BATTERY_CHARGED = true;
     dca:	2201      	movs	r2, #1
     dcc:	4b08      	ldr	r3, [pc, #32]	; (df0 <get_battery_level+0xb4>)
     dce:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
     dd0:	4770      	bx	lr
     dd2:	46c0      	nop			; (mov r8, r8)
     dd4:	20000041 	.word	0x20000041
     dd8:	20000201 	.word	0x20000201
     ddc:	20000094 	.word	0x20000094
     de0:	fffff22f 	.word	0xfffff22f
     de4:	fffff22b 	.word	0xfffff22b
     de8:	20000046 	.word	0x20000046
     dec:	20000045 	.word	0x20000045
     df0:	20000043 	.word	0x20000043
     df4:	20000203 	.word	0x20000203

00000df8 <put_to_sleep>:
 /* LOGIC MACHINE		                                                */
 /************************************************************************/
void sys_sleep_logic(void);

void put_to_sleep(void);
void put_to_sleep(void){
     df8:	b510      	push	{r4, lr}
		system_inactive();													// once entered sleep mode -- sys inactive
     dfa:	f7ff ff1f 	bl	c3c <system_inactive>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
     dfe:	4a04      	ldr	r2, [pc, #16]	; (e10 <put_to_sleep+0x18>)
     e00:	6913      	ldr	r3, [r2, #16]
     e02:	2104      	movs	r1, #4
     e04:	430b      	orrs	r3, r1
     e06:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     e08:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
     e0c:	bf30      	wfi
		system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);						// set sleep mode 0
		system_sleep();
}
     e0e:	bd10      	pop	{r4, pc}
     e10:	e000ed00 	.word	0xe000ed00

00000e14 <sys_sleep_logic>:

void sys_sleep_logic(void){
     e14:	b510      	push	{r4, lr}
	put_to_sleep();
     e16:	f7ff ffef 	bl	df8 <put_to_sleep>
	
}
     e1a:	bd10      	pop	{r4, pc}

00000e1c <system_logic>:


 void system_logic(void) {
     e1c:	b510      	push	{r4, lr}
	 if (SYS_TICK_10MS) {
     e1e:	4b12      	ldr	r3, [pc, #72]	; (e68 <system_logic+0x4c>)
     e20:	781b      	ldrb	r3, [r3, #0]
     e22:	2b00      	cmp	r3, #0
     e24:	d108      	bne.n	e38 <system_logic+0x1c>
		 SYS_TICK_10MS = false;
		 system_state();						// Get latest system_state
		 regular_routine();
	 }
	 if (SYS_TICK_200MS) {
     e26:	4b11      	ldr	r3, [pc, #68]	; (e6c <system_logic+0x50>)
     e28:	781b      	ldrb	r3, [r3, #0]
     e2a:	2b00      	cmp	r3, #0
     e2c:	d10c      	bne.n	e48 <system_logic+0x2c>
		 toggle_nsleep();
		 sample_adc();
		 get_battery_level();
	 }
	 
	 if (SYS_SLEEP){
     e2e:	4b10      	ldr	r3, [pc, #64]	; (e70 <system_logic+0x54>)
     e30:	781b      	ldrb	r3, [r3, #0]
     e32:	2b00      	cmp	r3, #0
     e34:	d112      	bne.n	e5c <system_logic+0x40>
		SYS_SLEEP = false;
		sys_sleep_logic();
	 }
	 
	 
 }
     e36:	bd10      	pop	{r4, pc}
		 SYS_TICK_10MS = false;
     e38:	2200      	movs	r2, #0
     e3a:	4b0b      	ldr	r3, [pc, #44]	; (e68 <system_logic+0x4c>)
     e3c:	701a      	strb	r2, [r3, #0]
		 system_state();						// Get latest system_state
     e3e:	f000 f9d3 	bl	11e8 <system_state>
		 regular_routine();
     e42:	f7ff ff09 	bl	c58 <regular_routine>
     e46:	e7ee      	b.n	e26 <system_logic+0xa>
		 SYS_TICK_200MS = false;
     e48:	2200      	movs	r2, #0
     e4a:	4b08      	ldr	r3, [pc, #32]	; (e6c <system_logic+0x50>)
     e4c:	701a      	strb	r2, [r3, #0]
		 toggle_nsleep();
     e4e:	f7ff fed9 	bl	c04 <toggle_nsleep>
		 sample_adc();
     e52:	f7ff f979 	bl	148 <sample_adc>
		 get_battery_level();
     e56:	f7ff ff71 	bl	d3c <get_battery_level>
     e5a:	e7e8      	b.n	e2e <system_logic+0x12>
		SYS_SLEEP = false;
     e5c:	2200      	movs	r2, #0
     e5e:	4b04      	ldr	r3, [pc, #16]	; (e70 <system_logic+0x54>)
     e60:	701a      	strb	r2, [r3, #0]
		sys_sleep_logic();
     e62:	f7ff ffd7 	bl	e14 <sys_sleep_logic>
 }
     e66:	e7e6      	b.n	e36 <system_logic+0x1a>
     e68:	2000004b 	.word	0x2000004b
     e6c:	2000004c 	.word	0x2000004c
     e70:	20000049 	.word	0x20000049

00000e74 <_tc_interrupt_get_interrupt_vector>:
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     e74:	4b01      	ldr	r3, [pc, #4]	; (e7c <_tc_interrupt_get_interrupt_vector+0x8>)
     e76:	5618      	ldrsb	r0, [r3, r0]
}
     e78:	4770      	bx	lr
     e7a:	46c0      	nop			; (mov r8, r8)
     e7c:	00002fb0 	.word	0x00002fb0

00000e80 <sys_tc_callback>:
	static int tick_count_100ms;
	static int tick_count_200ms;
	//static int tick_count_500ms;
	//static int tick_count_1000ms;

	tick_count_1ms++;
     e80:	4a24      	ldr	r2, [pc, #144]	; (f14 <sys_tc_callback+0x94>)
     e82:	6813      	ldr	r3, [r2, #0]
     e84:	3301      	adds	r3, #1
     e86:	6013      	str	r3, [r2, #0]
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
     e88:	2b09      	cmp	r3, #9
     e8a:	dd09      	ble.n	ea0 <sys_tc_callback+0x20>
	{
		tick_count_10ms++;
     e8c:	4a22      	ldr	r2, [pc, #136]	; (f18 <sys_tc_callback+0x98>)
     e8e:	6813      	ldr	r3, [r2, #0]
     e90:	3301      	adds	r3, #1
     e92:	6013      	str	r3, [r2, #0]
		tick_count_1ms = 0;
     e94:	2200      	movs	r2, #0
     e96:	4b1f      	ldr	r3, [pc, #124]	; (f14 <sys_tc_callback+0x94>)
     e98:	601a      	str	r2, [r3, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
     e9a:	3201      	adds	r2, #1
     e9c:	4b1f      	ldr	r3, [pc, #124]	; (f1c <sys_tc_callback+0x9c>)
     e9e:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
     ea0:	4b1d      	ldr	r3, [pc, #116]	; (f18 <sys_tc_callback+0x98>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	2b04      	cmp	r3, #4
     ea6:	dd09      	ble.n	ebc <sys_tc_callback+0x3c>
	{
		tick_count_50ms++;
     ea8:	4a1d      	ldr	r2, [pc, #116]	; (f20 <sys_tc_callback+0xa0>)
     eaa:	6813      	ldr	r3, [r2, #0]
     eac:	3301      	adds	r3, #1
     eae:	6013      	str	r3, [r2, #0]
		tick_count_10ms = 0;
     eb0:	2200      	movs	r2, #0
     eb2:	4b19      	ldr	r3, [pc, #100]	; (f18 <sys_tc_callback+0x98>)
     eb4:	601a      	str	r2, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
     eb6:	3201      	adds	r2, #1
     eb8:	4b1a      	ldr	r3, [pc, #104]	; (f24 <sys_tc_callback+0xa4>)
     eba:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
     ebc:	4b18      	ldr	r3, [pc, #96]	; (f20 <sys_tc_callback+0xa0>)
     ebe:	681b      	ldr	r3, [r3, #0]
     ec0:	2b01      	cmp	r3, #1
     ec2:	dd09      	ble.n	ed8 <sys_tc_callback+0x58>
	{
		tick_count_100ms++;
     ec4:	4a18      	ldr	r2, [pc, #96]	; (f28 <sys_tc_callback+0xa8>)
     ec6:	6813      	ldr	r3, [r2, #0]
     ec8:	3301      	adds	r3, #1
     eca:	6013      	str	r3, [r2, #0]
		tick_count_50ms = 0;
     ecc:	2200      	movs	r2, #0
     ece:	4b14      	ldr	r3, [pc, #80]	; (f20 <sys_tc_callback+0xa0>)
     ed0:	601a      	str	r2, [r3, #0]
		SYS_TICK_100MS = true;									// Flag for 100ms interval
     ed2:	3201      	adds	r2, #1
     ed4:	4b15      	ldr	r3, [pc, #84]	; (f2c <sys_tc_callback+0xac>)
     ed6:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
     ed8:	4b13      	ldr	r3, [pc, #76]	; (f28 <sys_tc_callback+0xa8>)
     eda:	681b      	ldr	r3, [r3, #0]
     edc:	2b01      	cmp	r3, #1
     ede:	dd09      	ble.n	ef4 <sys_tc_callback+0x74>
	{
		tick_count_200ms++;
     ee0:	4a13      	ldr	r2, [pc, #76]	; (f30 <sys_tc_callback+0xb0>)
     ee2:	6813      	ldr	r3, [r2, #0]
     ee4:	3301      	adds	r3, #1
     ee6:	6013      	str	r3, [r2, #0]
		tick_count_100ms = 0;
     ee8:	2200      	movs	r2, #0
     eea:	4b0f      	ldr	r3, [pc, #60]	; (f28 <sys_tc_callback+0xa8>)
     eec:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
     eee:	3201      	adds	r2, #1
     ef0:	4b10      	ldr	r3, [pc, #64]	; (f34 <sys_tc_callback+0xb4>)
     ef2:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	if (SYS_TICK_200MS){
     ef4:	4b0f      	ldr	r3, [pc, #60]	; (f34 <sys_tc_callback+0xb4>)
     ef6:	781b      	ldrb	r3, [r3, #0]
     ef8:	2b00      	cmp	r3, #0
     efa:	d005      	beq.n	f08 <sys_tc_callback+0x88>
		SleepTickCount--;
     efc:	4a0e      	ldr	r2, [pc, #56]	; (f38 <sys_tc_callback+0xb8>)
     efe:	6813      	ldr	r3, [r2, #0]
     f00:	3b01      	subs	r3, #1
     f02:	6013      	str	r3, [r2, #0]
		if (SleepTickCount < 1){
     f04:	2b00      	cmp	r3, #0
     f06:	dd00      	ble.n	f0a <sys_tc_callback+0x8a>
		//tick_count_500ms = 0;
		//SYS_TICK_1000MS = true;                                 // Flag for 1000ms interval
		////port_pin_toggle_output_level (LED0_PIN);               // visually check sys clock on PA16
	//}
	
}
     f08:	4770      	bx	lr
			SYS_SLEEP = true;
     f0a:	2201      	movs	r2, #1
     f0c:	4b0b      	ldr	r3, [pc, #44]	; (f3c <sys_tc_callback+0xbc>)
     f0e:	701a      	strb	r2, [r3, #0]
}
     f10:	e7fa      	b.n	f08 <sys_tc_callback+0x88>
     f12:	46c0      	nop			; (mov r8, r8)
     f14:	20000058 	.word	0x20000058
     f18:	20000054 	.word	0x20000054
     f1c:	2000004b 	.word	0x2000004b
     f20:	20000060 	.word	0x20000060
     f24:	2000004d 	.word	0x2000004d
     f28:	20000050 	.word	0x20000050
     f2c:	2000004a 	.word	0x2000004a
     f30:	2000005c 	.word	0x2000005c
     f34:	2000004c 	.word	0x2000004c
     f38:	2000000c 	.word	0x2000000c
     f3c:	20000049 	.word	0x20000049

00000f40 <extint_detection_callback>:
void extint_detection_callback(void)
{
	//motor_enable();
	//LED_Off(LED0_PIN);
	//set_color_cyan_indication();
	SleepTickCount = SLEEP_TICK_COUNT;
     f40:	4a01      	ldr	r2, [pc, #4]	; (f48 <extint_detection_callback+0x8>)
     f42:	4b02      	ldr	r3, [pc, #8]	; (f4c <extint_detection_callback+0xc>)
     f44:	601a      	str	r2, [r3, #0]
	
}
     f46:	4770      	bx	lr
     f48:	00000bb8 	.word	0x00000bb8
     f4c:	2000000c 	.word	0x2000000c

00000f50 <configure_port_pins>:
{
     f50:	b5f0      	push	{r4, r5, r6, r7, lr}
     f52:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     f54:	ac01      	add	r4, sp, #4
     f56:	2600      	movs	r6, #0
     f58:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
     f5a:	70a6      	strb	r6, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     f5c:	2702      	movs	r7, #2
     f5e:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     f60:	0021      	movs	r1, r4
     f62:	201b      	movs	r0, #27
     f64:	f000 f97e 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     f68:	2501      	movs	r5, #1
     f6a:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     f6c:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     f6e:	0021      	movs	r1, r4
     f70:	2006      	movs	r0, #6
     f72:	f000 f977 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     f76:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;								// START AT PULL UP.
     f78:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     f7a:	0021      	movs	r1, r4
     f7c:	2007      	movs	r0, #7
     f7e:	f000 f971 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     f82:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL DOWN.
     f84:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
     f86:	0021      	movs	r1, r4
     f88:	200f      	movs	r0, #15
     f8a:	f000 f96b 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     f8e:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     f90:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(BAT_CHARGED_PIN, &config_port_pin);
     f92:	0021      	movs	r1, r4
     f94:	200b      	movs	r0, #11
     f96:	f000 f965 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     f9a:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     f9c:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     f9e:	0021      	movs	r1, r4
     fa0:	2003      	movs	r0, #3
     fa2:	f000 f95f 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     fa6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     fa8:	0021      	movs	r1, r4
     faa:	2010      	movs	r0, #16
     fac:	f000 f95a 	bl	1264 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     fb0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
     fb2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_1, &config_port_pin);
     fb4:	0021      	movs	r1, r4
     fb6:	200e      	movs	r0, #14
     fb8:	f000 f954 	bl	1264 <port_pin_set_config>
}
     fbc:	b003      	add	sp, #12
     fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000fc0 <configure_system_tc>:
 {
     fc0:	b510      	push	{r4, lr}
     fc2:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
     fc4:	aa01      	add	r2, sp, #4
     fc6:	2300      	movs	r3, #0
     fc8:	2100      	movs	r1, #0
     fca:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     fcc:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     fce:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     fd0:	2000      	movs	r0, #0
     fd2:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     fd4:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     fd6:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     fd8:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     fda:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     fdc:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     fde:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     fe0:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     fe2:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     fe4:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     fe6:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     fe8:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     fea:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     fec:	8593      	strh	r3, [r2, #44]	; 0x2c
	 config_tc.counter_size = TC_COUNTER_SIZE;
     fee:	3304      	adds	r3, #4
     ff0:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     ff2:	23a0      	movs	r3, #160	; 0xa0
     ff4:	00db      	lsls	r3, r3, #3
     ff6:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     ff8:	216f      	movs	r1, #111	; 0x6f
     ffa:	2329      	movs	r3, #41	; 0x29
     ffc:	54d1      	strb	r1, [r2, r3]
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     ffe:	3b28      	subs	r3, #40	; 0x28
    1000:	7413      	strb	r3, [r2, #16]
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
    1002:	4c08      	ldr	r4, [pc, #32]	; (1024 <configure_system_tc+0x64>)
    1004:	4908      	ldr	r1, [pc, #32]	; (1028 <configure_system_tc+0x68>)
    1006:	0020      	movs	r0, r4
    1008:	f001 faf8 	bl	25fc <tc_init>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    100c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    100e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1010:	b25b      	sxtb	r3, r3
    1012:	2b00      	cmp	r3, #0
    1014:	dbfb      	blt.n	100e <configure_system_tc+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1016:	8813      	ldrh	r3, [r2, #0]
    1018:	2102      	movs	r1, #2
    101a:	430b      	orrs	r3, r1
    101c:	b29b      	uxth	r3, r3
    101e:	8013      	strh	r3, [r2, #0]
 }
    1020:	b00e      	add	sp, #56	; 0x38
    1022:	bd10      	pop	{r4, pc}
    1024:	20000124 	.word	0x20000124
    1028:	42001800 	.word	0x42001800

0000102c <system_tc_callbacks>:
{
    102c:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
    102e:	4c0c      	ldr	r4, [pc, #48]	; (1060 <system_tc_callbacks+0x34>)
    1030:	2200      	movs	r2, #0
    1032:	490c      	ldr	r1, [pc, #48]	; (1064 <system_tc_callbacks+0x38>)
    1034:	0020      	movs	r0, r4
    1036:	f001 fa74 	bl	2522 <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    103a:	6820      	ldr	r0, [r4, #0]
    103c:	f001 fac6 	bl	25cc <_tc_get_inst_index>
    1040:	f7ff ff18 	bl	e74 <_tc_interrupt_get_interrupt_vector>
    1044:	231f      	movs	r3, #31
    1046:	4018      	ands	r0, r3
    1048:	2201      	movs	r2, #1
    104a:	0011      	movs	r1, r2
    104c:	4081      	lsls	r1, r0
    104e:	4b06      	ldr	r3, [pc, #24]	; (1068 <system_tc_callbacks+0x3c>)
    1050:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    1052:	7e63      	ldrb	r3, [r4, #25]
    1054:	2101      	movs	r1, #1
    1056:	430b      	orrs	r3, r1
    1058:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    105a:	6823      	ldr	r3, [r4, #0]
    105c:	735a      	strb	r2, [r3, #13]
}
    105e:	bd10      	pop	{r4, pc}
    1060:	20000124 	.word	0x20000124
    1064:	00000e81 	.word	0x00000e81
    1068:	e000e100 	.word	0xe000e100

0000106c <configure_extint_channel>:
{
    106c:	b5f0      	push	{r4, r5, r6, r7, lr}
    106e:	b085      	sub	sp, #20
	extint_chan_get_config_defaults(&config_extint_chan);
    1070:	ac01      	add	r4, sp, #4
    1072:	0020      	movs	r0, r4
    1074:	f7ff fbd4 	bl	820 <extint_chan_get_config_defaults>
	config_extint_chan.gpio_pin           = PIN_PA15A_EIC_EXTINT1;
    1078:	230f      	movs	r3, #15
    107a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA15A_EIC_EXTINT1;
    107c:	2700      	movs	r7, #0
    107e:	6067      	str	r7, [r4, #4]
	config_extint_chan.wake_if_sleeping   = true;
    1080:	2501      	movs	r5, #1
    1082:	7265      	strb	r5, [r4, #9]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    1084:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    1086:	2603      	movs	r6, #3
    1088:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
    108a:	0021      	movs	r1, r4
    108c:	2001      	movs	r0, #1
    108e:	f7ff fbd1 	bl	834 <extint_chan_set_config>
	extint_chan_get_config_defaults(&config_extint_chan);
    1092:	0020      	movs	r0, r4
    1094:	f7ff fbc4 	bl	820 <extint_chan_get_config_defaults>
	config_extint_chan.gpio_pin           = PIN_PA11A_EIC_EXTINT3;
    1098:	230b      	movs	r3, #11
    109a:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA11A_EIC_EXTINT3;
    109c:	6067      	str	r7, [r4, #4]
	config_extint_chan.wake_if_sleeping   = true;
    109e:	7265      	strb	r5, [r4, #9]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
    10a0:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    10a2:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(PA_11_EIC_LINE_custom, &config_extint_chan);
    10a4:	0021      	movs	r1, r4
    10a6:	2003      	movs	r0, #3
    10a8:	f7ff fbc4 	bl	834 <extint_chan_set_config>
}
    10ac:	b005      	add	sp, #20
    10ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000010b0 <configure_extint_callbacks>:
{
    10b0:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback,
    10b2:	4c0a      	ldr	r4, [pc, #40]	; (10dc <configure_extint_callbacks+0x2c>)
    10b4:	2200      	movs	r2, #0
    10b6:	2101      	movs	r1, #1
    10b8:	0020      	movs	r0, r4
    10ba:	f7ff fb03 	bl	6c4 <extint_register_callback>
	extint_chan_enable_callback(BUTTON_0_EIC_LINE_custom,
    10be:	2100      	movs	r1, #0
    10c0:	2001      	movs	r0, #1
    10c2:	f7ff fb15 	bl	6f0 <extint_chan_enable_callback>
	extint_register_callback(extint_detection_callback,
    10c6:	2200      	movs	r2, #0
    10c8:	2103      	movs	r1, #3
    10ca:	0020      	movs	r0, r4
    10cc:	f7ff fafa 	bl	6c4 <extint_register_callback>
	extint_chan_enable_callback(PA_11_EIC_LINE_custom,
    10d0:	2100      	movs	r1, #0
    10d2:	2003      	movs	r0, #3
    10d4:	f7ff fb0c 	bl	6f0 <extint_chan_enable_callback>
}
    10d8:	bd10      	pop	{r4, pc}
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	00000f41 	.word	0x00000f41

000010e0 <configure_sleep_clock>:
    10e0:	4a02      	ldr	r2, [pc, #8]	; (10ec <configure_sleep_clock+0xc>)
    10e2:	6993      	ldr	r3, [r2, #24]
    10e4:	2140      	movs	r1, #64	; 0x40
    10e6:	430b      	orrs	r3, r1
    10e8:	6193      	str	r3, [r2, #24]
	enum status_code result = system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, mask);

	if (result != STATUS_OK) {
		Assert(false);
	}
}
    10ea:	4770      	bx	lr
    10ec:	40000400 	.word	0x40000400

000010f0 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
    10f0:	4b06      	ldr	r3, [pc, #24]	; (110c <startup_default_pin_state+0x1c>)
    10f2:	2240      	movs	r2, #64	; 0x40
    10f4:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    10f6:	3240      	adds	r2, #64	; 0x40
    10f8:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    10fa:	2280      	movs	r2, #128	; 0x80
    10fc:	0212      	lsls	r2, r2, #8
    10fe:	615a      	str	r2, [r3, #20]
    1100:	2280      	movs	r2, #128	; 0x80
    1102:	0112      	lsls	r2, r2, #4
    1104:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1106:	2208      	movs	r2, #8
    1108:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(SWITCH_OFF_PIN,HIGH);					// at high rev 2
	 port_pin_set_output_level(BUTTON_2,LOW);
	 port_pin_set_output_level(BAT_CHARGED_PIN,LOW);
	 port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	 //port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
 }
    110a:	4770      	bx	lr
    110c:	41004400 	.word	0x41004400

00001110 <startup_sys_configs>:
void put_to_sleep(void);

/************************************************************************/
/* SYSTEM startup function call (config functions)						*/
/************************************************************************/
void startup_sys_configs(void){
    1110:	b510      	push	{r4, lr}
	system_init();												// System Initialize
    1112:	f000 ff32 	bl	1f7a <system_init>
	cpu_irq_enable();
    1116:	2201      	movs	r2, #1
    1118:	4b0e      	ldr	r3, [pc, #56]	; (1154 <startup_sys_configs+0x44>)
    111a:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    111c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1120:	b662      	cpsie	i
	system_interrupt_enable_global();							// System Interrupts
	configure_port_pins();										// System PORTs
    1122:	f7ff ff15 	bl	f50 <configure_port_pins>
	startup_default_pin_state();
    1126:	f7ff ffe3 	bl	10f0 <startup_default_pin_state>
	i2c_master_setup();											// Startup I2C
    112a:	f001 fd91 	bl	2c50 <i2c_master_setup>
	configure_system_tc();										// System Clock
    112e:	f7ff ff47 	bl	fc0 <configure_system_tc>
	system_tc_callbacks();										// System Clock Callback
    1132:	f7ff ff7b 	bl	102c <system_tc_callbacks>
	configure_pwm_tcc();										// Startup PWM
    1136:	f7ff fc67 	bl	a08 <configure_pwm_tcc>
	configure_adc();
    113a:	f7fe ffd7 	bl	ec <configure_adc>
	configure_pwm_generator();
    113e:	f7ff fcb5 	bl	aac <configure_pwm_generator>
	
	
	
	configure_sleep_clock();
    1142:	f7ff ffcd 	bl	10e0 <configure_sleep_clock>
	configure_extint_channel();
    1146:	f7ff ff91 	bl	106c <configure_extint_channel>
	configure_extint_callbacks();
    114a:	f7ff ffb1 	bl	10b0 <configure_extint_callbacks>
	extint_detection_callback();
    114e:	f7ff fef7 	bl	f40 <extint_detection_callback>
	
}
    1152:	bd10      	pop	{r4, pc}
    1154:	20000010 	.word	0x20000010

00001158 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
    1158:	4906      	ldr	r1, [pc, #24]	; (1174 <update_battery_states+0x1c>)
    115a:	6a0b      	ldr	r3, [r1, #32]
    115c:	0edb      	lsrs	r3, r3, #27
    115e:	2201      	movs	r2, #1
    1160:	4013      	ands	r3, r2
#define CHARGED_STATE port_pin_get_input_level(BAT_CHARGED_PIN)
//#define CHARGN_OFF_STATE port_pin_get_input_level(CHARGN_OFF_PIN)


void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
    1162:	4805      	ldr	r0, [pc, #20]	; (1178 <update_battery_states+0x20>)
    1164:	7003      	strb	r3, [r0, #0]
    1166:	6a0b      	ldr	r3, [r1, #32]
    1168:	0adb      	lsrs	r3, r3, #11
    116a:	401a      	ands	r2, r3
  Charged_State = CHARGED_STATE;
    116c:	4b03      	ldr	r3, [pc, #12]	; (117c <update_battery_states+0x24>)
    116e:	701a      	strb	r2, [r3, #0]
}
    1170:	4770      	bx	lr
    1172:	46c0      	nop			; (mov r8, r8)
    1174:	41004400 	.word	0x41004400
    1178:	20000201 	.word	0x20000201
    117c:	20000203 	.word	0x20000203

00001180 <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
    1180:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

	if (Vbus_State) {
    1182:	4b13      	ldr	r3, [pc, #76]	; (11d0 <display_battery_state+0x50>)
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	2b00      	cmp	r3, #0
    1188:	d009      	beq.n	119e <display_battery_state+0x1e>
		//port_pin_set_output_level(BAT_CHARGED_PIN, false);
		//system_inactive();										// turn  off all motor/ led array if plugged in
		if (!Charged_State) {
    118a:	4b12      	ldr	r3, [pc, #72]	; (11d4 <display_battery_state+0x54>)
    118c:	781b      	ldrb	r3, [r3, #0]
    118e:	2b00      	cmp	r3, #0
    1190:	d102      	bne.n	1198 <display_battery_state+0x18>
			set_battery_charge_routine();						//  blink
    1192:	f001 fc2b 	bl	29ec <set_battery_charge_routine>
					//set_color_yellow_indication();			// ideal situation
					}	
		}else{
		}
	}
}
    1196:	bd10      	pop	{r4, pc}
			set_color_green_indication();
    1198:	f001 fbda 	bl	2950 <set_color_green_indication>
    119c:	e7fb      	b.n	1196 <display_battery_state+0x16>
		if (!motor_running){
    119e:	4b0e      	ldr	r3, [pc, #56]	; (11d8 <display_battery_state+0x58>)
    11a0:	781b      	ldrb	r3, [r3, #0]
    11a2:	2b00      	cmp	r3, #0
    11a4:	d1f7      	bne.n	1196 <display_battery_state+0x16>
				if (BATTERY_LOWEST) {
    11a6:	4b0d      	ldr	r3, [pc, #52]	; (11dc <display_battery_state+0x5c>)
    11a8:	781b      	ldrb	r3, [r3, #0]
    11aa:	2b00      	cmp	r3, #0
    11ac:	d10a      	bne.n	11c4 <display_battery_state+0x44>
					} else if (BATTERY_LOW) {
    11ae:	4b0c      	ldr	r3, [pc, #48]	; (11e0 <display_battery_state+0x60>)
    11b0:	781b      	ldrb	r3, [r3, #0]
    11b2:	2b00      	cmp	r3, #0
    11b4:	d109      	bne.n	11ca <display_battery_state+0x4a>
					} else if (BATTERY_CHARGED) {
    11b6:	4b0b      	ldr	r3, [pc, #44]	; (11e4 <display_battery_state+0x64>)
    11b8:	781b      	ldrb	r3, [r3, #0]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d0eb      	beq.n	1196 <display_battery_state+0x16>
					set_color_green_indication();
    11be:	f001 fbc7 	bl	2950 <set_color_green_indication>
}
    11c2:	e7e8      	b.n	1196 <display_battery_state+0x16>
					set_battery_low_routine();					//  blink
    11c4:	f001 fc50 	bl	2a68 <set_battery_low_routine>
    11c8:	e7e5      	b.n	1196 <display_battery_state+0x16>
					set_color_red_indication();
    11ca:	f001 fbdb 	bl	2984 <set_color_red_indication>
    11ce:	e7e2      	b.n	1196 <display_battery_state+0x16>
    11d0:	20000201 	.word	0x20000201
    11d4:	20000203 	.word	0x20000203
    11d8:	20000041 	.word	0x20000041
    11dc:	20000046 	.word	0x20000046
    11e0:	20000045 	.word	0x20000045
    11e4:	20000043 	.word	0x20000043

000011e8 <system_state>:

/************************************************************************/
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void) {
    11e8:	b510      	push	{r4, lr}
  update_battery_states();
    11ea:	f7ff ffb5 	bl	1158 <update_battery_states>
  display_battery_state();
    11ee:	f7ff ffc7 	bl	1180 <display_battery_state>
    11f2:	bd10      	pop	{r4, pc}

000011f4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    11f4:	4b0c      	ldr	r3, [pc, #48]	; (1228 <cpu_irq_enter_critical+0x34>)
    11f6:	681b      	ldr	r3, [r3, #0]
    11f8:	2b00      	cmp	r3, #0
    11fa:	d106      	bne.n	120a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    11fc:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1200:	2b00      	cmp	r3, #0
    1202:	d007      	beq.n	1214 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1204:	2200      	movs	r2, #0
    1206:	4b09      	ldr	r3, [pc, #36]	; (122c <cpu_irq_enter_critical+0x38>)
    1208:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    120a:	4a07      	ldr	r2, [pc, #28]	; (1228 <cpu_irq_enter_critical+0x34>)
    120c:	6813      	ldr	r3, [r2, #0]
    120e:	3301      	adds	r3, #1
    1210:	6013      	str	r3, [r2, #0]
}
    1212:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1214:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1216:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    121a:	2200      	movs	r2, #0
    121c:	4b04      	ldr	r3, [pc, #16]	; (1230 <cpu_irq_enter_critical+0x3c>)
    121e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1220:	3201      	adds	r2, #1
    1222:	4b02      	ldr	r3, [pc, #8]	; (122c <cpu_irq_enter_critical+0x38>)
    1224:	701a      	strb	r2, [r3, #0]
    1226:	e7f0      	b.n	120a <cpu_irq_enter_critical+0x16>
    1228:	20000064 	.word	0x20000064
    122c:	20000068 	.word	0x20000068
    1230:	20000010 	.word	0x20000010

00001234 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1234:	4b08      	ldr	r3, [pc, #32]	; (1258 <cpu_irq_leave_critical+0x24>)
    1236:	681a      	ldr	r2, [r3, #0]
    1238:	3a01      	subs	r2, #1
    123a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	2b00      	cmp	r3, #0
    1240:	d109      	bne.n	1256 <cpu_irq_leave_critical+0x22>
    1242:	4b06      	ldr	r3, [pc, #24]	; (125c <cpu_irq_leave_critical+0x28>)
    1244:	781b      	ldrb	r3, [r3, #0]
    1246:	2b00      	cmp	r3, #0
    1248:	d005      	beq.n	1256 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    124a:	2201      	movs	r2, #1
    124c:	4b04      	ldr	r3, [pc, #16]	; (1260 <cpu_irq_leave_critical+0x2c>)
    124e:	701a      	strb	r2, [r3, #0]
    1250:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1254:	b662      	cpsie	i
	}
}
    1256:	4770      	bx	lr
    1258:	20000064 	.word	0x20000064
    125c:	20000068 	.word	0x20000068
    1260:	20000010 	.word	0x20000010

00001264 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1264:	b500      	push	{lr}
    1266:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1268:	ab01      	add	r3, sp, #4
    126a:	2280      	movs	r2, #128	; 0x80
    126c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    126e:	780a      	ldrb	r2, [r1, #0]
    1270:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1272:	784a      	ldrb	r2, [r1, #1]
    1274:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1276:	788a      	ldrb	r2, [r1, #2]
    1278:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    127a:	0019      	movs	r1, r3
    127c:	f000 fe66 	bl	1f4c <system_pinmux_pin_set_config>
}
    1280:	b003      	add	sp, #12
    1282:	bd00      	pop	{pc}

00001284 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1284:	6803      	ldr	r3, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1286:	69db      	ldr	r3, [r3, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1288:	075b      	lsls	r3, r3, #29
    128a:	d1fb      	bne.n	1284 <_i2c_master_wait_for_sync>
		/* Wait for I2C module to sync. */
	}
}
    128c:	4770      	bx	lr
	...

00001290 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    1290:	b5f0      	push	{r4, r5, r6, r7, lr}
    1292:	46c6      	mov	lr, r8
    1294:	b500      	push	{lr}
    1296:	b082      	sub	sp, #8
    1298:	0007      	movs	r7, r0
    129a:	000c      	movs	r4, r1
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    129c:	6806      	ldr	r6, [r0, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    129e:	0030      	movs	r0, r6
    12a0:	f000 fb52 	bl	1948 <_sercom_get_sercom_inst_index>
    12a4:	4680      	mov	r8, r0
    12a6:	ab01      	add	r3, sp, #4
    12a8:	2280      	movs	r2, #128	; 0x80
    12aa:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12ac:	2200      	movs	r2, #0
    12ae:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12b0:	2101      	movs	r1, #1
    12b2:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    12b4:	70da      	strb	r2, [r3, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    12b6:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    12b8:	6a25      	ldr	r5, [r4, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    12ba:	2800      	cmp	r0, #0
    12bc:	d01e      	beq.n	12fc <_i2c_master_set_config+0x6c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    12be:	a901      	add	r1, sp, #4
    12c0:	7008      	strb	r0, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12c2:	2302      	movs	r3, #2
    12c4:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    12c6:	0c00      	lsrs	r0, r0, #16
    12c8:	b2c0      	uxtb	r0, r0
    12ca:	f000 fe3f 	bl	1f4c <system_pinmux_pin_set_config>

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    12ce:	2d00      	cmp	r5, #0
    12d0:	d019      	beq.n	1306 <_i2c_master_set_config+0x76>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    12d2:	a901      	add	r1, sp, #4
    12d4:	700d      	strb	r5, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12d6:	2302      	movs	r3, #2
    12d8:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    12da:	0c2d      	lsrs	r5, r5, #16
    12dc:	b2e8      	uxtb	r0, r5
    12de:	f000 fe35 	bl	1f4c <system_pinmux_pin_set_config>

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    12e2:	8aa3      	ldrh	r3, [r4, #20]
    12e4:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    12e6:	8ae3      	ldrh	r3, [r4, #22]
    12e8:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    12ea:	7e23      	ldrb	r3, [r4, #24]
    12ec:	2b00      	cmp	r3, #0
    12ee:	d110      	bne.n	1312 <_i2c_master_set_config+0x82>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12f0:	4b27      	ldr	r3, [pc, #156]	; (1390 <_i2c_master_set_config+0x100>)
    12f2:	789b      	ldrb	r3, [r3, #2]
    12f4:	079b      	lsls	r3, r3, #30
    12f6:	d449      	bmi.n	138c <_i2c_master_set_config+0xfc>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
    12f8:	2300      	movs	r3, #0
    12fa:	e00b      	b.n	1314 <_i2c_master_set_config+0x84>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    12fc:	2100      	movs	r1, #0
    12fe:	0030      	movs	r0, r6
    1300:	f000 fac2 	bl	1888 <_sercom_get_default_pad>
    1304:	e7db      	b.n	12be <_i2c_master_set_config+0x2e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1306:	2101      	movs	r1, #1
    1308:	0030      	movs	r0, r6
    130a:	f000 fabd 	bl	1888 <_sercom_get_default_pad>
    130e:	0005      	movs	r5, r0
    1310:	e7df      	b.n	12d2 <_i2c_master_set_config+0x42>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1312:	2380      	movs	r3, #128	; 0x80
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1314:	6922      	ldr	r2, [r4, #16]
    1316:	2a00      	cmp	r2, #0
    1318:	d000      	beq.n	131c <_i2c_master_set_config+0x8c>
		tmp_ctrla |= config->start_hold_time;
    131a:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    131c:	68a2      	ldr	r2, [r4, #8]
    131e:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    1320:	2124      	movs	r1, #36	; 0x24
    1322:	5c61      	ldrb	r1, [r4, r1]
    1324:	2900      	cmp	r1, #0
    1326:	d002      	beq.n	132e <_i2c_master_set_config+0x9e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1328:	2180      	movs	r1, #128	; 0x80
    132a:	05c9      	lsls	r1, r1, #23
    132c:	430b      	orrs	r3, r1
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    132e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1330:	2900      	cmp	r1, #0
    1332:	d000      	beq.n	1336 <_i2c_master_set_config+0xa6>
		tmp_ctrla |= config->inactive_timeout;
    1334:	430b      	orrs	r3, r1
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1336:	212c      	movs	r1, #44	; 0x2c
    1338:	5c61      	ldrb	r1, [r4, r1]
    133a:	2900      	cmp	r1, #0
    133c:	d103      	bne.n	1346 <_i2c_master_set_config+0xb6>
    133e:	2180      	movs	r1, #128	; 0x80
    1340:	0489      	lsls	r1, r1, #18
    1342:	428a      	cmp	r2, r1
    1344:	d102      	bne.n	134c <_i2c_master_set_config+0xbc>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1346:	2280      	movs	r2, #128	; 0x80
    1348:	0512      	lsls	r2, r2, #20
    134a:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    134c:	222d      	movs	r2, #45	; 0x2d
    134e:	5ca2      	ldrb	r2, [r4, r2]
    1350:	2a00      	cmp	r2, #0
    1352:	d002      	beq.n	135a <_i2c_master_set_config+0xca>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1354:	2280      	movs	r2, #128	; 0x80
    1356:	0412      	lsls	r2, r2, #16
    1358:	4313      	orrs	r3, r2
	}
	
	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    135a:	222e      	movs	r2, #46	; 0x2e
    135c:	5ca2      	ldrb	r2, [r4, r2]
    135e:	2a00      	cmp	r2, #0
    1360:	d002      	beq.n	1368 <_i2c_master_set_config+0xd8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1362:	2280      	movs	r2, #128	; 0x80
    1364:	03d2      	lsls	r2, r2, #15
    1366:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1368:	6832      	ldr	r2, [r6, #0]
    136a:	4313      	orrs	r3, r2
    136c:	6033      	str	r3, [r6, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    136e:	2380      	movs	r3, #128	; 0x80
    1370:	005b      	lsls	r3, r3, #1
    1372:	6073      	str	r3, [r6, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1374:	4647      	mov	r7, r8
    1376:	370e      	adds	r7, #14
    1378:	b2f8      	uxtb	r0, r7
    137a:	f000 fd89 	bl	1e90 <system_gclk_chan_get_hz>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    137e:	2323      	movs	r3, #35	; 0x23
    1380:	60f3      	str	r3, [r6, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
}
    1382:	2000      	movs	r0, #0
    1384:	b002      	add	sp, #8
    1386:	bc04      	pop	{r2}
    1388:	4690      	mov	r8, r2
    138a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    138c:	2380      	movs	r3, #128	; 0x80
    138e:	e7c1      	b.n	1314 <_i2c_master_set_config+0x84>
    1390:	41002000 	.word	0x41002000

00001394 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1394:	b5f0      	push	{r4, r5, r6, r7, lr}
    1396:	b083      	sub	sp, #12
    1398:	0007      	movs	r7, r0
    139a:	000d      	movs	r5, r1
    139c:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    139e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13a0:	0008      	movs	r0, r1
    13a2:	f000 fad1 	bl	1948 <_sercom_get_sercom_inst_index>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13a6:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13a8:	300e      	adds	r0, #14
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13aa:	2301      	movs	r3, #1
    13ac:	4093      	lsls	r3, r2
			PM->APBCMASK.reg |= mask;
    13ae:	4a1b      	ldr	r2, [pc, #108]	; (141c <i2c_master_init+0x88>)
    13b0:	6a11      	ldr	r1, [r2, #32]
    13b2:	430b      	orrs	r3, r1
    13b4:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    13b6:	7b33      	ldrb	r3, [r6, #12]
    13b8:	a901      	add	r1, sp, #4
    13ba:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    13bc:	b2c4      	uxtb	r4, r0
    13be:	0020      	movs	r0, r4
    13c0:	f000 fd5a 	bl	1e78 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    13c4:	0020      	movs	r0, r4
    13c6:	f000 fd1b 	bl	1e00 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    13ca:	7b30      	ldrb	r0, [r6, #12]
    13cc:	2100      	movs	r1, #0
    13ce:	f000 fa39 	bl	1844 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    13d2:	682b      	ldr	r3, [r5, #0]
    13d4:	079b      	lsls	r3, r3, #30
    13d6:	d502      	bpl.n	13de <i2c_master_init+0x4a>
		return STATUS_ERR_DENIED;
    13d8:	201c      	movs	r0, #28
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    13da:	b003      	add	sp, #12
    13dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    13de:	682b      	ldr	r3, [r5, #0]
    13e0:	07db      	lsls	r3, r3, #31
    13e2:	d501      	bpl.n	13e8 <i2c_master_init+0x54>
		return STATUS_BUSY;
    13e4:	2005      	movs	r0, #5
    13e6:	e7f8      	b.n	13da <i2c_master_init+0x46>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    13e8:	6838      	ldr	r0, [r7, #0]
    13ea:	f000 faad 	bl	1948 <_sercom_get_sercom_inst_index>
    13ee:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    13f0:	490b      	ldr	r1, [pc, #44]	; (1420 <i2c_master_init+0x8c>)
    13f2:	f000 fac3 	bl	197c <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
    13f6:	00a4      	lsls	r4, r4, #2
    13f8:	4b0a      	ldr	r3, [pc, #40]	; (1424 <i2c_master_init+0x90>)
    13fa:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    13fc:	2300      	movs	r3, #0
    13fe:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    1400:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    1402:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    1404:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    1406:	2225      	movs	r2, #37	; 0x25
    1408:	2100      	movs	r1, #0
    140a:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
    140c:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    140e:	3314      	adds	r3, #20
    1410:	602b      	str	r3, [r5, #0]
	return _i2c_master_set_config(module, config);
    1412:	0031      	movs	r1, r6
    1414:	0038      	movs	r0, r7
    1416:	f7ff ff3b 	bl	1290 <_i2c_master_set_config>
    141a:	e7de      	b.n	13da <i2c_master_init+0x46>
    141c:	40000400 	.word	0x40000400
    1420:	000016d5 	.word	0x000016d5
    1424:	20000204 	.word	0x20000204

00001428 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1428:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    142a:	7e1a      	ldrb	r2, [r3, #24]
    142c:	0792      	lsls	r2, r2, #30
    142e:	d506      	bpl.n	143e <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1430:	2202      	movs	r2, #2
    1432:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1434:	8b5b      	ldrh	r3, [r3, #26]
    1436:	079b      	lsls	r3, r3, #30
    1438:	d50b      	bpl.n	1452 <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    143a:	2041      	movs	r0, #65	; 0x41
		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
}
    143c:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    143e:	8b5a      	ldrh	r2, [r3, #26]
    1440:	0752      	lsls	r2, r2, #29
    1442:	d508      	bpl.n	1456 <_i2c_master_address_response+0x2e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1444:	6859      	ldr	r1, [r3, #4]
    1446:	22c0      	movs	r2, #192	; 0xc0
    1448:	0292      	lsls	r2, r2, #10
    144a:	430a      	orrs	r2, r1
    144c:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    144e:	2018      	movs	r0, #24
    1450:	e7f4      	b.n	143c <_i2c_master_address_response+0x14>
	return STATUS_OK;
    1452:	2000      	movs	r0, #0
    1454:	e7f2      	b.n	143c <_i2c_master_address_response+0x14>
    1456:	2000      	movs	r0, #0
    1458:	e7f0      	b.n	143c <_i2c_master_address_response+0x14>

0000145a <_i2c_master_wait_for_bus>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    145a:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    145c:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    145e:	7e11      	ldrb	r1, [r2, #24]
    1460:	07c9      	lsls	r1, r1, #31
    1462:	d40b      	bmi.n	147c <_i2c_master_wait_for_bus+0x22>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1464:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1466:	0789      	lsls	r1, r1, #30
    1468:	d406      	bmi.n	1478 <_i2c_master_wait_for_bus+0x1e>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    146a:	3301      	adds	r3, #1
    146c:	b29b      	uxth	r3, r3
    146e:	8901      	ldrh	r1, [r0, #8]
    1470:	428b      	cmp	r3, r1
    1472:	d3f4      	bcc.n	145e <_i2c_master_wait_for_bus+0x4>
			return STATUS_ERR_TIMEOUT;
    1474:	2012      	movs	r0, #18
    1476:	e002      	b.n	147e <_i2c_master_wait_for_bus+0x24>
		}
	}
	return STATUS_OK;
    1478:	2000      	movs	r0, #0
    147a:	e000      	b.n	147e <_i2c_master_wait_for_bus+0x24>
    147c:	2000      	movs	r0, #0
}
    147e:	4770      	bx	lr

00001480 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    1480:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1482:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1484:	6862      	ldr	r2, [r4, #4]
    1486:	2380      	movs	r3, #128	; 0x80
    1488:	02db      	lsls	r3, r3, #11
    148a:	4313      	orrs	r3, r2
    148c:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    148e:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1490:	f7ff ffe3 	bl	145a <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1494:	2301      	movs	r3, #1
    1496:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1498:	bd10      	pop	{r4, pc}
	...

0000149c <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    149c:	b5f0      	push	{r4, r5, r6, r7, lr}
    149e:	46de      	mov	lr, fp
    14a0:	4657      	mov	r7, sl
    14a2:	4646      	mov	r6, r8
    14a4:	b5c0      	push	{r6, r7, lr}
    14a6:	b082      	sub	sp, #8
    14a8:	9001      	str	r0, [sp, #4]
    14aa:	468a      	mov	sl, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14ac:	6807      	ldr	r7, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    14ae:	884d      	ldrh	r5, [r1, #2]

	_i2c_master_wait_for_sync(module);
    14b0:	f7ff fee8 	bl	1284 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    14b4:	4653      	mov	r3, sl
    14b6:	7a5b      	ldrb	r3, [r3, #9]
    14b8:	2b00      	cmp	r3, #0
    14ba:	d139      	bne.n	1530 <_i2c_master_write_packet+0x94>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    14bc:	687b      	ldr	r3, [r7, #4]
    14be:	4a32      	ldr	r2, [pc, #200]	; (1588 <_i2c_master_write_packet+0xec>)
    14c0:	4013      	ands	r3, r2
    14c2:	607b      	str	r3, [r7, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    14c4:	4653      	mov	r3, sl
    14c6:	7a1b      	ldrb	r3, [r3, #8]
    14c8:	2b00      	cmp	r3, #0
    14ca:	d037      	beq.n	153c <_i2c_master_write_packet+0xa0>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    14cc:	4653      	mov	r3, sl
    14ce:	881b      	ldrh	r3, [r3, #0]
    14d0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14d2:	4652      	mov	r2, sl
    14d4:	7a52      	ldrb	r2, [r2, #9]
    14d6:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    14d8:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    14da:	2280      	movs	r2, #128	; 0x80
    14dc:	0212      	lsls	r2, r2, #8
    14de:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    14e0:	627b      	str	r3, [r7, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    14e2:	9801      	ldr	r0, [sp, #4]
    14e4:	f7ff ffb9 	bl	145a <_i2c_master_wait_for_bus>
    14e8:	1e04      	subs	r4, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    14ea:	d030      	beq.n	154e <_i2c_master_write_packet+0xb2>
		tmp_status = _i2c_master_address_response(module);
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    14ec:	2c00      	cmp	r4, #0
    14ee:	d138      	bne.n	1562 <_i2c_master_write_packet+0xc6>
    14f0:	2600      	movs	r6, #0
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    14f2:	1e6b      	subs	r3, r5, #1
    14f4:	b29b      	uxth	r3, r3
    14f6:	469b      	mov	fp, r3
    14f8:	2d00      	cmp	r5, #0
    14fa:	d02e      	beq.n	155a <_i2c_master_write_packet+0xbe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    14fc:	8b7b      	ldrh	r3, [r7, #26]
    14fe:	069b      	lsls	r3, r3, #26
    1500:	d53f      	bpl.n	1582 <_i2c_master_write_packet+0xe6>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    1502:	9c01      	ldr	r4, [sp, #4]
    1504:	0020      	movs	r0, r4
    1506:	f7ff febd 	bl	1284 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    150a:	1c75      	adds	r5, r6, #1
    150c:	b2ab      	uxth	r3, r5
    150e:	4698      	mov	r8, r3
    1510:	4653      	mov	r3, sl
    1512:	685b      	ldr	r3, [r3, #4]
    1514:	5d9a      	ldrb	r2, [r3, r6]
    1516:	2328      	movs	r3, #40	; 0x28
    1518:	54fa      	strb	r2, [r7, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    151a:	0020      	movs	r0, r4
    151c:	f7ff ff9d 	bl	145a <_i2c_master_wait_for_bus>
    1520:	1e04      	subs	r4, r0, #0

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    1522:	d11a      	bne.n	155a <_i2c_master_write_packet+0xbe>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1524:	8b7b      	ldrh	r3, [r7, #26]
		while (tmp_data_length--) {
    1526:	465d      	mov	r5, fp
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1528:	075b      	lsls	r3, r3, #29
    152a:	d415      	bmi.n	1558 <_i2c_master_write_packet+0xbc>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    152c:	4646      	mov	r6, r8
    152e:	e7e0      	b.n	14f2 <_i2c_master_write_packet+0x56>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1530:	4653      	mov	r3, sl
    1532:	7a99      	ldrb	r1, [r3, #10]
    1534:	9801      	ldr	r0, [sp, #4]
    1536:	f7ff ffa3 	bl	1480 <_i2c_master_send_hs_master_code>
    153a:	e7bf      	b.n	14bc <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    153c:	4653      	mov	r3, sl
    153e:	881b      	ldrh	r3, [r3, #0]
    1540:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    1542:	4652      	mov	r2, sl
    1544:	7a52      	ldrb	r2, [r2, #9]
    1546:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1548:	4313      	orrs	r3, r2
    154a:	627b      	str	r3, [r7, #36]	; 0x24
    154c:	e7c9      	b.n	14e2 <_i2c_master_write_packet+0x46>
		tmp_status = _i2c_master_address_response(module);
    154e:	9801      	ldr	r0, [sp, #4]
    1550:	f7ff ff6a 	bl	1428 <_i2c_master_address_response>
    1554:	0004      	movs	r4, r0
    1556:	e7c9      	b.n	14ec <_i2c_master_write_packet+0x50>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    1558:	241e      	movs	r4, #30
				break;
			}
		}

		if (module->send_stop) {
    155a:	9b01      	ldr	r3, [sp, #4]
    155c:	7a9b      	ldrb	r3, [r3, #10]
    155e:	2b00      	cmp	r3, #0
    1560:	d106      	bne.n	1570 <_i2c_master_write_packet+0xd4>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1562:	0020      	movs	r0, r4
    1564:	b002      	add	sp, #8
    1566:	bc1c      	pop	{r2, r3, r4}
    1568:	4690      	mov	r8, r2
    156a:	469a      	mov	sl, r3
    156c:	46a3      	mov	fp, r4
    156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_i2c_master_wait_for_sync(module);
    1570:	9801      	ldr	r0, [sp, #4]
    1572:	f7ff fe87 	bl	1284 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1576:	687a      	ldr	r2, [r7, #4]
    1578:	23c0      	movs	r3, #192	; 0xc0
    157a:	029b      	lsls	r3, r3, #10
    157c:	4313      	orrs	r3, r2
    157e:	607b      	str	r3, [r7, #4]
    1580:	e7ef      	b.n	1562 <_i2c_master_write_packet+0xc6>
				return STATUS_ERR_PACKET_COLLISION;
    1582:	2441      	movs	r4, #65	; 0x41
    1584:	e7ed      	b.n	1562 <_i2c_master_write_packet+0xc6>
    1586:	46c0      	nop			; (mov r8, r8)
    1588:	fffbffff 	.word	0xfffbffff

0000158c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    158c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    158e:	8b83      	ldrh	r3, [r0, #28]
    1590:	b29b      	uxth	r3, r3
    1592:	2b00      	cmp	r3, #0
    1594:	d001      	beq.n	159a <i2c_master_write_packet_wait+0xe>
		return STATUS_BUSY;
    1596:	2005      	movs	r0, #5

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    1598:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    159a:	3301      	adds	r3, #1
    159c:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    159e:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    15a0:	f7ff ff7c 	bl	149c <_i2c_master_write_packet>
    15a4:	e7f8      	b.n	1598 <i2c_master_write_packet_wait+0xc>

000015a6 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    15a6:	6803      	ldr	r3, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    15a8:	69db      	ldr	r3, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    15aa:	075b      	lsls	r3, r3, #29
    15ac:	d1fb      	bne.n	15a6 <_i2c_master_wait_for_sync>
}
    15ae:	4770      	bx	lr

000015b0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    15b0:	b570      	push	{r4, r5, r6, lr}
    15b2:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15b4:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    15b6:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    15b8:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    15ba:	8b83      	ldrh	r3, [r0, #28]
    15bc:	1aed      	subs	r5, r5, r3
    15be:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    15c0:	8b83      	ldrh	r3, [r0, #28]
    15c2:	3b01      	subs	r3, #1
    15c4:	b29b      	uxth	r3, r3
    15c6:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    15c8:	0113      	lsls	r3, r2, #4
    15ca:	d51d      	bpl.n	1608 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    15cc:	7ac3      	ldrb	r3, [r0, #11]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d003      	beq.n	15da <_i2c_master_read+0x2a>
    15d2:	8b83      	ldrh	r3, [r0, #28]
    15d4:	b29b      	uxth	r3, r3
    15d6:	2b01      	cmp	r3, #1
    15d8:	d010      	beq.n	15fc <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    15da:	8ba3      	ldrh	r3, [r4, #28]
    15dc:	b29b      	uxth	r3, r3
    15de:	2b00      	cmp	r3, #0
    15e0:	d102      	bne.n	15e8 <_i2c_master_read+0x38>
		if (module->send_stop) {
    15e2:	7aa3      	ldrb	r3, [r4, #10]
    15e4:	2b00      	cmp	r3, #0
    15e6:	d11c      	bne.n	1622 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    15e8:	0020      	movs	r0, r4
    15ea:	f7ff ffdc 	bl	15a6 <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    15ee:	6a23      	ldr	r3, [r4, #32]
    15f0:	195d      	adds	r5, r3, r5
    15f2:	2328      	movs	r3, #40	; 0x28
    15f4:	5cf3      	ldrb	r3, [r6, r3]
    15f6:	b2db      	uxtb	r3, r3
    15f8:	702b      	strb	r3, [r5, #0]
}
    15fa:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    15fc:	6872      	ldr	r2, [r6, #4]
    15fe:	2380      	movs	r3, #128	; 0x80
    1600:	02db      	lsls	r3, r3, #11
    1602:	4313      	orrs	r3, r2
    1604:	6073      	str	r3, [r6, #4]
    1606:	e7e8      	b.n	15da <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1608:	7ac3      	ldrb	r3, [r0, #11]
    160a:	2b00      	cmp	r3, #0
    160c:	d0e5      	beq.n	15da <_i2c_master_read+0x2a>
    160e:	8b83      	ldrh	r3, [r0, #28]
    1610:	b29b      	uxth	r3, r3
    1612:	2b00      	cmp	r3, #0
    1614:	d1e1      	bne.n	15da <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1616:	6872      	ldr	r2, [r6, #4]
    1618:	2380      	movs	r3, #128	; 0x80
    161a:	02db      	lsls	r3, r3, #11
    161c:	4313      	orrs	r3, r2
    161e:	6073      	str	r3, [r6, #4]
    1620:	e7db      	b.n	15da <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1622:	0020      	movs	r0, r4
    1624:	f7ff ffbf 	bl	15a6 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1628:	6872      	ldr	r2, [r6, #4]
    162a:	23c0      	movs	r3, #192	; 0xc0
    162c:	029b      	lsls	r3, r3, #10
    162e:	4313      	orrs	r3, r2
    1630:	6073      	str	r3, [r6, #4]
    1632:	e7d9      	b.n	15e8 <_i2c_master_read+0x38>

00001634 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1638:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    163a:	8b6b      	ldrh	r3, [r5, #26]
    163c:	075b      	lsls	r3, r3, #29
    163e:	d503      	bpl.n	1648 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1640:	221e      	movs	r2, #30
    1642:	2325      	movs	r3, #37	; 0x25
    1644:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1646:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1648:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    164a:	8b83      	ldrh	r3, [r0, #28]
    164c:	1af6      	subs	r6, r6, r3
    164e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1650:	8b83      	ldrh	r3, [r0, #28]
    1652:	3b01      	subs	r3, #1
    1654:	b29b      	uxth	r3, r3
    1656:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1658:	f7ff ffa5 	bl	15a6 <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    165c:	6a23      	ldr	r3, [r4, #32]
    165e:	199e      	adds	r6, r3, r6
    1660:	7833      	ldrb	r3, [r6, #0]
    1662:	b2db      	uxtb	r3, r3
    1664:	2228      	movs	r2, #40	; 0x28
    1666:	54ab      	strb	r3, [r5, r2]
    1668:	e7ed      	b.n	1646 <_i2c_master_write+0x12>

0000166a <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    166a:	b570      	push	{r4, r5, r6, lr}
    166c:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    166e:	6805      	ldr	r5, [r0, #0]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1670:	7e2b      	ldrb	r3, [r5, #24]
    1672:	07db      	lsls	r3, r3, #31
    1674:	d507      	bpl.n	1686 <_i2c_master_async_address_response+0x1c>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1676:	2301      	movs	r3, #1
    1678:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    167a:	8b6b      	ldrh	r3, [r5, #26]
    167c:	079b      	lsls	r3, r3, #30
    167e:	d50a      	bpl.n	1696 <_i2c_master_async_address_response+0x2c>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    1680:	2241      	movs	r2, #65	; 0x41
    1682:	2325      	movs	r3, #37	; 0x25
    1684:	54c2      	strb	r2, [r0, r3]
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    1686:	8ba3      	ldrh	r3, [r4, #28]
    1688:	b29b      	uxth	r3, r3
    168a:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    168c:	2325      	movs	r3, #37	; 0x25
    168e:	5ce3      	ldrb	r3, [r4, r3]
    1690:	2b05      	cmp	r3, #5
    1692:	d013      	beq.n	16bc <_i2c_master_async_address_response+0x52>
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
		}
	}
}
    1694:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1696:	8b6b      	ldrh	r3, [r5, #26]
    1698:	075b      	lsls	r3, r3, #29
    169a:	d5f4      	bpl.n	1686 <_i2c_master_async_address_response+0x1c>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    169c:	2218      	movs	r2, #24
    169e:	2325      	movs	r3, #37	; 0x25
    16a0:	54c2      	strb	r2, [r0, r3]
			module->buffer_remaining = 0;
    16a2:	2300      	movs	r3, #0
    16a4:	8383      	strh	r3, [r0, #28]
			if (module->send_stop) {
    16a6:	7a83      	ldrb	r3, [r0, #10]
    16a8:	2b00      	cmp	r3, #0
    16aa:	d0ec      	beq.n	1686 <_i2c_master_async_address_response+0x1c>
				_i2c_master_wait_for_sync(module);
    16ac:	f7ff ff7b 	bl	15a6 <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16b0:	686a      	ldr	r2, [r5, #4]
    16b2:	23c0      	movs	r3, #192	; 0xc0
    16b4:	029b      	lsls	r3, r3, #10
    16b6:	4313      	orrs	r3, r2
    16b8:	606b      	str	r3, [r5, #4]
    16ba:	e7e4      	b.n	1686 <_i2c_master_async_address_response+0x1c>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    16bc:	331f      	adds	r3, #31
    16be:	5ce3      	ldrb	r3, [r4, r3]
    16c0:	2b00      	cmp	r3, #0
    16c2:	d003      	beq.n	16cc <_i2c_master_async_address_response+0x62>
			_i2c_master_read(module);
    16c4:	0020      	movs	r0, r4
    16c6:	f7ff ff73 	bl	15b0 <_i2c_master_read>
}
    16ca:	e7e3      	b.n	1694 <_i2c_master_async_address_response+0x2a>
			_i2c_master_write(module);
    16cc:	0020      	movs	r0, r4
    16ce:	f7ff ffb1 	bl	1634 <_i2c_master_write>
    16d2:	e7df      	b.n	1694 <_i2c_master_async_address_response+0x2a>

000016d4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    16d4:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    16d6:	0080      	lsls	r0, r0, #2
    16d8:	4b59      	ldr	r3, [pc, #356]	; (1840 <_i2c_master_interrupt_handler+0x16c>)
    16da:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16dc:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    16de:	682b      	ldr	r3, [r5, #0]
    16e0:	011b      	lsls	r3, r3, #4
    16e2:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    16e4:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    16e6:	7e26      	ldrb	r6, [r4, #24]
    16e8:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    16ea:	8b63      	ldrh	r3, [r4, #26]
    16ec:	b29b      	uxth	r3, r3
    16ee:	2b00      	cmp	r3, #0
    16f0:	d103      	bne.n	16fa <_i2c_master_interrupt_handler+0x26>
    16f2:	8ba3      	ldrh	r3, [r4, #28]
    16f4:	b29b      	uxth	r3, r3
    16f6:	2b00      	cmp	r3, #0
    16f8:	d120      	bne.n	173c <_i2c_master_interrupt_handler+0x68>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    16fa:	8b63      	ldrh	r3, [r4, #26]
    16fc:	b29b      	uxth	r3, r3
    16fe:	2b00      	cmp	r3, #0
    1700:	d007      	beq.n	1712 <_i2c_master_interrupt_handler+0x3e>
    1702:	8ba3      	ldrh	r3, [r4, #28]
    1704:	b29b      	uxth	r3, r3
    1706:	2b00      	cmp	r3, #0
    1708:	d103      	bne.n	1712 <_i2c_master_interrupt_handler+0x3e>
			(module->status == STATUS_BUSY) &&
    170a:	3325      	adds	r3, #37	; 0x25
    170c:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    170e:	2b05      	cmp	r3, #5
    1710:	d03a      	beq.n	1788 <_i2c_master_interrupt_handler+0xb4>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1712:	8b63      	ldrh	r3, [r4, #26]
    1714:	b29b      	uxth	r3, r3
    1716:	2b00      	cmp	r3, #0
    1718:	d013      	beq.n	1742 <_i2c_master_interrupt_handler+0x6e>
    171a:	8ba3      	ldrh	r3, [r4, #28]
    171c:	b29b      	uxth	r3, r3
    171e:	2b00      	cmp	r3, #0
    1720:	d00f      	beq.n	1742 <_i2c_master_interrupt_handler+0x6e>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1722:	8b6b      	ldrh	r3, [r5, #26]
    1724:	069b      	lsls	r3, r3, #26
    1726:	d44e      	bmi.n	17c6 <_i2c_master_interrupt_handler+0xf2>
    1728:	2a00      	cmp	r2, #0
    172a:	d003      	beq.n	1734 <_i2c_master_interrupt_handler+0x60>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    172c:	8ba3      	ldrh	r3, [r4, #28]
    172e:	b29b      	uxth	r3, r3
    1730:	2b01      	cmp	r3, #1
    1732:	d048      	beq.n	17c6 <_i2c_master_interrupt_handler+0xf2>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1734:	2241      	movs	r2, #65	; 0x41
    1736:	2325      	movs	r3, #37	; 0x25
    1738:	54e2      	strb	r2, [r4, r3]
    173a:	e002      	b.n	1742 <_i2c_master_interrupt_handler+0x6e>
		_i2c_master_async_address_response(module);
    173c:	0020      	movs	r0, r4
    173e:	f7ff ff94 	bl	166a <_i2c_master_async_address_response>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1742:	8b63      	ldrh	r3, [r4, #26]
    1744:	b29b      	uxth	r3, r3
    1746:	2b00      	cmp	r3, #0
    1748:	d007      	beq.n	175a <_i2c_master_interrupt_handler+0x86>
    174a:	8ba3      	ldrh	r3, [r4, #28]
    174c:	b29b      	uxth	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	d103      	bne.n	175a <_i2c_master_interrupt_handler+0x86>
			(module->status == STATUS_BUSY) &&
    1752:	3325      	adds	r3, #37	; 0x25
    1754:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1756:	2b05      	cmp	r3, #5
    1758:	d041      	beq.n	17de <_i2c_master_interrupt_handler+0x10a>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    175a:	2325      	movs	r3, #37	; 0x25
    175c:	5ce3      	ldrb	r3, [r4, r3]
    175e:	2b05      	cmp	r3, #5
    1760:	d011      	beq.n	1786 <_i2c_master_interrupt_handler+0xb2>
    1762:	2325      	movs	r3, #37	; 0x25
    1764:	5ce3      	ldrb	r3, [r4, r3]
    1766:	2b00      	cmp	r3, #0
    1768:	d00d      	beq.n	1786 <_i2c_master_interrupt_handler+0xb2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    176a:	2303      	movs	r3, #3
    176c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    176e:	2300      	movs	r3, #0
    1770:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1772:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1774:	3325      	adds	r3, #37	; 0x25
    1776:	5ce3      	ldrb	r3, [r4, r3]
    1778:	2b41      	cmp	r3, #65	; 0x41
    177a:	d002      	beq.n	1782 <_i2c_master_interrupt_handler+0xae>
				module->send_stop) {
    177c:	7aa3      	ldrb	r3, [r4, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    177e:	2b00      	cmp	r3, #0
    1780:	d151      	bne.n	1826 <_i2c_master_interrupt_handler+0x152>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1782:	0773      	lsls	r3, r6, #29
    1784:	d458      	bmi.n	1838 <_i2c_master_interrupt_handler+0x164>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1786:	bd70      	pop	{r4, r5, r6, pc}
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1788:	331f      	adds	r3, #31
    178a:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    178c:	2b00      	cmp	r3, #0
    178e:	d1c0      	bne.n	1712 <_i2c_master_interrupt_handler+0x3e>
		i2c_module->INTENCLR.reg =
    1790:	3303      	adds	r3, #3
    1792:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1794:	2300      	movs	r3, #0
    1796:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1798:	3325      	adds	r3, #37	; 0x25
    179a:	2200      	movs	r2, #0
    179c:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    179e:	7aa3      	ldrb	r3, [r4, #10]
    17a0:	2b00      	cmp	r3, #0
    17a2:	d107      	bne.n	17b4 <_i2c_master_interrupt_handler+0xe0>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    17a4:	2301      	movs	r3, #1
    17a6:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    17a8:	07f3      	lsls	r3, r6, #31
    17aa:	d5ca      	bpl.n	1742 <_i2c_master_interrupt_handler+0x6e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    17ac:	68e3      	ldr	r3, [r4, #12]
    17ae:	0020      	movs	r0, r4
    17b0:	4798      	blx	r3
    17b2:	e7c6      	b.n	1742 <_i2c_master_interrupt_handler+0x6e>
			_i2c_master_wait_for_sync(module);
    17b4:	0020      	movs	r0, r4
    17b6:	f7ff fef6 	bl	15a6 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    17ba:	686a      	ldr	r2, [r5, #4]
    17bc:	23c0      	movs	r3, #192	; 0xc0
    17be:	029b      	lsls	r3, r3, #10
    17c0:	4313      	orrs	r3, r2
    17c2:	606b      	str	r3, [r5, #4]
    17c4:	e7f0      	b.n	17a8 <_i2c_master_interrupt_handler+0xd4>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    17c6:	2324      	movs	r3, #36	; 0x24
    17c8:	5ce3      	ldrb	r3, [r4, r3]
    17ca:	2b00      	cmp	r3, #0
    17cc:	d103      	bne.n	17d6 <_i2c_master_interrupt_handler+0x102>
			_i2c_master_write(module);
    17ce:	0020      	movs	r0, r4
    17d0:	f7ff ff30 	bl	1634 <_i2c_master_write>
    17d4:	e7b5      	b.n	1742 <_i2c_master_interrupt_handler+0x6e>
			_i2c_master_read(module);
    17d6:	0020      	movs	r0, r4
    17d8:	f7ff feea 	bl	15b0 <_i2c_master_read>
    17dc:	e7b1      	b.n	1742 <_i2c_master_interrupt_handler+0x6e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    17de:	331f      	adds	r3, #31
    17e0:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    17e2:	2b01      	cmp	r3, #1
    17e4:	d1b9      	bne.n	175a <_i2c_master_interrupt_handler+0x86>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    17e6:	7e2b      	ldrb	r3, [r5, #24]
    17e8:	079b      	lsls	r3, r3, #30
    17ea:	d501      	bpl.n	17f0 <_i2c_master_interrupt_handler+0x11c>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    17ec:	2302      	movs	r3, #2
    17ee:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    17f0:	2303      	movs	r3, #3
    17f2:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    17f4:	2300      	movs	r3, #0
    17f6:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    17f8:	3325      	adds	r3, #37	; 0x25
    17fa:	2200      	movs	r2, #0
    17fc:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    17fe:	07b3      	lsls	r3, r6, #30
    1800:	d503      	bpl.n	180a <_i2c_master_interrupt_handler+0x136>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1802:	2324      	movs	r3, #36	; 0x24
    1804:	5ce3      	ldrb	r3, [r4, r3]
    1806:	2b01      	cmp	r3, #1
    1808:	d009      	beq.n	181e <_i2c_master_interrupt_handler+0x14a>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    180a:	07f3      	lsls	r3, r6, #31
    180c:	d5a5      	bpl.n	175a <_i2c_master_interrupt_handler+0x86>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    180e:	2324      	movs	r3, #36	; 0x24
    1810:	5ce3      	ldrb	r3, [r4, r3]
    1812:	2b00      	cmp	r3, #0
    1814:	d1a1      	bne.n	175a <_i2c_master_interrupt_handler+0x86>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1816:	68e3      	ldr	r3, [r4, #12]
    1818:	0020      	movs	r0, r4
    181a:	4798      	blx	r3
    181c:	e79d      	b.n	175a <_i2c_master_interrupt_handler+0x86>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    181e:	6923      	ldr	r3, [r4, #16]
    1820:	0020      	movs	r0, r4
    1822:	4798      	blx	r3
    1824:	e799      	b.n	175a <_i2c_master_interrupt_handler+0x86>
			_i2c_master_wait_for_sync(module);
    1826:	0020      	movs	r0, r4
    1828:	f7ff febd 	bl	15a6 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    182c:	686a      	ldr	r2, [r5, #4]
    182e:	23e0      	movs	r3, #224	; 0xe0
    1830:	02db      	lsls	r3, r3, #11
    1832:	4313      	orrs	r3, r2
    1834:	606b      	str	r3, [r5, #4]
    1836:	e7a4      	b.n	1782 <_i2c_master_interrupt_handler+0xae>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1838:	6963      	ldr	r3, [r4, #20]
    183a:	0020      	movs	r0, r4
    183c:	4798      	blx	r3
}
    183e:	e7a2      	b.n	1786 <_i2c_master_interrupt_handler+0xb2>
    1840:	20000204 	.word	0x20000204

00001844 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1844:	b510      	push	{r4, lr}
    1846:	b082      	sub	sp, #8
    1848:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    184a:	4b0e      	ldr	r3, [pc, #56]	; (1884 <sercom_set_gclk_generator+0x40>)
    184c:	781b      	ldrb	r3, [r3, #0]
    184e:	2b00      	cmp	r3, #0
    1850:	d007      	beq.n	1862 <sercom_set_gclk_generator+0x1e>
    1852:	2900      	cmp	r1, #0
    1854:	d105      	bne.n	1862 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1856:	4b0b      	ldr	r3, [pc, #44]	; (1884 <sercom_set_gclk_generator+0x40>)
    1858:	785b      	ldrb	r3, [r3, #1]
    185a:	4283      	cmp	r3, r0
    185c:	d010      	beq.n	1880 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    185e:	201d      	movs	r0, #29
    1860:	e00c      	b.n	187c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1862:	a901      	add	r1, sp, #4
    1864:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1866:	200d      	movs	r0, #13
    1868:	f000 fb06 	bl	1e78 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    186c:	200d      	movs	r0, #13
    186e:	f000 fac7 	bl	1e00 <system_gclk_chan_enable>
		_sercom_config.generator_source = generator_source;
    1872:	4b04      	ldr	r3, [pc, #16]	; (1884 <sercom_set_gclk_generator+0x40>)
    1874:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1876:	2201      	movs	r2, #1
    1878:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    187a:	2000      	movs	r0, #0
}
    187c:	b002      	add	sp, #8
    187e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1880:	2000      	movs	r0, #0
    1882:	e7fb      	b.n	187c <sercom_set_gclk_generator+0x38>
    1884:	2000006c 	.word	0x2000006c

00001888 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1888:	4b20      	ldr	r3, [pc, #128]	; (190c <_sercom_get_default_pad+0x84>)
    188a:	4298      	cmp	r0, r3
    188c:	d017      	beq.n	18be <_sercom_get_default_pad+0x36>
    188e:	4b20      	ldr	r3, [pc, #128]	; (1910 <_sercom_get_default_pad+0x88>)
    1890:	4298      	cmp	r0, r3
    1892:	d024      	beq.n	18de <_sercom_get_default_pad+0x56>
    1894:	4b1f      	ldr	r3, [pc, #124]	; (1914 <_sercom_get_default_pad+0x8c>)
    1896:	4298      	cmp	r0, r3
    1898:	d001      	beq.n	189e <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    189a:	2000      	movs	r0, #0
}
    189c:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    189e:	2901      	cmp	r1, #1
    18a0:	d02d      	beq.n	18fe <_sercom_get_default_pad+0x76>
    18a2:	2900      	cmp	r1, #0
    18a4:	d005      	beq.n	18b2 <_sercom_get_default_pad+0x2a>
    18a6:	2902      	cmp	r1, #2
    18a8:	d005      	beq.n	18b6 <_sercom_get_default_pad+0x2e>
    18aa:	2903      	cmp	r1, #3
    18ac:	d005      	beq.n	18ba <_sercom_get_default_pad+0x32>
	return 0;
    18ae:	2000      	movs	r0, #0
    18b0:	e7f4      	b.n	189c <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18b2:	4819      	ldr	r0, [pc, #100]	; (1918 <_sercom_get_default_pad+0x90>)
    18b4:	e7f2      	b.n	189c <_sercom_get_default_pad+0x14>
    18b6:	4819      	ldr	r0, [pc, #100]	; (191c <_sercom_get_default_pad+0x94>)
    18b8:	e7f0      	b.n	189c <_sercom_get_default_pad+0x14>
    18ba:	4819      	ldr	r0, [pc, #100]	; (1920 <_sercom_get_default_pad+0x98>)
    18bc:	e7ee      	b.n	189c <_sercom_get_default_pad+0x14>
    18be:	2901      	cmp	r1, #1
    18c0:	d01f      	beq.n	1902 <_sercom_get_default_pad+0x7a>
    18c2:	2900      	cmp	r1, #0
    18c4:	d005      	beq.n	18d2 <_sercom_get_default_pad+0x4a>
    18c6:	2902      	cmp	r1, #2
    18c8:	d005      	beq.n	18d6 <_sercom_get_default_pad+0x4e>
    18ca:	2903      	cmp	r1, #3
    18cc:	d005      	beq.n	18da <_sercom_get_default_pad+0x52>
	return 0;
    18ce:	2000      	movs	r0, #0
    18d0:	e7e4      	b.n	189c <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18d2:	4814      	ldr	r0, [pc, #80]	; (1924 <_sercom_get_default_pad+0x9c>)
    18d4:	e7e2      	b.n	189c <_sercom_get_default_pad+0x14>
    18d6:	4814      	ldr	r0, [pc, #80]	; (1928 <_sercom_get_default_pad+0xa0>)
    18d8:	e7e0      	b.n	189c <_sercom_get_default_pad+0x14>
    18da:	4814      	ldr	r0, [pc, #80]	; (192c <_sercom_get_default_pad+0xa4>)
    18dc:	e7de      	b.n	189c <_sercom_get_default_pad+0x14>
    18de:	2901      	cmp	r1, #1
    18e0:	d011      	beq.n	1906 <_sercom_get_default_pad+0x7e>
    18e2:	2900      	cmp	r1, #0
    18e4:	d005      	beq.n	18f2 <_sercom_get_default_pad+0x6a>
    18e6:	2902      	cmp	r1, #2
    18e8:	d005      	beq.n	18f6 <_sercom_get_default_pad+0x6e>
    18ea:	2903      	cmp	r1, #3
    18ec:	d005      	beq.n	18fa <_sercom_get_default_pad+0x72>
	return 0;
    18ee:	2000      	movs	r0, #0
    18f0:	e7d4      	b.n	189c <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18f2:	480f      	ldr	r0, [pc, #60]	; (1930 <_sercom_get_default_pad+0xa8>)
    18f4:	e7d2      	b.n	189c <_sercom_get_default_pad+0x14>
    18f6:	480f      	ldr	r0, [pc, #60]	; (1934 <_sercom_get_default_pad+0xac>)
    18f8:	e7d0      	b.n	189c <_sercom_get_default_pad+0x14>
    18fa:	480f      	ldr	r0, [pc, #60]	; (1938 <_sercom_get_default_pad+0xb0>)
    18fc:	e7ce      	b.n	189c <_sercom_get_default_pad+0x14>
    18fe:	480f      	ldr	r0, [pc, #60]	; (193c <_sercom_get_default_pad+0xb4>)
    1900:	e7cc      	b.n	189c <_sercom_get_default_pad+0x14>
    1902:	480f      	ldr	r0, [pc, #60]	; (1940 <_sercom_get_default_pad+0xb8>)
    1904:	e7ca      	b.n	189c <_sercom_get_default_pad+0x14>
    1906:	480f      	ldr	r0, [pc, #60]	; (1944 <_sercom_get_default_pad+0xbc>)
    1908:	e7c8      	b.n	189c <_sercom_get_default_pad+0x14>
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	42000c00 	.word	0x42000c00
    1910:	42001000 	.word	0x42001000
    1914:	42000800 	.word	0x42000800
    1918:	00040003 	.word	0x00040003
    191c:	00060003 	.word	0x00060003
    1920:	00070003 	.word	0x00070003
    1924:	00160002 	.word	0x00160002
    1928:	001e0003 	.word	0x001e0003
    192c:	001f0003 	.word	0x001f0003
    1930:	00160003 	.word	0x00160003
    1934:	00100003 	.word	0x00100003
    1938:	00190003 	.word	0x00190003
    193c:	00050003 	.word	0x00050003
    1940:	00170002 	.word	0x00170002
    1944:	00170003 	.word	0x00170003

00001948 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1948:	b530      	push	{r4, r5, lr}
    194a:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    194c:	aa01      	add	r2, sp, #4
    194e:	4b09      	ldr	r3, [pc, #36]	; (1974 <_sercom_get_sercom_inst_index+0x2c>)
    1950:	cb32      	ldmia	r3!, {r1, r4, r5}
    1952:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1954:	2300      	movs	r3, #0
    1956:	2b02      	cmp	r3, #2
    1958:	d808      	bhi.n	196c <_sercom_get_sercom_inst_index+0x24>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    195a:	009a      	lsls	r2, r3, #2
    195c:	a901      	add	r1, sp, #4
    195e:	5852      	ldr	r2, [r2, r1]
    1960:	4282      	cmp	r2, r0
    1962:	d001      	beq.n	1968 <_sercom_get_sercom_inst_index+0x20>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1964:	3301      	adds	r3, #1
    1966:	e7f6      	b.n	1956 <_sercom_get_sercom_inst_index+0xe>
			return i;
    1968:	b2d8      	uxtb	r0, r3
    196a:	e000      	b.n	196e <_sercom_get_sercom_inst_index+0x26>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    196c:	2000      	movs	r0, #0
}
    196e:	b005      	add	sp, #20
    1970:	bd30      	pop	{r4, r5, pc}
    1972:	46c0      	nop			; (mov r8, r8)
    1974:	00002fb4 	.word	0x00002fb4

00001978 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1978:	4770      	bx	lr
	...

0000197c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    197c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    197e:	4b0b      	ldr	r3, [pc, #44]	; (19ac <_sercom_set_handler+0x30>)
    1980:	781b      	ldrb	r3, [r3, #0]
    1982:	2b00      	cmp	r3, #0
    1984:	d008      	beq.n	1998 <_sercom_set_handler+0x1c>
    1986:	e00c      	b.n	19a2 <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1988:	009a      	lsls	r2, r3, #2
    198a:	4d09      	ldr	r5, [pc, #36]	; (19b0 <_sercom_set_handler+0x34>)
    198c:	4c09      	ldr	r4, [pc, #36]	; (19b4 <_sercom_set_handler+0x38>)
    198e:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    1990:	2500      	movs	r5, #0
    1992:	4c09      	ldr	r4, [pc, #36]	; (19b8 <_sercom_set_handler+0x3c>)
    1994:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1996:	3301      	adds	r3, #1
    1998:	2b02      	cmp	r3, #2
    199a:	d9f5      	bls.n	1988 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    199c:	2201      	movs	r2, #1
    199e:	4b03      	ldr	r3, [pc, #12]	; (19ac <_sercom_set_handler+0x30>)
    19a0:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    19a2:	0080      	lsls	r0, r0, #2
    19a4:	4b03      	ldr	r3, [pc, #12]	; (19b4 <_sercom_set_handler+0x38>)
    19a6:	50c1      	str	r1, [r0, r3]
}
    19a8:	bd30      	pop	{r4, r5, pc}
    19aa:	46c0      	nop			; (mov r8, r8)
    19ac:	2000006e 	.word	0x2000006e
    19b0:	00001979 	.word	0x00001979
    19b4:	20000070 	.word	0x20000070
    19b8:	20000204 	.word	0x20000204

000019bc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    19bc:	b510      	push	{r4, lr}
    19be:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    19c0:	ac01      	add	r4, sp, #4
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <_sercom_get_interrupt_vector+0x1c>)
    19c4:	881a      	ldrh	r2, [r3, #0]
    19c6:	8022      	strh	r2, [r4, #0]
    19c8:	789b      	ldrb	r3, [r3, #2]
    19ca:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    19cc:	f7ff ffbc 	bl	1948 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    19d0:	5620      	ldrsb	r0, [r4, r0]
}
    19d2:	b002      	add	sp, #8
    19d4:	bd10      	pop	{r4, pc}
    19d6:	46c0      	nop			; (mov r8, r8)
    19d8:	00002fc0 	.word	0x00002fc0

000019dc <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    19dc:	b510      	push	{r4, lr}
    19de:	4b02      	ldr	r3, [pc, #8]	; (19e8 <SERCOM0_Handler+0xc>)
    19e0:	681b      	ldr	r3, [r3, #0]
    19e2:	2000      	movs	r0, #0
    19e4:	4798      	blx	r3
    19e6:	bd10      	pop	{r4, pc}
    19e8:	20000070 	.word	0x20000070

000019ec <SERCOM1_Handler>:
    19ec:	b510      	push	{r4, lr}
    19ee:	4b02      	ldr	r3, [pc, #8]	; (19f8 <SERCOM1_Handler+0xc>)
    19f0:	685b      	ldr	r3, [r3, #4]
    19f2:	2001      	movs	r0, #1
    19f4:	4798      	blx	r3
    19f6:	bd10      	pop	{r4, pc}
    19f8:	20000070 	.word	0x20000070

000019fc <SERCOM2_Handler>:
    19fc:	b510      	push	{r4, lr}
    19fe:	4b02      	ldr	r3, [pc, #8]	; (1a08 <SERCOM2_Handler+0xc>)
    1a00:	689b      	ldr	r3, [r3, #8]
    1a02:	2002      	movs	r0, #2
    1a04:	4798      	blx	r3
    1a06:	bd10      	pop	{r4, pc}
    1a08:	20000070 	.word	0x20000070

00001a0c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1a0c:	b510      	push	{r4, lr}
    1a0e:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1a10:	2201      	movs	r2, #1
    1a12:	ab01      	add	r3, sp, #4
    1a14:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a16:	2400      	movs	r4, #0
    1a18:	e004      	b.n	1a24 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a1a:	b2e0      	uxtb	r0, r4
    1a1c:	a901      	add	r1, sp, #4
    1a1e:	f000 fa2b 	bl	1e78 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a22:	3401      	adds	r4, #1
    1a24:	2c17      	cmp	r4, #23
    1a26:	d9f8      	bls.n	1a1a <_switch_peripheral_gclk+0xe>
	}
}
    1a28:	b002      	add	sp, #8
    1a2a:	bd10      	pop	{r4, pc}

00001a2c <system_clock_source_get_hz>:
{
    1a2c:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a2e:	2808      	cmp	r0, #8
    1a30:	d834      	bhi.n	1a9c <system_clock_source_get_hz+0x70>
    1a32:	0080      	lsls	r0, r0, #2
    1a34:	4b1c      	ldr	r3, [pc, #112]	; (1aa8 <system_clock_source_get_hz+0x7c>)
    1a36:	581b      	ldr	r3, [r3, r0]
    1a38:	469f      	mov	pc, r3
		return 32768UL;
    1a3a:	2080      	movs	r0, #128	; 0x80
    1a3c:	0200      	lsls	r0, r0, #8
}
    1a3e:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1a40:	4b1a      	ldr	r3, [pc, #104]	; (1aac <system_clock_source_get_hz+0x80>)
    1a42:	6918      	ldr	r0, [r3, #16]
    1a44:	e7fb      	b.n	1a3e <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a46:	4b1a      	ldr	r3, [pc, #104]	; (1ab0 <system_clock_source_get_hz+0x84>)
    1a48:	6a1b      	ldr	r3, [r3, #32]
    1a4a:	059b      	lsls	r3, r3, #22
    1a4c:	0f9b      	lsrs	r3, r3, #30
    1a4e:	4819      	ldr	r0, [pc, #100]	; (1ab4 <system_clock_source_get_hz+0x88>)
    1a50:	40d8      	lsrs	r0, r3
    1a52:	e7f4      	b.n	1a3e <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1a54:	4b15      	ldr	r3, [pc, #84]	; (1aac <system_clock_source_get_hz+0x80>)
    1a56:	6958      	ldr	r0, [r3, #20]
    1a58:	e7f1      	b.n	1a3e <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1a5a:	4b14      	ldr	r3, [pc, #80]	; (1aac <system_clock_source_get_hz+0x80>)
    1a5c:	681b      	ldr	r3, [r3, #0]
    1a5e:	079b      	lsls	r3, r3, #30
    1a60:	d51e      	bpl.n	1aa0 <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a62:	4b13      	ldr	r3, [pc, #76]	; (1ab0 <system_clock_source_get_hz+0x84>)
    1a64:	68db      	ldr	r3, [r3, #12]
    1a66:	06db      	lsls	r3, r3, #27
    1a68:	d5fb      	bpl.n	1a62 <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    1a6a:	4b10      	ldr	r3, [pc, #64]	; (1aac <system_clock_source_get_hz+0x80>)
    1a6c:	681a      	ldr	r2, [r3, #0]
    1a6e:	2324      	movs	r3, #36	; 0x24
    1a70:	4013      	ands	r3, r2
    1a72:	2b04      	cmp	r3, #4
    1a74:	d001      	beq.n	1a7a <system_clock_source_get_hz+0x4e>
			return 48000000UL;
    1a76:	4810      	ldr	r0, [pc, #64]	; (1ab8 <system_clock_source_get_hz+0x8c>)
    1a78:	e7e1      	b.n	1a3e <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a7a:	2000      	movs	r0, #0
    1a7c:	f000 fa08 	bl	1e90 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    1a80:	4b0a      	ldr	r3, [pc, #40]	; (1aac <system_clock_source_get_hz+0x80>)
    1a82:	689b      	ldr	r3, [r3, #8]
    1a84:	041b      	lsls	r3, r3, #16
    1a86:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1a88:	4358      	muls	r0, r3
    1a8a:	e7d8      	b.n	1a3e <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a8c:	2350      	movs	r3, #80	; 0x50
    1a8e:	4a08      	ldr	r2, [pc, #32]	; (1ab0 <system_clock_source_get_hz+0x84>)
    1a90:	5cd3      	ldrb	r3, [r2, r3]
    1a92:	075b      	lsls	r3, r3, #29
    1a94:	d506      	bpl.n	1aa4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1a96:	4b05      	ldr	r3, [pc, #20]	; (1aac <system_clock_source_get_hz+0x80>)
    1a98:	68d8      	ldr	r0, [r3, #12]
    1a9a:	e7d0      	b.n	1a3e <system_clock_source_get_hz+0x12>
		return 0;
    1a9c:	2000      	movs	r0, #0
    1a9e:	e7ce      	b.n	1a3e <system_clock_source_get_hz+0x12>
			return 0;
    1aa0:	2000      	movs	r0, #0
    1aa2:	e7cc      	b.n	1a3e <system_clock_source_get_hz+0x12>
			return 0;
    1aa4:	2000      	movs	r0, #0
    1aa6:	e7ca      	b.n	1a3e <system_clock_source_get_hz+0x12>
    1aa8:	00002fc4 	.word	0x00002fc4
    1aac:	2000007c 	.word	0x2000007c
    1ab0:	40000800 	.word	0x40000800
    1ab4:	007a1200 	.word	0x007a1200
    1ab8:	02dc6c00 	.word	0x02dc6c00

00001abc <system_clock_source_osc8m_set_config>:
{
    1abc:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1abe:	4d0c      	ldr	r5, [pc, #48]	; (1af0 <system_clock_source_osc8m_set_config+0x34>)
    1ac0:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    1ac2:	7802      	ldrb	r2, [r0, #0]
    1ac4:	2103      	movs	r1, #3
    1ac6:	400a      	ands	r2, r1
    1ac8:	0212      	lsls	r2, r2, #8
    1aca:	490a      	ldr	r1, [pc, #40]	; (1af4 <system_clock_source_osc8m_set_config+0x38>)
    1acc:	4031      	ands	r1, r6
    1ace:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    1ad0:	7882      	ldrb	r2, [r0, #2]
    1ad2:	2401      	movs	r4, #1
    1ad4:	4022      	ands	r2, r4
    1ad6:	01d2      	lsls	r2, r2, #7
    1ad8:	2380      	movs	r3, #128	; 0x80
    1ada:	4399      	bics	r1, r3
    1adc:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    1ade:	7843      	ldrb	r3, [r0, #1]
    1ae0:	4023      	ands	r3, r4
    1ae2:	019b      	lsls	r3, r3, #6
    1ae4:	2140      	movs	r1, #64	; 0x40
    1ae6:	438a      	bics	r2, r1
    1ae8:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    1aea:	622b      	str	r3, [r5, #32]
}
    1aec:	bd70      	pop	{r4, r5, r6, pc}
    1aee:	46c0      	nop			; (mov r8, r8)
    1af0:	40000800 	.word	0x40000800
    1af4:	fffffcff 	.word	0xfffffcff

00001af8 <system_clock_source_enable>:
	switch (clock_source) {
    1af8:	2808      	cmp	r0, #8
    1afa:	d84a      	bhi.n	1b92 <system_clock_source_enable+0x9a>
    1afc:	0080      	lsls	r0, r0, #2
    1afe:	4b26      	ldr	r3, [pc, #152]	; (1b98 <system_clock_source_enable+0xa0>)
    1b00:	581b      	ldr	r3, [r3, r0]
    1b02:	469f      	mov	pc, r3
		return STATUS_OK;
    1b04:	2000      	movs	r0, #0
}
    1b06:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1b08:	4a24      	ldr	r2, [pc, #144]	; (1b9c <system_clock_source_enable+0xa4>)
    1b0a:	6a13      	ldr	r3, [r2, #32]
    1b0c:	2102      	movs	r1, #2
    1b0e:	430b      	orrs	r3, r1
    1b10:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1b12:	2000      	movs	r0, #0
    1b14:	e7f7      	b.n	1b06 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b16:	4a21      	ldr	r2, [pc, #132]	; (1b9c <system_clock_source_enable+0xa4>)
    1b18:	6993      	ldr	r3, [r2, #24]
    1b1a:	2102      	movs	r1, #2
    1b1c:	430b      	orrs	r3, r1
    1b1e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1b20:	2000      	movs	r0, #0
		break;
    1b22:	e7f0      	b.n	1b06 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b24:	4a1d      	ldr	r2, [pc, #116]	; (1b9c <system_clock_source_enable+0xa4>)
    1b26:	8a13      	ldrh	r3, [r2, #16]
    1b28:	2102      	movs	r1, #2
    1b2a:	430b      	orrs	r3, r1
    1b2c:	b29b      	uxth	r3, r3
    1b2e:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1b30:	2000      	movs	r0, #0
		break;
    1b32:	e7e8      	b.n	1b06 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1b34:	4a19      	ldr	r2, [pc, #100]	; (1b9c <system_clock_source_enable+0xa4>)
    1b36:	8a93      	ldrh	r3, [r2, #20]
    1b38:	2102      	movs	r1, #2
    1b3a:	430b      	orrs	r3, r1
    1b3c:	b29b      	uxth	r3, r3
    1b3e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1b40:	2000      	movs	r0, #0
		break;
    1b42:	e7e0      	b.n	1b06 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1b44:	4916      	ldr	r1, [pc, #88]	; (1ba0 <system_clock_source_enable+0xa8>)
    1b46:	680b      	ldr	r3, [r1, #0]
    1b48:	2202      	movs	r2, #2
    1b4a:	4313      	orrs	r3, r2
    1b4c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b4e:	4b13      	ldr	r3, [pc, #76]	; (1b9c <system_clock_source_enable+0xa4>)
    1b50:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b52:	4b12      	ldr	r3, [pc, #72]	; (1b9c <system_clock_source_enable+0xa4>)
    1b54:	68db      	ldr	r3, [r3, #12]
    1b56:	06db      	lsls	r3, r3, #27
    1b58:	d5fb      	bpl.n	1b52 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1b5a:	4a11      	ldr	r2, [pc, #68]	; (1ba0 <system_clock_source_enable+0xa8>)
    1b5c:	6891      	ldr	r1, [r2, #8]
    1b5e:	4b0f      	ldr	r3, [pc, #60]	; (1b9c <system_clock_source_enable+0xa4>)
    1b60:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1b62:	6852      	ldr	r2, [r2, #4]
    1b64:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1b66:	2200      	movs	r2, #0
    1b68:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b6a:	4b0c      	ldr	r3, [pc, #48]	; (1b9c <system_clock_source_enable+0xa4>)
    1b6c:	68db      	ldr	r3, [r3, #12]
    1b6e:	06db      	lsls	r3, r3, #27
    1b70:	d5fb      	bpl.n	1b6a <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1b72:	4b0b      	ldr	r3, [pc, #44]	; (1ba0 <system_clock_source_enable+0xa8>)
    1b74:	681b      	ldr	r3, [r3, #0]
    1b76:	b29b      	uxth	r3, r3
    1b78:	4a08      	ldr	r2, [pc, #32]	; (1b9c <system_clock_source_enable+0xa4>)
    1b7a:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1b7c:	2000      	movs	r0, #0
    1b7e:	e7c2      	b.n	1b06 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1b80:	4906      	ldr	r1, [pc, #24]	; (1b9c <system_clock_source_enable+0xa4>)
    1b82:	2244      	movs	r2, #68	; 0x44
    1b84:	5c8b      	ldrb	r3, [r1, r2]
    1b86:	2002      	movs	r0, #2
    1b88:	4303      	orrs	r3, r0
    1b8a:	b2db      	uxtb	r3, r3
    1b8c:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1b8e:	2000      	movs	r0, #0
		break;
    1b90:	e7b9      	b.n	1b06 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    1b92:	2017      	movs	r0, #23
    1b94:	e7b7      	b.n	1b06 <system_clock_source_enable+0xe>
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00002fe8 	.word	0x00002fe8
    1b9c:	40000800 	.word	0x40000800
    1ba0:	2000007c 	.word	0x2000007c

00001ba4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1ba4:	b570      	push	{r4, r5, r6, lr}
    1ba6:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ba8:	22c2      	movs	r2, #194	; 0xc2
    1baa:	00d2      	lsls	r2, r2, #3
    1bac:	4b1b      	ldr	r3, [pc, #108]	; (1c1c <system_clock_init+0x78>)
    1bae:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1bb0:	4b1b      	ldr	r3, [pc, #108]	; (1c20 <system_clock_init+0x7c>)
    1bb2:	6859      	ldr	r1, [r3, #4]
    1bb4:	221e      	movs	r2, #30
    1bb6:	4391      	bics	r1, r2
    1bb8:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1bba:	f7ff ff27 	bl	1a0c <_switch_peripheral_gclk>

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1bbe:	a803      	add	r0, sp, #12
    1bc0:	2400      	movs	r4, #0
    1bc2:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1bc4:	7084      	strb	r4, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1bc6:	2501      	movs	r5, #1
    1bc8:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1bca:	f7ff ff77 	bl	1abc <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1bce:	2006      	movs	r0, #6
    1bd0:	f7ff ff92 	bl	1af8 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1bd4:	f000 f828 	bl	1c28 <system_gclk_init>
	config->division_factor    = 1;
    1bd8:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1bda:	466b      	mov	r3, sp
    1bdc:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1bde:	2606      	movs	r6, #6
    1be0:	701e      	strb	r6, [r3, #0]
	config->run_in_standby     = false;
    1be2:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1be4:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1be6:	4669      	mov	r1, sp
    1be8:	2005      	movs	r0, #5
    1bea:	f000 f82f 	bl	1c4c <system_gclk_gen_set_config>
    1bee:	2005      	movs	r0, #5
    1bf0:	f000 f890 	bl	1d14 <system_gclk_gen_enable>
	PM->CPUSEL.reg = (uint32_t)divider;
    1bf4:	4b0b      	ldr	r3, [pc, #44]	; (1c24 <system_clock_init+0x80>)
    1bf6:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1bf8:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1bfa:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1bfc:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1bfe:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1c00:	466b      	mov	r3, sp
    1c02:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c04:	701e      	strb	r6, [r3, #0]
	config->output_enable      = false;
    1c06:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c08:	721d      	strb	r5, [r3, #8]
    1c0a:	4669      	mov	r1, sp
    1c0c:	2000      	movs	r0, #0
    1c0e:	f000 f81d 	bl	1c4c <system_gclk_gen_set_config>
    1c12:	2000      	movs	r0, #0
    1c14:	f000 f87e 	bl	1d14 <system_gclk_gen_enable>
#endif
}
    1c18:	b004      	add	sp, #16
    1c1a:	bd70      	pop	{r4, r5, r6, pc}
    1c1c:	40000800 	.word	0x40000800
    1c20:	41004000 	.word	0x41004000
    1c24:	40000400 	.word	0x40000400

00001c28 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c28:	4a06      	ldr	r2, [pc, #24]	; (1c44 <system_gclk_init+0x1c>)
    1c2a:	6993      	ldr	r3, [r2, #24]
    1c2c:	2108      	movs	r1, #8
    1c2e:	430b      	orrs	r3, r1
    1c30:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c32:	2201      	movs	r2, #1
    1c34:	4b04      	ldr	r3, [pc, #16]	; (1c48 <system_gclk_init+0x20>)
    1c36:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c38:	4b03      	ldr	r3, [pc, #12]	; (1c48 <system_gclk_init+0x20>)
    1c3a:	781b      	ldrb	r3, [r3, #0]
    1c3c:	07db      	lsls	r3, r3, #31
    1c3e:	d4fb      	bmi.n	1c38 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1c40:	4770      	bx	lr
    1c42:	46c0      	nop			; (mov r8, r8)
    1c44:	40000400 	.word	0x40000400
    1c48:	40000c00 	.word	0x40000c00

00001c4c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c4e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c50:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c52:	780c      	ldrb	r4, [r1, #0]
    1c54:	0224      	lsls	r4, r4, #8
    1c56:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c58:	784b      	ldrb	r3, [r1, #1]
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	d002      	beq.n	1c64 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c5e:	2380      	movs	r3, #128	; 0x80
    1c60:	02db      	lsls	r3, r3, #11
    1c62:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c64:	7a4b      	ldrb	r3, [r1, #9]
    1c66:	2b00      	cmp	r3, #0
    1c68:	d002      	beq.n	1c70 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c6a:	2380      	movs	r3, #128	; 0x80
    1c6c:	031b      	lsls	r3, r3, #12
    1c6e:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c70:	6848      	ldr	r0, [r1, #4]
    1c72:	2801      	cmp	r0, #1
    1c74:	d912      	bls.n	1c9c <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c76:	1e43      	subs	r3, r0, #1
    1c78:	4203      	tst	r3, r0
    1c7a:	d03d      	beq.n	1cf8 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1c7c:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1c7e:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c80:	2380      	movs	r3, #128	; 0x80
    1c82:	029b      	lsls	r3, r3, #10
    1c84:	431c      	orrs	r4, r3
    1c86:	e009      	b.n	1c9c <system_gclk_gen_set_config+0x50>
				div2_count++;
    1c88:	3201      	adds	r2, #1
						mask <<= 1) {
    1c8a:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1c8c:	4283      	cmp	r3, r0
    1c8e:	d3fb      	bcc.n	1c88 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1c90:	0212      	lsls	r2, r2, #8
    1c92:	4332      	orrs	r2, r6
    1c94:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c96:	2380      	movs	r3, #128	; 0x80
    1c98:	035b      	lsls	r3, r3, #13
    1c9a:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c9c:	7a0b      	ldrb	r3, [r1, #8]
    1c9e:	2b00      	cmp	r3, #0
    1ca0:	d002      	beq.n	1ca8 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1ca2:	2380      	movs	r3, #128	; 0x80
    1ca4:	039b      	lsls	r3, r3, #14
    1ca6:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1ca8:	4b18      	ldr	r3, [pc, #96]	; (1d0c <system_gclk_gen_set_config+0xc0>)
    1caa:	785b      	ldrb	r3, [r3, #1]
    1cac:	b25b      	sxtb	r3, r3
    1cae:	2b00      	cmp	r3, #0
    1cb0:	db25      	blt.n	1cfe <system_gclk_gen_set_config+0xb2>
	return false;
    1cb2:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1cb4:	2f00      	cmp	r7, #0
    1cb6:	d1f7      	bne.n	1ca8 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1cb8:	f7ff fa9c 	bl	11f4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1cbc:	4b14      	ldr	r3, [pc, #80]	; (1d10 <system_gclk_gen_set_config+0xc4>)
    1cbe:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cc0:	4b12      	ldr	r3, [pc, #72]	; (1d0c <system_gclk_gen_set_config+0xc0>)
    1cc2:	785b      	ldrb	r3, [r3, #1]
    1cc4:	b25b      	sxtb	r3, r3
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	db1b      	blt.n	1d02 <system_gclk_gen_set_config+0xb6>
	return false;
    1cca:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1ccc:	2a00      	cmp	r2, #0
    1cce:	d1f7      	bne.n	1cc0 <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1cd0:	4b0e      	ldr	r3, [pc, #56]	; (1d0c <system_gclk_gen_set_config+0xc0>)
    1cd2:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cd4:	4b0d      	ldr	r3, [pc, #52]	; (1d0c <system_gclk_gen_set_config+0xc0>)
    1cd6:	785b      	ldrb	r3, [r3, #1]
    1cd8:	b25b      	sxtb	r3, r3
    1cda:	2b00      	cmp	r3, #0
    1cdc:	db13      	blt.n	1d06 <system_gclk_gen_set_config+0xba>
	return false;
    1cde:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    1ce0:	2b00      	cmp	r3, #0
    1ce2:	d1f7      	bne.n	1cd4 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1ce4:	4a09      	ldr	r2, [pc, #36]	; (1d0c <system_gclk_gen_set_config+0xc0>)
    1ce6:	6853      	ldr	r3, [r2, #4]
    1ce8:	2180      	movs	r1, #128	; 0x80
    1cea:	0249      	lsls	r1, r1, #9
    1cec:	400b      	ands	r3, r1
    1cee:	431c      	orrs	r4, r3
    1cf0:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1cf2:	f7ff fa9f 	bl	1234 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1cf8:	2302      	movs	r3, #2
    1cfa:	2200      	movs	r2, #0
    1cfc:	e7c6      	b.n	1c8c <system_gclk_gen_set_config+0x40>
		return true;
    1cfe:	2701      	movs	r7, #1
    1d00:	e7d8      	b.n	1cb4 <system_gclk_gen_set_config+0x68>
    1d02:	2201      	movs	r2, #1
    1d04:	e7e2      	b.n	1ccc <system_gclk_gen_set_config+0x80>
    1d06:	2301      	movs	r3, #1
    1d08:	e7ea      	b.n	1ce0 <system_gclk_gen_set_config+0x94>
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	40000c00 	.word	0x40000c00
    1d10:	40000c08 	.word	0x40000c08

00001d14 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d14:	b570      	push	{r4, r5, r6, lr}
    1d16:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d18:	4b10      	ldr	r3, [pc, #64]	; (1d5c <system_gclk_gen_enable+0x48>)
    1d1a:	785b      	ldrb	r3, [r3, #1]
    1d1c:	b25b      	sxtb	r3, r3
    1d1e:	2b00      	cmp	r3, #0
    1d20:	db17      	blt.n	1d52 <system_gclk_gen_enable+0x3e>
	return false;
    1d22:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1d24:	2c00      	cmp	r4, #0
    1d26:	d1f7      	bne.n	1d18 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1d28:	f7ff fa64 	bl	11f4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d2c:	4b0c      	ldr	r3, [pc, #48]	; (1d60 <system_gclk_gen_enable+0x4c>)
    1d2e:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d30:	4b0a      	ldr	r3, [pc, #40]	; (1d5c <system_gclk_gen_enable+0x48>)
    1d32:	785b      	ldrb	r3, [r3, #1]
    1d34:	b25b      	sxtb	r3, r3
    1d36:	2b00      	cmp	r3, #0
    1d38:	db0d      	blt.n	1d56 <system_gclk_gen_enable+0x42>
	return false;
    1d3a:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1d3c:	2b00      	cmp	r3, #0
    1d3e:	d1f7      	bne.n	1d30 <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d40:	4a06      	ldr	r2, [pc, #24]	; (1d5c <system_gclk_gen_enable+0x48>)
    1d42:	6851      	ldr	r1, [r2, #4]
    1d44:	2380      	movs	r3, #128	; 0x80
    1d46:	025b      	lsls	r3, r3, #9
    1d48:	430b      	orrs	r3, r1
    1d4a:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d4c:	f7ff fa72 	bl	1234 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d50:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1d52:	2401      	movs	r4, #1
    1d54:	e7e6      	b.n	1d24 <system_gclk_gen_enable+0x10>
    1d56:	2301      	movs	r3, #1
    1d58:	e7f0      	b.n	1d3c <system_gclk_gen_enable+0x28>
    1d5a:	46c0      	nop			; (mov r8, r8)
    1d5c:	40000c00 	.word	0x40000c00
    1d60:	40000c04 	.word	0x40000c04

00001d64 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1d66:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d68:	4b22      	ldr	r3, [pc, #136]	; (1df4 <system_gclk_gen_get_hz+0x90>)
    1d6a:	785b      	ldrb	r3, [r3, #1]
    1d6c:	b25b      	sxtb	r3, r3
    1d6e:	2b00      	cmp	r3, #0
    1d70:	db34      	blt.n	1ddc <system_gclk_gen_get_hz+0x78>
	return false;
    1d72:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1d74:	2d00      	cmp	r5, #0
    1d76:	d1f7      	bne.n	1d68 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1d78:	f7ff fa3c 	bl	11f4 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d7c:	4b1e      	ldr	r3, [pc, #120]	; (1df8 <system_gclk_gen_get_hz+0x94>)
    1d7e:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d80:	4b1c      	ldr	r3, [pc, #112]	; (1df4 <system_gclk_gen_get_hz+0x90>)
    1d82:	785b      	ldrb	r3, [r3, #1]
    1d84:	b25b      	sxtb	r3, r3
    1d86:	2b00      	cmp	r3, #0
    1d88:	db2a      	blt.n	1de0 <system_gclk_gen_get_hz+0x7c>
	return false;
    1d8a:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1d8c:	2c00      	cmp	r4, #0
    1d8e:	d1f7      	bne.n	1d80 <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d90:	4e18      	ldr	r6, [pc, #96]	; (1df4 <system_gclk_gen_get_hz+0x90>)
    1d92:	6870      	ldr	r0, [r6, #4]
    1d94:	04c0      	lsls	r0, r0, #19
    1d96:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d98:	f7ff fe48 	bl	1a2c <system_clock_source_get_hz>
    1d9c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d9e:	4b16      	ldr	r3, [pc, #88]	; (1df8 <system_gclk_gen_get_hz+0x94>)
    1da0:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1da2:	6876      	ldr	r6, [r6, #4]
    1da4:	02f6      	lsls	r6, r6, #11
    1da6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1da8:	4b14      	ldr	r3, [pc, #80]	; (1dfc <system_gclk_gen_get_hz+0x98>)
    1daa:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dac:	4b11      	ldr	r3, [pc, #68]	; (1df4 <system_gclk_gen_get_hz+0x90>)
    1dae:	785b      	ldrb	r3, [r3, #1]
    1db0:	b25b      	sxtb	r3, r3
    1db2:	2b00      	cmp	r3, #0
    1db4:	db16      	blt.n	1de4 <system_gclk_gen_get_hz+0x80>
	return false;
    1db6:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1db8:	2b00      	cmp	r3, #0
    1dba:	d1f7      	bne.n	1dac <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1dbc:	4b0d      	ldr	r3, [pc, #52]	; (1df4 <system_gclk_gen_get_hz+0x90>)
    1dbe:	689c      	ldr	r4, [r3, #8]
    1dc0:	0224      	lsls	r4, r4, #8
    1dc2:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1dc4:	f7ff fa36 	bl	1234 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1dc8:	2e00      	cmp	r6, #0
    1dca:	d10d      	bne.n	1de8 <system_gclk_gen_get_hz+0x84>
    1dcc:	2c01      	cmp	r4, #1
    1dce:	d90b      	bls.n	1de8 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    1dd0:	0021      	movs	r1, r4
    1dd2:	0028      	movs	r0, r5
    1dd4:	f000 ff92 	bl	2cfc <__udivsi3>
    1dd8:	0005      	movs	r5, r0
    1dda:	e009      	b.n	1df0 <system_gclk_gen_get_hz+0x8c>
		return true;
    1ddc:	2501      	movs	r5, #1
    1dde:	e7c9      	b.n	1d74 <system_gclk_gen_get_hz+0x10>
    1de0:	2401      	movs	r4, #1
    1de2:	e7d3      	b.n	1d8c <system_gclk_gen_get_hz+0x28>
    1de4:	2301      	movs	r3, #1
    1de6:	e7e7      	b.n	1db8 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1de8:	2e00      	cmp	r6, #0
    1dea:	d001      	beq.n	1df0 <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1dec:	3401      	adds	r4, #1
    1dee:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1df0:	0028      	movs	r0, r5
    1df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1df4:	40000c00 	.word	0x40000c00
    1df8:	40000c04 	.word	0x40000c04
    1dfc:	40000c08 	.word	0x40000c08

00001e00 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e00:	b510      	push	{r4, lr}
    1e02:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e04:	f7ff f9f6 	bl	11f4 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e08:	4b05      	ldr	r3, [pc, #20]	; (1e20 <system_gclk_chan_enable+0x20>)
    1e0a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e0c:	4a05      	ldr	r2, [pc, #20]	; (1e24 <system_gclk_chan_enable+0x24>)
    1e0e:	8853      	ldrh	r3, [r2, #2]
    1e10:	2180      	movs	r1, #128	; 0x80
    1e12:	01c9      	lsls	r1, r1, #7
    1e14:	430b      	orrs	r3, r1
    1e16:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1e18:	f7ff fa0c 	bl	1234 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1e1c:	bd10      	pop	{r4, pc}
    1e1e:	46c0      	nop			; (mov r8, r8)
    1e20:	40000c02 	.word	0x40000c02
    1e24:	40000c00 	.word	0x40000c00

00001e28 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e28:	b510      	push	{r4, lr}
    1e2a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e2c:	f7ff f9e2 	bl	11f4 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e30:	4b0d      	ldr	r3, [pc, #52]	; (1e68 <system_gclk_chan_disable+0x40>)
    1e32:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e34:	490d      	ldr	r1, [pc, #52]	; (1e6c <system_gclk_chan_disable+0x44>)
    1e36:	884b      	ldrh	r3, [r1, #2]
    1e38:	051b      	lsls	r3, r3, #20
    1e3a:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e3c:	884b      	ldrh	r3, [r1, #2]
    1e3e:	480c      	ldr	r0, [pc, #48]	; (1e70 <system_gclk_chan_disable+0x48>)
    1e40:	4003      	ands	r3, r0
    1e42:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e44:	884b      	ldrh	r3, [r1, #2]
    1e46:	480b      	ldr	r0, [pc, #44]	; (1e74 <system_gclk_chan_disable+0x4c>)
    1e48:	4003      	ands	r3, r0
    1e4a:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e4c:	4b07      	ldr	r3, [pc, #28]	; (1e6c <system_gclk_chan_disable+0x44>)
    1e4e:	885b      	ldrh	r3, [r3, #2]
    1e50:	045b      	lsls	r3, r3, #17
    1e52:	d4fb      	bmi.n	1e4c <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1e54:	4805      	ldr	r0, [pc, #20]	; (1e6c <system_gclk_chan_disable+0x44>)
    1e56:	8841      	ldrh	r1, [r0, #2]
    1e58:	0213      	lsls	r3, r2, #8
    1e5a:	4a05      	ldr	r2, [pc, #20]	; (1e70 <system_gclk_chan_disable+0x48>)
    1e5c:	400a      	ands	r2, r1
    1e5e:	4313      	orrs	r3, r2
    1e60:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1e62:	f7ff f9e7 	bl	1234 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1e66:	bd10      	pop	{r4, pc}
    1e68:	40000c02 	.word	0x40000c02
    1e6c:	40000c00 	.word	0x40000c00
    1e70:	fffff0ff 	.word	0xfffff0ff
    1e74:	ffffbfff 	.word	0xffffbfff

00001e78 <system_gclk_chan_set_config>:
{
    1e78:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e7a:	780c      	ldrb	r4, [r1, #0]
    1e7c:	0224      	lsls	r4, r4, #8
    1e7e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1e80:	f7ff ffd2 	bl	1e28 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e84:	b2a4      	uxth	r4, r4
    1e86:	4b01      	ldr	r3, [pc, #4]	; (1e8c <system_gclk_chan_set_config+0x14>)
    1e88:	805c      	strh	r4, [r3, #2]
}
    1e8a:	bd10      	pop	{r4, pc}
    1e8c:	40000c00 	.word	0x40000c00

00001e90 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e90:	b510      	push	{r4, lr}
    1e92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e94:	f7ff f9ae 	bl	11f4 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e98:	4b05      	ldr	r3, [pc, #20]	; (1eb0 <system_gclk_chan_get_hz+0x20>)
    1e9a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e9c:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <system_gclk_chan_get_hz+0x24>)
    1e9e:	885c      	ldrh	r4, [r3, #2]
    1ea0:	0524      	lsls	r4, r4, #20
    1ea2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ea4:	f7ff f9c6 	bl	1234 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ea8:	0020      	movs	r0, r4
    1eaa:	f7ff ff5b 	bl	1d64 <system_gclk_gen_get_hz>
}
    1eae:	bd10      	pop	{r4, pc}
    1eb0:	40000c02 	.word	0x40000c02
    1eb4:	40000c00 	.word	0x40000c00

00001eb8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1eb8:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1eba:	78d3      	ldrb	r3, [r2, #3]
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d120      	bne.n	1f02 <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ec0:	7815      	ldrb	r5, [r2, #0]
    1ec2:	2d80      	cmp	r5, #128	; 0x80
    1ec4:	d01b      	beq.n	1efe <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1ec6:	062d      	lsls	r5, r5, #24
    1ec8:	2380      	movs	r3, #128	; 0x80
    1eca:	025b      	lsls	r3, r3, #9
    1ecc:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ece:	7853      	ldrb	r3, [r2, #1]
    1ed0:	2b00      	cmp	r3, #0
    1ed2:	d001      	beq.n	1ed8 <_system_pinmux_config+0x20>
    1ed4:	2b02      	cmp	r3, #2
    1ed6:	d10a      	bne.n	1eee <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ed8:	2380      	movs	r3, #128	; 0x80
    1eda:	029b      	lsls	r3, r3, #10
    1edc:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ede:	7894      	ldrb	r4, [r2, #2]
    1ee0:	2c00      	cmp	r4, #0
    1ee2:	d002      	beq.n	1eea <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ee4:	23c0      	movs	r3, #192	; 0xc0
    1ee6:	02db      	lsls	r3, r3, #11
    1ee8:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1eea:	6041      	str	r1, [r0, #4]
    1eec:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1eee:	7853      	ldrb	r3, [r2, #1]
    1ef0:	3b01      	subs	r3, #1
    1ef2:	b2db      	uxtb	r3, r3
    1ef4:	2b01      	cmp	r3, #1
    1ef6:	d806      	bhi.n	1f06 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ef8:	4b13      	ldr	r3, [pc, #76]	; (1f48 <_system_pinmux_config+0x90>)
    1efa:	401d      	ands	r5, r3
    1efc:	e003      	b.n	1f06 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1efe:	2500      	movs	r5, #0
    1f00:	e7e5      	b.n	1ece <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1f02:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1f04:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f06:	040c      	lsls	r4, r1, #16
    1f08:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f0a:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f0c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f0e:	26a0      	movs	r6, #160	; 0xa0
    1f10:	05f6      	lsls	r6, r6, #23
    1f12:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f14:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f16:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f18:	24d0      	movs	r4, #208	; 0xd0
    1f1a:	0624      	lsls	r4, r4, #24
    1f1c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f1e:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f20:	78d3      	ldrb	r3, [r2, #3]
    1f22:	2b00      	cmp	r3, #0
    1f24:	d10a      	bne.n	1f3c <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f26:	036b      	lsls	r3, r5, #13
    1f28:	d503      	bpl.n	1f32 <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f2a:	7893      	ldrb	r3, [r2, #2]
    1f2c:	2b01      	cmp	r3, #1
    1f2e:	d006      	beq.n	1f3e <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f30:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f32:	7853      	ldrb	r3, [r2, #1]
    1f34:	3b01      	subs	r3, #1
    1f36:	b2db      	uxtb	r3, r3
    1f38:	2b01      	cmp	r3, #1
    1f3a:	d902      	bls.n	1f42 <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f3c:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1f3e:	6181      	str	r1, [r0, #24]
    1f40:	e7f7      	b.n	1f32 <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1f42:	6081      	str	r1, [r0, #8]
}
    1f44:	e7fa      	b.n	1f3c <_system_pinmux_config+0x84>
    1f46:	46c0      	nop			; (mov r8, r8)
    1f48:	fffbffff 	.word	0xfffbffff

00001f4c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f4c:	b510      	push	{r4, lr}
    1f4e:	000a      	movs	r2, r1
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    1f50:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1f52:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1f54:	2900      	cmp	r1, #0
    1f56:	d10b      	bne.n	1f70 <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1f58:	01db      	lsls	r3, r3, #7
    1f5a:	4906      	ldr	r1, [pc, #24]	; (1f74 <system_pinmux_pin_set_config+0x28>)
    1f5c:	468c      	mov	ip, r1
    1f5e:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f60:	241f      	movs	r4, #31
    1f62:	4020      	ands	r0, r4
    1f64:	2101      	movs	r1, #1
    1f66:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1f68:	0018      	movs	r0, r3
    1f6a:	f7ff ffa5 	bl	1eb8 <_system_pinmux_config>
}
    1f6e:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
    1f70:	2300      	movs	r3, #0
    1f72:	e7f5      	b.n	1f60 <system_pinmux_pin_set_config+0x14>
    1f74:	41004400 	.word	0x41004400

00001f78 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f78:	4770      	bx	lr

00001f7a <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f7a:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f7c:	f7ff fe12 	bl	1ba4 <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1f80:	f7ff fffa 	bl	1f78 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1f84:	f7fe fc0a 	bl	79c <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1f88:	f7ff fff6 	bl	1f78 <_system_dummy_init>
}
    1f8c:	bd10      	pop	{r4, pc}
	...

00001f90 <_tcc_get_inst_index>:
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1f90:	2300      	movs	r3, #0
    1f92:	2b00      	cmp	r3, #0
    1f94:	d001      	beq.n	1f9a <_tcc_get_inst_index+0xa>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1f96:	2000      	movs	r0, #0
}
    1f98:	4770      	bx	lr
		if (hw == tcc_modules[i]) {
    1f9a:	4a03      	ldr	r2, [pc, #12]	; (1fa8 <_tcc_get_inst_index+0x18>)
    1f9c:	4290      	cmp	r0, r2
    1f9e:	d001      	beq.n	1fa4 <_tcc_get_inst_index+0x14>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1fa0:	3301      	adds	r3, #1
    1fa2:	e7f6      	b.n	1f92 <_tcc_get_inst_index+0x2>
			return i;
    1fa4:	b2d8      	uxtb	r0, r3
    1fa6:	e7f7      	b.n	1f98 <_tcc_get_inst_index+0x8>
    1fa8:	42001400 	.word	0x42001400

00001fac <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fae:	000c      	movs	r4, r1
    1fb0:	0016      	movs	r6, r2
    1fb2:	001f      	movs	r7, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    1fb4:	6805      	ldr	r5, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    1fb6:	0028      	movs	r0, r5
    1fb8:	f7ff ffea 	bl	1f90 <_tcc_get_inst_index>

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1fbc:	2c03      	cmp	r4, #3
    1fbe:	d901      	bls.n	1fc4 <_tcc_set_compare_value+0x18>
		return STATUS_ERR_INVALID_ARG;
    1fc0:	2017      	movs	r0, #23
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (compare > max_count) {
    1fc4:	4b12      	ldr	r3, [pc, #72]	; (2010 <_tcc_set_compare_value+0x64>)
    1fc6:	429e      	cmp	r6, r3
    1fc8:	d901      	bls.n	1fce <_tcc_set_compare_value+0x22>
		return STATUS_ERR_INVALID_ARG;
    1fca:	2017      	movs	r0, #23
    1fcc:	e7f9      	b.n	1fc2 <_tcc_set_compare_value+0x16>
	if (double_buffering_enabled) {
    1fce:	2f00      	cmp	r7, #0
    1fd0:	d011      	beq.n	1ff6 <_tcc_set_compare_value+0x4a>
		while(tcc_module->STATUS.reg  &
    1fd2:	6b29      	ldr	r1, [r5, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
    1fd4:	0022      	movs	r2, r4
    1fd6:	2380      	movs	r3, #128	; 0x80
    1fd8:	025b      	lsls	r3, r3, #9
    1fda:	40a3      	lsls	r3, r4
		while(tcc_module->STATUS.reg  &
    1fdc:	420b      	tst	r3, r1
    1fde:	d1f8      	bne.n	1fd2 <_tcc_set_compare_value+0x26>
		while(tcc_module->SYNCBUSY.reg  &
    1fe0:	68a9      	ldr	r1, [r5, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1fe2:	2380      	movs	r3, #128	; 0x80
    1fe4:	031b      	lsls	r3, r3, #12
    1fe6:	4093      	lsls	r3, r2
		while(tcc_module->SYNCBUSY.reg  &
    1fe8:	420b      	tst	r3, r1
    1fea:	d1f9      	bne.n	1fe0 <_tcc_set_compare_value+0x34>
		tcc_module->CCB[channel_index].reg = compare;
    1fec:	321c      	adds	r2, #28
    1fee:	0092      	lsls	r2, r2, #2
    1ff0:	5156      	str	r6, [r2, r5]
	return STATUS_OK;
    1ff2:	2000      	movs	r0, #0
    1ff4:	e7e5      	b.n	1fc2 <_tcc_set_compare_value+0x16>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1ff6:	68aa      	ldr	r2, [r5, #8]
    1ff8:	0021      	movs	r1, r4
    1ffa:	2380      	movs	r3, #128	; 0x80
    1ffc:	005b      	lsls	r3, r3, #1
    1ffe:	40a3      	lsls	r3, r4
    2000:	4213      	tst	r3, r2
    2002:	d1f8      	bne.n	1ff6 <_tcc_set_compare_value+0x4a>
		tcc_module->CC[channel_index].reg = compare;
    2004:	3110      	adds	r1, #16
    2006:	0089      	lsls	r1, r1, #2
    2008:	186d      	adds	r5, r5, r1
    200a:	606e      	str	r6, [r5, #4]
	return STATUS_OK;
    200c:	2000      	movs	r0, #0
    200e:	e7d8      	b.n	1fc2 <_tcc_set_compare_value+0x16>
    2010:	00ffffff 	.word	0x00ffffff

00002014 <tcc_get_config_defaults>:
{
    2014:	b510      	push	{r4, lr}
    2016:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    2018:	0008      	movs	r0, r1
    201a:	f7ff ffb9 	bl	1f90 <_tcc_get_inst_index>
	config->counter.count                  = 0;
    201e:	2300      	movs	r3, #0
    2020:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    2022:	4a4c      	ldr	r2, [pc, #304]	; (2154 <tcc_get_config_defaults+0x140>)
    2024:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    2026:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    2028:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    202a:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    202c:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    202e:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    2030:	61e3      	str	r3, [r4, #28]
    2032:	6223      	str	r3, [r4, #32]
    2034:	6263      	str	r3, [r4, #36]	; 0x24
    2036:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    2038:	7523      	strb	r3, [r4, #20]
    203a:	7563      	strb	r3, [r4, #21]
    203c:	75a3      	strb	r3, [r4, #22]
    203e:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    2040:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    2042:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    2044:	7423      	strb	r3, [r4, #16]
    2046:	7463      	strb	r3, [r4, #17]
    2048:	74a3      	strb	r3, [r4, #18]
    204a:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    204c:	222c      	movs	r2, #44	; 0x2c
    204e:	54a3      	strb	r3, [r4, r2]
    2050:	3201      	adds	r2, #1
    2052:	54a3      	strb	r3, [r4, r2]
    2054:	3201      	adds	r2, #1
    2056:	54a3      	strb	r3, [r4, r2]
    2058:	3201      	adds	r2, #1
    205a:	54a3      	strb	r3, [r4, r2]
    205c:	3201      	adds	r2, #1
    205e:	54a3      	strb	r3, [r4, r2]
    2060:	3201      	adds	r2, #1
    2062:	54a3      	strb	r3, [r4, r2]
    2064:	3201      	adds	r2, #1
    2066:	54a3      	strb	r3, [r4, r2]
    2068:	3201      	adds	r2, #1
    206a:	54a3      	strb	r3, [r4, r2]
    206c:	3201      	adds	r2, #1
    206e:	54a3      	strb	r3, [r4, r2]
    2070:	3201      	adds	r2, #1
    2072:	54a3      	strb	r3, [r4, r2]
    2074:	3201      	adds	r2, #1
    2076:	54a3      	strb	r3, [r4, r2]
    2078:	3201      	adds	r2, #1
    207a:	54a3      	strb	r3, [r4, r2]
    207c:	3201      	adds	r2, #1
    207e:	54a3      	strb	r3, [r4, r2]
    2080:	3201      	adds	r2, #1
    2082:	54a3      	strb	r3, [r4, r2]
    2084:	3201      	adds	r2, #1
    2086:	54a3      	strb	r3, [r4, r2]
    2088:	3201      	adds	r2, #1
    208a:	54a3      	strb	r3, [r4, r2]
    208c:	3201      	adds	r2, #1
    208e:	54a3      	strb	r3, [r4, r2]
    2090:	3201      	adds	r2, #1
    2092:	54a3      	strb	r3, [r4, r2]
    2094:	3201      	adds	r2, #1
    2096:	54a3      	strb	r3, [r4, r2]
    2098:	3201      	adds	r2, #1
    209a:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    209c:	3201      	adds	r2, #1
    209e:	54a3      	strb	r3, [r4, r2]
    20a0:	3201      	adds	r2, #1
    20a2:	54a3      	strb	r3, [r4, r2]
    20a4:	3201      	adds	r2, #1
    20a6:	54a3      	strb	r3, [r4, r2]
    20a8:	3201      	adds	r2, #1
    20aa:	54a3      	strb	r3, [r4, r2]
    20ac:	3201      	adds	r2, #1
    20ae:	54a3      	strb	r3, [r4, r2]
    20b0:	3201      	adds	r2, #1
    20b2:	54a3      	strb	r3, [r4, r2]
    20b4:	3201      	adds	r2, #1
    20b6:	54a3      	strb	r3, [r4, r2]
    20b8:	3201      	adds	r2, #1
    20ba:	54a3      	strb	r3, [r4, r2]
    20bc:	3201      	adds	r2, #1
    20be:	54a3      	strb	r3, [r4, r2]
    20c0:	3201      	adds	r2, #1
    20c2:	54a3      	strb	r3, [r4, r2]
    20c4:	3201      	adds	r2, #1
    20c6:	54a3      	strb	r3, [r4, r2]
    20c8:	3201      	adds	r2, #1
    20ca:	54a3      	strb	r3, [r4, r2]
    20cc:	3201      	adds	r2, #1
    20ce:	54a3      	strb	r3, [r4, r2]
    20d0:	3201      	adds	r2, #1
    20d2:	54a3      	strb	r3, [r4, r2]
    20d4:	3201      	adds	r2, #1
    20d6:	54a3      	strb	r3, [r4, r2]
    20d8:	3201      	adds	r2, #1
    20da:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    20dc:	3201      	adds	r2, #1
    20de:	54a3      	strb	r3, [r4, r2]
    20e0:	3201      	adds	r2, #1
    20e2:	54a3      	strb	r3, [r4, r2]
    20e4:	3201      	adds	r2, #1
    20e6:	54a3      	strb	r3, [r4, r2]
    20e8:	3201      	adds	r2, #1
    20ea:	54a3      	strb	r3, [r4, r2]
    20ec:	3201      	adds	r2, #1
    20ee:	54a3      	strb	r3, [r4, r2]
    20f0:	3201      	adds	r2, #1
    20f2:	54a3      	strb	r3, [r4, r2]
    20f4:	3201      	adds	r2, #1
    20f6:	54a3      	strb	r3, [r4, r2]
    20f8:	3201      	adds	r2, #1
    20fa:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    20fc:	3241      	adds	r2, #65	; 0x41
    20fe:	54a3      	strb	r3, [r4, r2]
    2100:	65a3      	str	r3, [r4, #88]	; 0x58
    2102:	67a3      	str	r3, [r4, #120]	; 0x78
    2104:	3201      	adds	r2, #1
    2106:	54a3      	strb	r3, [r4, r2]
    2108:	65e3      	str	r3, [r4, #92]	; 0x5c
    210a:	67e3      	str	r3, [r4, #124]	; 0x7c
    210c:	3201      	adds	r2, #1
    210e:	54a3      	strb	r3, [r4, r2]
    2110:	6623      	str	r3, [r4, #96]	; 0x60
    2112:	3a1a      	subs	r2, #26
    2114:	50a3      	str	r3, [r4, r2]
    2116:	321b      	adds	r2, #27
    2118:	54a3      	strb	r3, [r4, r2]
    211a:	6663      	str	r3, [r4, #100]	; 0x64
    211c:	3a17      	subs	r2, #23
    211e:	50a3      	str	r3, [r4, r2]
    2120:	3218      	adds	r2, #24
    2122:	54a3      	strb	r3, [r4, r2]
    2124:	66a3      	str	r3, [r4, #104]	; 0x68
    2126:	3a14      	subs	r2, #20
    2128:	50a3      	str	r3, [r4, r2]
    212a:	3215      	adds	r2, #21
    212c:	54a3      	strb	r3, [r4, r2]
    212e:	66e3      	str	r3, [r4, #108]	; 0x6c
    2130:	3a11      	subs	r2, #17
    2132:	50a3      	str	r3, [r4, r2]
    2134:	3212      	adds	r2, #18
    2136:	54a3      	strb	r3, [r4, r2]
    2138:	6723      	str	r3, [r4, #112]	; 0x70
    213a:	3a0e      	subs	r2, #14
    213c:	50a3      	str	r3, [r4, r2]
    213e:	320f      	adds	r2, #15
    2140:	54a3      	strb	r3, [r4, r2]
    2142:	6763      	str	r3, [r4, #116]	; 0x74
    2144:	3a0b      	subs	r2, #11
    2146:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    2148:	2101      	movs	r1, #1
    214a:	320c      	adds	r2, #12
    214c:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    214e:	3201      	adds	r2, #1
    2150:	54a3      	strb	r3, [r4, r2]
}
    2152:	bd10      	pop	{r4, pc}
    2154:	00ffffff 	.word	0x00ffffff

00002158 <tcc_init>:
{
    2158:	b5f0      	push	{r4, r5, r6, r7, lr}
    215a:	46de      	mov	lr, fp
    215c:	4657      	mov	r7, sl
    215e:	464e      	mov	r6, r9
    2160:	4645      	mov	r5, r8
    2162:	b5e0      	push	{r5, r6, r7, lr}
    2164:	b08b      	sub	sp, #44	; 0x2c
    2166:	0007      	movs	r7, r0
    2168:	000c      	movs	r4, r1
    216a:	0016      	movs	r6, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    216c:	0008      	movs	r0, r1
    216e:	f7ff ff0f 	bl	1f90 <_tcc_get_inst_index>
			PM->APBCMASK.reg |= mask;
    2172:	4ac6      	ldr	r2, [pc, #792]	; (248c <tcc_init+0x334>)
    2174:	6a13      	ldr	r3, [r2, #32]
    2176:	2120      	movs	r1, #32
    2178:	430b      	orrs	r3, r1
    217a:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    217c:	6823      	ldr	r3, [r4, #0]
    217e:	079b      	lsls	r3, r3, #30
    2180:	d508      	bpl.n	2194 <tcc_init+0x3c>
		return STATUS_ERR_DENIED;
    2182:	251c      	movs	r5, #28
}
    2184:	0028      	movs	r0, r5
    2186:	b00b      	add	sp, #44	; 0x2c
    2188:	bc3c      	pop	{r2, r3, r4, r5}
    218a:	4690      	mov	r8, r2
    218c:	4699      	mov	r9, r3
    218e:	46a2      	mov	sl, r4
    2190:	46ab      	mov	fp, r5
    2192:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    2194:	6823      	ldr	r3, [r4, #0]
    2196:	2201      	movs	r2, #1
    2198:	4013      	ands	r3, r2
    219a:	d001      	beq.n	21a0 <tcc_init+0x48>
		return STATUS_ERR_DENIED;
    219c:	251c      	movs	r5, #28
    219e:	e7f1      	b.n	2184 <tcc_init+0x2c>
	if ((config->counter.count > count_max)
    21a0:	4abb      	ldr	r2, [pc, #748]	; (2490 <tcc_init+0x338>)
    21a2:	6831      	ldr	r1, [r6, #0]
    21a4:	4291      	cmp	r1, r2
    21a6:	d901      	bls.n	21ac <tcc_init+0x54>
		return STATUS_ERR_INVALID_ARG;
    21a8:	2517      	movs	r5, #23
    21aa:	e7eb      	b.n	2184 <tcc_init+0x2c>
		|| (config->counter.period > count_max)
    21ac:	6871      	ldr	r1, [r6, #4]
    21ae:	4291      	cmp	r1, r2
    21b0:	d901      	bls.n	21b6 <tcc_init+0x5e>
		return STATUS_ERR_INVALID_ARG;
    21b2:	2517      	movs	r5, #23
    21b4:	e7e6      	b.n	2184 <tcc_init+0x2c>
    21b6:	2100      	movs	r1, #0
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    21b8:	2903      	cmp	r1, #3
    21ba:	dc09      	bgt.n	21d0 <tcc_init+0x78>
		if ((config->compare.match[i] > count_max)
    21bc:	1d8a      	adds	r2, r1, #6
    21be:	0092      	lsls	r2, r2, #2
    21c0:	18b2      	adds	r2, r6, r2
    21c2:	6855      	ldr	r5, [r2, #4]
    21c4:	4ab2      	ldr	r2, [pc, #712]	; (2490 <tcc_init+0x338>)
    21c6:	4295      	cmp	r5, r2
    21c8:	d900      	bls.n	21cc <tcc_init+0x74>
    21ca:	e17b      	b.n	24c4 <tcc_init+0x36c>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    21cc:	3101      	adds	r1, #1
    21ce:	e7f3      	b.n	21b8 <tcc_init+0x60>
    21d0:	2200      	movs	r2, #0
    21d2:	e000      	b.n	21d6 <tcc_init+0x7e>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    21d4:	3201      	adds	r2, #1
    21d6:	2a07      	cmp	r2, #7
    21d8:	ddfc      	ble.n	21d4 <tcc_init+0x7c>
    21da:	2200      	movs	r2, #0
    21dc:	2500      	movs	r5, #0
    21de:	e000      	b.n	21e2 <tcc_init+0x8a>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    21e0:	3201      	adds	r2, #1
    21e2:	2a03      	cmp	r2, #3
    21e4:	dc0a      	bgt.n	21fc <tcc_init+0xa4>
		if (config->capture.channel_function[i] ==
    21e6:	18b1      	adds	r1, r6, r2
    21e8:	7c09      	ldrb	r1, [r1, #16]
    21ea:	2901      	cmp	r1, #1
    21ec:	d1f8      	bne.n	21e0 <tcc_init+0x88>
			if (i > _tcc_cc_nums[module_index]) {
    21ee:	2a04      	cmp	r2, #4
    21f0:	dc23      	bgt.n	223a <tcc_init+0xe2>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    21f2:	2180      	movs	r1, #128	; 0x80
    21f4:	0449      	lsls	r1, r1, #17
    21f6:	4091      	lsls	r1, r2
    21f8:	430d      	orrs	r5, r1
    21fa:	e7f1      	b.n	21e0 <tcc_init+0x88>
	if (config->run_in_standby) {
    21fc:	22a1      	movs	r2, #161	; 0xa1
    21fe:	5cb2      	ldrb	r2, [r6, r2]
    2200:	2a00      	cmp	r2, #0
    2202:	d002      	beq.n	220a <tcc_init+0xb2>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2204:	2280      	movs	r2, #128	; 0x80
    2206:	0112      	lsls	r2, r2, #4
    2208:	4315      	orrs	r5, r2
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    220a:	7b32      	ldrb	r2, [r6, #12]
    220c:	0312      	lsls	r2, r2, #12
    220e:	432a      	orrs	r2, r5
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    2210:	7af1      	ldrb	r1, [r6, #11]
    2212:	0209      	lsls	r1, r1, #8
    2214:	430a      	orrs	r2, r1
    2216:	9201      	str	r2, [sp, #4]
	return STATUS_OK;
    2218:	2500      	movs	r5, #0
	if (STATUS_OK != status) {
    221a:	2d00      	cmp	r5, #0
    221c:	d1b2      	bne.n	2184 <tcc_init+0x2c>
	if (config->counter.oneshot) {
    221e:	7a32      	ldrb	r2, [r6, #8]
    2220:	2a00      	cmp	r2, #0
    2222:	d10e      	bne.n	2242 <tcc_init+0xea>
	uint8_t ctrlb = 0;
    2224:	9204      	str	r2, [sp, #16]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2226:	7a72      	ldrb	r2, [r6, #9]
    2228:	2a01      	cmp	r2, #1
    222a:	d00d      	beq.n	2248 <tcc_init+0xf0>
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    222c:	2200      	movs	r2, #0
    222e:	9505      	str	r5, [sp, #20]
    2230:	9702      	str	r7, [sp, #8]
    2232:	46a4      	mov	ip, r4
    2234:	4699      	mov	r9, r3
    2236:	9003      	str	r0, [sp, #12]
    2238:	e047      	b.n	22ca <tcc_init+0x172>
	uint32_t ctrla = 0;
    223a:	2200      	movs	r2, #0
    223c:	9201      	str	r2, [sp, #4]
				return STATUS_ERR_INVALID_ARG;
    223e:	2517      	movs	r5, #23
    2240:	e7eb      	b.n	221a <tcc_init+0xc2>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    2242:	2204      	movs	r2, #4
    2244:	9204      	str	r2, [sp, #16]
    2246:	e7ee      	b.n	2226 <tcc_init+0xce>
		ctrlb |= TCC_CTRLBSET_DIR;
    2248:	9904      	ldr	r1, [sp, #16]
    224a:	4311      	orrs	r1, r2
    224c:	b2ca      	uxtb	r2, r1
    224e:	9204      	str	r2, [sp, #16]
    2250:	e7ec      	b.n	222c <tcc_init+0xd4>
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2252:	464d      	mov	r5, r9
    2254:	e05b      	b.n	230e <tcc_init+0x1b6>
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2256:	464d      	mov	r5, r9
    2258:	e063      	b.n	2322 <tcc_init+0x1ca>
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    225a:	464d      	mov	r5, r9
    225c:	4329      	orrs	r1, r5
    225e:	468a      	mov	sl, r1
				| TCC_FCTRLA_SRC(cfg->source)
    2260:	0090      	lsls	r0, r2, #2
    2262:	1881      	adds	r1, r0, r2
    2264:	004d      	lsls	r5, r1, #1
    2266:	1975      	adds	r5, r6, r5
    2268:	0029      	movs	r1, r5
    226a:	3131      	adds	r1, #49	; 0x31
    226c:	7809      	ldrb	r1, [r1, #0]
    226e:	468b      	mov	fp, r1
    2270:	2103      	movs	r1, #3
    2272:	465f      	mov	r7, fp
    2274:	4039      	ands	r1, r7
    2276:	4657      	mov	r7, sl
    2278:	4339      	orrs	r1, r7
				| TCC_FCTRLA_BLANK(cfg->blanking)
    227a:	2732      	movs	r7, #50	; 0x32
    227c:	46ba      	mov	sl, r7
    227e:	44aa      	add	sl, r5
    2280:	4657      	mov	r7, sl
    2282:	783f      	ldrb	r7, [r7, #0]
    2284:	017f      	lsls	r7, r7, #5
    2286:	46bb      	mov	fp, r7
    2288:	2760      	movs	r7, #96	; 0x60
    228a:	46ba      	mov	sl, r7
    228c:	465f      	mov	r7, fp
    228e:	4654      	mov	r4, sl
    2290:	4027      	ands	r7, r4
    2292:	4339      	orrs	r1, r7
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2294:	2433      	movs	r4, #51	; 0x33
    2296:	46a2      	mov	sl, r4
    2298:	44aa      	add	sl, r5
    229a:	4654      	mov	r4, sl
    229c:	7824      	ldrb	r4, [r4, #0]
    229e:	0224      	lsls	r4, r4, #8
    22a0:	46a2      	mov	sl, r4
    22a2:	24c0      	movs	r4, #192	; 0xc0
    22a4:	00a4      	lsls	r4, r4, #2
    22a6:	4657      	mov	r7, sl
    22a8:	4027      	ands	r7, r4
    22aa:	4339      	orrs	r1, r7
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    22ac:	3534      	adds	r5, #52	; 0x34
    22ae:	782d      	ldrb	r5, [r5, #0]
    22b0:	032d      	lsls	r5, r5, #12
    22b2:	24e0      	movs	r4, #224	; 0xe0
    22b4:	01e4      	lsls	r4, r4, #7
    22b6:	4025      	ands	r5, r4
    22b8:	4329      	orrs	r1, r5
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    22ba:	029d      	lsls	r5, r3, #10
    22bc:	23c0      	movs	r3, #192	; 0xc0
    22be:	011b      	lsls	r3, r3, #4
    22c0:	401d      	ands	r5, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    22c2:	430d      	orrs	r5, r1
		value_buffer[i] = fault;
    22c4:	a908      	add	r1, sp, #32
    22c6:	500d      	str	r5, [r1, r0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    22c8:	3201      	adds	r2, #1
    22ca:	2a01      	cmp	r2, #1
    22cc:	dc34      	bgt.n	2338 <tcc_init+0x1e0>
		if (cfg->capture_channel >= cc_num) {
    22ce:	0095      	lsls	r5, r2, #2
    22d0:	18ad      	adds	r5, r5, r2
    22d2:	0069      	lsls	r1, r5, #1
    22d4:	1871      	adds	r1, r6, r1
    22d6:	3135      	adds	r1, #53	; 0x35
    22d8:	780b      	ldrb	r3, [r1, #0]
    22da:	2b03      	cmp	r3, #3
    22dc:	d836      	bhi.n	234c <tcc_init+0x1f4>
		if (cfg->filter_value > 0xF) {
    22de:	0095      	lsls	r5, r2, #2
    22e0:	18ad      	adds	r5, r5, r2
    22e2:	0069      	lsls	r1, r5, #1
    22e4:	000d      	movs	r5, r1
    22e6:	1871      	adds	r1, r6, r1
    22e8:	312c      	adds	r1, #44	; 0x2c
    22ea:	7809      	ldrb	r1, [r1, #0]
    22ec:	290f      	cmp	r1, #15
    22ee:	d832      	bhi.n	2356 <tcc_init+0x1fe>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    22f0:	0609      	lsls	r1, r1, #24
    22f2:	20f0      	movs	r0, #240	; 0xf0
    22f4:	0500      	lsls	r0, r0, #20
    22f6:	4008      	ands	r0, r1
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    22f8:	1975      	adds	r5, r6, r5
    22fa:	0029      	movs	r1, r5
    22fc:	312d      	adds	r1, #45	; 0x2d
    22fe:	7809      	ldrb	r1, [r1, #0]
    2300:	0409      	lsls	r1, r1, #16
    2302:	4301      	orrs	r1, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2304:	352e      	adds	r5, #46	; 0x2e
    2306:	782d      	ldrb	r5, [r5, #0]
    2308:	2d00      	cmp	r5, #0
    230a:	d0a2      	beq.n	2252 <tcc_init+0xfa>
    230c:	2580      	movs	r5, #128	; 0x80
    230e:	4329      	orrs	r1, r5
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    2310:	0090      	lsls	r0, r2, #2
    2312:	1880      	adds	r0, r0, r2
    2314:	0045      	lsls	r5, r0, #1
    2316:	1975      	adds	r5, r6, r5
    2318:	352f      	adds	r5, #47	; 0x2f
    231a:	782d      	ldrb	r5, [r5, #0]
    231c:	2d00      	cmp	r5, #0
    231e:	d09a      	beq.n	2256 <tcc_init+0xfe>
    2320:	2508      	movs	r5, #8
    2322:	4329      	orrs	r1, r5
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2324:	0090      	lsls	r0, r2, #2
    2326:	1880      	adds	r0, r0, r2
    2328:	0045      	lsls	r5, r0, #1
    232a:	1975      	adds	r5, r6, r5
    232c:	3530      	adds	r5, #48	; 0x30
    232e:	782d      	ldrb	r5, [r5, #0]
    2330:	2d00      	cmp	r5, #0
    2332:	d092      	beq.n	225a <tcc_init+0x102>
    2334:	2510      	movs	r5, #16
    2336:	e791      	b.n	225c <tcc_init+0x104>
    2338:	9d05      	ldr	r5, [sp, #20]
    233a:	9f02      	ldr	r7, [sp, #8]
    233c:	4664      	mov	r4, ip
    233e:	9803      	ldr	r0, [sp, #12]
	if (STATUS_OK != status) {
    2340:	2d00      	cmp	r5, #0
    2342:	d000      	beq.n	2346 <tcc_init+0x1ee>
    2344:	e71e      	b.n	2184 <tcc_init+0x2c>
    2346:	2300      	movs	r3, #0
    2348:	0019      	movs	r1, r3
    234a:	e00e      	b.n	236a <tcc_init+0x212>
    234c:	9f02      	ldr	r7, [sp, #8]
    234e:	4664      	mov	r4, ip
    2350:	9803      	ldr	r0, [sp, #12]
			return STATUS_ERR_INVALID_ARG;
    2352:	2517      	movs	r5, #23
    2354:	e7f4      	b.n	2340 <tcc_init+0x1e8>
    2356:	9f02      	ldr	r7, [sp, #8]
    2358:	4664      	mov	r4, ip
    235a:	9803      	ldr	r0, [sp, #12]
			return STATUS_ERR_INVALID_ARG;
    235c:	2517      	movs	r5, #23
    235e:	e7ef      	b.n	2340 <tcc_init+0x1e8>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2360:	2202      	movs	r2, #2
    2362:	32ff      	adds	r2, #255	; 0xff
    2364:	409a      	lsls	r2, r3
    2366:	4311      	orrs	r1, r2
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2368:	3301      	adds	r3, #1
    236a:	2b07      	cmp	r3, #7
    236c:	d815      	bhi.n	239a <tcc_init+0x242>
		if (config->wave_ext.invert[i]) {
    236e:	18f2      	adds	r2, r6, r3
    2370:	3250      	adds	r2, #80	; 0x50
    2372:	7812      	ldrb	r2, [r2, #0]
    2374:	2a00      	cmp	r2, #0
    2376:	d003      	beq.n	2380 <tcc_init+0x228>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2378:	2280      	movs	r2, #128	; 0x80
    237a:	0252      	lsls	r2, r2, #9
    237c:	409a      	lsls	r2, r3
    237e:	4311      	orrs	r1, r2
		if (config->wave_ext.non_recoverable_fault[i].output !=
    2380:	001a      	movs	r2, r3
    2382:	321c      	adds	r2, #28
    2384:	0052      	lsls	r2, r2, #1
    2386:	18b2      	adds	r2, r6, r2
    2388:	7a52      	ldrb	r2, [r2, #9]
    238a:	2a00      	cmp	r2, #0
    238c:	d0ec      	beq.n	2368 <tcc_init+0x210>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    238e:	2a02      	cmp	r2, #2
    2390:	d0e6      	beq.n	2360 <tcc_init+0x208>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2392:	2201      	movs	r2, #1
    2394:	409a      	lsls	r2, r3
    2396:	4311      	orrs	r1, r2
    2398:	e7e6      	b.n	2368 <tcc_init+0x210>
    239a:	4688      	mov	r8, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    239c:	7e73      	ldrb	r3, [r6, #25]
    239e:	011b      	lsls	r3, r3, #4
    23a0:	2230      	movs	r2, #48	; 0x30
    23a2:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    23a4:	7e31      	ldrb	r1, [r6, #24]
    23a6:	2307      	movs	r3, #7
    23a8:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    23aa:	431a      	orrs	r2, r3
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    23ac:	2300      	movs	r3, #0
    23ae:	0011      	movs	r1, r2
    23b0:	e000      	b.n	23b4 <tcc_init+0x25c>
    23b2:	3301      	adds	r3, #1
    23b4:	2b03      	cmp	r3, #3
    23b6:	dc08      	bgt.n	23ca <tcc_init+0x272>
		if (wav_cfg->wave_polarity[n]) {
    23b8:	18f2      	adds	r2, r6, r3
    23ba:	7d12      	ldrb	r2, [r2, #20]
    23bc:	2a00      	cmp	r2, #0
    23be:	d0f8      	beq.n	23b2 <tcc_init+0x25a>
			wave |= (TCC_WAVE_POL0 << n);
    23c0:	2280      	movs	r2, #128	; 0x80
    23c2:	0252      	lsls	r2, r2, #9
    23c4:	409a      	lsls	r2, r3
    23c6:	4311      	orrs	r1, r2
    23c8:	e7f3      	b.n	23b2 <tcc_init+0x25a>
    23ca:	4689      	mov	r9, r1
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    23cc:	2300      	movs	r3, #0
    23ce:	e004      	b.n	23da <tcc_init+0x282>
		module_inst->callback[i] = NULL;
    23d0:	009a      	lsls	r2, r3, #2
    23d2:	18ba      	adds	r2, r7, r2
    23d4:	2100      	movs	r1, #0
    23d6:	6051      	str	r1, [r2, #4]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    23d8:	3301      	adds	r3, #1
    23da:	2b0b      	cmp	r3, #11
    23dc:	ddf8      	ble.n	23d0 <tcc_init+0x278>
	module_inst->register_callback_mask = 0;
    23de:	2300      	movs	r3, #0
    23e0:	637b      	str	r3, [r7, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    23e2:	63bb      	str	r3, [r7, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    23e4:	0080      	lsls	r0, r0, #2
    23e6:	4b2b      	ldr	r3, [pc, #172]	; (2494 <tcc_init+0x33c>)
    23e8:	50c7      	str	r7, [r0, r3]
	module_inst->hw = hw;
    23ea:	603c      	str	r4, [r7, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    23ec:	23a0      	movs	r3, #160	; 0xa0
    23ee:	5cf2      	ldrb	r2, [r6, r3]
    23f0:	3b64      	subs	r3, #100	; 0x64
    23f2:	54fa      	strb	r2, [r7, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    23f4:	7ab3      	ldrb	r3, [r6, #10]
    23f6:	a907      	add	r1, sp, #28
    23f8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    23fa:	2011      	movs	r0, #17
    23fc:	f7ff fd3c 	bl	1e78 <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    2400:	2011      	movs	r0, #17
    2402:	f7ff fcfd 	bl	1e00 <system_gclk_chan_enable>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2406:	2700      	movs	r7, #0
    2408:	e000      	b.n	240c <tcc_init+0x2b4>
    240a:	3701      	adds	r7, #1
    240c:	2f07      	cmp	r7, #7
    240e:	dc17      	bgt.n	2440 <tcc_init+0x2e8>
		if (!config->pins.enable_wave_out_pin[i]) {
    2410:	19f3      	adds	r3, r6, r7
    2412:	3398      	adds	r3, #152	; 0x98
    2414:	781b      	ldrb	r3, [r3, #0]
    2416:	2b00      	cmp	r3, #0
    2418:	d0f7      	beq.n	240a <tcc_init+0x2b2>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    241a:	2201      	movs	r2, #1
    241c:	ab06      	add	r3, sp, #24
    241e:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2420:	2300      	movs	r3, #0
    2422:	a906      	add	r1, sp, #24
    2424:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    2426:	003b      	movs	r3, r7
    2428:	331e      	adds	r3, #30
    242a:	009b      	lsls	r3, r3, #2
    242c:	599b      	ldr	r3, [r3, r6]
    242e:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2430:	704a      	strb	r2, [r1, #1]
				config->pins.wave_out_pin[i], &pin_config);
    2432:	003b      	movs	r3, r7
    2434:	3316      	adds	r3, #22
    2436:	009b      	lsls	r3, r3, #2
		system_pinmux_pin_set_config(
    2438:	5cf0      	ldrb	r0, [r6, r3]
    243a:	f7ff fd87 	bl	1f4c <system_pinmux_pin_set_config>
    243e:	e7e4      	b.n	240a <tcc_init+0x2b2>
	hw->CTRLA.reg = ctrla;
    2440:	9b01      	ldr	r3, [sp, #4]
    2442:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2444:	68a3      	ldr	r3, [r4, #8]
    2446:	075b      	lsls	r3, r3, #29
    2448:	d4fc      	bmi.n	2444 <tcc_init+0x2ec>
	hw->CTRLBCLR.reg = 0xFF;
    244a:	23ff      	movs	r3, #255	; 0xff
    244c:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    244e:	68a3      	ldr	r3, [r4, #8]
    2450:	075b      	lsls	r3, r3, #29
    2452:	d4fc      	bmi.n	244e <tcc_init+0x2f6>
	hw->CTRLBSET.reg = ctrlb;
    2454:	466b      	mov	r3, sp
    2456:	7c1b      	ldrb	r3, [r3, #16]
    2458:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    245a:	9b08      	ldr	r3, [sp, #32]
    245c:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    245e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2460:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    2462:	4643      	mov	r3, r8
    2464:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    2466:	68a2      	ldr	r2, [r4, #8]
    2468:	4b0b      	ldr	r3, [pc, #44]	; (2498 <tcc_init+0x340>)
    246a:	421a      	tst	r2, r3
    246c:	d1fb      	bne.n	2466 <tcc_init+0x30e>
	hw->WAVE.reg = waves[0];
    246e:	464b      	mov	r3, r9
    2470:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    2472:	68a3      	ldr	r3, [r4, #8]
    2474:	06db      	lsls	r3, r3, #27
    2476:	d4fc      	bmi.n	2472 <tcc_init+0x31a>
	hw->COUNT.reg = config->counter.count;
    2478:	6833      	ldr	r3, [r6, #0]
    247a:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    247c:	68a2      	ldr	r2, [r4, #8]
    247e:	4b07      	ldr	r3, [pc, #28]	; (249c <tcc_init+0x344>)
    2480:	421a      	tst	r2, r3
    2482:	d1fb      	bne.n	247c <tcc_init+0x324>
	hw->PER.reg = (config->counter.period);
    2484:	6873      	ldr	r3, [r6, #4]
    2486:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2488:	2100      	movs	r1, #0
    248a:	e018      	b.n	24be <tcc_init+0x366>
    248c:	40000400 	.word	0x40000400
    2490:	00ffffff 	.word	0x00ffffff
    2494:	20000210 	.word	0x20000210
    2498:	00020040 	.word	0x00020040
    249c:	00040080 	.word	0x00040080
		while (hw->SYNCBUSY.reg & (
    24a0:	68a2      	ldr	r2, [r4, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    24a2:	4b09      	ldr	r3, [pc, #36]	; (24c8 <tcc_init+0x370>)
    24a4:	408b      	lsls	r3, r1
		while (hw->SYNCBUSY.reg & (
    24a6:	4213      	tst	r3, r2
    24a8:	d1fa      	bne.n	24a0 <tcc_init+0x348>
		hw->CC[i].reg = (config->compare.match[i]);
    24aa:	1d8b      	adds	r3, r1, #6
    24ac:	009b      	lsls	r3, r3, #2
    24ae:	18f3      	adds	r3, r6, r3
    24b0:	685a      	ldr	r2, [r3, #4]
    24b2:	000b      	movs	r3, r1
    24b4:	3310      	adds	r3, #16
    24b6:	009b      	lsls	r3, r3, #2
    24b8:	18e3      	adds	r3, r4, r3
    24ba:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    24bc:	3101      	adds	r1, #1
    24be:	2903      	cmp	r1, #3
    24c0:	ddee      	ble.n	24a0 <tcc_init+0x348>
    24c2:	e65f      	b.n	2184 <tcc_init+0x2c>
			return STATUS_ERR_INVALID_ARG;
    24c4:	2517      	movs	r5, #23
    24c6:	e65d      	b.n	2184 <tcc_init+0x2c>
    24c8:	00080100 	.word	0x00080100

000024cc <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    24cc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    24ce:	233c      	movs	r3, #60	; 0x3c
    24d0:	5cc3      	ldrb	r3, [r0, r3]
    24d2:	f7ff fd6b 	bl	1fac <_tcc_set_compare_value>
			module_inst->double_buffering_enabled);
}
    24d6:	bd10      	pop	{r4, pc}

000024d8 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    24d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    24da:	0080      	lsls	r0, r0, #2
    24dc:	4b0c      	ldr	r3, [pc, #48]	; (2510 <_tcc_interrupt_handler+0x38>)
    24de:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    24e0:	683b      	ldr	r3, [r7, #0]
    24e2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    24e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    24e6:	401e      	ands	r6, r3
    24e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    24ea:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    24ec:	2400      	movs	r4, #0
    24ee:	e000      	b.n	24f2 <_tcc_interrupt_handler+0x1a>
    24f0:	3401      	adds	r4, #1
    24f2:	2c0b      	cmp	r4, #11
    24f4:	dc0b      	bgt.n	250e <_tcc_interrupt_handler+0x36>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    24f6:	00a3      	lsls	r3, r4, #2
    24f8:	4a06      	ldr	r2, [pc, #24]	; (2514 <_tcc_interrupt_handler+0x3c>)
    24fa:	589d      	ldr	r5, [r3, r2]
    24fc:	4235      	tst	r5, r6
    24fe:	d0f7      	beq.n	24f0 <_tcc_interrupt_handler+0x18>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2500:	18fb      	adds	r3, r7, r3
    2502:	685b      	ldr	r3, [r3, #4]
    2504:	0038      	movs	r0, r7
    2506:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2508:	683b      	ldr	r3, [r7, #0]
    250a:	62dd      	str	r5, [r3, #44]	; 0x2c
    250c:	e7f0      	b.n	24f0 <_tcc_interrupt_handler+0x18>
		}
	}
}
    250e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2510:	20000210 	.word	0x20000210
    2514:	0000300c 	.word	0x0000300c

00002518 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2518:	b510      	push	{r4, lr}
    251a:	2000      	movs	r0, #0
    251c:	f7ff ffdc 	bl	24d8 <_tcc_interrupt_handler>
    2520:	bd10      	pop	{r4, pc}

00002522 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2522:	1c93      	adds	r3, r2, #2
    2524:	009b      	lsls	r3, r3, #2
    2526:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2528:	2a02      	cmp	r2, #2
    252a:	d009      	beq.n	2540 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    252c:	2a03      	cmp	r2, #3
    252e:	d00c      	beq.n	254a <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2530:	2301      	movs	r3, #1
    2532:	4093      	lsls	r3, r2
    2534:	001a      	movs	r2, r3
    2536:	7e03      	ldrb	r3, [r0, #24]
    2538:	4313      	orrs	r3, r2
    253a:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    253c:	2000      	movs	r0, #0
    253e:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2540:	7e03      	ldrb	r3, [r0, #24]
    2542:	2210      	movs	r2, #16
    2544:	4313      	orrs	r3, r2
    2546:	7603      	strb	r3, [r0, #24]
    2548:	e7f8      	b.n	253c <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    254a:	7e03      	ldrb	r3, [r0, #24]
    254c:	2220      	movs	r2, #32
    254e:	4313      	orrs	r3, r2
    2550:	7603      	strb	r3, [r0, #24]
    2552:	e7f3      	b.n	253c <tc_register_callback+0x1a>

00002554 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2554:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    2556:	0080      	lsls	r0, r0, #2
    2558:	4b16      	ldr	r3, [pc, #88]	; (25b4 <_tc_interrupt_handler+0x60>)
    255a:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    255c:	682b      	ldr	r3, [r5, #0]
    255e:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    2560:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    2562:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2564:	4014      	ands	r4, r2
    2566:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2568:	07e3      	lsls	r3, r4, #31
    256a:	d406      	bmi.n	257a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    256c:	07a3      	lsls	r3, r4, #30
    256e:	d40b      	bmi.n	2588 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2570:	06e3      	lsls	r3, r4, #27
    2572:	d410      	bmi.n	2596 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2574:	06a3      	lsls	r3, r4, #26
    2576:	d415      	bmi.n	25a4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    2578:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    257a:	0028      	movs	r0, r5
    257c:	68ab      	ldr	r3, [r5, #8]
    257e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2580:	2301      	movs	r3, #1
    2582:	682a      	ldr	r2, [r5, #0]
    2584:	7393      	strb	r3, [r2, #14]
    2586:	e7f1      	b.n	256c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    2588:	0028      	movs	r0, r5
    258a:	68eb      	ldr	r3, [r5, #12]
    258c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    258e:	2302      	movs	r3, #2
    2590:	682a      	ldr	r2, [r5, #0]
    2592:	7393      	strb	r3, [r2, #14]
    2594:	e7ec      	b.n	2570 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    2596:	0028      	movs	r0, r5
    2598:	692b      	ldr	r3, [r5, #16]
    259a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    259c:	2310      	movs	r3, #16
    259e:	682a      	ldr	r2, [r5, #0]
    25a0:	7393      	strb	r3, [r2, #14]
    25a2:	e7e7      	b.n	2574 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    25a4:	0028      	movs	r0, r5
    25a6:	696b      	ldr	r3, [r5, #20]
    25a8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    25aa:	682b      	ldr	r3, [r5, #0]
    25ac:	2220      	movs	r2, #32
    25ae:	739a      	strb	r2, [r3, #14]
}
    25b0:	e7e2      	b.n	2578 <_tc_interrupt_handler+0x24>
    25b2:	46c0      	nop			; (mov r8, r8)
    25b4:	20000214 	.word	0x20000214

000025b8 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    25b8:	b510      	push	{r4, lr}
    25ba:	2000      	movs	r0, #0
    25bc:	f7ff ffca 	bl	2554 <_tc_interrupt_handler>
    25c0:	bd10      	pop	{r4, pc}

000025c2 <TC2_Handler>:
    25c2:	b510      	push	{r4, lr}
    25c4:	2001      	movs	r0, #1
    25c6:	f7ff ffc5 	bl	2554 <_tc_interrupt_handler>
    25ca:	bd10      	pop	{r4, pc}

000025cc <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    25cc:	b510      	push	{r4, lr}
    25ce:	b082      	sub	sp, #8
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    25d0:	466a      	mov	r2, sp
    25d2:	4b09      	ldr	r3, [pc, #36]	; (25f8 <_tc_get_inst_index+0x2c>)
    25d4:	cb12      	ldmia	r3!, {r1, r4}
    25d6:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    25d8:	2300      	movs	r3, #0
    25da:	2b01      	cmp	r3, #1
    25dc:	d808      	bhi.n	25f0 <_tc_get_inst_index+0x24>
		if (hw == tc_modules[i]) {
    25de:	009a      	lsls	r2, r3, #2
    25e0:	4669      	mov	r1, sp
    25e2:	5852      	ldr	r2, [r2, r1]
    25e4:	4282      	cmp	r2, r0
    25e6:	d001      	beq.n	25ec <_tc_get_inst_index+0x20>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    25e8:	3301      	adds	r3, #1
    25ea:	e7f6      	b.n	25da <_tc_get_inst_index+0xe>
			return i;
    25ec:	b2d8      	uxtb	r0, r3
    25ee:	e000      	b.n	25f2 <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    25f0:	2000      	movs	r0, #0
}
    25f2:	b002      	add	sp, #8
    25f4:	bd10      	pop	{r4, pc}
    25f6:	46c0      	nop			; (mov r8, r8)
    25f8:	0000303c 	.word	0x0000303c

000025fc <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    25fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    25fe:	b085      	sub	sp, #20
    2600:	0004      	movs	r4, r0
    2602:	000d      	movs	r5, r1
    2604:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2606:	0008      	movs	r0, r1
    2608:	f7ff ffe0 	bl	25cc <_tc_get_inst_index>
    260c:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    260e:	4b87      	ldr	r3, [pc, #540]	; (282c <tc_init+0x230>)
    2610:	8919      	ldrh	r1, [r3, #8]
    2612:	aa03      	add	r2, sp, #12
    2614:	8011      	strh	r1, [r2, #0]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2616:	68db      	ldr	r3, [r3, #12]
    2618:	9302      	str	r3, [sp, #8]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    261a:	2300      	movs	r3, #0
    261c:	e005      	b.n	262a <tc_init+0x2e>
		module_inst->callback[i]        = NULL;
    261e:	1c9a      	adds	r2, r3, #2
    2620:	0092      	lsls	r2, r2, #2
    2622:	2100      	movs	r1, #0
    2624:	5111      	str	r1, [r2, r4]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2626:	3301      	adds	r3, #1
    2628:	b2db      	uxtb	r3, r3
    262a:	2b03      	cmp	r3, #3
    262c:	d9f7      	bls.n	261e <tc_init+0x22>
	}
	module_inst->register_callback_mask     = 0x00;
    262e:	2300      	movs	r3, #0
    2630:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2632:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2634:	00bb      	lsls	r3, r7, #2
    2636:	4a7e      	ldr	r2, [pc, #504]	; (2830 <tc_init+0x234>)
    2638:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    263a:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    263c:	78b3      	ldrb	r3, [r6, #2]
    263e:	2b08      	cmp	r3, #8
    2640:	d006      	beq.n	2650 <tc_init+0x54>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2642:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2644:	882b      	ldrh	r3, [r5, #0]
    2646:	07db      	lsls	r3, r3, #31
    2648:	d506      	bpl.n	2658 <tc_init+0x5c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    264a:	2005      	movs	r0, #5
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    264c:	b005      	add	sp, #20
    264e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2650:	07fa      	lsls	r2, r7, #31
    2652:	d5f6      	bpl.n	2642 <tc_init+0x46>
		return STATUS_ERR_INVALID_ARG;
    2654:	2017      	movs	r0, #23
    2656:	e7f9      	b.n	264c <tc_init+0x50>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2658:	7beb      	ldrb	r3, [r5, #15]
    265a:	06db      	lsls	r3, r3, #27
    265c:	d501      	bpl.n	2662 <tc_init+0x66>
		return STATUS_ERR_DENIED;
    265e:	201c      	movs	r0, #28
    2660:	e7f4      	b.n	264c <tc_init+0x50>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2662:	882b      	ldrh	r3, [r5, #0]
    2664:	079b      	lsls	r3, r3, #30
    2666:	d501      	bpl.n	266c <tc_init+0x70>
		return STATUS_ERR_DENIED;
    2668:	201c      	movs	r0, #28
    266a:	e7ef      	b.n	264c <tc_init+0x50>
	if (config->pwm_channel[0].enabled) {
    266c:	7c33      	ldrb	r3, [r6, #16]
    266e:	2b00      	cmp	r3, #0
    2670:	d147      	bne.n	2702 <tc_init+0x106>
	if (config->pwm_channel[1].enabled) {
    2672:	7f33      	ldrb	r3, [r6, #28]
    2674:	2b00      	cmp	r3, #0
    2676:	d150      	bne.n	271a <tc_init+0x11e>
			inst_pm_apbmask[instance]);
    2678:	007b      	lsls	r3, r7, #1
    267a:	aa02      	add	r2, sp, #8
    267c:	5a9b      	ldrh	r3, [r3, r2]
    267e:	4a6d      	ldr	r2, [pc, #436]	; (2834 <tc_init+0x238>)
    2680:	6a11      	ldr	r1, [r2, #32]
    2682:	430b      	orrs	r3, r1
    2684:	6213      	str	r3, [r2, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2686:	78b3      	ldrb	r3, [r6, #2]
    2688:	2b08      	cmp	r3, #8
    268a:	d056      	beq.n	273a <tc_init+0x13e>
	gclk_chan_config.source_generator = config->clock_source;
    268c:	7833      	ldrb	r3, [r6, #0]
    268e:	466a      	mov	r2, sp
    2690:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2692:	ab03      	add	r3, sp, #12
    2694:	5ddf      	ldrb	r7, [r3, r7]
    2696:	4669      	mov	r1, sp
    2698:	0038      	movs	r0, r7
    269a:	f7ff fbed 	bl	1e78 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    269e:	0038      	movs	r0, r7
    26a0:	f7ff fbae 	bl	1e00 <system_gclk_chan_enable>
			(uint32_t)config->counter_size |
    26a4:	78b3      	ldrb	r3, [r6, #2]
			(uint32_t)config->wave_generation |
    26a6:	79b1      	ldrb	r1, [r6, #6]
			(uint32_t)config->reload_action |
    26a8:	8932      	ldrh	r2, [r6, #8]
			(uint32_t)config->wave_generation |
    26aa:	430b      	orrs	r3, r1
    26ac:	431a      	orrs	r2, r3
			(uint32_t)config->clock_prescaler;
    26ae:	88b3      	ldrh	r3, [r6, #4]
	ctrla_tmp =
    26b0:	431a      	orrs	r2, r3
	if (config->run_in_standby) {
    26b2:	7873      	ldrb	r3, [r6, #1]
    26b4:	2b00      	cmp	r3, #0
    26b6:	d002      	beq.n	26be <tc_init+0xc2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    26b8:	2380      	movs	r3, #128	; 0x80
    26ba:	011b      	lsls	r3, r3, #4
    26bc:	431a      	orrs	r2, r3
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26be:	6823      	ldr	r3, [r4, #0]
    26c0:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    26c2:	b25b      	sxtb	r3, r3
    26c4:	2b00      	cmp	r3, #0
    26c6:	dbfa      	blt.n	26be <tc_init+0xc2>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    26c8:	802a      	strh	r2, [r5, #0]
	if (config->oneshot) {
    26ca:	7b73      	ldrb	r3, [r6, #13]
    26cc:	2b00      	cmp	r3, #0
    26ce:	d13d      	bne.n	274c <tc_init+0x150>
	uint8_t ctrlbset_tmp = 0;
    26d0:	2200      	movs	r2, #0
	if (config->count_direction) {
    26d2:	7bb3      	ldrb	r3, [r6, #14]
    26d4:	2b00      	cmp	r3, #0
    26d6:	d002      	beq.n	26de <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    26d8:	2301      	movs	r3, #1
    26da:	431a      	orrs	r2, r3
    26dc:	b2d2      	uxtb	r2, r2
    26de:	6823      	ldr	r3, [r4, #0]
    26e0:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    26e2:	b25b      	sxtb	r3, r3
    26e4:	2b00      	cmp	r3, #0
    26e6:	dbfa      	blt.n	26de <tc_init+0xe2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    26e8:	23ff      	movs	r3, #255	; 0xff
    26ea:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    26ec:	2a00      	cmp	r2, #0
    26ee:	d005      	beq.n	26fc <tc_init+0x100>
    26f0:	6823      	ldr	r3, [r4, #0]
    26f2:	7bdb      	ldrb	r3, [r3, #15]
		while (tc_is_syncing(module_inst)) {
    26f4:	b25b      	sxtb	r3, r3
    26f6:	2b00      	cmp	r3, #0
    26f8:	dbfa      	blt.n	26f0 <tc_init+0xf4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    26fa:	716a      	strb	r2, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    26fc:	7ab2      	ldrb	r2, [r6, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    26fe:	2300      	movs	r3, #0
    2700:	e028      	b.n	2754 <tc_init+0x158>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2702:	a901      	add	r1, sp, #4
    2704:	2301      	movs	r3, #1
    2706:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2708:	2200      	movs	r2, #0
    270a:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    270c:	7e32      	ldrb	r2, [r6, #24]
    270e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2710:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2712:	7d30      	ldrb	r0, [r6, #20]
    2714:	f7ff fc1a 	bl	1f4c <system_pinmux_pin_set_config>
    2718:	e7ab      	b.n	2672 <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    271a:	a901      	add	r1, sp, #4
    271c:	2301      	movs	r3, #1
    271e:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2720:	2200      	movs	r2, #0
    2722:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2724:	3224      	adds	r2, #36	; 0x24
    2726:	18b2      	adds	r2, r6, r2
    2728:	7812      	ldrb	r2, [r2, #0]
    272a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    272c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    272e:	331f      	adds	r3, #31
    2730:	18f3      	adds	r3, r6, r3
    2732:	7818      	ldrb	r0, [r3, #0]
    2734:	f7ff fc0a 	bl	1f4c <system_pinmux_pin_set_config>
    2738:	e79e      	b.n	2678 <tc_init+0x7c>
				inst_pm_apbmask[instance + 1]);
    273a:	1c7b      	adds	r3, r7, #1
    273c:	005b      	lsls	r3, r3, #1
    273e:	aa02      	add	r2, sp, #8
    2740:	5a9b      	ldrh	r3, [r3, r2]
    2742:	4a3c      	ldr	r2, [pc, #240]	; (2834 <tc_init+0x238>)
    2744:	6a11      	ldr	r1, [r2, #32]
    2746:	430b      	orrs	r3, r1
    2748:	6213      	str	r3, [r2, #32]
    274a:	e79f      	b.n	268c <tc_init+0x90>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    274c:	2204      	movs	r2, #4
    274e:	e7c0      	b.n	26d2 <tc_init+0xd6>
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2750:	3301      	adds	r3, #1
    2752:	b2db      	uxtb	r3, r3
    2754:	2b01      	cmp	r3, #1
    2756:	d808      	bhi.n	276a <tc_init+0x16e>
		if (config->enable_capture_on_channel[i] == true) {
    2758:	18f1      	adds	r1, r6, r3
    275a:	7ac9      	ldrb	r1, [r1, #11]
    275c:	2900      	cmp	r1, #0
    275e:	d0f7      	beq.n	2750 <tc_init+0x154>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2760:	2110      	movs	r1, #16
    2762:	4099      	lsls	r1, r3
    2764:	430a      	orrs	r2, r1
    2766:	b2d2      	uxtb	r2, r2
    2768:	e7f2      	b.n	2750 <tc_init+0x154>
    276a:	6823      	ldr	r3, [r4, #0]
    276c:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    276e:	b25b      	sxtb	r3, r3
    2770:	2b00      	cmp	r3, #0
    2772:	dbfa      	blt.n	276a <tc_init+0x16e>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    2774:	71aa      	strb	r2, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2776:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2778:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    277a:	b25b      	sxtb	r3, r3
    277c:	2b00      	cmp	r3, #0
    277e:	dbfa      	blt.n	2776 <tc_init+0x17a>
	switch (module_inst->counter_size) {
    2780:	7923      	ldrb	r3, [r4, #4]
    2782:	2b04      	cmp	r3, #4
    2784:	d005      	beq.n	2792 <tc_init+0x196>
    2786:	2b08      	cmp	r3, #8
    2788:	d03a      	beq.n	2800 <tc_init+0x204>
    278a:	2b00      	cmp	r3, #0
    278c:	d022      	beq.n	27d4 <tc_init+0x1d8>
	return STATUS_ERR_INVALID_ARG;
    278e:	2017      	movs	r0, #23
    2790:	e75c      	b.n	264c <tc_init+0x50>
    2792:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2794:	b25b      	sxtb	r3, r3
    2796:	2b00      	cmp	r3, #0
    2798:	dbfb      	blt.n	2792 <tc_init+0x196>
					config->counter_8_bit.value;
    279a:	2328      	movs	r3, #40	; 0x28
    279c:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    279e:	742b      	strb	r3, [r5, #16]
    27a0:	6823      	ldr	r3, [r4, #0]
    27a2:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    27a4:	b25b      	sxtb	r3, r3
    27a6:	2b00      	cmp	r3, #0
    27a8:	dbfa      	blt.n	27a0 <tc_init+0x1a4>
					config->counter_8_bit.period;
    27aa:	2329      	movs	r3, #41	; 0x29
    27ac:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    27ae:	752b      	strb	r3, [r5, #20]
    27b0:	6823      	ldr	r3, [r4, #0]
    27b2:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    27b4:	b25b      	sxtb	r3, r3
    27b6:	2b00      	cmp	r3, #0
    27b8:	dbfa      	blt.n	27b0 <tc_init+0x1b4>
					config->counter_8_bit.compare_capture_channel[0];
    27ba:	232a      	movs	r3, #42	; 0x2a
    27bc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    27be:	762b      	strb	r3, [r5, #24]
    27c0:	6823      	ldr	r3, [r4, #0]
    27c2:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    27c4:	b25b      	sxtb	r3, r3
    27c6:	2b00      	cmp	r3, #0
    27c8:	dbfa      	blt.n	27c0 <tc_init+0x1c4>
					config->counter_8_bit.compare_capture_channel[1];
    27ca:	232b      	movs	r3, #43	; 0x2b
    27cc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    27ce:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    27d0:	2000      	movs	r0, #0
    27d2:	e73b      	b.n	264c <tc_init+0x50>
    27d4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    27d6:	b25b      	sxtb	r3, r3
    27d8:	2b00      	cmp	r3, #0
    27da:	dbfb      	blt.n	27d4 <tc_init+0x1d8>
				= config->counter_16_bit.value;
    27dc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    27de:	822b      	strh	r3, [r5, #16]
    27e0:	6823      	ldr	r3, [r4, #0]
    27e2:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    27e4:	b25b      	sxtb	r3, r3
    27e6:	2b00      	cmp	r3, #0
    27e8:	dbfa      	blt.n	27e0 <tc_init+0x1e4>
					config->counter_16_bit.compare_capture_channel[0];
    27ea:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    27ec:	832b      	strh	r3, [r5, #24]
    27ee:	6823      	ldr	r3, [r4, #0]
    27f0:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    27f2:	b25b      	sxtb	r3, r3
    27f4:	2b00      	cmp	r3, #0
    27f6:	dbfa      	blt.n	27ee <tc_init+0x1f2>
					config->counter_16_bit.compare_capture_channel[1];
    27f8:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    27fa:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    27fc:	2000      	movs	r0, #0
    27fe:	e725      	b.n	264c <tc_init+0x50>
    2800:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2802:	b25b      	sxtb	r3, r3
    2804:	2b00      	cmp	r3, #0
    2806:	dbfb      	blt.n	2800 <tc_init+0x204>
				= config->counter_32_bit.value;
    2808:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    280a:	612b      	str	r3, [r5, #16]
    280c:	6823      	ldr	r3, [r4, #0]
    280e:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2810:	b25b      	sxtb	r3, r3
    2812:	2b00      	cmp	r3, #0
    2814:	dbfa      	blt.n	280c <tc_init+0x210>
			hw->COUNT32.CC[0].reg =
    2816:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2818:	61ab      	str	r3, [r5, #24]
    281a:	6823      	ldr	r3, [r4, #0]
    281c:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    281e:	b25b      	sxtb	r3, r3
    2820:	2b00      	cmp	r3, #0
    2822:	dbfa      	blt.n	281a <tc_init+0x21e>
					config->counter_32_bit.compare_capture_channel[1];
    2824:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2826:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2828:	2000      	movs	r0, #0
    282a:	e70f      	b.n	264c <tc_init+0x50>
    282c:	0000303c 	.word	0x0000303c
    2830:	20000214 	.word	0x20000214
    2834:	40000400 	.word	0x40000400

00002838 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2838:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    283a:	6804      	ldr	r4, [r0, #0]
    283c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    283e:	b25b      	sxtb	r3, r3
    2840:	2b00      	cmp	r3, #0
    2842:	dbfb      	blt.n	283c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2844:	7903      	ldrb	r3, [r0, #4]
    2846:	2b04      	cmp	r3, #4
    2848:	d005      	beq.n	2856 <tc_set_compare_value+0x1e>
    284a:	2b08      	cmp	r3, #8
    284c:	d007      	beq.n	285e <tc_set_compare_value+0x26>
    284e:	2b00      	cmp	r3, #0
    2850:	d003      	beq.n	285a <tc_set_compare_value+0x22>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2852:	2017      	movs	r0, #23
    2854:	e006      	b.n	2864 <tc_set_compare_value+0x2c>
			if (channel_index <
    2856:	2901      	cmp	r1, #1
    2858:	d905      	bls.n	2866 <tc_set_compare_value+0x2e>
			if (channel_index <
    285a:	2901      	cmp	r1, #1
    285c:	d908      	bls.n	2870 <tc_set_compare_value+0x38>
			if (channel_index <
    285e:	2901      	cmp	r1, #1
    2860:	d90c      	bls.n	287c <tc_set_compare_value+0x44>
	return STATUS_ERR_INVALID_ARG;
    2862:	2017      	movs	r0, #23
}
    2864:	bd10      	pop	{r4, pc}
						(uint8_t)compare;
    2866:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    2868:	1864      	adds	r4, r4, r1
    286a:	7622      	strb	r2, [r4, #24]
				return STATUS_OK;
    286c:	2000      	movs	r0, #0
    286e:	e7f9      	b.n	2864 <tc_set_compare_value+0x2c>
						(uint16_t)compare;
    2870:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    2872:	310c      	adds	r1, #12
    2874:	0049      	lsls	r1, r1, #1
    2876:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    2878:	2000      	movs	r0, #0
    287a:	e7f3      	b.n	2864 <tc_set_compare_value+0x2c>
				tc_module->COUNT32.CC[channel_index].reg =
    287c:	3106      	adds	r1, #6
    287e:	0089      	lsls	r1, r1, #2
    2880:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2882:	2000      	movs	r0, #0
    2884:	e7ee      	b.n	2864 <tc_set_compare_value+0x2c>

00002886 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2886:	e7fe      	b.n	2886 <Dummy_Handler>

00002888 <Reset_Handler>:
{
    2888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    288a:	4a23      	ldr	r2, [pc, #140]	; (2918 <Reset_Handler+0x90>)
    288c:	4b23      	ldr	r3, [pc, #140]	; (291c <Reset_Handler+0x94>)
    288e:	429a      	cmp	r2, r3
    2890:	d009      	beq.n	28a6 <Reset_Handler+0x1e>
    2892:	4b22      	ldr	r3, [pc, #136]	; (291c <Reset_Handler+0x94>)
    2894:	4a20      	ldr	r2, [pc, #128]	; (2918 <Reset_Handler+0x90>)
    2896:	e003      	b.n	28a0 <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    2898:	6811      	ldr	r1, [r2, #0]
    289a:	6019      	str	r1, [r3, #0]
    289c:	3304      	adds	r3, #4
    289e:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    28a0:	491f      	ldr	r1, [pc, #124]	; (2920 <Reset_Handler+0x98>)
    28a2:	428b      	cmp	r3, r1
    28a4:	d3f8      	bcc.n	2898 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    28a6:	4b1f      	ldr	r3, [pc, #124]	; (2924 <Reset_Handler+0x9c>)
    28a8:	e002      	b.n	28b0 <Reset_Handler+0x28>
                *pDest++ = 0;
    28aa:	2200      	movs	r2, #0
    28ac:	601a      	str	r2, [r3, #0]
    28ae:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    28b0:	4a1d      	ldr	r2, [pc, #116]	; (2928 <Reset_Handler+0xa0>)
    28b2:	4293      	cmp	r3, r2
    28b4:	d3f9      	bcc.n	28aa <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    28b6:	4a1d      	ldr	r2, [pc, #116]	; (292c <Reset_Handler+0xa4>)
    28b8:	21ff      	movs	r1, #255	; 0xff
    28ba:	4b1d      	ldr	r3, [pc, #116]	; (2930 <Reset_Handler+0xa8>)
    28bc:	438b      	bics	r3, r1
    28be:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    28c0:	39fd      	subs	r1, #253	; 0xfd
    28c2:	2390      	movs	r3, #144	; 0x90
    28c4:	005b      	lsls	r3, r3, #1
    28c6:	4a1b      	ldr	r2, [pc, #108]	; (2934 <Reset_Handler+0xac>)
    28c8:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    28ca:	4a1b      	ldr	r2, [pc, #108]	; (2938 <Reset_Handler+0xb0>)
    28cc:	78d3      	ldrb	r3, [r2, #3]
    28ce:	2503      	movs	r5, #3
    28d0:	43ab      	bics	r3, r5
    28d2:	2402      	movs	r4, #2
    28d4:	4323      	orrs	r3, r4
    28d6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    28d8:	78d3      	ldrb	r3, [r2, #3]
    28da:	270c      	movs	r7, #12
    28dc:	43bb      	bics	r3, r7
    28de:	2608      	movs	r6, #8
    28e0:	4333      	orrs	r3, r6
    28e2:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    28e4:	4b15      	ldr	r3, [pc, #84]	; (293c <Reset_Handler+0xb4>)
    28e6:	7b98      	ldrb	r0, [r3, #14]
    28e8:	2230      	movs	r2, #48	; 0x30
    28ea:	4390      	bics	r0, r2
    28ec:	2220      	movs	r2, #32
    28ee:	4310      	orrs	r0, r2
    28f0:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    28f2:	7b99      	ldrb	r1, [r3, #14]
    28f4:	43b9      	bics	r1, r7
    28f6:	4331      	orrs	r1, r6
    28f8:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    28fa:	7b9a      	ldrb	r2, [r3, #14]
    28fc:	43aa      	bics	r2, r5
    28fe:	4322      	orrs	r2, r4
    2900:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    2902:	4a0f      	ldr	r2, [pc, #60]	; (2940 <Reset_Handler+0xb8>)
    2904:	6851      	ldr	r1, [r2, #4]
    2906:	2380      	movs	r3, #128	; 0x80
    2908:	430b      	orrs	r3, r1
    290a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    290c:	f000 fa82 	bl	2e14 <__libc_init_array>
        main();
    2910:	f000 f9ec 	bl	2cec <main>
    2914:	e7fe      	b.n	2914 <Reset_Handler+0x8c>
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	000030b8 	.word	0x000030b8
    291c:	20000000 	.word	0x20000000
    2920:	20000020 	.word	0x20000020
    2924:	20000020 	.word	0x20000020
    2928:	20000244 	.word	0x20000244
    292c:	e000ed00 	.word	0xe000ed00
    2930:	00000000 	.word	0x00000000
    2934:	41007000 	.word	0x41007000
    2938:	41005000 	.word	0x41005000
    293c:	41004800 	.word	0x41004800
    2940:	41004000 	.word	0x41004000

00002944 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2944:	6803      	ldr	r3, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2946:	69db      	ldr	r3, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    2948:	075b      	lsls	r3, r3, #29
    294a:	d1fb      	bne.n	2944 <_i2c_master_wait_for_sync>
}
    294c:	4770      	bx	lr
	...

00002950 <set_color_green_indication>:
#define BUFFER_SET_COLOR_BLUE_PWM						{0x04, 0x20}
#define BUFFER_SET_COLOR_BLUE_PWM_TIMER					{0x02, 0x19}
#define BUFFER_SET_COLOR_BLUE_PWM_FLASH					{0x01, 0x82}


void set_color_green_indication(void) {
    2950:	b500      	push	{lr}
    2952:	b083      	sub	sp, #12
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    2954:	aa01      	add	r2, sp, #4
    2956:	4b08      	ldr	r3, [pc, #32]	; (2978 <set_color_green_indication+0x28>)
    2958:	881b      	ldrh	r3, [r3, #0]
    295a:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_green;
    295c:	4b07      	ldr	r3, [pc, #28]	; (297c <set_color_green_indication+0x2c>)
    295e:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2960:	2231      	movs	r2, #49	; 0x31
    2962:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2964:	3a2f      	subs	r2, #47	; 0x2f
    2966:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2968:	4904      	ldr	r1, [pc, #16]	; (297c <set_color_green_indication+0x2c>)
    296a:	4805      	ldr	r0, [pc, #20]	; (2980 <set_color_green_indication+0x30>)
    296c:	f7fe fe0e 	bl	158c <i2c_master_write_packet_wait>
    2970:	2800      	cmp	r0, #0
    2972:	d1f9      	bne.n	2968 <set_color_green_indication+0x18>
         STATUS_OK) {
  }
}
    2974:	b003      	add	sp, #12
    2976:	bd00      	pop	{pc}
    2978:	0000304c 	.word	0x0000304c
    297c:	20000014 	.word	0x20000014
    2980:	2000021c 	.word	0x2000021c

00002984 <set_color_red_indication>:

void set_color_red_indication(void) {
    2984:	b500      	push	{lr}
    2986:	b083      	sub	sp, #12
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    2988:	aa01      	add	r2, sp, #4
    298a:	4b08      	ldr	r3, [pc, #32]	; (29ac <set_color_red_indication+0x28>)
    298c:	889b      	ldrh	r3, [r3, #4]
    298e:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_red;
    2990:	4b07      	ldr	r3, [pc, #28]	; (29b0 <set_color_red_indication+0x2c>)
    2992:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2994:	2231      	movs	r2, #49	; 0x31
    2996:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2998:	3a2f      	subs	r2, #47	; 0x2f
    299a:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    299c:	4904      	ldr	r1, [pc, #16]	; (29b0 <set_color_red_indication+0x2c>)
    299e:	4805      	ldr	r0, [pc, #20]	; (29b4 <set_color_red_indication+0x30>)
    29a0:	f7fe fdf4 	bl	158c <i2c_master_write_packet_wait>
    29a4:	2800      	cmp	r0, #0
    29a6:	d1f9      	bne.n	299c <set_color_red_indication+0x18>
         STATUS_OK) {
  }
}
    29a8:	b003      	add	sp, #12
    29aa:	bd00      	pop	{pc}
    29ac:	0000304c 	.word	0x0000304c
    29b0:	20000014 	.word	0x20000014
    29b4:	2000021c 	.word	0x2000021c

000029b8 <reset_chip>:
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
	STATUS_OK) {
	}
}

void reset_chip(void) {
    29b8:	b500      	push	{lr}
    29ba:	b083      	sub	sp, #12

  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] = BUFFER_TURN_OFF_MAIN_DIGITAL;
    29bc:	aa01      	add	r2, sp, #4
    29be:	2304      	movs	r3, #4
    29c0:	7013      	strb	r3, [r2, #0]
    29c2:	2300      	movs	r3, #0
    29c4:	7053      	strb	r3, [r2, #1]
  packet.data = buffer_reset_green_red_channel;
    29c6:	4b07      	ldr	r3, [pc, #28]	; (29e4 <reset_chip+0x2c>)
    29c8:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    29ca:	2231      	movs	r2, #49	; 0x31
    29cc:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    29ce:	3a2f      	subs	r2, #47	; 0x2f
    29d0:	805a      	strh	r2, [r3, #2]

  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    29d2:	4904      	ldr	r1, [pc, #16]	; (29e4 <reset_chip+0x2c>)
    29d4:	4804      	ldr	r0, [pc, #16]	; (29e8 <reset_chip+0x30>)
    29d6:	f7fe fdd9 	bl	158c <i2c_master_write_packet_wait>
    29da:	2800      	cmp	r0, #0
    29dc:	d1f9      	bne.n	29d2 <reset_chip+0x1a>
                                       &packet)) != STATUS_OK) {
  }
}
    29de:	b003      	add	sp, #12
    29e0:	bd00      	pop	{pc}
    29e2:	46c0      	nop			; (mov r8, r8)
    29e4:	20000014 	.word	0x20000014
    29e8:	2000021c 	.word	0x2000021c

000029ec <set_battery_charge_routine>:

void set_battery_charge_routine(void) {
    29ec:	b500      	push	{lr}
    29ee:	b085      	sub	sp, #20

  uint8_t buffer_set_color_green_PWM[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN_PWM;
    29f0:	aa03      	add	r2, sp, #12
    29f2:	4b1a      	ldr	r3, [pc, #104]	; (2a5c <set_battery_charge_routine+0x70>)
    29f4:	8b19      	ldrh	r1, [r3, #24]
    29f6:	8011      	strh	r1, [r2, #0]
  uint8_t buffer_set_charge_routine_flash_period[DATA_LENGTH_PRIMARY] = BUFFER_SET_CHARGE_ROUTINE_FLASH_PERIOD;
    29f8:	8b98      	ldrh	r0, [r3, #28]
    29fa:	a902      	add	r1, sp, #8
    29fc:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_charge_routine_trise_tfall[DATA_LENGTH_PRIMARY] = BUFFER_SET_CHARGE_ROUTINE_TRISE_TFALL;
    29fe:	8c18      	ldrh	r0, [r3, #32]
    2a00:	a901      	add	r1, sp, #4
    2a02:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_charge_routine_PWM1_timer[DATA_LENGTH_PRIMARY] = BUFFER_SET_CHARGE_ROUTINE_PWM1_TIMER;
    2a04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2a06:	4669      	mov	r1, sp
    2a08:	800b      	strh	r3, [r1, #0]

  packet.address = KTD2026_DEVICE_ADDRESS;
    2a0a:	4b15      	ldr	r3, [pc, #84]	; (2a60 <set_battery_charge_routine+0x74>)
    2a0c:	2131      	movs	r1, #49	; 0x31
    2a0e:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2a10:	392f      	subs	r1, #47	; 0x2f
    2a12:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_green_PWM;
    2a14:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a16:	4912      	ldr	r1, [pc, #72]	; (2a60 <set_battery_charge_routine+0x74>)
    2a18:	4812      	ldr	r0, [pc, #72]	; (2a64 <set_battery_charge_routine+0x78>)
    2a1a:	f7fe fdb7 	bl	158c <i2c_master_write_packet_wait>
    2a1e:	2800      	cmp	r0, #0
    2a20:	d1f9      	bne.n	2a16 <set_battery_charge_routine+0x2a>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_flash_period;
    2a22:	aa02      	add	r2, sp, #8
    2a24:	4b0e      	ldr	r3, [pc, #56]	; (2a60 <set_battery_charge_routine+0x74>)
    2a26:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a28:	490d      	ldr	r1, [pc, #52]	; (2a60 <set_battery_charge_routine+0x74>)
    2a2a:	480e      	ldr	r0, [pc, #56]	; (2a64 <set_battery_charge_routine+0x78>)
    2a2c:	f7fe fdae 	bl	158c <i2c_master_write_packet_wait>
    2a30:	2800      	cmp	r0, #0
    2a32:	d1f9      	bne.n	2a28 <set_battery_charge_routine+0x3c>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_trise_tfall;
    2a34:	aa01      	add	r2, sp, #4
    2a36:	4b0a      	ldr	r3, [pc, #40]	; (2a60 <set_battery_charge_routine+0x74>)
    2a38:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2a3a:	4909      	ldr	r1, [pc, #36]	; (2a60 <set_battery_charge_routine+0x74>)
    2a3c:	4809      	ldr	r0, [pc, #36]	; (2a64 <set_battery_charge_routine+0x78>)
    2a3e:	f7fe fda5 	bl	158c <i2c_master_write_packet_wait>
    2a42:	2800      	cmp	r0, #0
    2a44:	d1f9      	bne.n	2a3a <set_battery_charge_routine+0x4e>
                                       &packet)) != STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_PWM1_timer;
    2a46:	4b06      	ldr	r3, [pc, #24]	; (2a60 <set_battery_charge_routine+0x74>)
    2a48:	466a      	mov	r2, sp
    2a4a:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2a4c:	4904      	ldr	r1, [pc, #16]	; (2a60 <set_battery_charge_routine+0x74>)
    2a4e:	4805      	ldr	r0, [pc, #20]	; (2a64 <set_battery_charge_routine+0x78>)
    2a50:	f7fe fd9c 	bl	158c <i2c_master_write_packet_wait>
    2a54:	2800      	cmp	r0, #0
    2a56:	d1f9      	bne.n	2a4c <set_battery_charge_routine+0x60>
                                       &packet)) != STATUS_OK) {
  }
}
    2a58:	b005      	add	sp, #20
    2a5a:	bd00      	pop	{pc}
    2a5c:	0000304c 	.word	0x0000304c
    2a60:	20000014 	.word	0x20000014
    2a64:	2000021c 	.word	0x2000021c

00002a68 <set_battery_low_routine>:

void set_battery_low_routine(void) {
    2a68:	b500      	push	{lr}
    2a6a:	b085      	sub	sp, #20

  uint8_t buffer_set_color_red_PWM[DATA_LENGTH_PRIMARY]				= BUFFER_SET_COLOR_RED_PWM;
    2a6c:	aa03      	add	r2, sp, #12
    2a6e:	4b1a      	ldr	r3, [pc, #104]	; (2ad8 <set_battery_low_routine+0x70>)
    2a70:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2a72:	8011      	strh	r1, [r2, #0]
  uint8_t buffer_set_low_routine_flash_period[DATA_LENGTH_PRIMARY]	= BUFFER_SET_LOW_ROUTINE_FLASH_PERIOD;
    2a74:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
    2a76:	a902      	add	r1, sp, #8
    2a78:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY]	= BUFFER_SET_LOW_ROUTINE_TRISE_TFALL;
    2a7a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    2a7c:	a901      	add	r1, sp, #4
    2a7e:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_low_routine_brightness[DATA_LENGTH_PRIMARY]	= BUFFER_SET_COLOR_RED_BRIGHTNESS;
    2a80:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2a82:	4669      	mov	r1, sp
    2a84:	800b      	strh	r3, [r1, #0]

  packet.address = KTD2026_DEVICE_ADDRESS;
    2a86:	4b15      	ldr	r3, [pc, #84]	; (2adc <set_battery_low_routine+0x74>)
    2a88:	2131      	movs	r1, #49	; 0x31
    2a8a:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2a8c:	392f      	subs	r1, #47	; 0x2f
    2a8e:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_red_PWM;
    2a90:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a92:	4912      	ldr	r1, [pc, #72]	; (2adc <set_battery_low_routine+0x74>)
    2a94:	4812      	ldr	r0, [pc, #72]	; (2ae0 <set_battery_low_routine+0x78>)
    2a96:	f7fe fd79 	bl	158c <i2c_master_write_packet_wait>
    2a9a:	2800      	cmp	r0, #0
    2a9c:	d1f9      	bne.n	2a92 <set_battery_low_routine+0x2a>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_flash_period;
    2a9e:	aa02      	add	r2, sp, #8
    2aa0:	4b0e      	ldr	r3, [pc, #56]	; (2adc <set_battery_low_routine+0x74>)
    2aa2:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2aa4:	490d      	ldr	r1, [pc, #52]	; (2adc <set_battery_low_routine+0x74>)
    2aa6:	480e      	ldr	r0, [pc, #56]	; (2ae0 <set_battery_low_routine+0x78>)
    2aa8:	f7fe fd70 	bl	158c <i2c_master_write_packet_wait>
    2aac:	2800      	cmp	r0, #0
    2aae:	d1f9      	bne.n	2aa4 <set_battery_low_routine+0x3c>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_brightness;
    2ab0:	4b0a      	ldr	r3, [pc, #40]	; (2adc <set_battery_low_routine+0x74>)
    2ab2:	466a      	mov	r2, sp
    2ab4:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2ab6:	4909      	ldr	r1, [pc, #36]	; (2adc <set_battery_low_routine+0x74>)
    2ab8:	4809      	ldr	r0, [pc, #36]	; (2ae0 <set_battery_low_routine+0x78>)
    2aba:	f7fe fd67 	bl	158c <i2c_master_write_packet_wait>
    2abe:	2800      	cmp	r0, #0
    2ac0:	d1f9      	bne.n	2ab6 <set_battery_low_routine+0x4e>
                                       &packet)) != STATUS_OK) {
  }

	packet.data = buffer_set_low_routine_trise_tfall;
    2ac2:	aa01      	add	r2, sp, #4
    2ac4:	4b05      	ldr	r3, [pc, #20]	; (2adc <set_battery_low_routine+0x74>)
    2ac6:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2ac8:	4904      	ldr	r1, [pc, #16]	; (2adc <set_battery_low_routine+0x74>)
    2aca:	4805      	ldr	r0, [pc, #20]	; (2ae0 <set_battery_low_routine+0x78>)
    2acc:	f7fe fd5e 	bl	158c <i2c_master_write_packet_wait>
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d1f9      	bne.n	2ac8 <set_battery_low_routine+0x60>
	&packet)) != STATUS_OK) {
	}
}
    2ad4:	b005      	add	sp, #20
    2ad6:	bd00      	pop	{pc}
    2ad8:	0000304c 	.word	0x0000304c
    2adc:	20000014 	.word	0x20000014
    2ae0:	2000021c 	.word	0x2000021c

00002ae4 <set_motor_speed_1_indication>:





void set_motor_speed_1_indication(void){
    2ae4:	b500      	push	{lr}
    2ae6:	b083      	sub	sp, #12

  uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2ae8:	aa01      	add	r2, sp, #4
    2aea:	4b0e      	ldr	r3, [pc, #56]	; (2b24 <set_motor_speed_1_indication+0x40>)
    2aec:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2aee:	8011      	strh	r1, [r2, #0]
  uint8_t buffer_set_blue_lowest_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_LOWEST_BRIGTHNESS;
    2af0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    2af2:	4669      	mov	r1, sp
    2af4:	800b      	strh	r3, [r1, #0]

  packet.address = KTD2026_DEVICE_ADDRESS;
    2af6:	4b0c      	ldr	r3, [pc, #48]	; (2b28 <set_motor_speed_1_indication+0x44>)
    2af8:	2131      	movs	r1, #49	; 0x31
    2afa:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2afc:	392f      	subs	r1, #47	; 0x2f
    2afe:	8059      	strh	r1, [r3, #2]
  
  packet.data = buffer_set_blue;
    2b00:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b02:	4909      	ldr	r1, [pc, #36]	; (2b28 <set_motor_speed_1_indication+0x44>)
    2b04:	4809      	ldr	r0, [pc, #36]	; (2b2c <set_motor_speed_1_indication+0x48>)
    2b06:	f7fe fd41 	bl	158c <i2c_master_write_packet_wait>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d1f9      	bne.n	2b02 <set_motor_speed_1_indication+0x1e>
  &packet)) != STATUS_OK) {
  }

  packet.data = buffer_set_blue_lowest_brightness;
    2b0e:	4b06      	ldr	r3, [pc, #24]	; (2b28 <set_motor_speed_1_indication+0x44>)
    2b10:	466a      	mov	r2, sp
    2b12:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b14:	4904      	ldr	r1, [pc, #16]	; (2b28 <set_motor_speed_1_indication+0x44>)
    2b16:	4805      	ldr	r0, [pc, #20]	; (2b2c <set_motor_speed_1_indication+0x48>)
    2b18:	f7fe fd38 	bl	158c <i2c_master_write_packet_wait>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d1f9      	bne.n	2b14 <set_motor_speed_1_indication+0x30>
  &packet)) != STATUS_OK) {
  }

}
    2b20:	b003      	add	sp, #12
    2b22:	bd00      	pop	{pc}
    2b24:	0000304c 	.word	0x0000304c
    2b28:	20000014 	.word	0x20000014
    2b2c:	2000021c 	.word	0x2000021c

00002b30 <set_motor_speed_2_indication>:

void set_motor_speed_2_indication(void){
    2b30:	b500      	push	{lr}
    2b32:	b083      	sub	sp, #12

	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2b34:	aa01      	add	r2, sp, #4
    2b36:	4b0f      	ldr	r3, [pc, #60]	; (2b74 <set_motor_speed_2_indication+0x44>)
    2b38:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2b3a:	8011      	strh	r1, [r2, #0]
	uint8_t buffer_set_blue_low_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_LOW_BRIGTHNESS;
    2b3c:	2140      	movs	r1, #64	; 0x40
    2b3e:	5a5b      	ldrh	r3, [r3, r1]
    2b40:	4669      	mov	r1, sp
    2b42:	800b      	strh	r3, [r1, #0]

	packet.address = KTD2026_DEVICE_ADDRESS;
    2b44:	4b0c      	ldr	r3, [pc, #48]	; (2b78 <set_motor_speed_2_indication+0x48>)
    2b46:	2131      	movs	r1, #49	; 0x31
    2b48:	8019      	strh	r1, [r3, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    2b4a:	392f      	subs	r1, #47	; 0x2f
    2b4c:	8059      	strh	r1, [r3, #2]

	packet.data = buffer_set_blue;
    2b4e:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b50:	4909      	ldr	r1, [pc, #36]	; (2b78 <set_motor_speed_2_indication+0x48>)
    2b52:	480a      	ldr	r0, [pc, #40]	; (2b7c <set_motor_speed_2_indication+0x4c>)
    2b54:	f7fe fd1a 	bl	158c <i2c_master_write_packet_wait>
    2b58:	2800      	cmp	r0, #0
    2b5a:	d1f9      	bne.n	2b50 <set_motor_speed_2_indication+0x20>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_low_brightness;
    2b5c:	4b06      	ldr	r3, [pc, #24]	; (2b78 <set_motor_speed_2_indication+0x48>)
    2b5e:	466a      	mov	r2, sp
    2b60:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b62:	4905      	ldr	r1, [pc, #20]	; (2b78 <set_motor_speed_2_indication+0x48>)
    2b64:	4805      	ldr	r0, [pc, #20]	; (2b7c <set_motor_speed_2_indication+0x4c>)
    2b66:	f7fe fd11 	bl	158c <i2c_master_write_packet_wait>
    2b6a:	2800      	cmp	r0, #0
    2b6c:	d1f9      	bne.n	2b62 <set_motor_speed_2_indication+0x32>
	&packet)) != STATUS_OK) {
	}

}
    2b6e:	b003      	add	sp, #12
    2b70:	bd00      	pop	{pc}
    2b72:	46c0      	nop			; (mov r8, r8)
    2b74:	0000304c 	.word	0x0000304c
    2b78:	20000014 	.word	0x20000014
    2b7c:	2000021c 	.word	0x2000021c

00002b80 <set_motor_speed_3_indication>:

void set_motor_speed_3_indication(void){
    2b80:	b500      	push	{lr}
    2b82:	b083      	sub	sp, #12
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2b84:	aa01      	add	r2, sp, #4
    2b86:	4b0f      	ldr	r3, [pc, #60]	; (2bc4 <set_motor_speed_3_indication+0x44>)
    2b88:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2b8a:	8011      	strh	r1, [r2, #0]
	uint8_t buffer_set_blue_high_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_HIGH_BRIGTHNESS;
    2b8c:	2144      	movs	r1, #68	; 0x44
    2b8e:	5a5b      	ldrh	r3, [r3, r1]
    2b90:	4669      	mov	r1, sp
    2b92:	800b      	strh	r3, [r1, #0]

	packet.address = KTD2026_DEVICE_ADDRESS;
    2b94:	4b0c      	ldr	r3, [pc, #48]	; (2bc8 <set_motor_speed_3_indication+0x48>)
    2b96:	2131      	movs	r1, #49	; 0x31
    2b98:	8019      	strh	r1, [r3, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    2b9a:	392f      	subs	r1, #47	; 0x2f
    2b9c:	8059      	strh	r1, [r3, #2]

	packet.data = buffer_set_blue;
    2b9e:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2ba0:	4909      	ldr	r1, [pc, #36]	; (2bc8 <set_motor_speed_3_indication+0x48>)
    2ba2:	480a      	ldr	r0, [pc, #40]	; (2bcc <set_motor_speed_3_indication+0x4c>)
    2ba4:	f7fe fcf2 	bl	158c <i2c_master_write_packet_wait>
    2ba8:	2800      	cmp	r0, #0
    2baa:	d1f9      	bne.n	2ba0 <set_motor_speed_3_indication+0x20>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_high_brightness;
    2bac:	4b06      	ldr	r3, [pc, #24]	; (2bc8 <set_motor_speed_3_indication+0x48>)
    2bae:	466a      	mov	r2, sp
    2bb0:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2bb2:	4905      	ldr	r1, [pc, #20]	; (2bc8 <set_motor_speed_3_indication+0x48>)
    2bb4:	4805      	ldr	r0, [pc, #20]	; (2bcc <set_motor_speed_3_indication+0x4c>)
    2bb6:	f7fe fce9 	bl	158c <i2c_master_write_packet_wait>
    2bba:	2800      	cmp	r0, #0
    2bbc:	d1f9      	bne.n	2bb2 <set_motor_speed_3_indication+0x32>
	&packet)) != STATUS_OK) {
	}
}
    2bbe:	b003      	add	sp, #12
    2bc0:	bd00      	pop	{pc}
    2bc2:	46c0      	nop			; (mov r8, r8)
    2bc4:	0000304c 	.word	0x0000304c
    2bc8:	20000014 	.word	0x20000014
    2bcc:	2000021c 	.word	0x2000021c

00002bd0 <set_motor_pulsating_indication>:

void set_motor_pulsating_indication(void){
    2bd0:	b500      	push	{lr}
    2bd2:	b085      	sub	sp, #20
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2bd4:	aa03      	add	r2, sp, #12
    2bd6:	4b1b      	ldr	r3, [pc, #108]	; (2c44 <set_motor_pulsating_indication+0x74>)
    2bd8:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2bda:	8011      	strh	r1, [r2, #0]
	uint8_t buffer_set_blue_high_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_HIGH_BRIGTHNESS;
    2bdc:	2144      	movs	r1, #68	; 0x44
    2bde:	5a58      	ldrh	r0, [r3, r1]
    2be0:	a902      	add	r1, sp, #8
    2be2:	8008      	strh	r0, [r1, #0]
	uint8_t buffer_set_blue_pwm_timer[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM_TIMER;
    2be4:	2148      	movs	r1, #72	; 0x48
    2be6:	5a58      	ldrh	r0, [r3, r1]
    2be8:	a901      	add	r1, sp, #4
    2bea:	8008      	strh	r0, [r1, #0]
	uint8_t buffer_set_blue_pwm_flash[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM_FLASH;
    2bec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2bee:	4669      	mov	r1, sp
    2bf0:	800b      	strh	r3, [r1, #0]


	packet.address = KTD2026_DEVICE_ADDRESS;
    2bf2:	4b15      	ldr	r3, [pc, #84]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2bf4:	2131      	movs	r1, #49	; 0x31
    2bf6:	8019      	strh	r1, [r3, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    2bf8:	392f      	subs	r1, #47	; 0x2f
    2bfa:	8059      	strh	r1, [r3, #2]

	packet.data = buffer_set_blue;
    2bfc:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2bfe:	4912      	ldr	r1, [pc, #72]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c00:	4812      	ldr	r0, [pc, #72]	; (2c4c <set_motor_pulsating_indication+0x7c>)
    2c02:	f7fe fcc3 	bl	158c <i2c_master_write_packet_wait>
    2c06:	2800      	cmp	r0, #0
    2c08:	d1f9      	bne.n	2bfe <set_motor_pulsating_indication+0x2e>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_high_brightness;
    2c0a:	aa02      	add	r2, sp, #8
    2c0c:	4b0e      	ldr	r3, [pc, #56]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c0e:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2c10:	490d      	ldr	r1, [pc, #52]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c12:	480e      	ldr	r0, [pc, #56]	; (2c4c <set_motor_pulsating_indication+0x7c>)
    2c14:	f7fe fcba 	bl	158c <i2c_master_write_packet_wait>
    2c18:	2800      	cmp	r0, #0
    2c1a:	d1f9      	bne.n	2c10 <set_motor_pulsating_indication+0x40>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_pwm_timer;
    2c1c:	aa01      	add	r2, sp, #4
    2c1e:	4b0a      	ldr	r3, [pc, #40]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c20:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2c22:	4909      	ldr	r1, [pc, #36]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c24:	4809      	ldr	r0, [pc, #36]	; (2c4c <set_motor_pulsating_indication+0x7c>)
    2c26:	f7fe fcb1 	bl	158c <i2c_master_write_packet_wait>
    2c2a:	2800      	cmp	r0, #0
    2c2c:	d1f9      	bne.n	2c22 <set_motor_pulsating_indication+0x52>
	&packet)) != STATUS_OK) {
	}
	
	packet.data = buffer_set_blue_pwm_flash;
    2c2e:	4b06      	ldr	r3, [pc, #24]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c30:	466a      	mov	r2, sp
    2c32:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2c34:	4904      	ldr	r1, [pc, #16]	; (2c48 <set_motor_pulsating_indication+0x78>)
    2c36:	4805      	ldr	r0, [pc, #20]	; (2c4c <set_motor_pulsating_indication+0x7c>)
    2c38:	f7fe fca8 	bl	158c <i2c_master_write_packet_wait>
    2c3c:	2800      	cmp	r0, #0
    2c3e:	d1f9      	bne.n	2c34 <set_motor_pulsating_indication+0x64>
	&packet)) != STATUS_OK) {
	}

}
    2c40:	b005      	add	sp, #20
    2c42:	bd00      	pop	{pc}
    2c44:	0000304c 	.word	0x0000304c
    2c48:	20000014 	.word	0x20000014
    2c4c:	2000021c 	.word	0x2000021c

00002c50 <i2c_master_setup>:


void i2c_master_setup(void) {
    2c50:	b530      	push	{r4, r5, lr}
    2c52:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2c54:	aa01      	add	r2, sp, #4
    2c56:	2364      	movs	r3, #100	; 0x64
    2c58:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2c5a:	4b1f      	ldr	r3, [pc, #124]	; (2cd8 <i2c_master_setup+0x88>)
    2c5c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2c5e:	2300      	movs	r3, #0
    2c60:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2c62:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2c64:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2c66:	2180      	movs	r1, #128	; 0x80
    2c68:	0389      	lsls	r1, r1, #14
    2c6a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2c6c:	2101      	movs	r1, #1
    2c6e:	4249      	negs	r1, r1
    2c70:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2c72:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2c74:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    2c76:	3125      	adds	r1, #37	; 0x25
    2c78:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2c7a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2c7c:	3108      	adds	r1, #8
    2c7e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2c80:	3101      	adds	r1, #1
    2c82:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2c84:	3101      	adds	r1, #1
    2c86:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2c88:	33d7      	adds	r3, #215	; 0xd7
    2c8a:	8613      	strh	r3, [r2, #48]	; 0x30
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
    2c8c:	4b13      	ldr	r3, [pc, #76]	; (2cdc <i2c_master_setup+0x8c>)
    2c8e:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    2c90:	4d13      	ldr	r5, [pc, #76]	; (2ce0 <i2c_master_setup+0x90>)
    2c92:	4914      	ldr	r1, [pc, #80]	; (2ce4 <i2c_master_setup+0x94>)
    2c94:	0028      	movs	r0, r5
    2c96:	f7fe fb7d 	bl	1394 <i2c_master_init>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2c9a:	682c      	ldr	r4, [r5, #0]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2c9c:	0028      	movs	r0, r5
    2c9e:	f7ff fe51 	bl	2944 <_i2c_master_wait_for_sync>

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2ca2:	6823      	ldr	r3, [r4, #0]
    2ca4:	2202      	movs	r2, #2
    2ca6:	4313      	orrs	r3, r2
    2ca8:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2caa:	6828      	ldr	r0, [r5, #0]
    2cac:	f7fe fe86 	bl	19bc <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2cb0:	231f      	movs	r3, #31
    2cb2:	4018      	ands	r0, r3
    2cb4:	3b1e      	subs	r3, #30
    2cb6:	4083      	lsls	r3, r0
    2cb8:	4a0b      	ldr	r2, [pc, #44]	; (2ce8 <i2c_master_setup+0x98>)
    2cba:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    2cbc:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2cbe:	8b62      	ldrh	r2, [r4, #26]
    2cc0:	06d2      	lsls	r2, r2, #27
    2cc2:	d406      	bmi.n	2cd2 <i2c_master_setup+0x82>
		timeout_counter++;
    2cc4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2cc6:	4a06      	ldr	r2, [pc, #24]	; (2ce0 <i2c_master_setup+0x90>)
    2cc8:	88d2      	ldrh	r2, [r2, #6]
    2cca:	4293      	cmp	r3, r2
    2ccc:	d3f7      	bcc.n	2cbe <i2c_master_setup+0x6e>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2cce:	2310      	movs	r3, #16
    2cd0:	8363      	strh	r3, [r4, #26]
  i2c_master_enable(&i2c_master_instance);
}
    2cd2:	b00f      	add	sp, #60	; 0x3c
    2cd4:	bd30      	pop	{r4, r5, pc}
    2cd6:	46c0      	nop			; (mov r8, r8)
    2cd8:	00000d48 	.word	0x00000d48
    2cdc:	00002710 	.word	0x00002710
    2ce0:	2000021c 	.word	0x2000021c
    2ce4:	42001000 	.word	0x42001000
    2ce8:	e000e100 	.word	0xe000e100

00002cec <main>:
#include "system_logic.h"

#include "adc_sample.h"


int main(void) {
    2cec:	b510      	push	{r4, lr}
  startup_sys_configs();
    2cee:	f7fe fa0f 	bl	1110 <startup_sys_configs>
  while (true) {
    system_state();										// Get latest system_state
    2cf2:	f7fe fa79 	bl	11e8 <system_state>
    system_logic();										// Invoke System Logic
    2cf6:	f7fe f891 	bl	e1c <system_logic>
    2cfa:	e7fa      	b.n	2cf2 <main+0x6>

00002cfc <__udivsi3>:
    2cfc:	2200      	movs	r2, #0
    2cfe:	0843      	lsrs	r3, r0, #1
    2d00:	428b      	cmp	r3, r1
    2d02:	d374      	bcc.n	2dee <__udivsi3+0xf2>
    2d04:	0903      	lsrs	r3, r0, #4
    2d06:	428b      	cmp	r3, r1
    2d08:	d35f      	bcc.n	2dca <__udivsi3+0xce>
    2d0a:	0a03      	lsrs	r3, r0, #8
    2d0c:	428b      	cmp	r3, r1
    2d0e:	d344      	bcc.n	2d9a <__udivsi3+0x9e>
    2d10:	0b03      	lsrs	r3, r0, #12
    2d12:	428b      	cmp	r3, r1
    2d14:	d328      	bcc.n	2d68 <__udivsi3+0x6c>
    2d16:	0c03      	lsrs	r3, r0, #16
    2d18:	428b      	cmp	r3, r1
    2d1a:	d30d      	bcc.n	2d38 <__udivsi3+0x3c>
    2d1c:	22ff      	movs	r2, #255	; 0xff
    2d1e:	0209      	lsls	r1, r1, #8
    2d20:	ba12      	rev	r2, r2
    2d22:	0c03      	lsrs	r3, r0, #16
    2d24:	428b      	cmp	r3, r1
    2d26:	d302      	bcc.n	2d2e <__udivsi3+0x32>
    2d28:	1212      	asrs	r2, r2, #8
    2d2a:	0209      	lsls	r1, r1, #8
    2d2c:	d065      	beq.n	2dfa <__udivsi3+0xfe>
    2d2e:	0b03      	lsrs	r3, r0, #12
    2d30:	428b      	cmp	r3, r1
    2d32:	d319      	bcc.n	2d68 <__udivsi3+0x6c>
    2d34:	e000      	b.n	2d38 <__udivsi3+0x3c>
    2d36:	0a09      	lsrs	r1, r1, #8
    2d38:	0bc3      	lsrs	r3, r0, #15
    2d3a:	428b      	cmp	r3, r1
    2d3c:	d301      	bcc.n	2d42 <__udivsi3+0x46>
    2d3e:	03cb      	lsls	r3, r1, #15
    2d40:	1ac0      	subs	r0, r0, r3
    2d42:	4152      	adcs	r2, r2
    2d44:	0b83      	lsrs	r3, r0, #14
    2d46:	428b      	cmp	r3, r1
    2d48:	d301      	bcc.n	2d4e <__udivsi3+0x52>
    2d4a:	038b      	lsls	r3, r1, #14
    2d4c:	1ac0      	subs	r0, r0, r3
    2d4e:	4152      	adcs	r2, r2
    2d50:	0b43      	lsrs	r3, r0, #13
    2d52:	428b      	cmp	r3, r1
    2d54:	d301      	bcc.n	2d5a <__udivsi3+0x5e>
    2d56:	034b      	lsls	r3, r1, #13
    2d58:	1ac0      	subs	r0, r0, r3
    2d5a:	4152      	adcs	r2, r2
    2d5c:	0b03      	lsrs	r3, r0, #12
    2d5e:	428b      	cmp	r3, r1
    2d60:	d301      	bcc.n	2d66 <__udivsi3+0x6a>
    2d62:	030b      	lsls	r3, r1, #12
    2d64:	1ac0      	subs	r0, r0, r3
    2d66:	4152      	adcs	r2, r2
    2d68:	0ac3      	lsrs	r3, r0, #11
    2d6a:	428b      	cmp	r3, r1
    2d6c:	d301      	bcc.n	2d72 <__udivsi3+0x76>
    2d6e:	02cb      	lsls	r3, r1, #11
    2d70:	1ac0      	subs	r0, r0, r3
    2d72:	4152      	adcs	r2, r2
    2d74:	0a83      	lsrs	r3, r0, #10
    2d76:	428b      	cmp	r3, r1
    2d78:	d301      	bcc.n	2d7e <__udivsi3+0x82>
    2d7a:	028b      	lsls	r3, r1, #10
    2d7c:	1ac0      	subs	r0, r0, r3
    2d7e:	4152      	adcs	r2, r2
    2d80:	0a43      	lsrs	r3, r0, #9
    2d82:	428b      	cmp	r3, r1
    2d84:	d301      	bcc.n	2d8a <__udivsi3+0x8e>
    2d86:	024b      	lsls	r3, r1, #9
    2d88:	1ac0      	subs	r0, r0, r3
    2d8a:	4152      	adcs	r2, r2
    2d8c:	0a03      	lsrs	r3, r0, #8
    2d8e:	428b      	cmp	r3, r1
    2d90:	d301      	bcc.n	2d96 <__udivsi3+0x9a>
    2d92:	020b      	lsls	r3, r1, #8
    2d94:	1ac0      	subs	r0, r0, r3
    2d96:	4152      	adcs	r2, r2
    2d98:	d2cd      	bcs.n	2d36 <__udivsi3+0x3a>
    2d9a:	09c3      	lsrs	r3, r0, #7
    2d9c:	428b      	cmp	r3, r1
    2d9e:	d301      	bcc.n	2da4 <__udivsi3+0xa8>
    2da0:	01cb      	lsls	r3, r1, #7
    2da2:	1ac0      	subs	r0, r0, r3
    2da4:	4152      	adcs	r2, r2
    2da6:	0983      	lsrs	r3, r0, #6
    2da8:	428b      	cmp	r3, r1
    2daa:	d301      	bcc.n	2db0 <__udivsi3+0xb4>
    2dac:	018b      	lsls	r3, r1, #6
    2dae:	1ac0      	subs	r0, r0, r3
    2db0:	4152      	adcs	r2, r2
    2db2:	0943      	lsrs	r3, r0, #5
    2db4:	428b      	cmp	r3, r1
    2db6:	d301      	bcc.n	2dbc <__udivsi3+0xc0>
    2db8:	014b      	lsls	r3, r1, #5
    2dba:	1ac0      	subs	r0, r0, r3
    2dbc:	4152      	adcs	r2, r2
    2dbe:	0903      	lsrs	r3, r0, #4
    2dc0:	428b      	cmp	r3, r1
    2dc2:	d301      	bcc.n	2dc8 <__udivsi3+0xcc>
    2dc4:	010b      	lsls	r3, r1, #4
    2dc6:	1ac0      	subs	r0, r0, r3
    2dc8:	4152      	adcs	r2, r2
    2dca:	08c3      	lsrs	r3, r0, #3
    2dcc:	428b      	cmp	r3, r1
    2dce:	d301      	bcc.n	2dd4 <__udivsi3+0xd8>
    2dd0:	00cb      	lsls	r3, r1, #3
    2dd2:	1ac0      	subs	r0, r0, r3
    2dd4:	4152      	adcs	r2, r2
    2dd6:	0883      	lsrs	r3, r0, #2
    2dd8:	428b      	cmp	r3, r1
    2dda:	d301      	bcc.n	2de0 <__udivsi3+0xe4>
    2ddc:	008b      	lsls	r3, r1, #2
    2dde:	1ac0      	subs	r0, r0, r3
    2de0:	4152      	adcs	r2, r2
    2de2:	0843      	lsrs	r3, r0, #1
    2de4:	428b      	cmp	r3, r1
    2de6:	d301      	bcc.n	2dec <__udivsi3+0xf0>
    2de8:	004b      	lsls	r3, r1, #1
    2dea:	1ac0      	subs	r0, r0, r3
    2dec:	4152      	adcs	r2, r2
    2dee:	1a41      	subs	r1, r0, r1
    2df0:	d200      	bcs.n	2df4 <__udivsi3+0xf8>
    2df2:	4601      	mov	r1, r0
    2df4:	4152      	adcs	r2, r2
    2df6:	4610      	mov	r0, r2
    2df8:	4770      	bx	lr
    2dfa:	e7ff      	b.n	2dfc <__udivsi3+0x100>
    2dfc:	b501      	push	{r0, lr}
    2dfe:	2000      	movs	r0, #0
    2e00:	f000 f806 	bl	2e10 <__aeabi_idiv0>
    2e04:	bd02      	pop	{r1, pc}
    2e06:	46c0      	nop			; (mov r8, r8)

00002e08 <__aeabi_uidivmod>:
    2e08:	2900      	cmp	r1, #0
    2e0a:	d0f7      	beq.n	2dfc <__udivsi3+0x100>
    2e0c:	e776      	b.n	2cfc <__udivsi3>
    2e0e:	4770      	bx	lr

00002e10 <__aeabi_idiv0>:
    2e10:	4770      	bx	lr
    2e12:	46c0      	nop			; (mov r8, r8)

00002e14 <__libc_init_array>:
    2e14:	b570      	push	{r4, r5, r6, lr}
    2e16:	2600      	movs	r6, #0
    2e18:	4d0c      	ldr	r5, [pc, #48]	; (2e4c <__libc_init_array+0x38>)
    2e1a:	4c0d      	ldr	r4, [pc, #52]	; (2e50 <__libc_init_array+0x3c>)
    2e1c:	1b64      	subs	r4, r4, r5
    2e1e:	10a4      	asrs	r4, r4, #2
    2e20:	42a6      	cmp	r6, r4
    2e22:	d109      	bne.n	2e38 <__libc_init_array+0x24>
    2e24:	2600      	movs	r6, #0
    2e26:	f000 f937 	bl	3098 <_init>
    2e2a:	4d0a      	ldr	r5, [pc, #40]	; (2e54 <__libc_init_array+0x40>)
    2e2c:	4c0a      	ldr	r4, [pc, #40]	; (2e58 <__libc_init_array+0x44>)
    2e2e:	1b64      	subs	r4, r4, r5
    2e30:	10a4      	asrs	r4, r4, #2
    2e32:	42a6      	cmp	r6, r4
    2e34:	d105      	bne.n	2e42 <__libc_init_array+0x2e>
    2e36:	bd70      	pop	{r4, r5, r6, pc}
    2e38:	00b3      	lsls	r3, r6, #2
    2e3a:	58eb      	ldr	r3, [r5, r3]
    2e3c:	4798      	blx	r3
    2e3e:	3601      	adds	r6, #1
    2e40:	e7ee      	b.n	2e20 <__libc_init_array+0xc>
    2e42:	00b3      	lsls	r3, r6, #2
    2e44:	58eb      	ldr	r3, [r5, r3]
    2e46:	4798      	blx	r3
    2e48:	3601      	adds	r6, #1
    2e4a:	e7f2      	b.n	2e32 <__libc_init_array+0x1e>
    2e4c:	000030a4 	.word	0x000030a4
    2e50:	000030a4 	.word	0x000030a4
    2e54:	000030a4 	.word	0x000030a4
    2e58:	000030a8 	.word	0x000030a8

00002e5c <memcpy>:
    2e5c:	2300      	movs	r3, #0
    2e5e:	b510      	push	{r4, lr}
    2e60:	429a      	cmp	r2, r3
    2e62:	d100      	bne.n	2e66 <memcpy+0xa>
    2e64:	bd10      	pop	{r4, pc}
    2e66:	5ccc      	ldrb	r4, [r1, r3]
    2e68:	54c4      	strb	r4, [r0, r3]
    2e6a:	3301      	adds	r3, #1
    2e6c:	e7f8      	b.n	2e60 <memcpy+0x4>
    2e6e:	0000      	movs	r0, r0
    2e70:	00000368 	.word	0x00000368
    2e74:	0000061a 	.word	0x0000061a
    2e78:	0000061a 	.word	0x0000061a
    2e7c:	0000061a 	.word	0x0000061a
    2e80:	0000061a 	.word	0x0000061a
    2e84:	0000061a 	.word	0x0000061a
    2e88:	0000061a 	.word	0x0000061a
    2e8c:	0000061a 	.word	0x0000061a
    2e90:	0000061a 	.word	0x0000061a
    2e94:	0000061a 	.word	0x0000061a
    2e98:	0000061a 	.word	0x0000061a
    2e9c:	0000061a 	.word	0x0000061a
    2ea0:	0000061a 	.word	0x0000061a
    2ea4:	0000061a 	.word	0x0000061a
    2ea8:	0000061a 	.word	0x0000061a
    2eac:	0000061a 	.word	0x0000061a
    2eb0:	00000350 	.word	0x00000350
    2eb4:	0000061a 	.word	0x0000061a
    2eb8:	0000061a 	.word	0x0000061a
    2ebc:	0000061a 	.word	0x0000061a
    2ec0:	0000061a 	.word	0x0000061a
    2ec4:	0000061a 	.word	0x0000061a
    2ec8:	0000061a 	.word	0x0000061a
    2ecc:	0000061a 	.word	0x0000061a
    2ed0:	0000061a 	.word	0x0000061a
    2ed4:	0000061a 	.word	0x0000061a
    2ed8:	0000061a 	.word	0x0000061a
    2edc:	0000061a 	.word	0x0000061a
    2ee0:	0000061a 	.word	0x0000061a
    2ee4:	0000061a 	.word	0x0000061a
    2ee8:	0000061a 	.word	0x0000061a
    2eec:	0000061a 	.word	0x0000061a
    2ef0:	00000360 	.word	0x00000360
    2ef4:	0000061a 	.word	0x0000061a
    2ef8:	0000061a 	.word	0x0000061a
    2efc:	0000061a 	.word	0x0000061a
    2f00:	0000061a 	.word	0x0000061a
    2f04:	0000061a 	.word	0x0000061a
    2f08:	0000061a 	.word	0x0000061a
    2f0c:	0000061a 	.word	0x0000061a
    2f10:	0000061a 	.word	0x0000061a
    2f14:	0000061a 	.word	0x0000061a
    2f18:	0000061a 	.word	0x0000061a
    2f1c:	0000061a 	.word	0x0000061a
    2f20:	0000061a 	.word	0x0000061a
    2f24:	0000061a 	.word	0x0000061a
    2f28:	0000061a 	.word	0x0000061a
    2f2c:	0000061a 	.word	0x0000061a
    2f30:	00000358 	.word	0x00000358
    2f34:	00000338 	.word	0x00000338
    2f38:	00000370 	.word	0x00000370
    2f3c:	00000348 	.word	0x00000348
    2f40:	00000340 	.word	0x00000340
    2f44:	00000002 	.word	0x00000002
    2f48:	00000003 	.word	0x00000003
    2f4c:	00000004 	.word	0x00000004
    2f50:	00000005 	.word	0x00000005
    2f54:	00000006 	.word	0x00000006
    2f58:	00000007 	.word	0x00000007
    2f5c:	0000000e 	.word	0x0000000e
    2f60:	0000000f 	.word	0x0000000f
    2f64:	0000000a 	.word	0x0000000a
    2f68:	0000000b 	.word	0x0000000b
    2f6c:	0000ffff 	.word	0x0000ffff
    2f70:	0000ffff 	.word	0x0000ffff
    2f74:	0000ffff 	.word	0x0000ffff
    2f78:	0000ffff 	.word	0x0000ffff
    2f7c:	0000ffff 	.word	0x0000ffff
    2f80:	0000ffff 	.word	0x0000ffff
    2f84:	0000ffff 	.word	0x0000ffff
    2f88:	0000ffff 	.word	0x0000ffff
    2f8c:	0000ffff 	.word	0x0000ffff
    2f90:	0000ffff 	.word	0x0000ffff
    2f94:	000009a6 	.word	0x000009a6
    2f98:	000009b0 	.word	0x000009b0
    2f9c:	000009ba 	.word	0x000009ba
    2fa0:	000009c4 	.word	0x000009c4
    2fa4:	000009ce 	.word	0x000009ce
    2fa8:	000009e0 	.word	0x000009e0
    2fac:	000009f2 	.word	0x000009f2

00002fb0 <tc_interrupt_vectors.12581>:
    2fb0:	00000e0d 42000800 42000c00 42001000     .......B...B...B
    2fc0:	000b0a09 00001a40 00001a9c 00001a9c     ....@...........
    2fd0:	00001a3a 00001a3a 00001a54 00001a46     :...:...T...F...
    2fe0:	00001a5a 00001a8c 00001b24 00001b92     Z.......$.......
    2ff0:	00001b92 00001b04 00001b16 00001b34     ............4...
    3000:	00001b08 00001b44 00001b80              ....D.......

0000300c <_tcc_intflag>:
    300c:	00000001 00000002 00000004 00000008     ................
    301c:	00001000 00002000 00004000 00008000     ..... ...@......
    302c:	00010000 00020000 00040000 00080000     ................
    303c:	42001800 42001c00 00001212 00800040     ...B...B....@...
    304c:	00000404 00000104 00001004 00000504     ................
    305c:	00001404 00001504 00000804 00002501     .............%..
    306c:	0000ef05 00001c02 00000204 00008201     ................
    307c:	00003202 00000506 00002004 00000308     .2....... ......
    308c:	00000908 00001508 00001902              ............

00003098 <_init>:
    3098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    309a:	46c0      	nop			; (mov r8, r8)
    309c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    309e:	bc08      	pop	{r3}
    30a0:	469e      	mov	lr, r3
    30a2:	4770      	bx	lr

000030a4 <__init_array_start>:
    30a4:	000000b5 	.word	0x000000b5

000030a8 <_fini>:
    30a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30aa:	46c0      	nop			; (mov r8, r8)
    30ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    30ae:	bc08      	pop	{r3}
    30b0:	469e      	mov	lr, r3
    30b2:	4770      	bx	lr

000030b4 <__fini_array_start>:
    30b4:	0000008d 	.word	0x0000008d
