
micro_needle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028e0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  000028e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000023c  20000020  00002900  00020020  2**2
                  ALLOC
  3 .stack        00000404  2000025c  00002b3c  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00057b8d  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000060c8  00000000  00000000  00077c30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006d01  00000000  00000000  0007dcf8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000898  00000000  00000000  000849f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000de0  00000000  00000000  00085291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b439  00000000  00000000  00086071  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001553c  00000000  00000000  000a14aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007d378  00000000  00000000  000b69e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014e4  00000000  00000000  00133d60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	60 06 00 20 59 23 00 00 57 23 00 00 57 23 00 00     `.. Y#..W#..W#..
	...
      2c:	57 23 00 00 00 00 00 00 00 00 00 00 57 23 00 00     W#..........W#..
      3c:	57 23 00 00 57 23 00 00 57 23 00 00 57 23 00 00     W#..W#..W#..W#..
      4c:	57 23 00 00 39 05 00 00 57 23 00 00 57 23 00 00     W#..9...W#..W#..
      5c:	57 23 00 00 57 23 00 00 d5 16 00 00 e5 16 00 00     W#..W#..........
      6c:	f5 16 00 00 21 20 00 00 ad 20 00 00 b7 20 00 00     ....! ... ... ..
      7c:	57 23 00 00 57 23 00 00 57 23 00 00 57 23 00 00     W#..W#..W#..W#..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	000028e0 	.word	0x000028e0

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	000028e0 	.word	0x000028e0
      e4:	000028e0 	.word	0x000028e0
      e8:	00000000 	.word	0x00000000

000000ec <adc_get_status.isra.1>:
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
      ec:	7e03      	ldrb	r3, [r0, #24]
      ee:	2001      	movs	r0, #1
      f0:	b2db      	uxtb	r3, r3
      f2:	4018      	ands	r0, r3
      f4:	2202      	movs	r2, #2
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
      f6:	0759      	lsls	r1, r3, #29
      f8:	d500      	bpl.n	fc <adc_get_status.isra.1+0x10>
		status_flags |= ADC_STATUS_WINDOW;
      fa:	4310      	orrs	r0, r2
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
      fc:	4213      	tst	r3, r2
      fe:	d001      	beq.n	104 <adc_get_status.isra.1+0x18>
		status_flags |= ADC_STATUS_OVERRUN;
     100:	2304      	movs	r3, #4
     102:	4318      	orrs	r0, r3
	}

	return status_flags;
}
     104:	4770      	bx	lr
	...

00000108 <configure_adc>:

#include <adc_sample.h>

uint16_t adc_result;

void configure_adc(void) {
     108:	b510      	push	{r4, lr}
     10a:	b08c      	sub	sp, #48	; 0x30
  struct adc_config config_adc;
  adc_get_config_defaults(&config_adc);
     10c:	4668      	mov	r0, sp
     10e:	f000 f865 	bl	1dc <adc_get_config_defaults>
  adc_init(&adc_instance, ADC, &config_adc);
     112:	4c0c      	ldr	r4, [pc, #48]	; (144 <configure_adc+0x3c>)
     114:	466a      	mov	r2, sp
     116:	490c      	ldr	r1, [pc, #48]	; (148 <configure_adc+0x40>)
     118:	0020      	movs	r0, r4
     11a:	f000 f881 	bl	220 <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     11e:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     120:	7e5a      	ldrb	r2, [r3, #25]
     122:	b252      	sxtb	r2, r2
     124:	2a00      	cmp	r2, #0
     126:	dbfb      	blt.n	120 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     128:	220f      	movs	r2, #15
     12a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     12c:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     12e:	7819      	ldrb	r1, [r3, #0]
     130:	3a0d      	subs	r2, #13
     132:	430a      	orrs	r2, r1
     134:	701a      	strb	r2, [r3, #0]
     136:	6822      	ldr	r2, [r4, #0]
     138:	7e53      	ldrb	r3, [r2, #25]
     13a:	b25b      	sxtb	r3, r3
     13c:	2b00      	cmp	r3, #0
     13e:	dbfb      	blt.n	138 <configure_adc+0x30>
  adc_enable(&adc_instance);
}
     140:	b00c      	add	sp, #48	; 0x30
     142:	bd10      	pop	{r4, pc}
     144:	200000a4 	.word	0x200000a4
     148:	42002000 	.word	0x42002000

0000014c <sample_adc>:

void sample_adc(void) {
     14c:	b570      	push	{r4, r5, r6, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14e:	4c13      	ldr	r4, [pc, #76]	; (19c <sample_adc+0x50>)
     150:	6823      	ldr	r3, [r4, #0]
     152:	7e5a      	ldrb	r2, [r3, #25]
     154:	b252      	sxtb	r2, r2
     156:	2a00      	cmp	r2, #0
     158:	dbfb      	blt.n	152 <sample_adc+0x6>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     15a:	2202      	movs	r2, #2
     15c:	7b19      	ldrb	r1, [r3, #12]
     15e:	430a      	orrs	r2, r1
     160:	731a      	strb	r2, [r3, #12]
     162:	7e5a      	ldrb	r2, [r3, #25]
     164:	b252      	sxtb	r2, r2
     166:	2a00      	cmp	r2, #0
     168:	dbfb      	blt.n	162 <sample_adc+0x16>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     16a:	2501      	movs	r5, #1
     16c:	6820      	ldr	r0, [r4, #0]
     16e:	f7ff ffbd 	bl	ec <adc_get_status.isra.1>
     172:	4228      	tst	r0, r5
     174:	d0fa      	beq.n	16c <sample_adc+0x20>
		/* Result not ready */
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;
     176:	6820      	ldr	r0, [r4, #0]
     178:	7e43      	ldrb	r3, [r0, #25]
     17a:	b25b      	sxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	dbfb      	blt.n	178 <sample_adc+0x2c>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     180:	8b42      	ldrh	r2, [r0, #26]
     182:	4b07      	ldr	r3, [pc, #28]	; (1a0 <sample_adc+0x54>)
     184:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     186:	2301      	movs	r3, #1
     188:	7603      	strb	r3, [r0, #24]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     18a:	f7ff ffaf 	bl	ec <adc_get_status.isra.1>
     18e:	0743      	lsls	r3, r0, #29
     190:	d502      	bpl.n	198 <sample_adc+0x4c>
	adc_module->INTFLAG.reg = int_flags;
     192:	2202      	movs	r2, #2
     194:	6823      	ldr	r3, [r4, #0]
     196:	761a      	strb	r2, [r3, #24]
  adc_start_conversion(&adc_instance);
  do {
  } while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     198:	bd70      	pop	{r4, r5, r6, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	200000a4 	.word	0x200000a4
     1a0:	200000a0 	.word	0x200000a0

000001a4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     1a4:	b530      	push	{r4, r5, lr}
     1a6:	b097      	sub	sp, #92	; 0x5c
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1a8:	ad02      	add	r5, sp, #8
{
     1aa:	0004      	movs	r4, r0
	const uint32_t pinmapping[] = {
     1ac:	2250      	movs	r2, #80	; 0x50
     1ae:	490a      	ldr	r1, [pc, #40]	; (1d8 <_adc_configure_ain_pin+0x34>)
     1b0:	0028      	movs	r0, r5
     1b2:	f002 fb1f 	bl	27f4 <memcpy>
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     1b6:	2c09      	cmp	r4, #9
     1b8:	d80b      	bhi.n	1d2 <_adc_configure_ain_pin+0x2e>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1ba:	2300      	movs	r3, #0
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1bc:	00a4      	lsls	r4, r4, #2
     1be:	5960      	ldr	r0, [r4, r5]
     1c0:	a901      	add	r1, sp, #4
     1c2:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1c4:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     1c6:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
     1c8:	b2c0      	uxtb	r0, r0
		config.mux_position = 1;
     1ca:	3301      	adds	r3, #1
     1cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     1ce:	f001 fce9 	bl	1ba4 <system_pinmux_pin_set_config>
	}
}
     1d2:	b017      	add	sp, #92	; 0x5c
     1d4:	bd30      	pop	{r4, r5, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	00002808 	.word	0x00002808

000001dc <adc_get_config_defaults>:
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1dc:	22c0      	movs	r2, #192	; 0xc0
     1de:	0152      	lsls	r2, r2, #5
     1e0:	81c2      	strh	r2, [r0, #14]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e2:	0002      	movs	r2, r0
	config->clock_source                  = GCLK_GENERATOR_0;
     1e4:	2300      	movs	r3, #0
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e6:	322a      	adds	r2, #42	; 0x2a
	config->clock_source                  = GCLK_GENERATOR_0;
     1e8:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1ea:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1ec:	8043      	strh	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1ee:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1f0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1f2:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     1f4:	61c3      	str	r3, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1f6:	6083      	str	r3, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1f8:	7303      	strb	r3, [r0, #12]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1fa:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1fc:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1fe:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     200:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     202:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     204:	7013      	strb	r3, [r2, #0]
	config->correction.correction_enable  = false;
     206:	1d42      	adds	r2, r0, #5
	config->run_in_standby                = false;
     208:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     20a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     20c:	77d3      	strb	r3, [r2, #31]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     20e:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     210:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     212:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     214:	3226      	adds	r2, #38	; 0x26
	config->pin_scan.inputs_to_scan       = 0;
     216:	302c      	adds	r0, #44	; 0x2c
	config->pin_scan.offset_start_scan    = 0;
     218:	7013      	strb	r3, [r2, #0]
	config->pin_scan.inputs_to_scan       = 0;
     21a:	7003      	strb	r3, [r0, #0]
}
     21c:	4770      	bx	lr
	...

00000220 <adc_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     220:	2380      	movs	r3, #128	; 0x80
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     222:	b5f0      	push	{r4, r5, r6, r7, lr}
     224:	0014      	movs	r4, r2
     226:	4aab      	ldr	r2, [pc, #684]	; (4d4 <STACK_SIZE+0xd4>)
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     228:	6001      	str	r1, [r0, #0]
{
     22a:	0007      	movs	r7, r0
     22c:	6a10      	ldr	r0, [r2, #32]
     22e:	005b      	lsls	r3, r3, #1
     230:	4303      	orrs	r3, r0
     232:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     234:	780b      	ldrb	r3, [r1, #0]
{
     236:	b087      	sub	sp, #28
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     238:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     23a:	07db      	lsls	r3, r3, #31
     23c:	d500      	bpl.n	240 <adc_init+0x20>
     23e:	e0e5      	b.n	40c <STACK_SIZE+0xc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     240:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     242:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     244:	079b      	lsls	r3, r3, #30
     246:	d500      	bpl.n	24a <adc_init+0x2a>
     248:	e0e0      	b.n	40c <STACK_SIZE+0xc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     24a:	7863      	ldrb	r3, [r4, #1]
     24c:	713b      	strb	r3, [r7, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     24e:	2b00      	cmp	r3, #0
     250:	d104      	bne.n	25c <adc_init+0x3c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     252:	4aa1      	ldr	r2, [pc, #644]	; (4d8 <STACK_SIZE+0xd8>)
     254:	3304      	adds	r3, #4
     256:	6c11      	ldr	r1, [r2, #64]	; 0x40
     258:	430b      	orrs	r3, r1
     25a:	6413      	str	r3, [r2, #64]	; 0x40
	gclk_chan_conf.source_generator = config->clock_source;
     25c:	7823      	ldrb	r3, [r4, #0]
     25e:	a905      	add	r1, sp, #20
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     260:	2013      	movs	r0, #19
	gclk_chan_conf.source_generator = config->clock_source;
     262:	700b      	strb	r3, [r1, #0]
	Adc *const adc_module = module_inst->hw;
     264:	683d      	ldr	r5, [r7, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     266:	f001 fc3b 	bl	1ae0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     26a:	2013      	movs	r0, #19
     26c:	f001 fbfc 	bl	1a68 <system_gclk_chan_enable>
	if (config->pin_scan.inputs_to_scan != 0) {
     270:	0023      	movs	r3, r4
     272:	332c      	adds	r3, #44	; 0x2c
     274:	9302      	str	r3, [sp, #8]
     276:	781b      	ldrb	r3, [r3, #0]
     278:	7b22      	ldrb	r2, [r4, #12]
     27a:	9201      	str	r2, [sp, #4]
     27c:	2b00      	cmp	r3, #0
     27e:	d033      	beq.n	2e8 <adc_init+0xc8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     280:	0022      	movs	r2, r4
     282:	322b      	adds	r2, #43	; 0x2b
		uint8_t start_pin =
     284:	7816      	ldrb	r6, [r2, #0]
     286:	9a01      	ldr	r2, [sp, #4]
     288:	1996      	adds	r6, r2, r6
     28a:	b2f6      	uxtb	r6, r6
		uint8_t end_pin =
     28c:	199b      	adds	r3, r3, r6
     28e:	b2db      	uxtb	r3, r3
     290:	9303      	str	r3, [sp, #12]
     292:	9b01      	ldr	r3, [sp, #4]
     294:	1af0      	subs	r0, r6, r3
		while (start_pin < end_pin) {
     296:	9b03      	ldr	r3, [sp, #12]
     298:	b2c0      	uxtb	r0, r0
     29a:	42b3      	cmp	r3, r6
     29c:	d81b      	bhi.n	2d6 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     29e:	89e0      	ldrh	r0, [r4, #14]
     2a0:	f7ff ff80 	bl	1a4 <_adc_configure_ain_pin>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2a4:	7d63      	ldrb	r3, [r4, #21]
     2a6:	009b      	lsls	r3, r3, #2
     2a8:	b2db      	uxtb	r3, r3
     2aa:	702b      	strb	r3, [r5, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2ac:	7da3      	ldrb	r3, [r4, #22]
     2ae:	7862      	ldrb	r2, [r4, #1]
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	4313      	orrs	r3, r2
     2b4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2b6:	706b      	strb	r3, [r5, #1]
	switch (config->resolution) {
     2b8:	7923      	ldrb	r3, [r4, #4]
     2ba:	2b30      	cmp	r3, #48	; 0x30
     2bc:	d100      	bne.n	2c0 <adc_init+0xa0>
     2be:	e0b2      	b.n	426 <STACK_SIZE+0x26>
     2c0:	d816      	bhi.n	2f0 <adc_init+0xd0>
     2c2:	2b10      	cmp	r3, #16
     2c4:	d100      	bne.n	2c8 <adc_init+0xa8>
     2c6:	e0ab      	b.n	420 <STACK_SIZE+0x20>
     2c8:	2b20      	cmp	r3, #32
     2ca:	d100      	bne.n	2ce <adc_init+0xae>
     2cc:	e0ab      	b.n	426 <STACK_SIZE+0x26>
     2ce:	2b00      	cmp	r3, #0
     2d0:	d118      	bne.n	304 <adc_init+0xe4>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2d2:	001a      	movs	r2, r3
     2d4:	e0a5      	b.n	422 <STACK_SIZE+0x22>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2d6:	230f      	movs	r3, #15
     2d8:	4018      	ands	r0, r3
     2da:	7b23      	ldrb	r3, [r4, #12]
			start_pin++;
     2dc:	3601      	adds	r6, #1
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2de:	18c0      	adds	r0, r0, r3
     2e0:	f7ff ff60 	bl	1a4 <_adc_configure_ain_pin>
			start_pin++;
     2e4:	b2f6      	uxtb	r6, r6
     2e6:	e7d4      	b.n	292 <adc_init+0x72>
		_adc_configure_ain_pin(config->positive_input);
     2e8:	9801      	ldr	r0, [sp, #4]
     2ea:	f7ff ff5b 	bl	1a4 <_adc_configure_ain_pin>
     2ee:	e7d6      	b.n	29e <adc_init+0x7e>
	switch (config->resolution) {
     2f0:	2b32      	cmp	r3, #50	; 0x32
     2f2:	d009      	beq.n	308 <adc_init+0xe8>
     2f4:	d200      	bcs.n	2f8 <adc_init+0xd8>
     2f6:	e098      	b.n	42a <STACK_SIZE+0x2a>
     2f8:	2b33      	cmp	r3, #51	; 0x33
     2fa:	d100      	bne.n	2fe <adc_init+0xde>
     2fc:	e08c      	b.n	418 <STACK_SIZE+0x18>
     2fe:	2b34      	cmp	r3, #52	; 0x34
     300:	d100      	bne.n	304 <adc_init+0xe4>
     302:	e085      	b.n	410 <STACK_SIZE+0x10>
		return STATUS_ERR_INVALID_ARG;
     304:	2017      	movs	r0, #23
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     306:	e081      	b.n	40c <STACK_SIZE+0xc>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     308:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     30a:	2310      	movs	r3, #16
		adjres = ADC_DIVIDE_RESULT_4;
     30c:	2102      	movs	r1, #2
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     30e:	2070      	movs	r0, #112	; 0x70
     310:	0109      	lsls	r1, r1, #4
     312:	4001      	ands	r1, r0
     314:	430a      	orrs	r2, r1
     316:	70aa      	strb	r2, [r5, #2]
	if (config->sample_length > 63) {
     318:	7de2      	ldrb	r2, [r4, #23]
     31a:	2a3f      	cmp	r2, #63	; 0x3f
     31c:	d8f2      	bhi.n	304 <adc_init+0xe4>
		adc_module->SAMPCTRL.reg =
     31e:	70ea      	strb	r2, [r5, #3]
     320:	6839      	ldr	r1, [r7, #0]
     322:	7e4a      	ldrb	r2, [r1, #25]
     324:	b252      	sxtb	r2, r2
     326:	2a00      	cmp	r2, #0
     328:	dbfb      	blt.n	322 <adc_init+0x102>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32a:	8861      	ldrh	r1, [r4, #2]
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     32c:	7ce2      	ldrb	r2, [r4, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32e:	430a      	orrs	r2, r1
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     330:	1d61      	adds	r1, r4, #5
     332:	7fc8      	ldrb	r0, [r1, #31]
     334:	00c0      	lsls	r0, r0, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     336:	4302      	orrs	r2, r0
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     338:	7d20      	ldrb	r0, [r4, #20]
     33a:	0080      	lsls	r0, r0, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     33c:	4302      	orrs	r2, r0
     33e:	7ca0      	ldrb	r0, [r4, #18]
     340:	0040      	lsls	r0, r0, #1
     342:	4302      	orrs	r2, r0
     344:	431a      	orrs	r2, r3
	adc_module->CTRLB.reg =
     346:	80aa      	strh	r2, [r5, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     348:	7e22      	ldrb	r2, [r4, #24]
     34a:	4694      	mov	ip, r2
     34c:	2a00      	cmp	r2, #0
     34e:	d007      	beq.n	360 <adc_init+0x140>
		switch (resolution) {
     350:	2b10      	cmp	r3, #16
     352:	d100      	bne.n	356 <adc_init+0x136>
     354:	e0af      	b.n	4b6 <STACK_SIZE+0xb6>
     356:	d900      	bls.n	35a <adc_init+0x13a>
     358:	e069      	b.n	42e <STACK_SIZE+0x2e>
     35a:	2b00      	cmp	r3, #0
     35c:	d100      	bne.n	360 <adc_init+0x140>
     35e:	e09b      	b.n	498 <STACK_SIZE+0x98>
     360:	6838      	ldr	r0, [r7, #0]
     362:	7e43      	ldrb	r3, [r0, #25]
     364:	b25b      	sxtb	r3, r3
     366:	2b00      	cmp	r3, #0
     368:	dbfb      	blt.n	362 <adc_init+0x142>
	adc_module->WINCTRL.reg = config->window.window_mode;
     36a:	4663      	mov	r3, ip
     36c:	722b      	strb	r3, [r5, #8]
     36e:	683a      	ldr	r2, [r7, #0]
     370:	7e53      	ldrb	r3, [r2, #25]
     372:	b25b      	sxtb	r3, r3
     374:	2b00      	cmp	r3, #0
     376:	dbfb      	blt.n	370 <adc_init+0x150>
	adc_module->WINLT.reg =
     378:	8ba3      	ldrh	r3, [r4, #28]
     37a:	83ab      	strh	r3, [r5, #28]
     37c:	683a      	ldr	r2, [r7, #0]
     37e:	7e53      	ldrb	r3, [r2, #25]
     380:	b25b      	sxtb	r3, r3
     382:	2b00      	cmp	r3, #0
     384:	dbfb      	blt.n	37e <adc_init+0x15e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     386:	8c23      	ldrh	r3, [r4, #32]
     388:	842b      	strh	r3, [r5, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     38a:	9b02      	ldr	r3, [sp, #8]
     38c:	781a      	ldrb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     38e:	2a00      	cmp	r2, #0
     390:	d003      	beq.n	39a <adc_init+0x17a>
		inputs_to_scan--;
     392:	3a01      	subs	r2, #1
     394:	b2d2      	uxtb	r2, r2
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     396:	2a0f      	cmp	r2, #15
     398:	d8b4      	bhi.n	304 <adc_init+0xe4>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     39a:	0023      	movs	r3, r4
     39c:	332b      	adds	r3, #43	; 0x2b
     39e:	7818      	ldrb	r0, [r3, #0]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3a0:	280f      	cmp	r0, #15
     3a2:	d8af      	bhi.n	304 <adc_init+0xe4>
     3a4:	683e      	ldr	r6, [r7, #0]
     3a6:	7e73      	ldrb	r3, [r6, #25]
     3a8:	b25b      	sxtb	r3, r3
     3aa:	2b00      	cmp	r3, #0
     3ac:	dbfb      	blt.n	3a6 <adc_init+0x186>
			config->positive_input;
     3ae:	7b26      	ldrb	r6, [r4, #12]
			config->negative_input |
     3b0:	89e3      	ldrh	r3, [r4, #14]
			(config->pin_scan.offset_start_scan <<
     3b2:	0500      	lsls	r0, r0, #20
			config->negative_input |
     3b4:	4333      	orrs	r3, r6
     3b6:	68a6      	ldr	r6, [r4, #8]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     3b8:	0412      	lsls	r2, r2, #16
			config->negative_input |
     3ba:	4333      	orrs	r3, r6
     3bc:	4303      	orrs	r3, r0
     3be:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     3c0:	612b      	str	r3, [r5, #16]
	adc_module->EVCTRL.reg = config->event_action;
     3c2:	0023      	movs	r3, r4
     3c4:	332a      	adds	r3, #42	; 0x2a
     3c6:	781b      	ldrb	r3, [r3, #0]
     3c8:	752b      	strb	r3, [r5, #20]
	adc_module->INTENCLR.reg =
     3ca:	230f      	movs	r3, #15
     3cc:	75ab      	strb	r3, [r5, #22]
	if (config->correction.correction_enable){
     3ce:	7fcb      	ldrb	r3, [r1, #31]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d00c      	beq.n	3ee <adc_init+0x1ce>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     3d6:	4941      	ldr	r1, [pc, #260]	; (4dc <STACK_SIZE+0xdc>)
     3d8:	428b      	cmp	r3, r1
     3da:	d893      	bhi.n	304 <adc_init+0xe4>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     3dc:	84ab      	strh	r3, [r5, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     3de:	2380      	movs	r3, #128	; 0x80
     3e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	18d3      	adds	r3, r2, r3
     3e6:	b29b      	uxth	r3, r3
     3e8:	428b      	cmp	r3, r1
     3ea:	d88b      	bhi.n	304 <adc_init+0xe4>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     3ec:	84ea      	strh	r2, [r5, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     3ee:	22e0      	movs	r2, #224	; 0xe0
     3f0:	4b3b      	ldr	r3, [pc, #236]	; (4e0 <STACK_SIZE+0xe0>)
	return STATUS_OK;
     3f2:	2000      	movs	r0, #0
			ADC_CALIB_BIAS_CAL(
     3f4:	6819      	ldr	r1, [r3, #0]
     3f6:	00d2      	lsls	r2, r2, #3
     3f8:	014b      	lsls	r3, r1, #5
			ADC_CALIB_LINEARITY_CAL(
     3fa:	0019      	movs	r1, r3
			ADC_CALIB_BIAS_CAL(
     3fc:	401a      	ands	r2, r3
			ADC_CALIB_LINEARITY_CAL(
     3fe:	4b39      	ldr	r3, [pc, #228]	; (4e4 <STACK_SIZE+0xe4>)
     400:	681b      	ldr	r3, [r3, #0]
     402:	0edb      	lsrs	r3, r3, #27
     404:	430b      	orrs	r3, r1
     406:	b2db      	uxtb	r3, r3
			) |
     408:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     40a:	852b      	strh	r3, [r5, #40]	; 0x28
}
     40c:	b007      	add	sp, #28
     40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adjres = config->divide_result;
     410:	7c61      	ldrb	r1, [r4, #17]
		accumulate = config->accumulate_samples;
     412:	7c22      	ldrb	r2, [r4, #16]
		resolution = ADC_RESOLUTION_16BIT;
     414:	2310      	movs	r3, #16
     416:	e77a      	b.n	30e <adc_init+0xee>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     418:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     41a:	2310      	movs	r3, #16
		adjres = ADC_DIVIDE_RESULT_2;
     41c:	2101      	movs	r1, #1
     41e:	e776      	b.n	30e <adc_init+0xee>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     420:	2208      	movs	r2, #8
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     422:	2100      	movs	r1, #0
     424:	e773      	b.n	30e <adc_init+0xee>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     426:	2200      	movs	r2, #0
     428:	e7fb      	b.n	422 <STACK_SIZE+0x22>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42a:	2202      	movs	r2, #2
     42c:	e7f5      	b.n	41a <STACK_SIZE+0x1a>
		switch (resolution) {
     42e:	2b20      	cmp	r3, #32
     430:	d018      	beq.n	464 <STACK_SIZE+0x64>
     432:	2b30      	cmp	r3, #48	; 0x30
     434:	d000      	beq.n	438 <STACK_SIZE+0x38>
     436:	e793      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     438:	7ce3      	ldrb	r3, [r4, #19]
     43a:	69e0      	ldr	r0, [r4, #28]
     43c:	2b00      	cmp	r3, #0
     43e:	d009      	beq.n	454 <STACK_SIZE+0x54>
					(config->window.window_lower_value > 127 ||
     440:	0003      	movs	r3, r0
     442:	3380      	adds	r3, #128	; 0x80
			if (config->differential_mode &&
     444:	2bff      	cmp	r3, #255	; 0xff
     446:	d900      	bls.n	44a <STACK_SIZE+0x4a>
     448:	e75c      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -128 ||
     44a:	6a23      	ldr	r3, [r4, #32]
     44c:	3380      	adds	r3, #128	; 0x80
     44e:	2bff      	cmp	r3, #255	; 0xff
     450:	d900      	bls.n	454 <STACK_SIZE+0x54>
     452:	e757      	b.n	304 <adc_init+0xe4>
			} else if (config->window.window_lower_value > 255 ||
     454:	28ff      	cmp	r0, #255	; 0xff
     456:	dd00      	ble.n	45a <STACK_SIZE+0x5a>
     458:	e754      	b.n	304 <adc_init+0xe4>
     45a:	6a23      	ldr	r3, [r4, #32]
     45c:	2bff      	cmp	r3, #255	; 0xff
     45e:	dd00      	ble.n	462 <STACK_SIZE+0x62>
     460:	e750      	b.n	304 <adc_init+0xe4>
     462:	e77d      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     464:	7ce0      	ldrb	r0, [r4, #19]
     466:	69e6      	ldr	r6, [r4, #28]
     468:	4b1f      	ldr	r3, [pc, #124]	; (4e8 <STACK_SIZE+0xe8>)
     46a:	2800      	cmp	r0, #0
     46c:	d00c      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 511 ||
     46e:	2080      	movs	r0, #128	; 0x80
     470:	0080      	lsls	r0, r0, #2
     472:	1830      	adds	r0, r6, r0
			if (config->differential_mode &&
     474:	4298      	cmp	r0, r3
     476:	d900      	bls.n	47a <STACK_SIZE+0x7a>
     478:	e744      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -512 ||
     47a:	2280      	movs	r2, #128	; 0x80
     47c:	6a20      	ldr	r0, [r4, #32]
     47e:	0092      	lsls	r2, r2, #2
					config->window.window_lower_value < -2048 ||
     480:	1810      	adds	r0, r2, r0
     482:	4298      	cmp	r0, r3
     484:	d900      	bls.n	488 <STACK_SIZE+0x88>
     486:	e73d      	b.n	304 <adc_init+0xe4>
			} else if (config->window.window_lower_value > 65535 ||
     488:	429e      	cmp	r6, r3
     48a:	dd00      	ble.n	48e <STACK_SIZE+0x8e>
     48c:	e73a      	b.n	304 <adc_init+0xe4>
     48e:	6a22      	ldr	r2, [r4, #32]
     490:	429a      	cmp	r2, r3
     492:	dd00      	ble.n	496 <STACK_SIZE+0x96>
     494:	e736      	b.n	304 <adc_init+0xe4>
     496:	e763      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     498:	7ce0      	ldrb	r0, [r4, #19]
     49a:	69e6      	ldr	r6, [r4, #28]
     49c:	4b0f      	ldr	r3, [pc, #60]	; (4dc <STACK_SIZE+0xdc>)
     49e:	2800      	cmp	r0, #0
     4a0:	d0f2      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 2047 ||
     4a2:	2280      	movs	r2, #128	; 0x80
     4a4:	0112      	lsls	r2, r2, #4
     4a6:	18b0      	adds	r0, r6, r2
			if (config->differential_mode &&
     4a8:	4298      	cmp	r0, r3
     4aa:	d900      	bls.n	4ae <STACK_SIZE+0xae>
     4ac:	e72a      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -2048 ||
     4ae:	2080      	movs	r0, #128	; 0x80
     4b0:	6a22      	ldr	r2, [r4, #32]
     4b2:	0100      	lsls	r0, r0, #4
     4b4:	e7e4      	b.n	480 <STACK_SIZE+0x80>
			if (config->differential_mode &&
     4b6:	7ce0      	ldrb	r0, [r4, #19]
     4b8:	69e6      	ldr	r6, [r4, #28]
     4ba:	4b0c      	ldr	r3, [pc, #48]	; (4ec <STACK_SIZE+0xec>)
     4bc:	2800      	cmp	r0, #0
     4be:	d0e3      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 32767 ||
     4c0:	2280      	movs	r2, #128	; 0x80
     4c2:	0212      	lsls	r2, r2, #8
     4c4:	18b0      	adds	r0, r6, r2
			if (config->differential_mode &&
     4c6:	4298      	cmp	r0, r3
     4c8:	d900      	bls.n	4cc <STACK_SIZE+0xcc>
     4ca:	e71b      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -32768 ||
     4cc:	2080      	movs	r0, #128	; 0x80
     4ce:	6a22      	ldr	r2, [r4, #32]
     4d0:	0200      	lsls	r0, r0, #8
     4d2:	e7d5      	b.n	480 <STACK_SIZE+0x80>
     4d4:	40000400 	.word	0x40000400
     4d8:	40000800 	.word	0x40000800
     4dc:	00000fff 	.word	0x00000fff
     4e0:	00806024 	.word	0x00806024
     4e4:	00806020 	.word	0x00806020
     4e8:	000003ff 	.word	0x000003ff
     4ec:	0000ffff 	.word	0x0000ffff

000004f0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
     4f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     4f2:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     4f4:	2a00      	cmp	r2, #0
     4f6:	d106      	bne.n	506 <extint_register_callback+0x16>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
     4f8:	4b06      	ldr	r3, [pc, #24]	; (514 <extint_register_callback+0x24>)
     4fa:	0089      	lsls	r1, r1, #2
     4fc:	58cc      	ldr	r4, [r1, r3]
     4fe:	2c00      	cmp	r4, #0
     500:	d103      	bne.n	50a <extint_register_callback+0x1a>
		_extint_dev.callbacks[channel] = callback;
     502:	50c8      	str	r0, [r1, r3]
		return STATUS_OK;
     504:	0023      	movs	r3, r4
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     506:	0018      	movs	r0, r3
     508:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     50a:	0013      	movs	r3, r2
	} else if (_extint_dev.callbacks[channel] == callback) {
     50c:	4284      	cmp	r4, r0
     50e:	d0fa      	beq.n	506 <extint_register_callback+0x16>
	return STATUS_ERR_ALREADY_INITIALIZED;
     510:	231d      	movs	r3, #29
     512:	e7f8      	b.n	506 <extint_register_callback+0x16>
     514:	200000b0 	.word	0x200000b0

00000518 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     518:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     51a:	2900      	cmp	r1, #0
     51c:	d106      	bne.n	52c <extint_chan_enable_callback+0x14>
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     51e:	281f      	cmp	r0, #31
     520:	d806      	bhi.n	530 <extint_chan_enable_callback+0x18>
		eic->INTENSET.reg = (1UL << channel);
     522:	3b16      	subs	r3, #22
     524:	4083      	lsls	r3, r0
     526:	4a03      	ldr	r2, [pc, #12]	; (534 <extint_chan_enable_callback+0x1c>)
     528:	60d3      	str	r3, [r2, #12]
	}

	return STATUS_OK;
     52a:	000b      	movs	r3, r1
}
     52c:	0018      	movs	r0, r3
     52e:	4770      	bx	lr
		eic->INTENSET.reg = (1UL << channel);
     530:	60c9      	str	r1, [r1, #12]
     532:	deff      	udf	#255	; 0xff
     534:	40001800 	.word	0x40001800

00000538 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     538:	2300      	movs	r3, #0
{
     53a:	b570      	push	{r4, r5, r6, lr}
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     53c:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     53e:	4c0b      	ldr	r4, [pc, #44]	; (56c <EIC_Handler+0x34>)
     540:	7023      	strb	r3, [r4, #0]
     542:	7823      	ldrb	r3, [r4, #0]
     544:	2b0f      	cmp	r3, #15
     546:	d900      	bls.n	54a <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     548:	bd70      	pop	{r4, r5, r6, pc}
     54a:	0029      	movs	r1, r5
     54c:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
     54e:	4a08      	ldr	r2, [pc, #32]	; (570 <EIC_Handler+0x38>)
     550:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
     552:	4208      	tst	r0, r1
     554:	d006      	beq.n	564 <EIC_Handler+0x2c>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     556:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     558:	4a06      	ldr	r2, [pc, #24]	; (574 <EIC_Handler+0x3c>)
     55a:	009b      	lsls	r3, r3, #2
     55c:	589b      	ldr	r3, [r3, r2]
     55e:	2b00      	cmp	r3, #0
     560:	d000      	beq.n	564 <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
     562:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     564:	7823      	ldrb	r3, [r4, #0]
     566:	3301      	adds	r3, #1
     568:	7023      	strb	r3, [r4, #0]
     56a:	e7ea      	b.n	542 <EIC_Handler+0xa>
     56c:	200000ac 	.word	0x200000ac
     570:	40001800 	.word	0x40001800
     574:	200000b0 	.word	0x200000b0

00000578 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     578:	4b01      	ldr	r3, [pc, #4]	; (580 <extint_is_syncing+0x8>)
     57a:	7858      	ldrb	r0, [r3, #1]
     57c:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
     57e:	4770      	bx	lr
     580:	40001800 	.word	0x40001800

00000584 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     584:	2302      	movs	r3, #2
{
     586:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     588:	4a04      	ldr	r2, [pc, #16]	; (59c <_extint_enable+0x18>)
     58a:	7811      	ldrb	r1, [r2, #0]
     58c:	430b      	orrs	r3, r1
     58e:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
     590:	f7ff fff2 	bl	578 <extint_is_syncing>
     594:	2800      	cmp	r0, #0
     596:	d1fb      	bne.n	590 <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     598:	bd10      	pop	{r4, pc}
     59a:	46c0      	nop			; (mov r8, r8)
     59c:	40001800 	.word	0x40001800

000005a0 <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
     5a0:	2340      	movs	r3, #64	; 0x40
{
     5a2:	b507      	push	{r0, r1, r2, lr}
     5a4:	4a10      	ldr	r2, [pc, #64]	; (5e8 <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     5a6:	2005      	movs	r0, #5
     5a8:	6991      	ldr	r1, [r2, #24]
     5aa:	430b      	orrs	r3, r1
     5ac:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     5ae:	2300      	movs	r3, #0
     5b0:	a901      	add	r1, sp, #4
     5b2:	700b      	strb	r3, [r1, #0]
     5b4:	f001 fa94 	bl	1ae0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     5b8:	2005      	movs	r0, #5
     5ba:	f001 fa55 	bl	1a68 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     5be:	2301      	movs	r3, #1
     5c0:	4a0a      	ldr	r2, [pc, #40]	; (5ec <_system_extint_init+0x4c>)
     5c2:	7811      	ldrb	r1, [r2, #0]
     5c4:	430b      	orrs	r3, r1
     5c6:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
     5c8:	f7ff ffd6 	bl	578 <extint_is_syncing>
     5cc:	2800      	cmp	r0, #0
     5ce:	d1fb      	bne.n	5c8 <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
     5d0:	0002      	movs	r2, r0
     5d2:	4b07      	ldr	r3, [pc, #28]	; (5f0 <_system_extint_init+0x50>)
     5d4:	501a      	str	r2, [r3, r0]
     5d6:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     5d8:	2840      	cmp	r0, #64	; 0x40
     5da:	d1fb      	bne.n	5d4 <_system_extint_init+0x34>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     5dc:	2210      	movs	r2, #16
     5de:	4b05      	ldr	r3, [pc, #20]	; (5f4 <_system_extint_init+0x54>)
     5e0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     5e2:	f7ff ffcf 	bl	584 <_extint_enable>
}
     5e6:	bd07      	pop	{r0, r1, r2, pc}
     5e8:	40000400 	.word	0x40000400
     5ec:	40001800 	.word	0x40001800
     5f0:	200000b0 	.word	0x200000b0
     5f4:	e000e100 	.word	0xe000e100

000005f8 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     5f8:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     5fa:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
     5fc:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     5fe:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
     600:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     602:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     604:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     606:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     608:	72c3      	strb	r3, [r0, #11]
}
     60a:	4770      	bx	lr

0000060c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     60c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     60e:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     610:	2600      	movs	r6, #0
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     612:	7923      	ldrb	r3, [r4, #4]
     614:	a901      	add	r1, sp, #4
     616:	704e      	strb	r6, [r1, #1]
	config->powersave    = false;
     618:	70ce      	strb	r6, [r1, #3]
     61a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     61c:	7a23      	ldrb	r3, [r4, #8]
{
     61e:	0005      	movs	r5, r0
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     620:	7820      	ldrb	r0, [r4, #0]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     622:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     624:	f001 fabe 	bl	1ba4 <system_pinmux_pin_set_config>
		return NULL;
     628:	0033      	movs	r3, r6
	if (eic_index < EIC_INST_NUM) {
     62a:	2d1f      	cmp	r5, #31
     62c:	d800      	bhi.n	630 <extint_chan_set_config+0x24>
		return eics[eic_index];
     62e:	4b11      	ldr	r3, [pc, #68]	; (674 <extint_chan_set_config+0x68>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     630:	2107      	movs	r1, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     632:	7aa2      	ldrb	r2, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
     634:	4029      	ands	r1, r5
     636:	0089      	lsls	r1, r1, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     638:	7ae6      	ldrb	r6, [r4, #11]
	if (config->filter_input_signal) {
     63a:	2a00      	cmp	r2, #0
     63c:	d001      	beq.n	642 <extint_chan_set_config+0x36>
     63e:	2208      	movs	r2, #8
     640:	4316      	orrs	r6, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     642:	270f      	movs	r7, #15
			(new_config << config_pos);
     644:	408e      	lsls	r6, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     646:	408f      	lsls	r7, r1
			(new_config << config_pos);
     648:	0031      	movs	r1, r6
     64a:	08ea      	lsrs	r2, r5, #3
     64c:	0092      	lsls	r2, r2, #2
     64e:	189a      	adds	r2, r3, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     650:	6990      	ldr	r0, [r2, #24]
     652:	43b8      	bics	r0, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     654:	4301      	orrs	r1, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     656:	6191      	str	r1, [r2, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     658:	7a61      	ldrb	r1, [r4, #9]
     65a:	2201      	movs	r2, #1
     65c:	2900      	cmp	r1, #0
     65e:	d004      	beq.n	66a <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     660:	40aa      	lsls	r2, r5
     662:	6959      	ldr	r1, [r3, #20]
     664:	430a      	orrs	r2, r1
     666:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
     668:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     66a:	40aa      	lsls	r2, r5
     66c:	6959      	ldr	r1, [r3, #20]
     66e:	4391      	bics	r1, r2
     670:	6159      	str	r1, [r3, #20]
}
     672:	e7f9      	b.n	668 <extint_chan_set_config+0x5c>
     674:	40001800 	.word	0x40001800

00000678 <is_button_two_pressed>:

/************************************************************************/
/* Button 2 function
 */
/************************************************************************/
bool is_button_two_pressed(void) {
     678:	b5f0      	push	{r4, r5, r6, r7, lr}
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     67a:	4b1e      	ldr	r3, [pc, #120]	; (6f4 <is_button_two_pressed+0x7c>)
     67c:	4d1e      	ldr	r5, [pc, #120]	; (6f8 <is_button_two_pressed+0x80>)
     67e:	6a18      	ldr	r0, [r3, #32]
     680:	4a1e      	ldr	r2, [pc, #120]	; (6fc <is_button_two_pressed+0x84>)
     682:	4b1f      	ldr	r3, [pc, #124]	; (700 <is_button_two_pressed+0x88>)
     684:	491f      	ldr	r1, [pc, #124]	; (704 <is_button_two_pressed+0x8c>)

  if (!port_pin_get_input_level(BUTTON_2)) {
     686:	0400      	lsls	r0, r0, #16
     688:	d417      	bmi.n	6ba <is_button_two_pressed+0x42>
    BUTTON_TWO_PRESS_STATUS = true;
     68a:	2001      	movs	r0, #1
     68c:	7028      	strb	r0, [r5, #0]
    press_B2_delay_count--;
     68e:	6818      	ldr	r0, [r3, #0]
     690:	3801      	subs	r0, #1
     692:	6018      	str	r0, [r3, #0]
    long_press_B2_delay_count--;
     694:	6810      	ldr	r0, [r2, #0]
     696:	3801      	subs	r0, #1
     698:	6010      	str	r0, [r2, #0]
      return true;
    }
  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     69a:	6810      	ldr	r0, [r2, #0]
     69c:	2800      	cmp	r0, #0
     69e:	dc1c      	bgt.n	6da <is_button_two_pressed+0x62>
    LongPressB2Flag = true;
     6a0:	2001      	movs	r0, #1
    BUTTON_TWO_PRESS_STATUS = false;
    BUTTON_TWO_RELEASE_STATUS = true;
     6a2:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     6a4:	210a      	movs	r1, #10
    LongPressB2Flag = true;
     6a6:	4c18      	ldr	r4, [pc, #96]	; (708 <is_button_two_pressed+0x90>)
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     6a8:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     6aa:	2396      	movs	r3, #150	; 0x96
    LongPressB2Flag = true;
     6ac:	7020      	strb	r0, [r4, #0]
    BUTTON_TWO_PRESS_STATUS = false;
     6ae:	2400      	movs	r4, #0
    long_press_B2_delay_count = DELAY_PRESS_CN;
     6b0:	6013      	str	r3, [r2, #0]
    BUTTON_TWO_READY_TAKE_ACTION = false;
     6b2:	4b16      	ldr	r3, [pc, #88]	; (70c <is_button_two_pressed+0x94>)
    BUTTON_TWO_PRESS_STATUS = false;
     6b4:	702c      	strb	r4, [r5, #0]
    BUTTON_TWO_READY_TAKE_ACTION = false;
     6b6:	701c      	strb	r4, [r3, #0]
     6b8:	e00c      	b.n	6d4 <is_button_two_pressed+0x5c>
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     6ba:	200a      	movs	r0, #10
    BUTTON_TWO_PRESS_STATUS = false;
     6bc:	2700      	movs	r7, #0
    BUTTON_TWO_RELEASE_STATUS = true;
     6be:	2401      	movs	r4, #1
    if (BUTTON_TWO_READY_TAKE_ACTION) {
     6c0:	4e12      	ldr	r6, [pc, #72]	; (70c <is_button_two_pressed+0x94>)
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     6c2:	6018      	str	r0, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     6c4:	308c      	adds	r0, #140	; 0x8c
     6c6:	6010      	str	r0, [r2, #0]
    if (BUTTON_TWO_READY_TAKE_ACTION) {
     6c8:	7830      	ldrb	r0, [r6, #0]
    BUTTON_TWO_PRESS_STATUS = false;
     6ca:	702f      	strb	r7, [r5, #0]
    BUTTON_TWO_RELEASE_STATUS = true;
     6cc:	700c      	strb	r4, [r1, #0]
    if (BUTTON_TWO_READY_TAKE_ACTION) {
     6ce:	42b8      	cmp	r0, r7
     6d0:	d0e3      	beq.n	69a <is_button_two_pressed+0x22>
      BUTTON_TWO_READY_TAKE_ACTION = false;
     6d2:	7037      	strb	r7, [r6, #0]
    BUTTON_TWO_TAKE_ACTION = false;
     6d4:	4b0e      	ldr	r3, [pc, #56]	; (710 <is_button_two_pressed+0x98>)
     6d6:	701c      	strb	r4, [r3, #0]
    BUTTON_TWO_RELEASE_STATUS = true;
    return false;
  }

  return false;
}
     6d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6da:	2000      	movs	r0, #0
  if (press_B2_delay_count <= 0) {
     6dc:	681a      	ldr	r2, [r3, #0]
     6de:	4282      	cmp	r2, r0
     6e0:	dc05      	bgt.n	6ee <is_button_two_pressed+0x76>
    BUTTON_TWO_READY_TAKE_ACTION = true;
     6e2:	2201      	movs	r2, #1
    press_B2_delay_count = 0;
     6e4:	6018      	str	r0, [r3, #0]
    BUTTON_TWO_READY_TAKE_ACTION = true;
     6e6:	4b09      	ldr	r3, [pc, #36]	; (70c <is_button_two_pressed+0x94>)
    BUTTON_TWO_RELEASE_STATUS = false;
     6e8:	7008      	strb	r0, [r1, #0]
    BUTTON_TWO_READY_TAKE_ACTION = true;
     6ea:	701a      	strb	r2, [r3, #0]
  return false;
     6ec:	e7f4      	b.n	6d8 <is_button_two_pressed+0x60>
    BUTTON_TWO_RELEASE_STATUS = true;
     6ee:	2301      	movs	r3, #1
     6f0:	700b      	strb	r3, [r1, #0]
    return false;
     6f2:	e7f1      	b.n	6d8 <is_button_two_pressed+0x60>
     6f4:	41004400 	.word	0x41004400
     6f8:	2000003c 	.word	0x2000003c
     6fc:	20000000 	.word	0x20000000
     700:	20000004 	.word	0x20000004
     704:	2000003e 	.word	0x2000003e
     708:	20000040 	.word	0x20000040
     70c:	2000003d 	.word	0x2000003d
     710:	2000003f 	.word	0x2000003f

00000714 <is_button_two_take_action>:

bool is_button_two_take_action(void) {

  if (BUTTON_TWO_TAKE_ACTION) {
     714:	4b03      	ldr	r3, [pc, #12]	; (724 <is_button_two_take_action+0x10>)
     716:	7818      	ldrb	r0, [r3, #0]
     718:	2800      	cmp	r0, #0
     71a:	d001      	beq.n	720 <is_button_two_take_action+0xc>
    BUTTON_TWO_TAKE_ACTION = false;
     71c:	2200      	movs	r2, #0
     71e:	701a      	strb	r2, [r3, #0]

    return true;
  }
  return false;
     720:	4770      	bx	lr
     722:	46c0      	nop			; (mov r8, r8)
     724:	2000003f 	.word	0x2000003f

00000728 <set_pwm_color_channel>:
uint8_t pwm_led_toggle_count = 0;
int flash_led_counter;
bool is_cycle_led;
bool pwm_led_toggle_flag;

void set_pwm_color_channel(uint8_t channel, bool enable) {
     728:	b510      	push	{r4, lr}
     72a:	1e0a      	subs	r2, r1, #0
     72c:	4c16      	ldr	r4, [pc, #88]	; (788 <set_pwm_color_channel+0x60>)
  if (enable) {
     72e:	d018      	beq.n	762 <set_pwm_color_channel+0x3a>
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     730:	2302      	movs	r3, #2
     732:	6822      	ldr	r2, [r4, #0]
     734:	6891      	ldr	r1, [r2, #8]
     736:	4219      	tst	r1, r3
     738:	d1fc      	bne.n	734 <set_pwm_color_channel+0xc>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     73a:	6811      	ldr	r1, [r2, #0]
     73c:	430b      	orrs	r3, r1
     73e:	6013      	str	r3, [r2, #0]
    tcc_enable(&tcc_instance);
    tcc_set_compare_value(&tcc_instance, channel, INDICATION_LED_DUTY_CYCLE);
     740:	0001      	movs	r1, r0
     742:	4a12      	ldr	r2, [pc, #72]	; (78c <set_pwm_color_channel+0x64>)
     744:	0020      	movs	r0, r4
     746:	f001 fc45 	bl	1fd4 <tcc_set_compare_value>
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     74a:	2104      	movs	r1, #4
     74c:	201f      	movs	r0, #31
     74e:	6822      	ldr	r2, [r4, #0]
     750:	6893      	ldr	r3, [r2, #8]
     752:	420b      	tst	r3, r1
     754:	d1fc      	bne.n	750 <set_pwm_color_channel+0x28>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     756:	7953      	ldrb	r3, [r2, #5]
     758:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     75a:	d012      	beq.n	782 <set_pwm_color_channel+0x5a>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     75c:	2b60      	cmp	r3, #96	; 0x60
     75e:	d1f7      	bne.n	750 <set_pwm_color_channel+0x28>
    // tcc_set_compare_value(&tcc_instance, channel, 0x0FF);
    tcc_disable(&tcc_instance);
  }

  tcc_force_double_buffer_update(&tcc_instance);
}
     760:	bd10      	pop	{r4, pc}
    tcc_set_compare_value(&tcc_instance, channel, ZERO_DUTY_CYCLE);
     762:	0001      	movs	r1, r0
     764:	0020      	movs	r0, r4
     766:	f001 fc35 	bl	1fd4 <tcc_set_compare_value>
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     76a:	2102      	movs	r1, #2
     76c:	6823      	ldr	r3, [r4, #0]
     76e:	689a      	ldr	r2, [r3, #8]
     770:	420a      	tst	r2, r1
     772:	d1fc      	bne.n	76e <set_pwm_color_channel+0x46>
	tcc_module->INTENCLR.reg = TCC_INTENCLR_MASK;
     774:	4a06      	ldr	r2, [pc, #24]	; (790 <set_pwm_color_channel+0x68>)
     776:	625a      	str	r2, [r3, #36]	; 0x24
	tcc_module->INTFLAG.reg = TCC_INTFLAG_MASK;
     778:	62da      	str	r2, [r3, #44]	; 0x2c
	tcc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     77a:	681a      	ldr	r2, [r3, #0]
     77c:	438a      	bics	r2, r1
     77e:	601a      	str	r2, [r3, #0]
     780:	e7e3      	b.n	74a <set_pwm_color_channel+0x22>
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     782:	2360      	movs	r3, #96	; 0x60
     784:	7153      	strb	r3, [r2, #5]
}
     786:	e7eb      	b.n	760 <set_pwm_color_channel+0x38>
     788:	200000f0 	.word	0x200000f0
     78c:	00000467 	.word	0x00000467
     790:	000ff80f 	.word	0x000ff80f

00000794 <pwm_led_system_cleanup>:

void pwm_led_system_cleanup(void) {
  // tcc_disable(&tcc_instance);
  set_pwm_color_channel(RED_CHANNEL, false);
     794:	2100      	movs	r1, #0
void pwm_led_system_cleanup(void) {
     796:	b510      	push	{r4, lr}
  set_pwm_color_channel(RED_CHANNEL, false);
     798:	0008      	movs	r0, r1
     79a:	f7ff ffc5 	bl	728 <set_pwm_color_channel>
  set_pwm_color_channel(BLUE_CHANNEL, false);
     79e:	2100      	movs	r1, #0
     7a0:	2002      	movs	r0, #2
     7a2:	f7ff ffc1 	bl	728 <set_pwm_color_channel>
  set_pwm_color_channel(GREEN_CHANNEL, false);
     7a6:	2100      	movs	r1, #0
     7a8:	2001      	movs	r0, #1
     7aa:	f7ff ffbd 	bl	728 <set_pwm_color_channel>
  set_pwm_color_channel(WHITE_CHANNEL, false);
     7ae:	2100      	movs	r1, #0
     7b0:	2003      	movs	r0, #3
     7b2:	f7ff ffb9 	bl	728 <set_pwm_color_channel>
}
     7b6:	bd10      	pop	{r4, pc}

000007b8 <set_pwm_color>:

void set_pwm_color(int color) {
     7b8:	b510      	push	{r4, lr}

  switch (color) {
     7ba:	2806      	cmp	r0, #6
     7bc:	d809      	bhi.n	7d2 <set_pwm_color+0x1a>
  case 5: // Purple (Red + Blue)
    set_pwm_color_channel(RED_CHANNEL, true);
    set_pwm_color_channel(BLUE_CHANNEL, true);
    break;
  case 6: // Cyan (Blue + Green)
    set_pwm_color_channel(BLUE_CHANNEL, true);
     7be:	2101      	movs	r1, #1
  switch (color) {
     7c0:	f001 ff5e 	bl	2680 <__gnu_thumb1_case_uqi>
     7c4:	08140e04 	.word	0x08140e04
     7c8:	100a      	.short	0x100a
     7ca:	16          	.byte	0x16
     7cb:	00          	.byte	0x00
    set_pwm_color_channel(RED_CHANNEL, true);
     7cc:	2000      	movs	r0, #0
    set_pwm_color_channel(GREEN_CHANNEL, true);
     7ce:	f7ff ffab 	bl	728 <set_pwm_color_channel>
    break;
  default:
    break;
  }
}
     7d2:	bd10      	pop	{r4, pc}
    set_pwm_color_channel(WHITE_CHANNEL, true);
     7d4:	2003      	movs	r0, #3
     7d6:	e7fa      	b.n	7ce <set_pwm_color+0x16>
    set_pwm_color_channel(RED_CHANNEL, true);
     7d8:	2000      	movs	r0, #0
    set_pwm_color_channel(BLUE_CHANNEL, true);
     7da:	f7ff ffa5 	bl	728 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
     7de:	2101      	movs	r1, #1
     7e0:	0008      	movs	r0, r1
     7e2:	e7f4      	b.n	7ce <set_pwm_color+0x16>
    set_pwm_color_channel(RED_CHANNEL, true);
     7e4:	2000      	movs	r0, #0
     7e6:	f7ff ff9f 	bl	728 <set_pwm_color_channel>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     7ea:	2101      	movs	r1, #1
     7ec:	2002      	movs	r0, #2
     7ee:	e7ee      	b.n	7ce <set_pwm_color+0x16>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     7f0:	2002      	movs	r0, #2
     7f2:	e7f2      	b.n	7da <set_pwm_color+0x22>

000007f4 <configure_pwm_tcc>:

void configure_pwm_tcc(void) {
     7f4:	b570      	push	{r4, r5, r6, lr}
  tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     7f6:	4c19      	ldr	r4, [pc, #100]	; (85c <configure_pwm_tcc+0x68>)
     7f8:	4d19      	ldr	r5, [pc, #100]	; (860 <configure_pwm_tcc+0x6c>)
     7fa:	0020      	movs	r0, r4
     7fc:	0029      	movs	r1, r5
     7fe:	f001 fa1b 	bl	1c38 <tcc_get_config_defaults>
  config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     802:	2302      	movs	r3, #2
     804:	7623      	strb	r3, [r4, #24]
  config_tcc.counter.period = CONF_DEFAULT_PERIOD;
     806:	238d      	movs	r3, #141	; 0x8d
  config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
     808:	2205      	movs	r2, #5
  config_tcc.counter.period = CONF_DEFAULT_PERIOD;
     80a:	011b      	lsls	r3, r3, #4
     80c:	6063      	str	r3, [r4, #4]
  config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
     80e:	72e2      	strb	r2, [r4, #11]

  config_tcc.compare.match[RED_CHANNEL] = ZERO_DUTY_CYCLE;
     810:	2300      	movs	r3, #0
  // config_tcc.compare.wave_polarity[BLUE_CHANNEL] = TCC_WAVE_POLARITY_1;
  // config_tcc.compare.wave_polarity[GREEN_CHANNEL] = TCC_WAVE_POLARITY_1;
  // config_tcc.compare.wave_polarity[WHITE_CHANNEL] = TCC_WAVE_POLARITY_1;

  config_tcc.pins.wave_out_pin[RED_CHANNEL] = PIN_PA04F_TCC0_WO0; // RED
  config_tcc.pins.wave_out_pin_mux[RED_CHANNEL] = MUX_PA04F_TCC0_WO0;
     812:	67a2      	str	r2, [r4, #120]	; 0x78
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;

  config_tcc.pins.wave_out_pin[GREEN_CHANNEL] = PIN_PA05F_TCC0_WO1; // GREEN
     814:	65e2      	str	r2, [r4, #92]	; 0x5c
  config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL] = MUX_PA05F_TCC0_WO1;
     816:	67e2      	str	r2, [r4, #124]	; 0x7c
  config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     818:	0022      	movs	r2, r4
  config_tcc.compare.match[RED_CHANNEL] = ZERO_DUTY_CYCLE;
     81a:	61e3      	str	r3, [r4, #28]
  config_tcc.compare.match[BLUE_CHANNEL] = ZERO_DUTY_CYCLE;
     81c:	6263      	str	r3, [r4, #36]	; 0x24
  config_tcc.compare.match[GREEN_CHANNEL] = ZERO_DUTY_CYCLE;
     81e:	6223      	str	r3, [r4, #32]
  config_tcc.compare.match[WHITE_CHANNEL] = ZERO_DUTY_CYCLE;
     820:	62a3      	str	r3, [r4, #40]	; 0x28
  config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     822:	3299      	adds	r2, #153	; 0x99
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;
     824:	3301      	adds	r3, #1
  config_tcc.pins.wave_out_pin[RED_CHANNEL] = PIN_PA04F_TCC0_WO0; // RED
     826:	2104      	movs	r1, #4
  config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     828:	7013      	strb	r3, [r2, #0]

  config_tcc.pins.wave_out_pin[BLUE_CHANNEL] = PIN_PA08E_TCC0_WO2; // BLUE
     82a:	2208      	movs	r2, #8
     82c:	6622      	str	r2, [r4, #96]	; 0x60
  config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL] = MUX_PA08E_TCC0_WO2;
     82e:	1862      	adds	r2, r4, r1
     830:	67d1      	str	r1, [r2, #124]	; 0x7c
  config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL] = true;
     832:	0022      	movs	r2, r4
     834:	329a      	adds	r2, #154	; 0x9a
     836:	7013      	strb	r3, [r2, #0]

  config_tcc.pins.wave_out_pin[WHITE_CHANNEL] = PIN_PA09E_TCC0_WO3; // WHITE
     838:	2209      	movs	r2, #9
     83a:	6662      	str	r2, [r4, #100]	; 0x64
  config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL] = MUX_PA09E_TCC0_WO3;
     83c:	0022      	movs	r2, r4
     83e:	3208      	adds	r2, #8
     840:	67d1      	str	r1, [r2, #124]	; 0x7c
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;
     842:	0020      	movs	r0, r4
  config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     844:	0022      	movs	r2, r4
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;
     846:	3098      	adds	r0, #152	; 0x98
  config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     848:	329b      	adds	r2, #155	; 0x9b
  config_tcc.pins.wave_out_pin[RED_CHANNEL] = PIN_PA04F_TCC0_WO0; // RED
     84a:	65a1      	str	r1, [r4, #88]	; 0x58
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;
     84c:	7003      	strb	r3, [r0, #0]
  config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     84e:	7013      	strb	r3, [r2, #0]

  tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     850:	0029      	movs	r1, r5
     852:	0022      	movs	r2, r4
     854:	4803      	ldr	r0, [pc, #12]	; (864 <configure_pwm_tcc+0x70>)
     856:	f001 fa61 	bl	1d1c <tcc_init>
  // tcc_enable(&tcc_instance);
}
     85a:	bd70      	pop	{r4, r5, r6, pc}
     85c:	2000014c 	.word	0x2000014c
     860:	42001400 	.word	0x42001400
     864:	200000f0 	.word	0x200000f0

00000868 <cycle_pwm_led>:

void cycle_pwm_led(void) {
  flash_led_counter = 0;
     868:	2000      	movs	r0, #0
void cycle_pwm_led(void) {
     86a:	b510      	push	{r4, lr}
  flash_led_counter = 0;
     86c:	4b0a      	ldr	r3, [pc, #40]	; (898 <cycle_pwm_led+0x30>)
     86e:	6018      	str	r0, [r3, #0]
  switch (pwm_led_toggle_count) {
     870:	4b0a      	ldr	r3, [pc, #40]	; (89c <cycle_pwm_led+0x34>)
     872:	781c      	ldrb	r4, [r3, #0]
     874:	2c01      	cmp	r4, #1
     876:	d002      	beq.n	87e <cycle_pwm_led+0x16>
     878:	2c06      	cmp	r4, #6
     87a:	d009      	beq.n	890 <cycle_pwm_led+0x28>
  case 6:
    pwm_led_toggle_count = 0;
    pwm_led_system_cleanup(); // Reset to 1 for red
    break;
  }
}
     87c:	bd10      	pop	{r4, pc}
    SET_RED;
     87e:	f7ff ff9b 	bl	7b8 <set_pwm_color>
    SET_BLU;
     882:	2002      	movs	r0, #2
     884:	f7ff ff98 	bl	7b8 <set_pwm_color>
    SET_GRN;
     888:	0020      	movs	r0, r4
     88a:	f7ff ff95 	bl	7b8 <set_pwm_color>
    break;
     88e:	e7f5      	b.n	87c <cycle_pwm_led+0x14>
    pwm_led_toggle_count = 0;
     890:	7018      	strb	r0, [r3, #0]
    pwm_led_system_cleanup(); // Reset to 1 for red
     892:	f7ff ff7f 	bl	794 <pwm_led_system_cleanup>
}
     896:	e7f1      	b.n	87c <cycle_pwm_led+0x14>
     898:	20000210 	.word	0x20000210
     89c:	20000041 	.word	0x20000041

000008a0 <configure_pwm_generator>:
  struct tc_config config_tc;
  tc_get_config_defaults(&config_tc);

  config_tc.clock_source = TC_CLOCK_SOURCE;
  config_tc.counter_size = TC_COUNTER_SIZE;
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     8a0:	21a0      	movs	r1, #160	; 0xa0
void configure_pwm_generator(void) {
     8a2:	b500      	push	{lr}
     8a4:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     8a6:	aa01      	add	r2, sp, #4
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     8a8:	00c9      	lsls	r1, r1, #3
     8aa:	8091      	strh	r1, [r2, #4]

  config_tc.counter_8_bit.value = 0;
  config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     8ac:	212d      	movs	r1, #45	; 0x2d
     8ae:	2300      	movs	r3, #0
     8b0:	2055      	movs	r0, #85	; 0x55
     8b2:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
     8b4:	8513      	strh	r3, [r2, #40]	; 0x28
     8b6:	7008      	strb	r0, [r1, #0]

  config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     8b8:	212e      	movs	r1, #46	; 0x2e
     8ba:	3840      	subs	r0, #64	; 0x40
     8bc:	4469      	add	r1, sp
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     8be:	8553      	strh	r3, [r2, #42]	; 0x2a
     8c0:	7008      	strb	r0, [r1, #0]

  config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     8c2:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
     8c4:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     8c6:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     8c8:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     8ca:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     8cc:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     8ce:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     8d0:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     8d2:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     8d4:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     8d6:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     8d8:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     8da:	8593      	strh	r3, [r2, #44]	; 0x2c
  config_tc.counter_size = TC_COUNTER_SIZE;
     8dc:	3304      	adds	r3, #4
     8de:	7093      	strb	r3, [r2, #2]
  config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     8e0:	7191      	strb	r1, [r2, #6]
  config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
  config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     8e2:	6193      	str	r3, [r2, #24]
  config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     8e4:	3936      	subs	r1, #54	; 0x36

  config_tc.pwm_channel[0].enabled = true;
     8e6:	3b03      	subs	r3, #3
  config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     8e8:	6151      	str	r1, [r2, #20]
  config_tc.pwm_channel[0].enabled = true;
     8ea:	7413      	strb	r3, [r2, #16]

  tc_init(&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     8ec:	4902      	ldr	r1, [pc, #8]	; (8f8 <configure_pwm_generator+0x58>)
     8ee:	4803      	ldr	r0, [pc, #12]	; (8fc <configure_pwm_generator+0x5c>)
     8f0:	f001 fbf8 	bl	20e4 <tc_init>
}
     8f4:	b00f      	add	sp, #60	; 0x3c
     8f6:	bd00      	pop	{pc}
     8f8:	42001c00 	.word	0x42001c00
     8fc:	200001f0 	.word	0x200001f0

00000900 <motor_enable>:

void motor_enable(void) {
     900:	4b08      	ldr	r3, [pc, #32]	; (924 <motor_enable+0x24>)
     902:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     904:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     906:	b252      	sxtb	r2, r2
     908:	2a00      	cmp	r2, #0
     90a:	dbfb      	blt.n	904 <motor_enable+0x4>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     90c:	2202      	movs	r2, #2
     90e:	8819      	ldrh	r1, [r3, #0]
     910:	430a      	orrs	r2, r1
     912:	801a      	strh	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     914:	2240      	movs	r2, #64	; 0x40
     916:	4b04      	ldr	r3, [pc, #16]	; (928 <motor_enable+0x28>)
     918:	619a      	str	r2, [r3, #24]
  tc_enable(&pwm_generator_instance);
  port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
  motor_running = true;
     91a:	4b04      	ldr	r3, [pc, #16]	; (92c <motor_enable+0x2c>)
     91c:	3a3f      	subs	r2, #63	; 0x3f
     91e:	701a      	strb	r2, [r3, #0]
  // set_motor_speed_1_indication();
}
     920:	4770      	bx	lr
     922:	46c0      	nop			; (mov r8, r8)
     924:	200001f0 	.word	0x200001f0
     928:	41004400 	.word	0x41004400
     92c:	20000043 	.word	0x20000043

00000930 <motor_disable>:

void motor_disable(void) {
  pulsating_motor_routine = false;
     930:	2100      	movs	r1, #0
  motor_toggle_count = -1;
     932:	22ff      	movs	r2, #255	; 0xff
  pulsating_motor_routine = false;
     934:	4b0d      	ldr	r3, [pc, #52]	; (96c <motor_disable+0x3c>)
void motor_disable(void) {
     936:	b510      	push	{r4, lr}
  pulsating_motor_routine = false;
     938:	7019      	strb	r1, [r3, #0]
  motor_toggle_count = -1;
     93a:	4b0d      	ldr	r3, [pc, #52]	; (970 <motor_disable+0x40>)
  motor_running = false;
  tc_set_compare_value(&pwm_generator_instance, TC_COMPARE_CAPTURE_CHANNEL_0,
     93c:	4c0d      	ldr	r4, [pc, #52]	; (974 <motor_disable+0x44>)
  motor_toggle_count = -1;
     93e:	701a      	strb	r2, [r3, #0]
  motor_running = false;
     940:	4b0d      	ldr	r3, [pc, #52]	; (978 <motor_disable+0x48>)
  tc_set_compare_value(&pwm_generator_instance, TC_COMPARE_CAPTURE_CHANNEL_0,
     942:	3aea      	subs	r2, #234	; 0xea
     944:	0020      	movs	r0, r4
  motor_running = false;
     946:	7019      	strb	r1, [r3, #0]
  tc_set_compare_value(&pwm_generator_instance, TC_COMPARE_CAPTURE_CHANNEL_0,
     948:	f001 fce0 	bl	230c <tc_set_compare_value>
     94c:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     94e:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     950:	b252      	sxtb	r2, r2
     952:	2a00      	cmp	r2, #0
     954:	dbfb      	blt.n	94e <motor_disable+0x1e>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     956:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     958:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     95a:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     95c:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     95e:	881a      	ldrh	r2, [r3, #0]
     960:	438a      	bics	r2, r1
     962:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     964:	2240      	movs	r2, #64	; 0x40
     966:	4b05      	ldr	r3, [pc, #20]	; (97c <motor_disable+0x4c>)
     968:	615a      	str	r2, [r3, #20]
                       INITIAL_DUTY_CYCLE);
  tc_disable(&pwm_generator_instance);
  port_pin_set_output_level(MOTOR_NSLEEP_PIN, LOW);
}
     96a:	bd10      	pop	{r4, pc}
     96c:	20000044 	.word	0x20000044
     970:	20000008 	.word	0x20000008
     974:	200001f0 	.word	0x200001f0
     978:	20000043 	.word	0x20000043
     97c:	41004400 	.word	0x41004400

00000980 <cycle_pwm_motor>:

void cycle_pwm_motor(void) {
     980:	b510      	push	{r4, lr}
  {
    if (motor_running) {
     982:	4b0e      	ldr	r3, [pc, #56]	; (9bc <cycle_pwm_motor+0x3c>)
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d00b      	beq.n	9a2 <cycle_pwm_motor+0x22>
      if (motor_toggle_count == 2) {
     98a:	4b0d      	ldr	r3, [pc, #52]	; (9c0 <cycle_pwm_motor+0x40>)
        tc_set_compare_value(&pwm_generator_instance,
     98c:	2222      	movs	r2, #34	; 0x22
      if (motor_toggle_count == 2) {
     98e:	781b      	ldrb	r3, [r3, #0]
     990:	2b02      	cmp	r3, #2
     992:	d002      	beq.n	99a <cycle_pwm_motor+0x1a>
                             TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
        // set_motor_speed_2_indication();
      } else if (motor_toggle_count == 3) {
     994:	2b03      	cmp	r3, #3
     996:	d105      	bne.n	9a4 <cycle_pwm_motor+0x24>
        tc_set_compare_value(&pwm_generator_instance,
     998:	224d      	movs	r2, #77	; 0x4d
     99a:	2100      	movs	r1, #0
     99c:	4809      	ldr	r0, [pc, #36]	; (9c4 <cycle_pwm_motor+0x44>)
     99e:	f001 fcb5 	bl	230c <tc_set_compare_value>
      else if (motor_toggle_count > 4) {
        motor_disable();
      }
    }
  }
}
     9a2:	bd10      	pop	{r4, pc}
      } else if (motor_toggle_count == 4) {
     9a4:	2b04      	cmp	r3, #4
     9a6:	d104      	bne.n	9b2 <cycle_pwm_motor+0x32>
        pulsating_motor_routine = true;
     9a8:	2201      	movs	r2, #1
     9aa:	4b07      	ldr	r3, [pc, #28]	; (9c8 <cycle_pwm_motor+0x48>)
     9ac:	701a      	strb	r2, [r3, #0]
        tc_set_compare_value(&pwm_generator_instance,
     9ae:	324c      	adds	r2, #76	; 0x4c
     9b0:	e7f3      	b.n	99a <cycle_pwm_motor+0x1a>
      else if (motor_toggle_count > 4) {
     9b2:	2b04      	cmp	r3, #4
     9b4:	d9f5      	bls.n	9a2 <cycle_pwm_motor+0x22>
        motor_disable();
     9b6:	f7ff ffbb 	bl	930 <motor_disable>
}
     9ba:	e7f2      	b.n	9a2 <cycle_pwm_motor+0x22>
     9bc:	20000043 	.word	0x20000043
     9c0:	20000008 	.word	0x20000008
     9c4:	200001f0 	.word	0x200001f0
     9c8:	20000044 	.word	0x20000044

000009cc <toggle_nsleep>:

void toggle_nsleep(void) {
  static bool PULSATING_MOTOR = false;
  if (pulsating_motor_routine) {
     9cc:	4b08      	ldr	r3, [pc, #32]	; (9f0 <toggle_nsleep+0x24>)
     9ce:	781b      	ldrb	r3, [r3, #0]
     9d0:	2b00      	cmp	r3, #0
     9d2:	d008      	beq.n	9e6 <toggle_nsleep+0x1a>
    if (PULSATING_MOTOR) {
     9d4:	4b07      	ldr	r3, [pc, #28]	; (9f4 <toggle_nsleep+0x28>)
     9d6:	4a08      	ldr	r2, [pc, #32]	; (9f8 <toggle_nsleep+0x2c>)
     9d8:	7818      	ldrb	r0, [r3, #0]
     9da:	2140      	movs	r1, #64	; 0x40
     9dc:	2800      	cmp	r0, #0
     9de:	d003      	beq.n	9e8 <toggle_nsleep+0x1c>
     9e0:	6151      	str	r1, [r2, #20]
      port_pin_set_output_level(MOTOR_NSLEEP_PIN, LOW);
      PULSATING_MOTOR = false;
     9e2:	2200      	movs	r2, #0
     9e4:	701a      	strb	r2, [r3, #0]
    } else {
      PULSATING_MOTOR = true;
      port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
    }
  }
}
     9e6:	4770      	bx	lr
      PULSATING_MOTOR = true;
     9e8:	2001      	movs	r0, #1
     9ea:	7018      	strb	r0, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     9ec:	6191      	str	r1, [r2, #24]
}
     9ee:	e7fa      	b.n	9e6 <toggle_nsleep+0x1a>
     9f0:	20000044 	.word	0x20000044
     9f4:	20000042 	.word	0x20000042
     9f8:	41004400 	.word	0x41004400

000009fc <system_inactive>:
  system_sleep();
}

void sys_sleep_logic(void) { put_to_sleep(); }

void system_inactive(void) {
     9fc:	b510      	push	{r4, lr}

  motor_disable(); // shutdown PWM motor
     9fe:	f7ff ff97 	bl	930 <motor_disable>
  is_cycle_led = false;
     a02:	2300      	movs	r3, #0
     a04:	4a03      	ldr	r2, [pc, #12]	; (a14 <system_inactive+0x18>)
     a06:	7013      	strb	r3, [r2, #0]
  pwm_led_toggle_count = 0; // reset counter to start the routine from beginning
     a08:	4a03      	ldr	r2, [pc, #12]	; (a18 <system_inactive+0x1c>)
     a0a:	7013      	strb	r3, [r2, #0]
  pwm_led_system_cleanup(); // shutdown illumination led
     a0c:	f7ff fec2 	bl	794 <pwm_led_system_cleanup>
}
     a10:	bd10      	pop	{r4, pc}
     a12:	46c0      	nop			; (mov r8, r8)
     a14:	2000020c 	.word	0x2000020c
     a18:	20000041 	.word	0x20000041

00000a1c <put_to_sleep>:
void put_to_sleep(void) {
     a1c:	b510      	push	{r4, lr}
  system_inactive(); // once entered sleep mode -- sys inactive
     a1e:	f7ff ffed 	bl	9fc <system_inactive>
  reset_chip();
     a22:	f001 fd29 	bl	2478 <reset_chip>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
     a26:	2304      	movs	r3, #4
     a28:	4a03      	ldr	r2, [pc, #12]	; (a38 <put_to_sleep+0x1c>)
     a2a:	6911      	ldr	r1, [r2, #16]
     a2c:	430b      	orrs	r3, r1
     a2e:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     a30:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
     a34:	bf30      	wfi
}
     a36:	bd10      	pop	{r4, pc}
     a38:	e000ed00 	.word	0xe000ed00

00000a3c <regular_routine>:

void regular_routine(void) {
     a3c:	b510      	push	{r4, lr}

  /** shift from button 1 --> 2 11/17

  **/

  if (is_button_two_pressed() && !SYS_READY_TO_SLEEP && !Vbus_State) {
     a3e:	f7ff fe1b 	bl	678 <is_button_two_pressed>
     a42:	2800      	cmp	r0, #0
     a44:	d00f      	beq.n	a66 <regular_routine+0x2a>
     a46:	4b28      	ldr	r3, [pc, #160]	; (ae8 <regular_routine+0xac>)
     a48:	781b      	ldrb	r3, [r3, #0]
     a4a:	2b00      	cmp	r3, #0
     a4c:	d10b      	bne.n	a66 <regular_routine+0x2a>
     a4e:	4c27      	ldr	r4, [pc, #156]	; (aec <regular_routine+0xb0>)
     a50:	7822      	ldrb	r2, [r4, #0]
     a52:	2a00      	cmp	r2, #0
     a54:	d107      	bne.n	a66 <regular_routine+0x2a>
    if (LongPressB2Flag) {
     a56:	4b26      	ldr	r3, [pc, #152]	; (af0 <regular_routine+0xb4>)
     a58:	7819      	ldrb	r1, [r3, #0]
     a5a:	2900      	cmp	r1, #0
     a5c:	d018      	beq.n	a90 <regular_routine+0x54>
      LongPressB2Flag = false;
     a5e:	701a      	strb	r2, [r3, #0]
      // display_battery_state_before_shutdown();
      SleepTickCount = sleep_countdown;
     a60:	4b24      	ldr	r3, [pc, #144]	; (af4 <regular_routine+0xb8>)
     a62:	320a      	adds	r2, #10
     a64:	601a      	str	r2, [r3, #0]
        }
      }
    }
  }

  if (BUTTON_TWO_RELEASE_STATUS) {
     a66:	4b24      	ldr	r3, [pc, #144]	; (af8 <regular_routine+0xbc>)
     a68:	781b      	ldrb	r3, [r3, #0]
     a6a:	2b00      	cmp	r3, #0
     a6c:	d004      	beq.n	a78 <regular_routine+0x3c>
    motor_status_changed = false;
     a6e:	2300      	movs	r3, #0
     a70:	4a22      	ldr	r2, [pc, #136]	; (afc <regular_routine+0xc0>)
     a72:	7013      	strb	r3, [r2, #0]
    led_button_status_changed = false;
     a74:	4a22      	ldr	r2, [pc, #136]	; (b00 <regular_routine+0xc4>)
     a76:	7013      	strb	r3, [r2, #0]
  }

  if (BATTERY_LOWEST) {
     a78:	4b22      	ldr	r3, [pc, #136]	; (b04 <regular_routine+0xc8>)
     a7a:	781b      	ldrb	r3, [r3, #0]
     a7c:	2b00      	cmp	r3, #0
     a7e:	d006      	beq.n	a8e <regular_routine+0x52>
    motor_disable();          // shutdown PWM motor
     a80:	f7ff ff56 	bl	930 <motor_disable>
    pwm_led_system_cleanup(); // shutdown illumination led
     a84:	f7ff fe86 	bl	794 <pwm_led_system_cleanup>
    pwm_led_toggle_count = 0;
     a88:	2200      	movs	r2, #0
     a8a:	4b1f      	ldr	r3, [pc, #124]	; (b08 <regular_routine+0xcc>)
     a8c:	701a      	strb	r2, [r3, #0]
  // BATTERY_CHARGING = true;      // show battery charge routine
  //} else {
  // BATTERY_CHARGING = false;
  //}
  //}
}
     a8e:	bd10      	pop	{r4, pc}
    } else if (is_button_two_take_action()) {
     a90:	f7ff fe40 	bl	714 <is_button_two_take_action>
     a94:	2800      	cmp	r0, #0
     a96:	d0e6      	beq.n	a66 <regular_routine+0x2a>
      SleepTickCount = SLEEP_TICK_COUNT;
     a98:	4a1c      	ldr	r2, [pc, #112]	; (b0c <regular_routine+0xd0>)
     a9a:	4b16      	ldr	r3, [pc, #88]	; (af4 <regular_routine+0xb8>)
     a9c:	601a      	str	r2, [r3, #0]
      if (!motor_status_changed && !led_button_status_changed &&
     a9e:	4b17      	ldr	r3, [pc, #92]	; (afc <regular_routine+0xc0>)
     aa0:	781a      	ldrb	r2, [r3, #0]
     aa2:	2a00      	cmp	r2, #0
     aa4:	d1df      	bne.n	a66 <regular_routine+0x2a>
     aa6:	4916      	ldr	r1, [pc, #88]	; (b00 <regular_routine+0xc4>)
     aa8:	780a      	ldrb	r2, [r1, #0]
     aaa:	2a00      	cmp	r2, #0
     aac:	d1db      	bne.n	a66 <regular_routine+0x2a>
     aae:	7822      	ldrb	r2, [r4, #0]
     ab0:	2a00      	cmp	r2, #0
     ab2:	d1d8      	bne.n	a66 <regular_routine+0x2a>
        led_button_status_changed = true;
     ab4:	3201      	adds	r2, #1
        motor_status_changed = true;
     ab6:	701a      	strb	r2, [r3, #0]
        led_button_status_changed = true;
     ab8:	700a      	strb	r2, [r1, #0]
        pwm_led_toggle_count++;
     aba:	4a13      	ldr	r2, [pc, #76]	; (b08 <regular_routine+0xcc>)
        motor_toggle_count++;
     abc:	4c14      	ldr	r4, [pc, #80]	; (b10 <regular_routine+0xd4>)
        pwm_led_toggle_count++;
     abe:	7813      	ldrb	r3, [r2, #0]
     ac0:	3301      	adds	r3, #1
     ac2:	7013      	strb	r3, [r2, #0]
        motor_toggle_count++;
     ac4:	7823      	ldrb	r3, [r4, #0]
     ac6:	3301      	adds	r3, #1
     ac8:	7023      	strb	r3, [r4, #0]
        cycle_pwm_led();
     aca:	f7ff fecd 	bl	868 <cycle_pwm_led>
        if (!motor_running && motor_toggle_count == 1) {
     ace:	4b11      	ldr	r3, [pc, #68]	; (b14 <regular_routine+0xd8>)
     ad0:	781b      	ldrb	r3, [r3, #0]
     ad2:	2b00      	cmp	r3, #0
     ad4:	d105      	bne.n	ae2 <regular_routine+0xa6>
     ad6:	7823      	ldrb	r3, [r4, #0]
     ad8:	2b01      	cmp	r3, #1
     ada:	d102      	bne.n	ae2 <regular_routine+0xa6>
          motor_enable();
     adc:	f7ff ff10 	bl	900 <motor_enable>
     ae0:	e7c1      	b.n	a66 <regular_routine+0x2a>
          cycle_pwm_motor();
     ae2:	f7ff ff4d 	bl	980 <cycle_pwm_motor>
     ae6:	e7be      	b.n	a66 <regular_routine+0x2a>
     ae8:	20000047 	.word	0x20000047
     aec:	20000216 	.word	0x20000216
     af0:	20000040 	.word	0x20000040
     af4:	2000004c 	.word	0x2000004c
     af8:	2000003e 	.word	0x2000003e
     afc:	20000051 	.word	0x20000051
     b00:	20000050 	.word	0x20000050
     b04:	20000046 	.word	0x20000046
     b08:	20000041 	.word	0x20000041
     b0c:	00001194 	.word	0x00001194
     b10:	20000008 	.word	0x20000008
     b14:	20000043 	.word	0x20000043

00000b18 <get_battery_level>:
//}
//
//}
//}

void get_battery_level(void) {
     b18:	b530      	push	{r4, r5, lr}
  // bool logic = !motor_running && !Vbus_State;
  bool logic = !Vbus_State;
     b1a:	4b14      	ldr	r3, [pc, #80]	; (b6c <get_battery_level+0x54>)
  if (logic) {
     b1c:	781b      	ldrb	r3, [r3, #0]
     b1e:	2b00      	cmp	r3, #0
     b20:	d11c      	bne.n	b5c <get_battery_level+0x44>
    if (adc_result <= VOLTAGE_THRESH_LOWEST) {
     b22:	4a13      	ldr	r2, [pc, #76]	; (b70 <get_battery_level+0x58>)
     b24:	4d13      	ldr	r5, [pc, #76]	; (b74 <get_battery_level+0x5c>)
     b26:	8812      	ldrh	r2, [r2, #0]
     b28:	4c13      	ldr	r4, [pc, #76]	; (b78 <get_battery_level+0x60>)
     b2a:	4814      	ldr	r0, [pc, #80]	; (b7c <get_battery_level+0x64>)
     b2c:	4914      	ldr	r1, [pc, #80]	; (b80 <get_battery_level+0x68>)
     b2e:	42aa      	cmp	r2, r5
     b30:	d804      	bhi.n	b3c <get_battery_level+0x24>
      // LOWEST SITUATION
      BATTERY_LOWEST = true;
     b32:	2201      	movs	r2, #1
      BATTERY_LOW = false;
     b34:	7003      	strb	r3, [r0, #0]
      BATTERY_LOWEST = true;
     b36:	7022      	strb	r2, [r4, #0]
               adc_result <= VOLTAGE_THRESH_LOW) { // Ensure adc_result >
                                                   // VOLTAGE_THRESH_LOWEST
      // LOW SITUATION
      BATTERY_LOWEST = false;
      BATTERY_LOW = true;
      BATTERY_CHARGED = false;
     b38:	700b      	strb	r3, [r1, #0]
  } else {
    if (Charged_State) {
      BATTERY_CHARGED = true;
    }
  }
}
     b3a:	bd30      	pop	{r4, r5, pc}
    } else if (adc_result > VOLTAGE_THRESH_LOWEST &&
     b3c:	4d11      	ldr	r5, [pc, #68]	; (b84 <get_battery_level+0x6c>)
     b3e:	1955      	adds	r5, r2, r5
     b40:	2d28      	cmp	r5, #40	; 0x28
     b42:	d803      	bhi.n	b4c <get_battery_level+0x34>
      BATTERY_LOW = true;
     b44:	2201      	movs	r2, #1
      BATTERY_LOWEST = false;
     b46:	7023      	strb	r3, [r4, #0]
      BATTERY_LOW = true;
     b48:	7002      	strb	r2, [r0, #0]
     b4a:	e7f5      	b.n	b38 <get_battery_level+0x20>
    } else if (adc_result > VOLTAGE_THRESH_LOW &&
     b4c:	4d0e      	ldr	r5, [pc, #56]	; (b88 <get_battery_level+0x70>)
      BATTERY_LOWEST = false;
     b4e:	7023      	strb	r3, [r4, #0]
    } else if (adc_result > VOLTAGE_THRESH_LOW &&
     b50:	1952      	adds	r2, r2, r5
      BATTERY_LOW = false;
     b52:	7003      	strb	r3, [r0, #0]
    } else if (adc_result > VOLTAGE_THRESH_LOW &&
     b54:	2aed      	cmp	r2, #237	; 0xed
     b56:	d9ef      	bls.n	b38 <get_battery_level+0x20>
      BATTERY_CHARGED = true;
     b58:	2301      	movs	r3, #1
     b5a:	e7ed      	b.n	b38 <get_battery_level+0x20>
    if (Charged_State) {
     b5c:	4b0b      	ldr	r3, [pc, #44]	; (b8c <get_battery_level+0x74>)
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b00      	cmp	r3, #0
     b62:	d0ea      	beq.n	b3a <get_battery_level+0x22>
      BATTERY_CHARGED = true;
     b64:	2201      	movs	r2, #1
     b66:	4b06      	ldr	r3, [pc, #24]	; (b80 <get_battery_level+0x68>)
     b68:	701a      	strb	r2, [r3, #0]
}
     b6a:	e7e6      	b.n	b3a <get_battery_level+0x22>
     b6c:	20000216 	.word	0x20000216
     b70:	200000a0 	.word	0x200000a0
     b74:	00000c6d 	.word	0x00000c6d
     b78:	20000046 	.word	0x20000046
     b7c:	20000045 	.word	0x20000045
     b80:	20000219 	.word	0x20000219
     b84:	fffff392 	.word	0xfffff392
     b88:	fffff369 	.word	0xfffff369
     b8c:	20000218 	.word	0x20000218

00000b90 <system_logic>:

/************************************************************************/
/* LOGIC MACHINE */
/************************************************************************/

void system_logic(void) {
     b90:	b510      	push	{r4, lr}
  if (SYS_TICK_10MS) {
     b92:	4b25      	ldr	r3, [pc, #148]	; (c28 <system_logic+0x98>)
     b94:	781a      	ldrb	r2, [r3, #0]
     b96:	2a00      	cmp	r2, #0
     b98:	d009      	beq.n	bae <system_logic+0x1e>
    SYS_TICK_10MS = false;
     b9a:	2200      	movs	r2, #0
     b9c:	701a      	strb	r2, [r3, #0]
    system_state(); // Get latest system_state
     b9e:	f000 fa07 	bl	fb0 <system_state>

    if (!Vbus_State) {
     ba2:	4b22      	ldr	r3, [pc, #136]	; (c2c <system_logic+0x9c>)
     ba4:	781b      	ldrb	r3, [r3, #0]
     ba6:	2b00      	cmp	r3, #0
     ba8:	d129      	bne.n	bfe <system_logic+0x6e>
      regular_routine();
     baa:	f7ff ff47 	bl	a3c <regular_routine>
        system_inactive();
      }
    }
  }

  if (SYS_TICK_100MS) {
     bae:	4b20      	ldr	r3, [pc, #128]	; (c30 <system_logic+0xa0>)
     bb0:	781a      	ldrb	r2, [r3, #0]
     bb2:	2a00      	cmp	r2, #0
     bb4:	d003      	beq.n	bbe <system_logic+0x2e>
    SYS_TICK_100MS = false;
     bb6:	2200      	movs	r2, #0
     bb8:	701a      	strb	r2, [r3, #0]
    toggle_nsleep();
     bba:	f7ff ff07 	bl	9cc <toggle_nsleep>
  }

  if (SYS_TICK_200MS) {
     bbe:	4b1d      	ldr	r3, [pc, #116]	; (c34 <system_logic+0xa4>)
     bc0:	4c1d      	ldr	r4, [pc, #116]	; (c38 <system_logic+0xa8>)
     bc2:	781a      	ldrb	r2, [r3, #0]
     bc4:	2a00      	cmp	r2, #0
     bc6:	d00d      	beq.n	be4 <system_logic+0x54>
    SYS_TICK_200MS = false;
     bc8:	2200      	movs	r2, #0
     bca:	701a      	strb	r2, [r3, #0]
    sample_adc();
     bcc:	f7ff fabe 	bl	14c <sample_adc>
    get_battery_level();
     bd0:	f7ff ffa2 	bl	b18 <get_battery_level>
    SleepTickCount--;
     bd4:	4a19      	ldr	r2, [pc, #100]	; (c3c <system_logic+0xac>)
     bd6:	6813      	ldr	r3, [r2, #0]
     bd8:	3b01      	subs	r3, #1
     bda:	6013      	str	r3, [r2, #0]

    if (SleepTickCount < 1) {
     bdc:	2b00      	cmp	r3, #0
     bde:	dc15      	bgt.n	c0c <system_logic+0x7c>
      // LongPressB2Flag = false;
      SYS_SLEEP = true;
     be0:	2301      	movs	r3, #1
     be2:	7023      	strb	r3, [r4, #0]
      system_inactive();
      display_battery_state_before_shutdown();
    }
  }

  if (SYS_SLEEP && !Vbus_State) {
     be4:	7823      	ldrb	r3, [r4, #0]
     be6:	2b00      	cmp	r3, #0
     be8:	d008      	beq.n	bfc <system_logic+0x6c>
     bea:	4b10      	ldr	r3, [pc, #64]	; (c2c <system_logic+0x9c>)
     bec:	781b      	ldrb	r3, [r3, #0]
     bee:	2b00      	cmp	r3, #0
     bf0:	d104      	bne.n	bfc <system_logic+0x6c>
    // SleepTickCount = SLEEP_TICK_COUNT;
    SYS_SLEEP = false;
    SYS_READY_TO_SLEEP = false;
     bf2:	4a13      	ldr	r2, [pc, #76]	; (c40 <system_logic+0xb0>)
    SYS_SLEEP = false;
     bf4:	7023      	strb	r3, [r4, #0]
    SYS_READY_TO_SLEEP = false;
     bf6:	7013      	strb	r3, [r2, #0]
void sys_sleep_logic(void) { put_to_sleep(); }
     bf8:	f7ff ff10 	bl	a1c <put_to_sleep>
    sys_sleep_logic();
  }
}
     bfc:	bd10      	pop	{r4, pc}
      if (motor_running) {
     bfe:	4b11      	ldr	r3, [pc, #68]	; (c44 <system_logic+0xb4>)
     c00:	781b      	ldrb	r3, [r3, #0]
     c02:	2b00      	cmp	r3, #0
     c04:	d0d3      	beq.n	bae <system_logic+0x1e>
        system_inactive();
     c06:	f7ff fef9 	bl	9fc <system_inactive>
     c0a:	e7d0      	b.n	bae <system_logic+0x1e>
    } else if ((SleepTickCount < sleep_countdown && !SYS_READY_TO_SLEEP)) {
     c0c:	2b09      	cmp	r3, #9
     c0e:	dce9      	bgt.n	be4 <system_logic+0x54>
     c10:	4b0b      	ldr	r3, [pc, #44]	; (c40 <system_logic+0xb0>)
     c12:	781a      	ldrb	r2, [r3, #0]
     c14:	2a00      	cmp	r2, #0
     c16:	d1e5      	bne.n	be4 <system_logic+0x54>
      SYS_READY_TO_SLEEP = true;
     c18:	3201      	adds	r2, #1
     c1a:	701a      	strb	r2, [r3, #0]
      system_inactive();
     c1c:	f7ff feee 	bl	9fc <system_inactive>
      display_battery_state_before_shutdown();
     c20:	f000 f9aa 	bl	f78 <display_battery_state_before_shutdown>
     c24:	e7de      	b.n	be4 <system_logic+0x54>
     c26:	46c0      	nop			; (mov r8, r8)
     c28:	20000053 	.word	0x20000053
     c2c:	20000216 	.word	0x20000216
     c30:	20000052 	.word	0x20000052
     c34:	20000054 	.word	0x20000054
     c38:	20000048 	.word	0x20000048
     c3c:	2000004c 	.word	0x2000004c
     c40:	20000047 	.word	0x20000047
     c44:	20000043 	.word	0x20000043

00000c48 <sys_tc_callback>:

/************************************************************************/
/* SYSTEM TC TICK Callback function
 */
/************************************************************************/
void sys_tc_callback(struct tc_module *const module_inst) {
     c48:	b510      	push	{r4, lr}
  static int tick_count_100ms;
  static int tick_count_200ms;
  // static int tick_count_500ms;
  // static int tick_count_1000ms;

  tick_count_1ms++;
     c4a:	491e      	ldr	r1, [pc, #120]	; (cc4 <sys_tc_callback+0x7c>)
     c4c:	680b      	ldr	r3, [r1, #0]
     c4e:	1c5a      	adds	r2, r3, #1
     c50:	600a      	str	r2, [r1, #0]
     c52:	4b1d      	ldr	r3, [pc, #116]	; (cc8 <sys_tc_callback+0x80>)

  // port_pin_toggle_output_level (LED0_PIN);
  // // visually check sys clock on PA16

  // Check for 10ms interval
  if (tick_count_1ms >= 10) {
     c54:	2a09      	cmp	r2, #9
     c56:	dd07      	ble.n	c68 <sys_tc_callback+0x20>
    tick_count_10ms++;
     c58:	681a      	ldr	r2, [r3, #0]
     c5a:	3201      	adds	r2, #1
     c5c:	601a      	str	r2, [r3, #0]
    tick_count_1ms = 0;
     c5e:	2200      	movs	r2, #0
     c60:	600a      	str	r2, [r1, #0]
    SYS_TICK_10MS = true; // Flag for 10ms interval
     c62:	2101      	movs	r1, #1
     c64:	4a19      	ldr	r2, [pc, #100]	; (ccc <sys_tc_callback+0x84>)
     c66:	7011      	strb	r1, [r2, #0]
                          // port_pin_toggle_output_level (LED0_PIN);
                          // //
    // visually check sys clock on PA16
  }

  if (tick_count_10ms >= 2) {
     c68:	681c      	ldr	r4, [r3, #0]
     c6a:	4a19      	ldr	r2, [pc, #100]	; (cd0 <sys_tc_callback+0x88>)
     c6c:	2c01      	cmp	r4, #1
     c6e:	dd0f      	ble.n	c90 <sys_tc_callback+0x48>
    tick_count_20ms++;
     c70:	4818      	ldr	r0, [pc, #96]	; (cd4 <sys_tc_callback+0x8c>)
     c72:	6801      	ldr	r1, [r0, #0]
     c74:	3101      	adds	r1, #1
     c76:	6001      	str	r1, [r0, #0]
    // tick_count_10ms = 0;
    SYS_TICK_20MS = true; // Flag for 18ms interval
     c78:	2001      	movs	r0, #1
     c7a:	4917      	ldr	r1, [pc, #92]	; (cd8 <sys_tc_callback+0x90>)
     c7c:	7008      	strb	r0, [r1, #0]
  }

  // Check for 50ms interval
  if (tick_count_10ms >= 5) {
     c7e:	2c04      	cmp	r4, #4
     c80:	dd06      	ble.n	c90 <sys_tc_callback+0x48>
    tick_count_50ms++;
     c82:	6811      	ldr	r1, [r2, #0]
     c84:	1809      	adds	r1, r1, r0
     c86:	6011      	str	r1, [r2, #0]
    tick_count_10ms = 0;
     c88:	2100      	movs	r1, #0
     c8a:	6019      	str	r1, [r3, #0]
    SYS_TICK_50MS = true; // Flag for 50ms interval
     c8c:	4b13      	ldr	r3, [pc, #76]	; (cdc <sys_tc_callback+0x94>)
     c8e:	7018      	strb	r0, [r3, #0]
                          // //
    // visually check sys clock on PA16
  }

  // Check for 100ms interval
  if (tick_count_50ms >= 2) {
     c90:	6811      	ldr	r1, [r2, #0]
     c92:	4b13      	ldr	r3, [pc, #76]	; (ce0 <sys_tc_callback+0x98>)
     c94:	2901      	cmp	r1, #1
     c96:	dd07      	ble.n	ca8 <sys_tc_callback+0x60>
    tick_count_100ms++;
     c98:	6819      	ldr	r1, [r3, #0]
     c9a:	3101      	adds	r1, #1
     c9c:	6019      	str	r1, [r3, #0]
    tick_count_50ms = 0;
     c9e:	2100      	movs	r1, #0
     ca0:	6011      	str	r1, [r2, #0]
    SYS_TICK_100MS = true; // Flag for 100ms interval
     ca2:	4a10      	ldr	r2, [pc, #64]	; (ce4 <sys_tc_callback+0x9c>)
     ca4:	3101      	adds	r1, #1
     ca6:	7011      	strb	r1, [r2, #0]
                           // //
    // visually check sys clock on PA16
  }

  // Check for 200ms interval
  if (tick_count_100ms >= 2) {
     ca8:	681a      	ldr	r2, [r3, #0]
     caa:	2a01      	cmp	r2, #1
     cac:	dd08      	ble.n	cc0 <sys_tc_callback+0x78>
    tick_count_200ms++;
     cae:	490e      	ldr	r1, [pc, #56]	; (ce8 <sys_tc_callback+0xa0>)
     cb0:	680a      	ldr	r2, [r1, #0]
     cb2:	3201      	adds	r2, #1
     cb4:	600a      	str	r2, [r1, #0]
    tick_count_100ms = 0;
     cb6:	2200      	movs	r2, #0
     cb8:	601a      	str	r2, [r3, #0]
    SYS_TICK_200MS = true; // Flag for 200ms interval
     cba:	4b0c      	ldr	r3, [pc, #48]	; (cec <sys_tc_callback+0xa4>)
     cbc:	3201      	adds	r2, #1
     cbe:	701a      	strb	r2, [r3, #0]
                           // port_pin_toggle_output_level (LED0_PIN);
  }
}
     cc0:	bd10      	pop	{r4, pc}
     cc2:	46c0      	nop			; (mov r8, r8)
     cc4:	20000060 	.word	0x20000060
     cc8:	2000005c 	.word	0x2000005c
     ccc:	20000053 	.word	0x20000053
     cd0:	2000006c 	.word	0x2000006c
     cd4:	20000068 	.word	0x20000068
     cd8:	20000055 	.word	0x20000055
     cdc:	20000056 	.word	0x20000056
     ce0:	20000058 	.word	0x20000058
     ce4:	20000052 	.word	0x20000052
     ce8:	20000064 	.word	0x20000064
     cec:	20000054 	.word	0x20000054

00000cf0 <extint_detection_callback>:
  extint_chan_enable_callback(PA_11_EIC_LINE_custom,
                              EXTINT_CALLBACK_TYPE_DETECT);
}

void extint_detection_callback(void) {
  if (!SYS_READY_TO_SLEEP) {
     cf0:	4b03      	ldr	r3, [pc, #12]	; (d00 <extint_detection_callback+0x10>)
     cf2:	781b      	ldrb	r3, [r3, #0]
     cf4:	2b00      	cmp	r3, #0
     cf6:	d102      	bne.n	cfe <extint_detection_callback+0xe>
    SleepTickCount = SLEEP_TICK_COUNT;
     cf8:	4a02      	ldr	r2, [pc, #8]	; (d04 <extint_detection_callback+0x14>)
     cfa:	4b03      	ldr	r3, [pc, #12]	; (d08 <extint_detection_callback+0x18>)
     cfc:	601a      	str	r2, [r3, #0]
  }
}
     cfe:	4770      	bx	lr
     d00:	20000047 	.word	0x20000047
     d04:	00001194 	.word	0x00001194
     d08:	2000000c 	.word	0x2000000c

00000d0c <configure_port_pins>:
void configure_port_pins(void) {
     d0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
     d0e:	2600      	movs	r6, #0
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     d10:	2702      	movs	r7, #2
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     d12:	2501      	movs	r5, #1
     d14:	ac01      	add	r4, sp, #4
  port_pin_set_config(VBUS_PIN, &config_port_pin);
     d16:	0021      	movs	r1, r4
     d18:	201b      	movs	r0, #27
     d1a:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
     d1c:	70a6      	strb	r6, [r4, #2]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     d1e:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(VBUS_PIN, &config_port_pin);
     d20:	f000 f97e 	bl	1020 <port_pin_set_config>
  port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     d24:	0021      	movs	r1, r4
     d26:	2006      	movs	r0, #6
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     d28:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     d2a:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     d2c:	f000 f978 	bl	1020 <port_pin_set_config>
  port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     d30:	0021      	movs	r1, r4
     d32:	2007      	movs	r0, #7
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     d34:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP; // START AT PULL UP.
     d36:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     d38:	f000 f972 	bl	1020 <port_pin_set_config>
  port_pin_set_config(BUTTON_2, &config_port_pin);
     d3c:	0021      	movs	r1, r4
     d3e:	200f      	movs	r0, #15
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     d40:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP; // START AT PULL up.
     d42:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(BUTTON_2, &config_port_pin);
     d44:	f000 f96c 	bl	1020 <port_pin_set_config>
  port_pin_set_config(BAT_CHARGED_PIN, &config_port_pin);
     d48:	0021      	movs	r1, r4
     d4a:	200b      	movs	r0, #11
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     d4c:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     d4e:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(BAT_CHARGED_PIN, &config_port_pin);
     d50:	f000 f966 	bl	1020 <port_pin_set_config>
  port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     d54:	0021      	movs	r1, r4
     d56:	2003      	movs	r0, #3
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     d58:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     d5a:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     d5c:	f000 f960 	bl	1020 <port_pin_set_config>
  port_pin_set_config(XPLAINED_LED, &config_port_pin);
     d60:	0021      	movs	r1, r4
     d62:	2010      	movs	r0, #16
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     d64:	7025      	strb	r5, [r4, #0]
  port_pin_set_config(XPLAINED_LED, &config_port_pin);
     d66:	f000 f95b 	bl	1020 <port_pin_set_config>
  port_pin_set_config(BUTTON_1, &config_port_pin);
     d6a:	0021      	movs	r1, r4
     d6c:	200e      	movs	r0, #14
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     d6e:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP;
     d70:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(BUTTON_1, &config_port_pin);
     d72:	f000 f955 	bl	1020 <port_pin_set_config>
}
     d76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000d78 <configure_system_tc>:
	config->clock_source               = GCLK_GENERATOR_0;
     d78:	2300      	movs	r3, #0
void configure_system_tc(void) {
     d7a:	b510      	push	{r4, lr}
     d7c:	b08e      	sub	sp, #56	; 0x38
     d7e:	aa01      	add	r2, sp, #4
	config->counter_16_bit.value                   = 0x0000;
     d80:	8513      	strh	r3, [r2, #40]	; 0x28
	config->clock_source               = GCLK_GENERATOR_0;
     d82:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     d84:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     d86:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     d88:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     d8a:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     d8c:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     d8e:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     d90:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     d92:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     d94:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     d96:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     d98:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     d9a:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     d9c:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     d9e:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     da0:	8593      	strh	r3, [r2, #44]	; 0x2c
  config_tc.counter_size = TC_COUNTER_SIZE;
     da2:	3304      	adds	r3, #4
     da4:	7093      	strb	r3, [r2, #2]
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     da6:	23a0      	movs	r3, #160	; 0xa0
     da8:	00db      	lsls	r3, r3, #3
     daa:	8093      	strh	r3, [r2, #4]
  config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     dac:	232d      	movs	r3, #45	; 0x2d
     dae:	216f      	movs	r1, #111	; 0x6f
     db0:	446b      	add	r3, sp
     db2:	7019      	strb	r1, [r3, #0]
  config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     db4:	2301      	movs	r3, #1
  tc_init(&system_timer_instance, SYSTEM_TC, &config_tc);
     db6:	4c08      	ldr	r4, [pc, #32]	; (dd8 <configure_system_tc+0x60>)
  config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     db8:	7413      	strb	r3, [r2, #16]
  tc_init(&system_timer_instance, SYSTEM_TC, &config_tc);
     dba:	4908      	ldr	r1, [pc, #32]	; (ddc <configure_system_tc+0x64>)
     dbc:	0020      	movs	r0, r4
     dbe:	f001 f991 	bl	20e4 <tc_init>
     dc2:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     dc4:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     dc6:	b252      	sxtb	r2, r2
     dc8:	2a00      	cmp	r2, #0
     dca:	dbfb      	blt.n	dc4 <configure_system_tc+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     dcc:	2202      	movs	r2, #2
     dce:	8819      	ldrh	r1, [r3, #0]
     dd0:	430a      	orrs	r2, r1
     dd2:	801a      	strh	r2, [r3, #0]
}
     dd4:	b00e      	add	sp, #56	; 0x38
     dd6:	bd10      	pop	{r4, pc}
     dd8:	20000130 	.word	0x20000130
     ddc:	42001800 	.word	0x42001800

00000de0 <system_tc_callbacks>:
void system_tc_callbacks(void) {
     de0:	b510      	push	{r4, lr}
  tc_register_callback(&system_timer_instance, sys_tc_callback,
     de2:	4c0c      	ldr	r4, [pc, #48]	; (e14 <system_tc_callbacks+0x34>)
     de4:	2200      	movs	r2, #0
     de6:	490c      	ldr	r1, [pc, #48]	; (e18 <system_tc_callbacks+0x38>)
     de8:	0020      	movs	r0, r4
     dea:	f001 f91e 	bl	202a <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     dee:	6820      	ldr	r0, [r4, #0]
     df0:	f001 f966 	bl	20c0 <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     df4:	4b09      	ldr	r3, [pc, #36]	; (e1c <system_tc_callbacks+0x3c>)
     df6:	5c1a      	ldrb	r2, [r3, r0]
     df8:	231f      	movs	r3, #31
     dfa:	401a      	ands	r2, r3
     dfc:	3b1e      	subs	r3, #30
     dfe:	0019      	movs	r1, r3
     e00:	4091      	lsls	r1, r2
     e02:	4a07      	ldr	r2, [pc, #28]	; (e20 <system_tc_callbacks+0x40>)
     e04:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     e06:	7e62      	ldrb	r2, [r4, #25]
     e08:	431a      	orrs	r2, r3
     e0a:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     e0c:	6822      	ldr	r2, [r4, #0]
     e0e:	7353      	strb	r3, [r2, #13]
}
     e10:	bd10      	pop	{r4, pc}
     e12:	46c0      	nop			; (mov r8, r8)
     e14:	20000130 	.word	0x20000130
     e18:	00000c49 	.word	0x00000c49
     e1c:	00002858 	.word	0x00002858
     e20:	e000e100 	.word	0xe000e100

00000e24 <configure_extint_channel>:
void configure_extint_channel(void) {
     e24:	b5f0      	push	{r4, r5, r6, r7, lr}
     e26:	b085      	sub	sp, #20
  extint_chan_get_config_defaults(&config_extint_chan);
     e28:	ac01      	add	r4, sp, #4
  config_extint_chan.wake_if_sleeping = true;
     e2a:	2501      	movs	r5, #1
  extint_chan_get_config_defaults(&config_extint_chan);
     e2c:	0020      	movs	r0, r4
     e2e:	f7ff fbe3 	bl	5f8 <extint_chan_get_config_defaults>
  config_extint_chan.gpio_pin_mux = MUX_PA15A_EIC_EXTINT1;
     e32:	2700      	movs	r7, #0
  config_extint_chan.gpio_pin = PIN_PA15A_EIC_EXTINT1;
     e34:	230f      	movs	r3, #15
  config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     e36:	2602      	movs	r6, #2
  extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
     e38:	0021      	movs	r1, r4
     e3a:	0028      	movs	r0, r5
  config_extint_chan.gpio_pin = PIN_PA15A_EIC_EXTINT1;
     e3c:	9301      	str	r3, [sp, #4]
  config_extint_chan.gpio_pin_mux = MUX_PA15A_EIC_EXTINT1;
     e3e:	6067      	str	r7, [r4, #4]
  config_extint_chan.wake_if_sleeping = true;
     e40:	7265      	strb	r5, [r4, #9]
  config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     e42:	7225      	strb	r5, [r4, #8]
  config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     e44:	72e6      	strb	r6, [r4, #11]
  extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
     e46:	f7ff fbe1 	bl	60c <extint_chan_set_config>
  extint_chan_get_config_defaults(&config_extint_chan);
     e4a:	0020      	movs	r0, r4
     e4c:	f7ff fbd4 	bl	5f8 <extint_chan_get_config_defaults>
  config_extint_chan.gpio_pin = PIN_PA11A_EIC_EXTINT3;
     e50:	230b      	movs	r3, #11
  extint_chan_set_config(PA_11_EIC_LINE_custom, &config_extint_chan);
     e52:	0021      	movs	r1, r4
     e54:	2003      	movs	r0, #3
  config_extint_chan.gpio_pin = PIN_PA11A_EIC_EXTINT3;
     e56:	9301      	str	r3, [sp, #4]
  config_extint_chan.gpio_pin_mux = MUX_PA11A_EIC_EXTINT3;
     e58:	6067      	str	r7, [r4, #4]
  config_extint_chan.wake_if_sleeping = true;
     e5a:	7265      	strb	r5, [r4, #9]
  config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
     e5c:	7225      	strb	r5, [r4, #8]
  config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
     e5e:	72e6      	strb	r6, [r4, #11]
  extint_chan_set_config(PA_11_EIC_LINE_custom, &config_extint_chan);
     e60:	f7ff fbd4 	bl	60c <extint_chan_set_config>
}
     e64:	b005      	add	sp, #20
     e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000e68 <configure_extint_callbacks>:
void configure_extint_callbacks(void) {
     e68:	b510      	push	{r4, lr}
  extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE_custom,
     e6a:	4c0a      	ldr	r4, [pc, #40]	; (e94 <configure_extint_callbacks+0x2c>)
     e6c:	2200      	movs	r2, #0
     e6e:	2101      	movs	r1, #1
     e70:	0020      	movs	r0, r4
     e72:	f7ff fb3d 	bl	4f0 <extint_register_callback>
  extint_chan_enable_callback(BUTTON_0_EIC_LINE_custom,
     e76:	2100      	movs	r1, #0
     e78:	2001      	movs	r0, #1
     e7a:	f7ff fb4d 	bl	518 <extint_chan_enable_callback>
  extint_register_callback(extint_detection_callback, PA_11_EIC_LINE_custom,
     e7e:	2200      	movs	r2, #0
     e80:	2103      	movs	r1, #3
     e82:	0020      	movs	r0, r4
     e84:	f7ff fb34 	bl	4f0 <extint_register_callback>
  extint_chan_enable_callback(PA_11_EIC_LINE_custom,
     e88:	2100      	movs	r1, #0
     e8a:	2003      	movs	r0, #3
     e8c:	f7ff fb44 	bl	518 <extint_chan_enable_callback>
}
     e90:	bd10      	pop	{r4, pc}
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	00000cf1 	.word	0x00000cf1

00000e98 <configure_sleep_clock>:
     e98:	2340      	movs	r3, #64	; 0x40
     e9a:	4a02      	ldr	r2, [pc, #8]	; (ea4 <configure_sleep_clock+0xc>)
     e9c:	6991      	ldr	r1, [r2, #24]
     e9e:	430b      	orrs	r3, r1
     ea0:	6193      	str	r3, [r2, #24]
      system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, mask);

  if (result != STATUS_OK) {
    Assert(false);
  }
}
     ea2:	4770      	bx	lr
     ea4:	40000400 	.word	0x40000400

00000ea8 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
     ea8:	2240      	movs	r2, #64	; 0x40
     eaa:	4b06      	ldr	r3, [pc, #24]	; (ec4 <startup_default_pin_state+0x1c>)
     eac:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     eae:	1892      	adds	r2, r2, r2
     eb0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
     eb2:	2280      	movs	r2, #128	; 0x80
     eb4:	0212      	lsls	r2, r2, #8
     eb6:	615a      	str	r2, [r3, #20]
     eb8:	2280      	movs	r2, #128	; 0x80
     eba:	0112      	lsls	r2, r2, #4
     ebc:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     ebe:	2208      	movs	r2, #8
     ec0:	619a      	str	r2, [r3, #24]
  port_pin_set_output_level(SWITCH_OFF_PIN, HIGH); // at high rev 2
  port_pin_set_output_level(BUTTON_2, LOW);
  port_pin_set_output_level(BAT_CHARGED_PIN, LOW);
  port_pin_set_output_level(CHARGN_OFF_PIN, HIGH);
  // port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
}
     ec2:	4770      	bx	lr
     ec4:	41004400 	.word	0x41004400

00000ec8 <startup_sys_configs>:

/************************************************************************/
/* SYSTEM startup function call (config functions)
 */
/************************************************************************/
void startup_sys_configs(void) {
     ec8:	b510      	push	{r4, lr}
  system_init();                    // System Initialize
     eca:	f000 fe80 	bl	1bce <system_init>
	cpu_irq_enable();
     ece:	2201      	movs	r2, #1
     ed0:	4b0e      	ldr	r3, [pc, #56]	; (f0c <startup_sys_configs+0x44>)
     ed2:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     ed4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ed8:	b662      	cpsie	i
  system_interrupt_enable_global(); // System Interrupts
  configure_port_pins();            // System PORTs
     eda:	f7ff ff17 	bl	d0c <configure_port_pins>
  startup_default_pin_state();
     ede:	f7ff ffe3 	bl	ea8 <startup_default_pin_state>
  i2c_master_setup();    // Startup I2C
     ee2:	f001 fb75 	bl	25d0 <i2c_master_setup>
  configure_system_tc(); // System Clock
     ee6:	f7ff ff47 	bl	d78 <configure_system_tc>
  system_tc_callbacks(); // System Clock Callback
     eea:	f7ff ff79 	bl	de0 <system_tc_callbacks>
  configure_pwm_tcc();   // Startup PWM
     eee:	f7ff fc81 	bl	7f4 <configure_pwm_tcc>
  configure_adc();
     ef2:	f7ff f909 	bl	108 <configure_adc>
  configure_pwm_generator();
     ef6:	f7ff fcd3 	bl	8a0 <configure_pwm_generator>

  configure_sleep_clock();
     efa:	f7ff ffcd 	bl	e98 <configure_sleep_clock>
  configure_extint_channel();
     efe:	f7ff ff91 	bl	e24 <configure_extint_channel>
  configure_extint_callbacks();
     f02:	f7ff ffb1 	bl	e68 <configure_extint_callbacks>
  extint_detection_callback();
     f06:	f7ff fef3 	bl	cf0 <extint_detection_callback>
}
     f0a:	bd10      	pop	{r4, pc}
     f0c:	20000010 	.word	0x20000010

00000f10 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
     f10:	2101      	movs	r1, #1
     f12:	4b06      	ldr	r3, [pc, #24]	; (f2c <update_battery_states+0x1c>)

#define VBUS_STATE port_pin_get_input_level(VBUS_PIN)
#define CHARGED_STATE port_pin_get_input_level(BAT_CHARGED_PIN)

void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
     f14:	4806      	ldr	r0, [pc, #24]	; (f30 <update_battery_states+0x20>)
     f16:	6a1a      	ldr	r2, [r3, #32]
     f18:	0ed2      	lsrs	r2, r2, #27
     f1a:	400a      	ands	r2, r1
     f1c:	7002      	strb	r2, [r0, #0]
     f1e:	6a1b      	ldr	r3, [r3, #32]
  Charged_State = CHARGED_STATE;
     f20:	4a04      	ldr	r2, [pc, #16]	; (f34 <update_battery_states+0x24>)
     f22:	0adb      	lsrs	r3, r3, #11
     f24:	400b      	ands	r3, r1
     f26:	7013      	strb	r3, [r2, #0]
}
     f28:	4770      	bx	lr
     f2a:	46c0      	nop			; (mov r8, r8)
     f2c:	41004400 	.word	0x41004400
     f30:	20000216 	.word	0x20000216
     f34:	20000218 	.word	0x20000218

00000f38 <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
     f38:	b510      	push	{r4, lr}
  if (Vbus_State) {
     f3a:	4b0c      	ldr	r3, [pc, #48]	; (f6c <display_battery_state+0x34>)
     f3c:	781a      	ldrb	r2, [r3, #0]
     f3e:	2a00      	cmp	r2, #0
     f40:	d00c      	beq.n	f5c <display_battery_state+0x24>
    if (!Charged_State) {
     f42:	4b0b      	ldr	r3, [pc, #44]	; (f70 <display_battery_state+0x38>)
     f44:	781b      	ldrb	r3, [r3, #0]
     f46:	2b00      	cmp	r3, #0
     f48:	d105      	bne.n	f56 <display_battery_state+0x1e>
      set_battery_charge_routine();
     f4a:	f001 faad 	bl	24a8 <set_battery_charge_routine>
      reset_led_after_disconnect = true;
     f4e:	2201      	movs	r2, #1
     f50:	4b08      	ldr	r3, [pc, #32]	; (f74 <display_battery_state+0x3c>)
     f52:	701a      	strb	r2, [r3, #0]
    }
  } else if (reset_led_after_disconnect) {
    reset_led_after_disconnect = false;
    reset_chip();
  }
}
     f54:	bd10      	pop	{r4, pc}
      set_color_green_indication();
     f56:	f001 fa59 	bl	240c <set_color_green_indication>
     f5a:	e7fb      	b.n	f54 <display_battery_state+0x1c>
  } else if (reset_led_after_disconnect) {
     f5c:	4b05      	ldr	r3, [pc, #20]	; (f74 <display_battery_state+0x3c>)
     f5e:	7819      	ldrb	r1, [r3, #0]
     f60:	2900      	cmp	r1, #0
     f62:	d0f7      	beq.n	f54 <display_battery_state+0x1c>
    reset_led_after_disconnect = false;
     f64:	701a      	strb	r2, [r3, #0]
    reset_chip();
     f66:	f001 fa87 	bl	2478 <reset_chip>
}
     f6a:	e7f3      	b.n	f54 <display_battery_state+0x1c>
     f6c:	20000216 	.word	0x20000216
     f70:	20000218 	.word	0x20000218
     f74:	20000070 	.word	0x20000070

00000f78 <display_battery_state_before_shutdown>:

void display_battery_state_before_shutdown(void) {
     f78:	b510      	push	{r4, lr}

  if (BATTERY_LOWEST) {
     f7a:	4b0a      	ldr	r3, [pc, #40]	; (fa4 <display_battery_state_before_shutdown+0x2c>)
     f7c:	781b      	ldrb	r3, [r3, #0]
     f7e:	2b00      	cmp	r3, #0
     f80:	d105      	bne.n	f8e <display_battery_state_before_shutdown+0x16>
    // set_battery_low_routine();					// blink
  } else if (BATTERY_LOW) {
     f82:	4b09      	ldr	r3, [pc, #36]	; (fa8 <display_battery_state_before_shutdown+0x30>)
     f84:	781b      	ldrb	r3, [r3, #0]
     f86:	2b00      	cmp	r3, #0
     f88:	d002      	beq.n	f90 <display_battery_state_before_shutdown+0x18>
    set_battery_low_routine(); // blink
     f8a:	f001 fad7 	bl	253c <set_battery_low_routine>
  } else if (BATTERY_CHARGED) {
    set_color_green_indication();
  } else {
    set_color_red_indication();
  }
}
     f8e:	bd10      	pop	{r4, pc}
  } else if (BATTERY_CHARGED) {
     f90:	4b06      	ldr	r3, [pc, #24]	; (fac <display_battery_state_before_shutdown+0x34>)
     f92:	781b      	ldrb	r3, [r3, #0]
     f94:	2b00      	cmp	r3, #0
     f96:	d002      	beq.n	f9e <display_battery_state_before_shutdown+0x26>
    set_color_green_indication();
     f98:	f001 fa38 	bl	240c <set_color_green_indication>
     f9c:	e7f7      	b.n	f8e <display_battery_state_before_shutdown+0x16>
    set_color_red_indication();
     f9e:	f001 fa4f 	bl	2440 <set_color_red_indication>
}
     fa2:	e7f4      	b.n	f8e <display_battery_state_before_shutdown+0x16>
     fa4:	20000046 	.word	0x20000046
     fa8:	20000045 	.word	0x20000045
     fac:	20000219 	.word	0x20000219

00000fb0 <system_state>:

/************************************************************************/
/* STATE MACHINE */
/************************************************************************/

void system_state(void) {
     fb0:	b510      	push	{r4, lr}
  update_battery_states();
     fb2:	f7ff ffad 	bl	f10 <update_battery_states>
  display_battery_state();
     fb6:	f7ff ffbf 	bl	f38 <display_battery_state>
     fba:	bd10      	pop	{r4, pc}

00000fbc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     fbc:	4b09      	ldr	r3, [pc, #36]	; (fe4 <cpu_irq_enter_critical+0x28>)
     fbe:	6819      	ldr	r1, [r3, #0]
     fc0:	2900      	cmp	r1, #0
     fc2:	d10b      	bne.n	fdc <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     fc4:	f3ef 8010 	mrs	r0, PRIMASK
     fc8:	4a07      	ldr	r2, [pc, #28]	; (fe8 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     fca:	2800      	cmp	r0, #0
     fcc:	d105      	bne.n	fda <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     fce:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     fd0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     fd4:	4905      	ldr	r1, [pc, #20]	; (fec <cpu_irq_enter_critical+0x30>)
     fd6:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     fd8:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     fda:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     fdc:	681a      	ldr	r2, [r3, #0]
     fde:	3201      	adds	r2, #1
     fe0:	601a      	str	r2, [r3, #0]
}
     fe2:	4770      	bx	lr
     fe4:	20000074 	.word	0x20000074
     fe8:	20000078 	.word	0x20000078
     fec:	20000010 	.word	0x20000010

00000ff0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ff0:	4b08      	ldr	r3, [pc, #32]	; (1014 <cpu_irq_leave_critical+0x24>)
     ff2:	681a      	ldr	r2, [r3, #0]
     ff4:	3a01      	subs	r2, #1
     ff6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ff8:	681b      	ldr	r3, [r3, #0]
     ffa:	2b00      	cmp	r3, #0
     ffc:	d109      	bne.n	1012 <cpu_irq_leave_critical+0x22>
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <cpu_irq_leave_critical+0x28>)
    1000:	781b      	ldrb	r3, [r3, #0]
    1002:	2b00      	cmp	r3, #0
    1004:	d005      	beq.n	1012 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1006:	2201      	movs	r2, #1
    1008:	4b04      	ldr	r3, [pc, #16]	; (101c <cpu_irq_leave_critical+0x2c>)
    100a:	701a      	strb	r2, [r3, #0]
    100c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1010:	b662      	cpsie	i
	}
}
    1012:	4770      	bx	lr
    1014:	20000074 	.word	0x20000074
    1018:	20000078 	.word	0x20000078
    101c:	20000010 	.word	0x20000010

00001020 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1020:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1022:	2280      	movs	r2, #128	; 0x80
    1024:	ab01      	add	r3, sp, #4
    1026:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1028:	780a      	ldrb	r2, [r1, #0]
    102a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    102c:	784a      	ldrb	r2, [r1, #1]
    102e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1030:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1032:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    1034:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1036:	f000 fdb5 	bl	1ba4 <system_pinmux_pin_set_config>
}
    103a:	bd07      	pop	{r0, r1, r2, pc}

0000103c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    103c:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    103e:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1040:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    1042:	421a      	tst	r2, r3
    1044:	d1fc      	bne.n	1040 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    1046:	4770      	bx	lr

00001048 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1048:	b5f0      	push	{r4, r5, r6, r7, lr}
    104a:	0005      	movs	r5, r0
    104c:	b085      	sub	sp, #20
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    104e:	6029      	str	r1, [r5, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1050:	0008      	movs	r0, r1
{
    1052:	0014      	movs	r4, r2
    1054:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1056:	f000 faf7 	bl	1648 <_sercom_get_sercom_inst_index>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    105a:	2701      	movs	r7, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    105c:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    105e:	409f      	lsls	r7, r3
    1060:	003b      	movs	r3, r7
			PM->APBCMASK.reg |= mask;
    1062:	4a5c      	ldr	r2, [pc, #368]	; (11d4 <i2c_master_init+0x18c>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1064:	300e      	adds	r0, #14
    1066:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1068:	b2c7      	uxtb	r7, r0
    106a:	430b      	orrs	r3, r1
    106c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
    106e:	7b23      	ldrb	r3, [r4, #12]
    1070:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1072:	0011      	movs	r1, r2
    1074:	0038      	movs	r0, r7
	gclk_chan_conf.source_generator = config->generator_source;
    1076:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1078:	f000 fd32 	bl	1ae0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    107c:	0038      	movs	r0, r7
    107e:	f000 fcf3 	bl	1a68 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    1082:	7b20      	ldrb	r0, [r4, #12]
    1084:	2100      	movs	r1, #0
    1086:	f000 fa67 	bl	1558 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    108a:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    108c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    108e:	079b      	lsls	r3, r3, #30
    1090:	d500      	bpl.n	1094 <i2c_master_init+0x4c>
    1092:	e09d      	b.n	11d0 <i2c_master_init+0x188>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1094:	2201      	movs	r2, #1
    1096:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    1098:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    109a:	401a      	ands	r2, r3
    109c:	9200      	str	r2, [sp, #0]
    109e:	d000      	beq.n	10a2 <i2c_master_init+0x5a>
    10a0:	e096      	b.n	11d0 <i2c_master_init+0x188>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    10a2:	6828      	ldr	r0, [r5, #0]
    10a4:	f000 fad0 	bl	1648 <_sercom_get_sercom_inst_index>
    10a8:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    10aa:	494b      	ldr	r1, [pc, #300]	; (11d8 <i2c_master_init+0x190>)
    10ac:	f000 faea 	bl	1684 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
    10b0:	4b4a      	ldr	r3, [pc, #296]	; (11dc <i2c_master_init+0x194>)
    10b2:	00bf      	lsls	r7, r7, #2
    10b4:	50fd      	str	r5, [r7, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
    10b6:	466b      	mov	r3, sp
    10b8:	781b      	ldrb	r3, [r3, #0]
	module->enabled_callback = 0;
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
    10ba:	466a      	mov	r2, sp
	module->registered_callback = 0;
    10bc:	762b      	strb	r3, [r5, #24]
	module->enabled_callback = 0;
    10be:	466b      	mov	r3, sp
    10c0:	781b      	ldrb	r3, [r3, #0]
	module->status = STATUS_OK;
    10c2:	7812      	ldrb	r2, [r2, #0]
	module->enabled_callback = 0;
    10c4:	766b      	strb	r3, [r5, #25]
	module->buffer_length = 0;
    10c6:	466b      	mov	r3, sp
    10c8:	881b      	ldrh	r3, [r3, #0]
    10ca:	836b      	strh	r3, [r5, #26]
	module->buffer_remaining = 0;
    10cc:	466b      	mov	r3, sp
    10ce:	881b      	ldrh	r3, [r3, #0]
    10d0:	83ab      	strh	r3, [r5, #28]
	module->status = STATUS_OK;
    10d2:	1dab      	adds	r3, r5, #6
    10d4:	77da      	strb	r2, [r3, #31]
	module->buffer = NULL;
    10d6:	9b00      	ldr	r3, [sp, #0]
    10d8:	622b      	str	r3, [r5, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    10da:	2314      	movs	r3, #20
    10dc:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    10de:	682f      	ldr	r7, [r5, #0]
    10e0:	ae03      	add	r6, sp, #12
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    10e2:	0038      	movs	r0, r7
    10e4:	f000 fab0 	bl	1648 <_sercom_get_sercom_inst_index>
    10e8:	2380      	movs	r3, #128	; 0x80
    10ea:	7033      	strb	r3, [r6, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    10ec:	466b      	mov	r3, sp
    10ee:	781b      	ldrb	r3, [r3, #0]
    10f0:	9001      	str	r0, [sp, #4]
    10f2:	7073      	strb	r3, [r6, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    10f4:	2301      	movs	r3, #1
    10f6:	70b3      	strb	r3, [r6, #2]
	config->powersave    = false;
    10f8:	466b      	mov	r3, sp
    10fa:	781b      	ldrb	r3, [r3, #0]
	uint32_t pad0 = config->pinmux_pad0;
    10fc:	69e0      	ldr	r0, [r4, #28]
    10fe:	70f3      	strb	r3, [r6, #3]
	uint32_t pad1 = config->pinmux_pad1;
    1100:	6a23      	ldr	r3, [r4, #32]
    1102:	9300      	str	r3, [sp, #0]
	if (pad0 == PINMUX_DEFAULT) {
    1104:	2800      	cmp	r0, #0
    1106:	d103      	bne.n	1110 <i2c_master_init+0xc8>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1108:	0001      	movs	r1, r0
    110a:	0038      	movs	r0, r7
    110c:	f000 fa42 	bl	1594 <_sercom_get_default_pad>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1110:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
    1112:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1114:	0c00      	lsrs	r0, r0, #16
    1116:	b2c0      	uxtb	r0, r0
    1118:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    111a:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    111c:	f000 fd42 	bl	1ba4 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
    1120:	9b00      	ldr	r3, [sp, #0]
    1122:	2b00      	cmp	r3, #0
    1124:	d104      	bne.n	1130 <i2c_master_init+0xe8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1126:	2101      	movs	r1, #1
    1128:	0038      	movs	r0, r7
    112a:	f000 fa33 	bl	1594 <_sercom_get_default_pad>
    112e:	9000      	str	r0, [sp, #0]
	pin_conf.mux_position = pad1 & 0xFFFF;
    1130:	466b      	mov	r3, sp
    1132:	781b      	ldrb	r3, [r3, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1134:	0031      	movs	r1, r6
	pin_conf.mux_position = pad1 & 0xFFFF;
    1136:	7033      	strb	r3, [r6, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1138:	2302      	movs	r3, #2
    113a:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    113c:	9b00      	ldr	r3, [sp, #0]
    113e:	0c18      	lsrs	r0, r3, #16
    1140:	b2c0      	uxtb	r0, r0
    1142:	f000 fd2f 	bl	1ba4 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    1146:	8aa3      	ldrh	r3, [r4, #20]
    1148:	80eb      	strh	r3, [r5, #6]
	module->buffer_timeout = config->buffer_timeout;
    114a:	8ae3      	ldrh	r3, [r4, #22]
    114c:	812b      	strh	r3, [r5, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    114e:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1150:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1152:	2a00      	cmp	r2, #0
    1154:	d106      	bne.n	1164 <i2c_master_init+0x11c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    1156:	4b22      	ldr	r3, [pc, #136]	; (11e0 <i2c_master_init+0x198>)
    1158:	3202      	adds	r2, #2
    115a:	789b      	ldrb	r3, [r3, #2]
    115c:	4013      	ands	r3, r2
		tmp_ctrla = 0;
    115e:	1e5a      	subs	r2, r3, #1
    1160:	4193      	sbcs	r3, r2
    1162:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1164:	68a1      	ldr	r1, [r4, #8]
    1166:	6922      	ldr	r2, [r4, #16]
    1168:	430a      	orrs	r2, r1
    116a:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    116c:	1d62      	adds	r2, r4, #5
    116e:	7fd2      	ldrb	r2, [r2, #31]
    1170:	2a00      	cmp	r2, #0
    1172:	d002      	beq.n	117a <i2c_master_init+0x132>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1174:	2280      	movs	r2, #128	; 0x80
    1176:	05d2      	lsls	r2, r2, #23
    1178:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    117a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    117c:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    117e:	0022      	movs	r2, r4
    1180:	322c      	adds	r2, #44	; 0x2c
    1182:	7812      	ldrb	r2, [r2, #0]
    1184:	2a00      	cmp	r2, #0
    1186:	d103      	bne.n	1190 <i2c_master_init+0x148>
    1188:	2280      	movs	r2, #128	; 0x80
    118a:	0492      	lsls	r2, r2, #18
    118c:	4291      	cmp	r1, r2
    118e:	d102      	bne.n	1196 <i2c_master_init+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1190:	2280      	movs	r2, #128	; 0x80
    1192:	0512      	lsls	r2, r2, #20
    1194:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1196:	0022      	movs	r2, r4
    1198:	322d      	adds	r2, #45	; 0x2d
    119a:	7812      	ldrb	r2, [r2, #0]
    119c:	2a00      	cmp	r2, #0
    119e:	d002      	beq.n	11a6 <i2c_master_init+0x15e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    11a0:	2280      	movs	r2, #128	; 0x80
    11a2:	0412      	lsls	r2, r2, #16
    11a4:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    11a6:	342e      	adds	r4, #46	; 0x2e
    11a8:	7822      	ldrb	r2, [r4, #0]
    11aa:	2a00      	cmp	r2, #0
    11ac:	d002      	beq.n	11b4 <i2c_master_init+0x16c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    11ae:	2280      	movs	r2, #128	; 0x80
    11b0:	03d2      	lsls	r2, r2, #15
    11b2:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    11b4:	683a      	ldr	r2, [r7, #0]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    11b6:	9801      	ldr	r0, [sp, #4]
	i2c_module->CTRLA.reg |= tmp_ctrla;
    11b8:	4313      	orrs	r3, r2
    11ba:	603b      	str	r3, [r7, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    11bc:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    11be:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    11c0:	005b      	lsls	r3, r3, #1
    11c2:	607b      	str	r3, [r7, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    11c4:	b2c0      	uxtb	r0, r0
    11c6:	f000 fc97 	bl	1af8 <system_gclk_chan_get_hz>
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11ca:	2323      	movs	r3, #35	; 0x23

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
    11cc:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    11ce:	60fb      	str	r3, [r7, #12]
}
    11d0:	b005      	add	sp, #20
    11d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11d4:	40000400 	.word	0x40000400
    11d8:	000013d9 	.word	0x000013d9
    11dc:	2000021c 	.word	0x2000021c
    11e0:	41002000 	.word	0x41002000

000011e4 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    11e4:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11e6:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    11e8:	7e19      	ldrb	r1, [r3, #24]
    11ea:	4211      	tst	r1, r2
    11ec:	d006      	beq.n	11fc <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11ee:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    11f0:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    11f2:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    11f4:	4213      	tst	r3, r2
    11f6:	d10a      	bne.n	120e <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    11f8:	2000      	movs	r0, #0
    11fa:	e008      	b.n	120e <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    11fc:	8b5a      	ldrh	r2, [r3, #26]
    11fe:	0752      	lsls	r2, r2, #29
    1200:	d5fa      	bpl.n	11f8 <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1202:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
    1204:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1206:	6859      	ldr	r1, [r3, #4]
    1208:	0292      	lsls	r2, r2, #10
    120a:	430a      	orrs	r2, r1
    120c:	605a      	str	r2, [r3, #4]
}
    120e:	4770      	bx	lr

00001210 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    1210:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    1212:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1214:	2601      	movs	r6, #1
    1216:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1218:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    121a:	7e0b      	ldrb	r3, [r1, #24]
    121c:	4033      	ands	r3, r6
    121e:	d102      	bne.n	1226 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    1220:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1222:	4225      	tst	r5, r4
    1224:	d001      	beq.n	122a <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    1226:	2000      	movs	r0, #0
    1228:	e005      	b.n	1236 <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
    122a:	3201      	adds	r2, #1
    122c:	8903      	ldrh	r3, [r0, #8]
    122e:	b292      	uxth	r2, r2
    1230:	4293      	cmp	r3, r2
    1232:	d8f2      	bhi.n	121a <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1234:	2012      	movs	r0, #18
}
    1236:	bd70      	pop	{r4, r5, r6, pc}

00001238 <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1238:	2380      	movs	r3, #128	; 0x80
{
    123a:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    123c:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    123e:	02db      	lsls	r3, r3, #11
    1240:	6862      	ldr	r2, [r4, #4]
    1242:	4313      	orrs	r3, r2
    1244:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1246:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1248:	f7ff ffe2 	bl	1210 <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    124c:	2301      	movs	r3, #1
    124e:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    1250:	bd10      	pop	{r4, pc}
	...

00001254 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1256:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1258:	884b      	ldrh	r3, [r1, #2]
{
    125a:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
    125c:	9301      	str	r3, [sp, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    125e:	6804      	ldr	r4, [r0, #0]

	_i2c_master_wait_for_sync(module);
    1260:	f7ff feec 	bl	103c <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1264:	7a7b      	ldrb	r3, [r7, #9]
    1266:	2b00      	cmp	r3, #0
    1268:	d003      	beq.n	1272 <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    126a:	7ab9      	ldrb	r1, [r7, #10]
    126c:	0028      	movs	r0, r5
    126e:	f7ff ffe3 	bl	1238 <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1272:	6863      	ldr	r3, [r4, #4]
    1274:	4a24      	ldr	r2, [pc, #144]	; (1308 <_i2c_master_write_packet+0xb4>)
    1276:	4013      	ands	r3, r2
    1278:	6063      	str	r3, [r4, #4]
    127a:	7a7a      	ldrb	r2, [r7, #9]
    127c:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    127e:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1280:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1282:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1284:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
    1286:	2900      	cmp	r1, #0
    1288:	d002      	beq.n	1290 <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    128a:	2280      	movs	r2, #128	; 0x80
    128c:	0212      	lsls	r2, r2, #8
    128e:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1290:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1292:	0028      	movs	r0, r5
    1294:	f7ff ffbc 	bl	1210 <_i2c_master_wait_for_bus>
    1298:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    129a:	d115      	bne.n	12c8 <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
    129c:	0028      	movs	r0, r5
    129e:	f7ff ffa1 	bl	11e4 <_i2c_master_address_response>
    12a2:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    12a4:	d110      	bne.n	12c8 <_i2c_master_write_packet+0x74>
    12a6:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    12a8:	9b00      	ldr	r3, [sp, #0]
    12aa:	9a01      	ldr	r2, [sp, #4]
    12ac:	4293      	cmp	r3, r2
    12ae:	d10d      	bne.n	12cc <_i2c_master_write_packet+0x78>
    12b0:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    12b2:	7aab      	ldrb	r3, [r5, #10]
    12b4:	2b00      	cmp	r3, #0
    12b6:	d007      	beq.n	12c8 <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    12b8:	0028      	movs	r0, r5
    12ba:	f7ff febf 	bl	103c <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    12be:	23c0      	movs	r3, #192	; 0xc0
    12c0:	6862      	ldr	r2, [r4, #4]
    12c2:	029b      	lsls	r3, r3, #10
    12c4:	4313      	orrs	r3, r2
    12c6:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
    12c8:	0030      	movs	r0, r6
    12ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    12cc:	2220      	movs	r2, #32
    12ce:	8b63      	ldrh	r3, [r4, #26]
    12d0:	4213      	tst	r3, r2
    12d2:	d016      	beq.n	1302 <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
    12d4:	0028      	movs	r0, r5
    12d6:	f7ff feb1 	bl	103c <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    12da:	687b      	ldr	r3, [r7, #4]
    12dc:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
    12de:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    12e0:	5c9a      	ldrb	r2, [r3, r2]
    12e2:	0023      	movs	r3, r4
    12e4:	3328      	adds	r3, #40	; 0x28
    12e6:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
    12e8:	f7ff ff92 	bl	1210 <_i2c_master_wait_for_bus>
    12ec:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
    12ee:	d1e0      	bne.n	12b2 <_i2c_master_write_packet+0x5e>
    12f0:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    12f2:	8b63      	ldrh	r3, [r4, #26]
    12f4:	3201      	adds	r2, #1
    12f6:	9200      	str	r2, [sp, #0]
    12f8:	2204      	movs	r2, #4
    12fa:	4213      	tst	r3, r2
    12fc:	d0d4      	beq.n	12a8 <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
    12fe:	261e      	movs	r6, #30
    1300:	e7d7      	b.n	12b2 <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
    1302:	2641      	movs	r6, #65	; 0x41
    1304:	e7e0      	b.n	12c8 <_i2c_master_write_packet+0x74>
    1306:	46c0      	nop			; (mov r8, r8)
    1308:	fffbffff 	.word	0xfffbffff

0000130c <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    130c:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    130e:	8b82      	ldrh	r2, [r0, #28]
{
    1310:	0003      	movs	r3, r0
		return STATUS_BUSY;
    1312:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    1314:	2a00      	cmp	r2, #0
    1316:	d105      	bne.n	1324 <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
    1318:	3201      	adds	r2, #1
    131a:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    131c:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    131e:	0018      	movs	r0, r3
    1320:	f7ff ff98 	bl	1254 <_i2c_master_write_packet>
}
    1324:	bd10      	pop	{r4, pc}

00001326 <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1326:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1328:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    132a:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    132c:	421a      	tst	r2, r3
    132e:	d1fc      	bne.n	132a <_i2c_master_wait_for_sync+0x4>
}
    1330:	4770      	bx	lr

00001332 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1332:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1334:	6805      	ldr	r5, [r0, #0]
{
    1336:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1338:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    133a:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    133c:	8b83      	ldrh	r3, [r0, #28]
    133e:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
    1340:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    1342:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1344:	3b01      	subs	r3, #1
    1346:	b29b      	uxth	r3, r3
    1348:	8383      	strh	r3, [r0, #28]
    134a:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
    134c:	0112      	lsls	r2, r2, #4
    134e:	d50a      	bpl.n	1366 <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
    1350:	2b00      	cmp	r3, #0
    1352:	d00d      	beq.n	1370 <_i2c_master_read+0x3e>
    1354:	8b83      	ldrh	r3, [r0, #28]
    1356:	2b01      	cmp	r3, #1
    1358:	d10a      	bne.n	1370 <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    135a:	2380      	movs	r3, #128	; 0x80
    135c:	686a      	ldr	r2, [r5, #4]
    135e:	02db      	lsls	r3, r3, #11
    1360:	4313      	orrs	r3, r2
    1362:	606b      	str	r3, [r5, #4]
    1364:	e004      	b.n	1370 <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
    1366:	2b00      	cmp	r3, #0
    1368:	d002      	beq.n	1370 <_i2c_master_read+0x3e>
    136a:	8b83      	ldrh	r3, [r0, #28]
    136c:	2b00      	cmp	r3, #0
    136e:	d0f4      	beq.n	135a <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
    1370:	8ba3      	ldrh	r3, [r4, #28]
    1372:	2b00      	cmp	r3, #0
    1374:	d10a      	bne.n	138c <_i2c_master_read+0x5a>
		if (module->send_stop) {
    1376:	7aa3      	ldrb	r3, [r4, #10]
    1378:	2b00      	cmp	r3, #0
    137a:	d007      	beq.n	138c <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    137c:	0020      	movs	r0, r4
    137e:	f7ff ffd2 	bl	1326 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1382:	23c0      	movs	r3, #192	; 0xc0
    1384:	686a      	ldr	r2, [r5, #4]
    1386:	029b      	lsls	r3, r3, #10
    1388:	4313      	orrs	r3, r2
    138a:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    138c:	0020      	movs	r0, r4
    138e:	f7ff ffca 	bl	1326 <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1392:	6a23      	ldr	r3, [r4, #32]
    1394:	3528      	adds	r5, #40	; 0x28
    1396:	199e      	adds	r6, r3, r6
    1398:	782b      	ldrb	r3, [r5, #0]
    139a:	b2db      	uxtb	r3, r3
    139c:	7033      	strb	r3, [r6, #0]
}
    139e:	bd70      	pop	{r4, r5, r6, pc}

000013a0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    13a0:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13a2:	6806      	ldr	r6, [r0, #0]
{
    13a4:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    13a6:	8b73      	ldrh	r3, [r6, #26]
    13a8:	075b      	lsls	r3, r3, #29
    13aa:	d503      	bpl.n	13b4 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    13ac:	231e      	movs	r3, #30
    13ae:	3406      	adds	r4, #6
    13b0:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    13b2:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    13b4:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    13b6:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
    13b8:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
    13ba:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
    13bc:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    13be:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
    13c0:	3b01      	subs	r3, #1
    13c2:	b29b      	uxth	r3, r3
    13c4:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    13c6:	f7ff ffae 	bl	1326 <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    13ca:	6a23      	ldr	r3, [r4, #32]
    13cc:	195d      	adds	r5, r3, r5
    13ce:	782b      	ldrb	r3, [r5, #0]
    13d0:	b2db      	uxtb	r3, r3
    13d2:	7033      	strb	r3, [r6, #0]
    13d4:	e7ed      	b.n	13b2 <_i2c_master_write+0x12>
	...

000013d8 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    13d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    13da:	4b5e      	ldr	r3, [pc, #376]	; (1554 <_i2c_master_interrupt_handler+0x17c>)
    13dc:	0080      	lsls	r0, r0, #2
    13de:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13e0:	6825      	ldr	r5, [r4, #0]
    13e2:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    13e4:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    13e6:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
    13e8:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    13ea:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
    13ec:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    13ee:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    13f0:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    13f2:	2a00      	cmp	r2, #0
    13f4:	d12e      	bne.n	1454 <_i2c_master_interrupt_handler+0x7c>
    13f6:	8ba2      	ldrh	r2, [r4, #28]
    13f8:	2a00      	cmp	r2, #0
    13fa:	d02b      	beq.n	1454 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    13fc:	2301      	movs	r3, #1
    13fe:	7e2a      	ldrb	r2, [r5, #24]
    1400:	421a      	tst	r2, r3
    1402:	d006      	beq.n	1412 <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1404:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1406:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1408:	8b6b      	ldrh	r3, [r5, #26]
    140a:	4013      	ands	r3, r2
    140c:	d010      	beq.n	1430 <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
    140e:	2341      	movs	r3, #65	; 0x41
    1410:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
    1412:	8ba3      	ldrh	r3, [r4, #28]
    1414:	b29b      	uxth	r3, r3
    1416:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1418:	7ff3      	ldrb	r3, [r6, #31]
    141a:	2b05      	cmp	r3, #5
    141c:	d13c      	bne.n	1498 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    141e:	1d63      	adds	r3, r4, #5
    1420:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
    1422:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1424:	2b00      	cmp	r3, #0
    1426:	d000      	beq.n	142a <_i2c_master_interrupt_handler+0x52>
    1428:	e08a      	b.n	1540 <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
    142a:	f7ff ffb9 	bl	13a0 <_i2c_master_write>
    142e:	e033      	b.n	1498 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1430:	8b6a      	ldrh	r2, [r5, #26]
    1432:	0752      	lsls	r2, r2, #29
    1434:	d5ed      	bpl.n	1412 <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1436:	2218      	movs	r2, #24
    1438:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
    143a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    143c:	7aa3      	ldrb	r3, [r4, #10]
    143e:	2b00      	cmp	r3, #0
    1440:	d0e7      	beq.n	1412 <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
    1442:	0020      	movs	r0, r4
    1444:	f7ff ff6f 	bl	1326 <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1448:	23c0      	movs	r3, #192	; 0xc0
    144a:	686a      	ldr	r2, [r5, #4]
    144c:	029b      	lsls	r3, r3, #10
    144e:	4313      	orrs	r3, r2
    1450:	606b      	str	r3, [r5, #4]
    1452:	e7de      	b.n	1412 <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1454:	8b62      	ldrh	r2, [r4, #26]
    1456:	2a00      	cmp	r2, #0
    1458:	d05f      	beq.n	151a <_i2c_master_interrupt_handler+0x142>
    145a:	8ba2      	ldrh	r2, [r4, #28]
    145c:	2a00      	cmp	r2, #0
    145e:	d15c      	bne.n	151a <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
    1460:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1462:	2a05      	cmp	r2, #5
    1464:	d159      	bne.n	151a <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1466:	1d62      	adds	r2, r4, #5
    1468:	7fd2      	ldrb	r2, [r2, #31]
    146a:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
    146c:	2a00      	cmp	r2, #0
    146e:	d154      	bne.n	151a <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
    1470:	2303      	movs	r3, #3
    1472:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1474:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
    1476:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
    1478:	7aa3      	ldrb	r3, [r4, #10]
    147a:	2b00      	cmp	r3, #0
    147c:	d04a      	beq.n	1514 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
    147e:	0020      	movs	r0, r4
    1480:	f7ff ff51 	bl	1326 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1484:	23c0      	movs	r3, #192	; 0xc0
    1486:	686a      	ldr	r2, [r5, #4]
    1488:	029b      	lsls	r3, r3, #10
    148a:	4313      	orrs	r3, r2
    148c:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    148e:	07fb      	lsls	r3, r7, #31
    1490:	d502      	bpl.n	1498 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1492:	68e3      	ldr	r3, [r4, #12]
    1494:	0020      	movs	r0, r4
    1496:	4798      	blx	r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1498:	8b63      	ldrh	r3, [r4, #26]
    149a:	2b00      	cmp	r3, #0
    149c:	d01b      	beq.n	14d6 <_i2c_master_interrupt_handler+0xfe>
    149e:	8ba3      	ldrh	r3, [r4, #28]
    14a0:	2b00      	cmp	r3, #0
    14a2:	d118      	bne.n	14d6 <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
    14a4:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    14a6:	2b05      	cmp	r3, #5
    14a8:	d115      	bne.n	14d6 <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    14aa:	1d63      	adds	r3, r4, #5
    14ac:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
    14ae:	2a01      	cmp	r2, #1
    14b0:	d111      	bne.n	14d6 <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    14b2:	7e29      	ldrb	r1, [r5, #24]
    14b4:	3201      	adds	r2, #1
    14b6:	4211      	tst	r1, r2
    14b8:	d000      	beq.n	14bc <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    14ba:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    14bc:	2203      	movs	r2, #3
    14be:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    14c0:	2200      	movs	r2, #0
    14c2:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
    14c4:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    14c6:	07ba      	lsls	r2, r7, #30
    14c8:	d53d      	bpl.n	1546 <_i2c_master_interrupt_handler+0x16e>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    14ca:	7fda      	ldrb	r2, [r3, #31]
    14cc:	2a01      	cmp	r2, #1
    14ce:	d13a      	bne.n	1546 <_i2c_master_interrupt_handler+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    14d0:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    14d2:	0020      	movs	r0, r4
    14d4:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    14d6:	7ff3      	ldrb	r3, [r6, #31]
    14d8:	2b05      	cmp	r3, #5
    14da:	d01a      	beq.n	1512 <_i2c_master_interrupt_handler+0x13a>
    14dc:	7ff3      	ldrb	r3, [r6, #31]
    14de:	2b00      	cmp	r3, #0
    14e0:	d017      	beq.n	1512 <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    14e2:	2303      	movs	r3, #3
    14e4:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    14e6:	2300      	movs	r3, #0
    14e8:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    14ea:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    14ec:	7ff3      	ldrb	r3, [r6, #31]
    14ee:	2b41      	cmp	r3, #65	; 0x41
    14f0:	d00a      	beq.n	1508 <_i2c_master_interrupt_handler+0x130>
    14f2:	7aa3      	ldrb	r3, [r4, #10]
    14f4:	2b00      	cmp	r3, #0
    14f6:	d007      	beq.n	1508 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    14f8:	0020      	movs	r0, r4
    14fa:	f7ff ff14 	bl	1326 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    14fe:	23e0      	movs	r3, #224	; 0xe0
    1500:	686a      	ldr	r2, [r5, #4]
    1502:	02db      	lsls	r3, r3, #11
    1504:	4313      	orrs	r3, r2
    1506:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1508:	077b      	lsls	r3, r7, #29
    150a:	d502      	bpl.n	1512 <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    150c:	6963      	ldr	r3, [r4, #20]
    150e:	0020      	movs	r0, r4
    1510:	4798      	blx	r3
		}
	}
}
    1512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1514:	2301      	movs	r3, #1
    1516:	762b      	strb	r3, [r5, #24]
    1518:	e7b9      	b.n	148e <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    151a:	8b62      	ldrh	r2, [r4, #26]
    151c:	2a00      	cmp	r2, #0
    151e:	d0bb      	beq.n	1498 <_i2c_master_interrupt_handler+0xc0>
    1520:	8ba2      	ldrh	r2, [r4, #28]
    1522:	2a00      	cmp	r2, #0
    1524:	d0b8      	beq.n	1498 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1526:	8b6a      	ldrh	r2, [r5, #26]
    1528:	0692      	lsls	r2, r2, #26
    152a:	d500      	bpl.n	152e <_i2c_master_interrupt_handler+0x156>
    152c:	e777      	b.n	141e <_i2c_master_interrupt_handler+0x46>
    152e:	2b00      	cmp	r3, #0
    1530:	d003      	beq.n	153a <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1532:	8ba3      	ldrh	r3, [r4, #28]
    1534:	2b01      	cmp	r3, #1
    1536:	d100      	bne.n	153a <_i2c_master_interrupt_handler+0x162>
    1538:	e771      	b.n	141e <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
    153a:	2341      	movs	r3, #65	; 0x41
    153c:	77f3      	strb	r3, [r6, #31]
    153e:	e7ab      	b.n	1498 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
    1540:	f7ff fef7 	bl	1332 <_i2c_master_read>
    1544:	e7a8      	b.n	1498 <_i2c_master_interrupt_handler+0xc0>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1546:	07fa      	lsls	r2, r7, #31
    1548:	d5c5      	bpl.n	14d6 <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    154a:	7fdb      	ldrb	r3, [r3, #31]
    154c:	2b00      	cmp	r3, #0
    154e:	d1c2      	bne.n	14d6 <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1550:	68e3      	ldr	r3, [r4, #12]
    1552:	e7be      	b.n	14d2 <_i2c_master_interrupt_handler+0xfa>
    1554:	2000021c 	.word	0x2000021c

00001558 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1558:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    155a:	4c0d      	ldr	r4, [pc, #52]	; (1590 <sercom_set_gclk_generator+0x38>)
{
    155c:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    155e:	7823      	ldrb	r3, [r4, #0]
    1560:	2b00      	cmp	r3, #0
    1562:	d001      	beq.n	1568 <sercom_set_gclk_generator+0x10>
    1564:	2900      	cmp	r1, #0
    1566:	d00c      	beq.n	1582 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    1568:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    156a:	200d      	movs	r0, #13
		gclk_chan_conf.source_generator = generator_source;
    156c:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    156e:	f000 fab7 	bl	1ae0 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1572:	200d      	movs	r0, #13
    1574:	f000 fa78 	bl	1a68 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    1578:	2301      	movs	r3, #1

		return STATUS_OK;
    157a:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    157c:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    157e:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1580:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    1582:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    1584:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    1586:	42ab      	cmp	r3, r5
    1588:	d0fa      	beq.n	1580 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    158a:	201d      	movs	r0, #29
    158c:	e7f8      	b.n	1580 <sercom_set_gclk_generator+0x28>
    158e:	46c0      	nop			; (mov r8, r8)
    1590:	20000079 	.word	0x20000079

00001594 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1594:	4a1d      	ldr	r2, [pc, #116]	; (160c <_sercom_get_default_pad+0x78>)
{
    1596:	0003      	movs	r3, r0
    1598:	b500      	push	{lr}
    159a:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    159c:	4293      	cmp	r3, r2
    159e:	d013      	beq.n	15c8 <_sercom_get_default_pad+0x34>
    15a0:	4a1b      	ldr	r2, [pc, #108]	; (1610 <_sercom_get_default_pad+0x7c>)
    15a2:	4293      	cmp	r3, r2
    15a4:	d01d      	beq.n	15e2 <_sercom_get_default_pad+0x4e>
    15a6:	4a1b      	ldr	r2, [pc, #108]	; (1614 <_sercom_get_default_pad+0x80>)
    15a8:	4293      	cmp	r3, r2
    15aa:	d127      	bne.n	15fc <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    15ac:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15ae:	2903      	cmp	r1, #3
    15b0:	d804      	bhi.n	15bc <_sercom_get_default_pad+0x28>
    15b2:	f001 f865 	bl	2680 <__gnu_thumb1_case_uqi>
    15b6:	0225      	.short	0x0225
    15b8:	0705      	.short	0x0705
    15ba:	4b17      	ldr	r3, [pc, #92]	; (1618 <_sercom_get_default_pad+0x84>)
}
    15bc:	0018      	movs	r0, r3
    15be:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15c0:	4b16      	ldr	r3, [pc, #88]	; (161c <_sercom_get_default_pad+0x88>)
    15c2:	e7fb      	b.n	15bc <_sercom_get_default_pad+0x28>
    15c4:	4b16      	ldr	r3, [pc, #88]	; (1620 <_sercom_get_default_pad+0x8c>)
    15c6:	e7f9      	b.n	15bc <_sercom_get_default_pad+0x28>
	return 0;
    15c8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15ca:	2903      	cmp	r1, #3
    15cc:	d8f6      	bhi.n	15bc <_sercom_get_default_pad+0x28>
    15ce:	f001 f857 	bl	2680 <__gnu_thumb1_case_uqi>
    15d2:	0219      	.short	0x0219
    15d4:	0604      	.short	0x0604
    15d6:	4b13      	ldr	r3, [pc, #76]	; (1624 <_sercom_get_default_pad+0x90>)
    15d8:	e7f0      	b.n	15bc <_sercom_get_default_pad+0x28>
    15da:	4b13      	ldr	r3, [pc, #76]	; (1628 <_sercom_get_default_pad+0x94>)
    15dc:	e7ee      	b.n	15bc <_sercom_get_default_pad+0x28>
    15de:	4b13      	ldr	r3, [pc, #76]	; (162c <_sercom_get_default_pad+0x98>)
    15e0:	e7ec      	b.n	15bc <_sercom_get_default_pad+0x28>
	return 0;
    15e2:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    15e4:	2903      	cmp	r1, #3
    15e6:	d8e9      	bhi.n	15bc <_sercom_get_default_pad+0x28>
    15e8:	f001 f84a 	bl	2680 <__gnu_thumb1_case_uqi>
    15ec:	0604020e 	.word	0x0604020e
    15f0:	4b0f      	ldr	r3, [pc, #60]	; (1630 <_sercom_get_default_pad+0x9c>)
    15f2:	e7e3      	b.n	15bc <_sercom_get_default_pad+0x28>
    15f4:	4b0f      	ldr	r3, [pc, #60]	; (1634 <_sercom_get_default_pad+0xa0>)
    15f6:	e7e1      	b.n	15bc <_sercom_get_default_pad+0x28>
    15f8:	4b0f      	ldr	r3, [pc, #60]	; (1638 <_sercom_get_default_pad+0xa4>)
    15fa:	e7df      	b.n	15bc <_sercom_get_default_pad+0x28>
	return 0;
    15fc:	2300      	movs	r3, #0
    15fe:	e7dd      	b.n	15bc <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1600:	4b0e      	ldr	r3, [pc, #56]	; (163c <_sercom_get_default_pad+0xa8>)
    1602:	e7db      	b.n	15bc <_sercom_get_default_pad+0x28>
    1604:	4b0e      	ldr	r3, [pc, #56]	; (1640 <_sercom_get_default_pad+0xac>)
    1606:	e7d9      	b.n	15bc <_sercom_get_default_pad+0x28>
    1608:	4b0e      	ldr	r3, [pc, #56]	; (1644 <_sercom_get_default_pad+0xb0>)
    160a:	e7d7      	b.n	15bc <_sercom_get_default_pad+0x28>
    160c:	42000c00 	.word	0x42000c00
    1610:	42001000 	.word	0x42001000
    1614:	42000800 	.word	0x42000800
    1618:	00050003 	.word	0x00050003
    161c:	00060003 	.word	0x00060003
    1620:	00070003 	.word	0x00070003
    1624:	00170002 	.word	0x00170002
    1628:	001e0003 	.word	0x001e0003
    162c:	001f0003 	.word	0x001f0003
    1630:	00170003 	.word	0x00170003
    1634:	00100003 	.word	0x00100003
    1638:	00190003 	.word	0x00190003
    163c:	00040003 	.word	0x00040003
    1640:	00160002 	.word	0x00160002
    1644:	00160003 	.word	0x00160003

00001648 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1648:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    164a:	4b0c      	ldr	r3, [pc, #48]	; (167c <_sercom_get_sercom_inst_index+0x34>)
{
    164c:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    164e:	0018      	movs	r0, r3
    1650:	aa01      	add	r2, sp, #4
    1652:	c870      	ldmia	r0!, {r4, r5, r6}
    1654:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1656:	9a01      	ldr	r2, [sp, #4]
    1658:	428a      	cmp	r2, r1
    165a:	d00a      	beq.n	1672 <_sercom_get_sercom_inst_index+0x2a>
    165c:	685a      	ldr	r2, [r3, #4]
    165e:	428a      	cmp	r2, r1
    1660:	d009      	beq.n	1676 <_sercom_get_sercom_inst_index+0x2e>
    1662:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1664:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1666:	428b      	cmp	r3, r1
    1668:	d101      	bne.n	166e <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    166a:	3002      	adds	r0, #2
			return i;
    166c:	b2c0      	uxtb	r0, r0
}
    166e:	b004      	add	sp, #16
    1670:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1672:	2000      	movs	r0, #0
    1674:	e7fa      	b.n	166c <_sercom_get_sercom_inst_index+0x24>
    1676:	2001      	movs	r0, #1
    1678:	e7f8      	b.n	166c <_sercom_get_sercom_inst_index+0x24>
    167a:	46c0      	nop			; (mov r8, r8)
    167c:	0000285c 	.word	0x0000285c

00001680 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    1680:	4770      	bx	lr
	...

00001684 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1684:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1686:	4e09      	ldr	r6, [pc, #36]	; (16ac <_sercom_set_handler+0x28>)
    1688:	4b09      	ldr	r3, [pc, #36]	; (16b0 <_sercom_set_handler+0x2c>)
    168a:	7832      	ldrb	r2, [r6, #0]
    168c:	2a00      	cmp	r2, #0
    168e:	d109      	bne.n	16a4 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    1690:	4c08      	ldr	r4, [pc, #32]	; (16b4 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1692:	4d09      	ldr	r5, [pc, #36]	; (16b8 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    1694:	6022      	str	r2, [r4, #0]
    1696:	6062      	str	r2, [r4, #4]
    1698:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
    169a:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    169c:	601d      	str	r5, [r3, #0]
    169e:	605d      	str	r5, [r3, #4]
    16a0:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
    16a2:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    16a4:	0080      	lsls	r0, r0, #2
    16a6:	5019      	str	r1, [r3, r0]
}
    16a8:	bd70      	pop	{r4, r5, r6, pc}
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	2000007b 	.word	0x2000007b
    16b0:	2000007c 	.word	0x2000007c
    16b4:	2000021c 	.word	0x2000021c
    16b8:	00001681 	.word	0x00001681

000016bc <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    16bc:	2309      	movs	r3, #9
{
    16be:	b513      	push	{r0, r1, r4, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    16c0:	ac01      	add	r4, sp, #4
    16c2:	7023      	strb	r3, [r4, #0]
    16c4:	3301      	adds	r3, #1
    16c6:	7063      	strb	r3, [r4, #1]
    16c8:	3301      	adds	r3, #1
    16ca:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    16cc:	f7ff ffbc 	bl	1648 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    16d0:	5620      	ldrsb	r0, [r4, r0]
}
    16d2:	bd16      	pop	{r1, r2, r4, pc}

000016d4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    16d4:	b510      	push	{r4, lr}
    16d6:	4b02      	ldr	r3, [pc, #8]	; (16e0 <SERCOM0_Handler+0xc>)
    16d8:	2000      	movs	r0, #0
    16da:	681b      	ldr	r3, [r3, #0]
    16dc:	4798      	blx	r3
    16de:	bd10      	pop	{r4, pc}
    16e0:	2000007c 	.word	0x2000007c

000016e4 <SERCOM1_Handler>:
    16e4:	b510      	push	{r4, lr}
    16e6:	4b02      	ldr	r3, [pc, #8]	; (16f0 <SERCOM1_Handler+0xc>)
    16e8:	2001      	movs	r0, #1
    16ea:	685b      	ldr	r3, [r3, #4]
    16ec:	4798      	blx	r3
    16ee:	bd10      	pop	{r4, pc}
    16f0:	2000007c 	.word	0x2000007c

000016f4 <SERCOM2_Handler>:
    16f4:	b510      	push	{r4, lr}
    16f6:	4b02      	ldr	r3, [pc, #8]	; (1700 <SERCOM2_Handler+0xc>)
    16f8:	2002      	movs	r0, #2
    16fa:	689b      	ldr	r3, [r3, #8]
    16fc:	4798      	blx	r3
    16fe:	bd10      	pop	{r4, pc}
    1700:	2000007c 	.word	0x2000007c

00001704 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1704:	2310      	movs	r3, #16
    1706:	4902      	ldr	r1, [pc, #8]	; (1710 <_system_dfll_wait_for_sync+0xc>)
    1708:	68ca      	ldr	r2, [r1, #12]
    170a:	421a      	tst	r2, r3
    170c:	d0fc      	beq.n	1708 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    170e:	4770      	bx	lr
    1710:	40000800 	.word	0x40000800

00001714 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1714:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    1716:	2808      	cmp	r0, #8
    1718:	d806      	bhi.n	1728 <system_clock_source_get_hz+0x14>
    171a:	f000 ffb1 	bl	2680 <__gnu_thumb1_case_uqi>
    171e:	0508      	.short	0x0508
    1720:	12303005 	.word	0x12303005
    1724:	150b      	.short	0x150b
    1726:	28          	.byte	0x28
    1727:	00          	.byte	0x00

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1728:	2400      	movs	r4, #0
	}
}
    172a:	0020      	movs	r0, r4
    172c:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    172e:	4b16      	ldr	r3, [pc, #88]	; (1788 <system_clock_source_get_hz+0x74>)
    1730:	691c      	ldr	r4, [r3, #16]
    1732:	e7fa      	b.n	172a <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1734:	4b15      	ldr	r3, [pc, #84]	; (178c <system_clock_source_get_hz+0x78>)
    1736:	4c16      	ldr	r4, [pc, #88]	; (1790 <system_clock_source_get_hz+0x7c>)
    1738:	6a1b      	ldr	r3, [r3, #32]
    173a:	059b      	lsls	r3, r3, #22
    173c:	0f9b      	lsrs	r3, r3, #30
    173e:	40dc      	lsrs	r4, r3
    1740:	e7f3      	b.n	172a <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    1742:	4b11      	ldr	r3, [pc, #68]	; (1788 <system_clock_source_get_hz+0x74>)
    1744:	695c      	ldr	r4, [r3, #20]
    1746:	e7f0      	b.n	172a <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1748:	4d0f      	ldr	r5, [pc, #60]	; (1788 <system_clock_source_get_hz+0x74>)
			return 0;
    174a:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    174c:	682b      	ldr	r3, [r5, #0]
    174e:	079b      	lsls	r3, r3, #30
    1750:	d5eb      	bpl.n	172a <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    1752:	f7ff ffd7 	bl	1704 <_system_dfll_wait_for_sync>
		switch(_system_clock_inst.dfll.control &
    1756:	2224      	movs	r2, #36	; 0x24
    1758:	682b      	ldr	r3, [r5, #0]
    175a:	4013      	ands	r3, r2
    175c:	2b04      	cmp	r3, #4
    175e:	d111      	bne.n	1784 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1760:	0020      	movs	r0, r4
    1762:	f000 f9c9 	bl	1af8 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    1766:	68ac      	ldr	r4, [r5, #8]
    1768:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    176a:	4344      	muls	r4, r0
    176c:	e7dd      	b.n	172a <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    176e:	4b09      	ldr	r3, [pc, #36]	; (1794 <system_clock_source_get_hz+0x80>)
			return 0;
    1770:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1772:	781b      	ldrb	r3, [r3, #0]
    1774:	075b      	lsls	r3, r3, #29
    1776:	d5d8      	bpl.n	172a <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    1778:	4b03      	ldr	r3, [pc, #12]	; (1788 <system_clock_source_get_hz+0x74>)
    177a:	68dc      	ldr	r4, [r3, #12]
    177c:	e7d5      	b.n	172a <system_clock_source_get_hz+0x16>
		return 32768UL;
    177e:	2480      	movs	r4, #128	; 0x80
    1780:	0224      	lsls	r4, r4, #8
    1782:	e7d2      	b.n	172a <system_clock_source_get_hz+0x16>
			return 48000000UL;
    1784:	4c04      	ldr	r4, [pc, #16]	; (1798 <system_clock_source_get_hz+0x84>)
    1786:	e7d0      	b.n	172a <system_clock_source_get_hz+0x16>
    1788:	20000088 	.word	0x20000088
    178c:	40000800 	.word	0x40000800
    1790:	007a1200 	.word	0x007a1200
    1794:	40000850 	.word	0x40000850
    1798:	02dc6c00 	.word	0x02dc6c00

0000179c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    179c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
	temp.bit.ONDEMAND = config->on_demand;
    179e:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    17a0:	7802      	ldrb	r2, [r0, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    17a2:	7845      	ldrb	r5, [r0, #1]
    17a4:	2001      	movs	r0, #1
    17a6:	2640      	movs	r6, #64	; 0x40
    17a8:	4005      	ands	r5, r0
    17aa:	4020      	ands	r0, r4
    17ac:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    17ae:	4908      	ldr	r1, [pc, #32]	; (17d0 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    17b0:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    17b2:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    17b4:	01c0      	lsls	r0, r0, #7
    17b6:	43b3      	bics	r3, r6
    17b8:	432b      	orrs	r3, r5
    17ba:	43a3      	bics	r3, r4
    17bc:	4303      	orrs	r3, r0
    17be:	2003      	movs	r0, #3
    17c0:	4002      	ands	r2, r0
    17c2:	4804      	ldr	r0, [pc, #16]	; (17d4 <system_clock_source_osc8m_set_config+0x38>)
    17c4:	0212      	lsls	r2, r2, #8
    17c6:	4003      	ands	r3, r0
    17c8:	4313      	orrs	r3, r2
    17ca:	620b      	str	r3, [r1, #32]
}
    17cc:	bd70      	pop	{r4, r5, r6, pc}
    17ce:	46c0      	nop			; (mov r8, r8)
    17d0:	40000800 	.word	0x40000800
    17d4:	fffffcff 	.word	0xfffffcff

000017d8 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    17d8:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    17da:	2808      	cmp	r0, #8
    17dc:	d806      	bhi.n	17ec <system_clock_source_enable+0x14>
    17de:	f000 ff4f 	bl	2680 <__gnu_thumb1_case_uqi>
    17e2:	0514      	.short	0x0514
    17e4:	1a0e0c05 	.word	0x1a0e0c05
    17e8:	2007      	.short	0x2007
    17ea:	35          	.byte	0x35
    17eb:	00          	.byte	0x00
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    17ec:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    17ee:	bd70      	pop	{r4, r5, r6, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    17f0:	2302      	movs	r3, #2
    17f2:	4a19      	ldr	r2, [pc, #100]	; (1858 <system_clock_source_enable+0x80>)
    17f4:	6a11      	ldr	r1, [r2, #32]
    17f6:	430b      	orrs	r3, r1
    17f8:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    17fa:	2000      	movs	r0, #0
    17fc:	e7f7      	b.n	17ee <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    17fe:	2302      	movs	r3, #2
    1800:	4a15      	ldr	r2, [pc, #84]	; (1858 <system_clock_source_enable+0x80>)
    1802:	6991      	ldr	r1, [r2, #24]
    1804:	430b      	orrs	r3, r1
    1806:	6193      	str	r3, [r2, #24]
    1808:	e7f7      	b.n	17fa <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    180a:	2302      	movs	r3, #2
    180c:	4a12      	ldr	r2, [pc, #72]	; (1858 <system_clock_source_enable+0x80>)
    180e:	8a11      	ldrh	r1, [r2, #16]
    1810:	430b      	orrs	r3, r1
    1812:	8213      	strh	r3, [r2, #16]
    1814:	e7f1      	b.n	17fa <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1816:	2302      	movs	r3, #2
    1818:	4a0f      	ldr	r2, [pc, #60]	; (1858 <system_clock_source_enable+0x80>)
    181a:	8a91      	ldrh	r1, [r2, #20]
    181c:	430b      	orrs	r3, r1
    181e:	8293      	strh	r3, [r2, #20]
    1820:	e7eb      	b.n	17fa <system_clock_source_enable+0x22>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1822:	2202      	movs	r2, #2
	SYSCTRL->DFLLCTRL.reg = 0;
    1824:	2400      	movs	r4, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1826:	4e0d      	ldr	r6, [pc, #52]	; (185c <system_clock_source_enable+0x84>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1828:	4d0b      	ldr	r5, [pc, #44]	; (1858 <system_clock_source_enable+0x80>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    182a:	6833      	ldr	r3, [r6, #0]
    182c:	4313      	orrs	r3, r2
    182e:	6033      	str	r3, [r6, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1830:	84aa      	strh	r2, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1832:	f7ff ff67 	bl	1704 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1836:	68b3      	ldr	r3, [r6, #8]
    1838:	62eb      	str	r3, [r5, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    183a:	6873      	ldr	r3, [r6, #4]
    183c:	62ab      	str	r3, [r5, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    183e:	84ac      	strh	r4, [r5, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1840:	f7ff ff60 	bl	1704 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1844:	6833      	ldr	r3, [r6, #0]
    1846:	b29b      	uxth	r3, r3
    1848:	84ab      	strh	r3, [r5, #36]	; 0x24
    184a:	e7d6      	b.n	17fa <system_clock_source_enable+0x22>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    184c:	2302      	movs	r3, #2
    184e:	4a04      	ldr	r2, [pc, #16]	; (1860 <system_clock_source_enable+0x88>)
    1850:	7811      	ldrb	r1, [r2, #0]
    1852:	430b      	orrs	r3, r1
    1854:	7013      	strb	r3, [r2, #0]
    1856:	e7d0      	b.n	17fa <system_clock_source_enable+0x22>
    1858:	40000800 	.word	0x40000800
    185c:	20000088 	.word	0x20000088
    1860:	40000844 	.word	0x40000844

00001864 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1864:	22c2      	movs	r2, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1866:	211e      	movs	r1, #30
{
    1868:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    186a:	4b20      	ldr	r3, [pc, #128]	; (18ec <system_clock_init+0x88>)
    186c:	00d2      	lsls	r2, r2, #3
    186e:	609a      	str	r2, [r3, #8]
    1870:	4a1f      	ldr	r2, [pc, #124]	; (18f0 <system_clock_init+0x8c>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1872:	2500      	movs	r5, #0
    1874:	6853      	ldr	r3, [r2, #4]
{
    1876:	b085      	sub	sp, #20
    1878:	438b      	bics	r3, r1
    187a:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    187c:	2301      	movs	r3, #1
    187e:	ac01      	add	r4, sp, #4
    1880:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1882:	b2e8      	uxtb	r0, r5
    1884:	0021      	movs	r1, r4
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1886:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1888:	f000 f92a 	bl	1ae0 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    188c:	2d18      	cmp	r5, #24
    188e:	d1f8      	bne.n	1882 <system_clock_init+0x1e>

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1890:	2500      	movs	r5, #0
    1892:	466b      	mov	r3, sp
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1894:	2601      	movs	r6, #1
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1896:	2706      	movs	r7, #6

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1898:	4668      	mov	r0, sp
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    189a:	701d      	strb	r5, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    189c:	709d      	strb	r5, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    189e:	705e      	strb	r6, [r3, #1]
	system_clock_source_osc8m_set_config(&osc8m_conf);
    18a0:	f7ff ff7c 	bl	179c <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    18a4:	2006      	movs	r0, #6
    18a6:	f7ff ff97 	bl	17d8 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    18aa:	f000 f82b 	bl	1904 <system_gclk_init>

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    18ae:	0021      	movs	r1, r4
    18b0:	2005      	movs	r0, #5
	config->division_factor    = 1;
    18b2:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    18b4:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    18b6:	7027      	strb	r7, [r4, #0]
	config->run_in_standby     = false;
    18b8:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    18ba:	7265      	strb	r5, [r4, #9]
    18bc:	f000 f832 	bl	1924 <system_gclk_gen_set_config>
    18c0:	2005      	movs	r0, #5
    18c2:	f000 f87d 	bl	19c0 <system_gclk_gen_enable>
	PM->CPUSEL.reg = (uint32_t)divider;
    18c6:	4b0b      	ldr	r3, [pc, #44]	; (18f4 <system_clock_init+0x90>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    18c8:	0021      	movs	r1, r4
    18ca:	721d      	strb	r5, [r3, #8]
    18cc:	0028      	movs	r0, r5
			PM->APBASEL.reg = (uint32_t)divider;
    18ce:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    18d0:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    18d2:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    18d4:	6066      	str	r6, [r4, #4]
	config->high_when_disabled = false;
    18d6:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    18d8:	7027      	strb	r7, [r4, #0]
	config->output_enable      = false;
    18da:	7265      	strb	r5, [r4, #9]
    18dc:	7226      	strb	r6, [r4, #8]
    18de:	f000 f821 	bl	1924 <system_gclk_gen_set_config>
    18e2:	0028      	movs	r0, r5
    18e4:	f000 f86c 	bl	19c0 <system_gclk_gen_enable>
#endif
}
    18e8:	b005      	add	sp, #20
    18ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18ec:	40000800 	.word	0x40000800
    18f0:	41004000 	.word	0x41004000
    18f4:	40000400 	.word	0x40000400

000018f8 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    18f8:	4b01      	ldr	r3, [pc, #4]	; (1900 <system_gclk_is_syncing+0x8>)
    18fa:	7858      	ldrb	r0, [r3, #1]
    18fc:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    18fe:	4770      	bx	lr
    1900:	40000c00 	.word	0x40000c00

00001904 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1904:	2308      	movs	r3, #8
    1906:	4a05      	ldr	r2, [pc, #20]	; (191c <system_gclk_init+0x18>)
    1908:	6991      	ldr	r1, [r2, #24]
    190a:	430b      	orrs	r3, r1
    190c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    190e:	2301      	movs	r3, #1
    1910:	4a03      	ldr	r2, [pc, #12]	; (1920 <system_gclk_init+0x1c>)
    1912:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1914:	7811      	ldrb	r1, [r2, #0]
    1916:	4219      	tst	r1, r3
    1918:	d1fc      	bne.n	1914 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    191a:	4770      	bx	lr
    191c:	40000400 	.word	0x40000400
    1920:	40000c00 	.word	0x40000c00

00001924 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1924:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1926:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1928:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    192a:	0224      	lsls	r4, r4, #8
{
    192c:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    192e:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1930:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    1932:	2b00      	cmp	r3, #0
    1934:	d002      	beq.n	193c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1936:	2380      	movs	r3, #128	; 0x80
    1938:	02db      	lsls	r3, r3, #11
    193a:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    193c:	7a4b      	ldrb	r3, [r1, #9]
    193e:	2b00      	cmp	r3, #0
    1940:	d002      	beq.n	1948 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1942:	2380      	movs	r3, #128	; 0x80
    1944:	031b      	lsls	r3, r3, #12
    1946:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1948:	684b      	ldr	r3, [r1, #4]
    194a:	2b01      	cmp	r3, #1
    194c:	d912      	bls.n	1974 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    194e:	1e5d      	subs	r5, r3, #1
    1950:	401d      	ands	r5, r3
    1952:	2202      	movs	r2, #2
    1954:	2d00      	cmp	r5, #0
    1956:	d006      	beq.n	1966 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1958:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    195a:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    195c:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    195e:	029b      	lsls	r3, r3, #10
    1960:	e007      	b.n	1972 <system_gclk_gen_set_config+0x4e>
				div2_count++;
    1962:	3501      	adds	r5, #1
						mask <<= 1) {
    1964:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1966:	429a      	cmp	r2, r3
    1968:	d3fb      	bcc.n	1962 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    196a:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    196c:	022d      	lsls	r5, r5, #8
    196e:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1970:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1972:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1974:	7a0b      	ldrb	r3, [r1, #8]
    1976:	2b00      	cmp	r3, #0
    1978:	d002      	beq.n	1980 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    197a:	2380      	movs	r3, #128	; 0x80
    197c:	039b      	lsls	r3, r3, #14
    197e:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    1980:	f7ff ffba 	bl	18f8 <system_gclk_is_syncing>
    1984:	2800      	cmp	r0, #0
    1986:	d1fb      	bne.n	1980 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1988:	f7ff fb18 	bl	fbc <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    198c:	4b0a      	ldr	r3, [pc, #40]	; (19b8 <system_gclk_gen_set_config+0x94>)
    198e:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1990:	f7ff ffb2 	bl	18f8 <system_gclk_is_syncing>
    1994:	2800      	cmp	r0, #0
    1996:	d1fb      	bne.n	1990 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1998:	4b08      	ldr	r3, [pc, #32]	; (19bc <system_gclk_gen_set_config+0x98>)
    199a:	609d      	str	r5, [r3, #8]
    199c:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    199e:	f7ff ffab 	bl	18f8 <system_gclk_is_syncing>
    19a2:	2800      	cmp	r0, #0
    19a4:	d1fb      	bne.n	199e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    19a6:	2280      	movs	r2, #128	; 0x80
    19a8:	686b      	ldr	r3, [r5, #4]
    19aa:	0252      	lsls	r2, r2, #9
    19ac:	4013      	ands	r3, r2
    19ae:	431c      	orrs	r4, r3
    19b0:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    19b2:	f7ff fb1d 	bl	ff0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    19b6:	bd70      	pop	{r4, r5, r6, pc}
    19b8:	40000c08 	.word	0x40000c08
    19bc:	40000c00 	.word	0x40000c00

000019c0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    19c0:	b510      	push	{r4, lr}
    19c2:	0004      	movs	r4, r0
	while (system_gclk_is_syncing()) {
    19c4:	f7ff ff98 	bl	18f8 <system_gclk_is_syncing>
    19c8:	2800      	cmp	r0, #0
    19ca:	d1fb      	bne.n	19c4 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    19cc:	f7ff faf6 	bl	fbc <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19d0:	4b07      	ldr	r3, [pc, #28]	; (19f0 <system_gclk_gen_enable+0x30>)
    19d2:	701c      	strb	r4, [r3, #0]
	while (system_gclk_is_syncing()) {
    19d4:	f7ff ff90 	bl	18f8 <system_gclk_is_syncing>
    19d8:	2800      	cmp	r0, #0
    19da:	d1fb      	bne.n	19d4 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    19dc:	2380      	movs	r3, #128	; 0x80
    19de:	4a05      	ldr	r2, [pc, #20]	; (19f4 <system_gclk_gen_enable+0x34>)
    19e0:	025b      	lsls	r3, r3, #9
    19e2:	6851      	ldr	r1, [r2, #4]
    19e4:	430b      	orrs	r3, r1
    19e6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    19e8:	f7ff fb02 	bl	ff0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    19ec:	bd10      	pop	{r4, pc}
    19ee:	46c0      	nop			; (mov r8, r8)
    19f0:	40000c04 	.word	0x40000c04
    19f4:	40000c00 	.word	0x40000c00

000019f8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    19f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19fa:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    19fc:	f7ff ff7c 	bl	18f8 <system_gclk_is_syncing>
    1a00:	2800      	cmp	r0, #0
    1a02:	d1fb      	bne.n	19fc <system_gclk_gen_get_hz+0x4>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a04:	4e15      	ldr	r6, [pc, #84]	; (1a5c <system_gclk_gen_get_hz+0x64>)
	cpu_irq_enter_critical();
    1a06:	f7ff fad9 	bl	fbc <cpu_irq_enter_critical>
    1a0a:	7037      	strb	r7, [r6, #0]
	while (system_gclk_is_syncing()) {
    1a0c:	f7ff ff74 	bl	18f8 <system_gclk_is_syncing>
    1a10:	2800      	cmp	r0, #0
    1a12:	d1fb      	bne.n	1a0c <system_gclk_gen_get_hz+0x14>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1a14:	4c12      	ldr	r4, [pc, #72]	; (1a60 <system_gclk_gen_get_hz+0x68>)
    1a16:	6860      	ldr	r0, [r4, #4]
    1a18:	04c0      	lsls	r0, r0, #19
    1a1a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1a1c:	f7ff fe7a 	bl	1714 <system_clock_source_get_hz>
    1a20:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1a22:	7037      	strb	r7, [r6, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a24:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a26:	4b0f      	ldr	r3, [pc, #60]	; (1a64 <system_gclk_gen_get_hz+0x6c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1a28:	02f6      	lsls	r6, r6, #11
    1a2a:	0ff6      	lsrs	r6, r6, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1a2c:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    1a2e:	f7ff ff63 	bl	18f8 <system_gclk_is_syncing>
    1a32:	2800      	cmp	r0, #0
    1a34:	d1fb      	bne.n	1a2e <system_gclk_gen_get_hz+0x36>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1a36:	68a4      	ldr	r4, [r4, #8]
    1a38:	0224      	lsls	r4, r4, #8
    1a3a:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1a3c:	f7ff fad8 	bl	ff0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1a40:	2e00      	cmp	r6, #0
    1a42:	d108      	bne.n	1a56 <system_gclk_gen_get_hz+0x5e>
    1a44:	2c01      	cmp	r4, #1
    1a46:	d904      	bls.n	1a52 <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
    1a48:	0028      	movs	r0, r5
    1a4a:	0021      	movs	r1, r4
    1a4c:	f000 fe22 	bl	2694 <__udivsi3>
    1a50:	0005      	movs	r5, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    1a52:	0028      	movs	r0, r5
    1a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    1a56:	3401      	adds	r4, #1
    1a58:	40e5      	lsrs	r5, r4
	return gen_input_hz;
    1a5a:	e7fa      	b.n	1a52 <system_gclk_gen_get_hz+0x5a>
    1a5c:	40000c04 	.word	0x40000c04
    1a60:	40000c00 	.word	0x40000c00
    1a64:	40000c08 	.word	0x40000c08

00001a68 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a68:	b510      	push	{r4, lr}
    1a6a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a6c:	f7ff faa6 	bl	fbc <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a70:	4b05      	ldr	r3, [pc, #20]	; (1a88 <system_gclk_chan_enable+0x20>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a72:	4a06      	ldr	r2, [pc, #24]	; (1a8c <system_gclk_chan_enable+0x24>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a74:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a76:	2380      	movs	r3, #128	; 0x80
    1a78:	8851      	ldrh	r1, [r2, #2]
    1a7a:	01db      	lsls	r3, r3, #7
    1a7c:	430b      	orrs	r3, r1
    1a7e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a80:	f7ff fab6 	bl	ff0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1a84:	bd10      	pop	{r4, pc}
    1a86:	46c0      	nop			; (mov r8, r8)
    1a88:	40000c02 	.word	0x40000c02
    1a8c:	40000c00 	.word	0x40000c00

00001a90 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a90:	b510      	push	{r4, lr}
    1a92:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a94:	f7ff fa92 	bl	fbc <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a98:	4b0d      	ldr	r3, [pc, #52]	; (1ad0 <system_gclk_chan_disable+0x40>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1a9a:	4a0e      	ldr	r2, [pc, #56]	; (1ad4 <system_gclk_chan_disable+0x44>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a9c:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a9e:	4b0e      	ldr	r3, [pc, #56]	; (1ad8 <system_gclk_chan_disable+0x48>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1aa0:	4c0e      	ldr	r4, [pc, #56]	; (1adc <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa2:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1aa4:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa6:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1aa8:	4011      	ands	r1, r2
    1aaa:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1aac:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1aae:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1ab0:	4021      	ands	r1, r4
    1ab2:	8059      	strh	r1, [r3, #2]
    1ab4:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ab6:	2280      	movs	r2, #128	; 0x80
    1ab8:	01d2      	lsls	r2, r2, #7
    1aba:	885c      	ldrh	r4, [r3, #2]
    1abc:	4214      	tst	r4, r2
    1abe:	d1fc      	bne.n	1aba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ac0:	885a      	ldrh	r2, [r3, #2]
    1ac2:	0200      	lsls	r0, r0, #8
    1ac4:	400a      	ands	r2, r1
    1ac6:	4302      	orrs	r2, r0
    1ac8:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1aca:	f7ff fa91 	bl	ff0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1ace:	bd10      	pop	{r4, pc}
    1ad0:	40000c02 	.word	0x40000c02
    1ad4:	fffff0ff 	.word	0xfffff0ff
    1ad8:	40000c00 	.word	0x40000c00
    1adc:	ffffbfff 	.word	0xffffbfff

00001ae0 <system_gclk_chan_set_config>:
{
    1ae0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ae2:	780c      	ldrb	r4, [r1, #0]
    1ae4:	0224      	lsls	r4, r4, #8
    1ae6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1ae8:	f7ff ffd2 	bl	1a90 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1aec:	4b01      	ldr	r3, [pc, #4]	; (1af4 <system_gclk_chan_set_config+0x14>)
    1aee:	b2a4      	uxth	r4, r4
    1af0:	805c      	strh	r4, [r3, #2]
}
    1af2:	bd10      	pop	{r4, pc}
    1af4:	40000c00 	.word	0x40000c00

00001af8 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1af8:	b510      	push	{r4, lr}
    1afa:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1afc:	f7ff fa5e 	bl	fbc <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1b00:	4b05      	ldr	r3, [pc, #20]	; (1b18 <system_gclk_chan_get_hz+0x20>)
    1b02:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1b04:	4b05      	ldr	r3, [pc, #20]	; (1b1c <system_gclk_chan_get_hz+0x24>)
    1b06:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1b08:	f7ff fa72 	bl	ff0 <cpu_irq_leave_critical>
    1b0c:	0524      	lsls	r4, r4, #20
    1b0e:	0f24      	lsrs	r4, r4, #28

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1b10:	0020      	movs	r0, r4
    1b12:	f7ff ff71 	bl	19f8 <system_gclk_gen_get_hz>
}
    1b16:	bd10      	pop	{r4, pc}
    1b18:	40000c02 	.word	0x40000c02
    1b1c:	40000c00 	.word	0x40000c00

00001b20 <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1b20:	78d3      	ldrb	r3, [r2, #3]
{
    1b22:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1b24:	2b00      	cmp	r3, #0
    1b26:	d135      	bne.n	1b94 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1b28:	7814      	ldrb	r4, [r2, #0]
    1b2a:	2c80      	cmp	r4, #128	; 0x80
    1b2c:	d003      	beq.n	1b36 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1b2e:	2380      	movs	r3, #128	; 0x80
    1b30:	0624      	lsls	r4, r4, #24
    1b32:	025b      	lsls	r3, r3, #9
    1b34:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1b36:	2502      	movs	r5, #2
    1b38:	7854      	ldrb	r4, [r2, #1]
    1b3a:	43ac      	bics	r4, r5
    1b3c:	d106      	bne.n	1b4c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1b3e:	7894      	ldrb	r4, [r2, #2]
    1b40:	2c00      	cmp	r4, #0
    1b42:	d124      	bne.n	1b8e <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1b44:	2480      	movs	r4, #128	; 0x80
    1b46:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b48:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1b4a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b4c:	7854      	ldrb	r4, [r2, #1]
    1b4e:	3c01      	subs	r4, #1
    1b50:	2c01      	cmp	r4, #1
    1b52:	d801      	bhi.n	1b58 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1b54:	4c12      	ldr	r4, [pc, #72]	; (1ba0 <_system_pinmux_config+0x80>)
    1b56:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b58:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1b5a:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1b5c:	05e4      	lsls	r4, r4, #23
    1b5e:	432c      	orrs	r4, r5
    1b60:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b62:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b64:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b66:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b68:	0624      	lsls	r4, r4, #24
    1b6a:	432c      	orrs	r4, r5
    1b6c:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b6e:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b70:	78d4      	ldrb	r4, [r2, #3]
    1b72:	2c00      	cmp	r4, #0
    1b74:	d10a      	bne.n	1b8c <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b76:	035b      	lsls	r3, r3, #13
    1b78:	d503      	bpl.n	1b82 <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b7a:	7893      	ldrb	r3, [r2, #2]
    1b7c:	2b01      	cmp	r3, #1
    1b7e:	d10c      	bne.n	1b9a <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1b80:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b82:	7853      	ldrb	r3, [r2, #1]
    1b84:	3b01      	subs	r3, #1
    1b86:	2b01      	cmp	r3, #1
    1b88:	d800      	bhi.n	1b8c <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1b8a:	6081      	str	r1, [r0, #8]
		}
	}
}
    1b8c:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b8e:	24c0      	movs	r4, #192	; 0xc0
    1b90:	02e4      	lsls	r4, r4, #11
    1b92:	e7d9      	b.n	1b48 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1b94:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1b96:	2300      	movs	r3, #0
    1b98:	e7de      	b.n	1b58 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1b9a:	6141      	str	r1, [r0, #20]
    1b9c:	e7f1      	b.n	1b82 <_system_pinmux_config+0x62>
    1b9e:	46c0      	nop			; (mov r8, r8)
    1ba0:	fffbffff 	.word	0xfffbffff

00001ba4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ba4:	b510      	push	{r4, lr}
    1ba6:	0003      	movs	r3, r0
    1ba8:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    1baa:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1bac:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1bae:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1bb0:	4281      	cmp	r1, r0
    1bb2:	d102      	bne.n	1bba <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1bb4:	4904      	ldr	r1, [pc, #16]	; (1bc8 <system_pinmux_pin_set_config+0x24>)
    1bb6:	01e0      	lsls	r0, r4, #7
    1bb8:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1bba:	211f      	movs	r1, #31
    1bbc:	400b      	ands	r3, r1
    1bbe:	391e      	subs	r1, #30
    1bc0:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1bc2:	f7ff ffad 	bl	1b20 <_system_pinmux_config>
}
    1bc6:	bd10      	pop	{r4, pc}
    1bc8:	41004400 	.word	0x41004400

00001bcc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1bcc:	4770      	bx	lr

00001bce <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1bce:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1bd0:	f7ff fe48 	bl	1864 <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1bd4:	f7ff fffa 	bl	1bcc <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1bd8:	f7fe fce2 	bl	5a0 <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1bdc:	f7ff fff6 	bl	1bcc <_system_dummy_init>
}
    1be0:	bd10      	pop	{r4, pc}

00001be2 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1be2:	2000      	movs	r0, #0
    1be4:	4770      	bx	lr
	...

00001be8 <_tcc_set_compare_value.isra.5>:
 *
 * \retval  STATUS_OK               The compare value was updated successfully
 * \retval  STATUS_ERR_INVALID_ARG  An invalid channel index was supplied or
 *                                  compare value exceed resolution
 */
static enum status_code _tcc_set_compare_value(
    1be8:	b530      	push	{r4, r5, lr}
    1bea:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1bec:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1bee:	2903      	cmp	r1, #3
    1bf0:	d813      	bhi.n	1c1a <_tcc_set_compare_value.isra.5+0x32>
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    1bf2:	4d10      	ldr	r5, [pc, #64]	; (1c34 <_tcc_set_compare_value.isra.5+0x4c>)
    1bf4:	42aa      	cmp	r2, r5
    1bf6:	d810      	bhi.n	1c1a <_tcc_set_compare_value.isra.5+0x32>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	d00f      	beq.n	1c1c <_tcc_set_compare_value.isra.5+0x34>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
				(TCC_STATUS_CCBV0 << channel_index)) {
    1bfc:	2380      	movs	r3, #128	; 0x80
    1bfe:	025b      	lsls	r3, r3, #9
    1c00:	408b      	lsls	r3, r1
		while(tcc_module->STATUS.reg  &
    1c02:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1c04:	4203      	tst	r3, r0
    1c06:	d1fc      	bne.n	1c02 <_tcc_set_compare_value.isra.5+0x1a>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1c08:	2580      	movs	r5, #128	; 0x80
    1c0a:	032d      	lsls	r5, r5, #12
    1c0c:	408d      	lsls	r5, r1
		while(tcc_module->SYNCBUSY.reg  &
    1c0e:	68a0      	ldr	r0, [r4, #8]
    1c10:	4028      	ands	r0, r5
    1c12:	d1fc      	bne.n	1c0e <_tcc_set_compare_value.isra.5+0x26>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    1c14:	311c      	adds	r1, #28
    1c16:	0089      	lsls	r1, r1, #2
    1c18:	510a      	str	r2, [r1, r4]
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1c1a:	bd30      	pop	{r4, r5, pc}
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1c1c:	2080      	movs	r0, #128	; 0x80
    1c1e:	0040      	lsls	r0, r0, #1
    1c20:	4088      	lsls	r0, r1
    1c22:	68a3      	ldr	r3, [r4, #8]
    1c24:	4003      	ands	r3, r0
    1c26:	d1fc      	bne.n	1c22 <_tcc_set_compare_value.isra.5+0x3a>
		tcc_module->CC[channel_index].reg = compare;
    1c28:	3110      	adds	r1, #16
    1c2a:	0089      	lsls	r1, r1, #2
    1c2c:	1861      	adds	r1, r4, r1
    1c2e:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1c30:	0018      	movs	r0, r3
    1c32:	e7f2      	b.n	1c1a <_tcc_set_compare_value.isra.5+0x32>
    1c34:	00ffffff 	.word	0x00ffffff

00001c38 <tcc_get_config_defaults>:
	config->counter.period                 = _tcc_maxs[module_index];
    1c38:	4a37      	ldr	r2, [pc, #220]	; (1d18 <tcc_get_config_defaults+0xe0>)
{
    1c3a:	b510      	push	{r4, lr}
	config->counter.period                 = _tcc_maxs[module_index];
    1c3c:	6042      	str	r2, [r0, #4]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1c3e:	0002      	movs	r2, r0
	config->counter.count                  = 0;
    1c40:	2300      	movs	r3, #0
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1c42:	0004      	movs	r4, r0
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1c44:	322c      	adds	r2, #44	; 0x2c
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1c46:	3448      	adds	r4, #72	; 0x48
	config->counter.count                  = 0;
    1c48:	6003      	str	r3, [r0, #0]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    1c4a:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1c4c:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1c4e:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1c50:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1c52:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1c54:	61c3      	str	r3, [r0, #28]
    1c56:	6203      	str	r3, [r0, #32]
    1c58:	6243      	str	r3, [r0, #36]	; 0x24
    1c5a:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1c5c:	7503      	strb	r3, [r0, #20]
    1c5e:	7543      	strb	r3, [r0, #21]
    1c60:	7583      	strb	r3, [r0, #22]
    1c62:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1c64:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1c66:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1c68:	7403      	strb	r3, [r0, #16]
    1c6a:	7443      	strb	r3, [r0, #17]
    1c6c:	7483      	strb	r3, [r0, #18]
    1c6e:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1c70:	7013      	strb	r3, [r2, #0]
    1c72:	7053      	strb	r3, [r2, #1]
    1c74:	7093      	strb	r3, [r2, #2]
    1c76:	70d3      	strb	r3, [r2, #3]
    1c78:	7113      	strb	r3, [r2, #4]
    1c7a:	7153      	strb	r3, [r2, #5]
    1c7c:	7193      	strb	r3, [r2, #6]
    1c7e:	71d3      	strb	r3, [r2, #7]
    1c80:	7213      	strb	r3, [r2, #8]
    1c82:	7253      	strb	r3, [r2, #9]
    1c84:	7293      	strb	r3, [r2, #10]
    1c86:	72d3      	strb	r3, [r2, #11]
    1c88:	320c      	adds	r2, #12
    1c8a:	7013      	strb	r3, [r2, #0]
    1c8c:	7053      	strb	r3, [r2, #1]
    1c8e:	7093      	strb	r3, [r2, #2]
    1c90:	70d3      	strb	r3, [r2, #3]
    1c92:	7113      	strb	r3, [r2, #4]
    1c94:	7153      	strb	r3, [r2, #5]
    1c96:	7193      	strb	r3, [r2, #6]
    1c98:	71d3      	strb	r3, [r2, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1c9a:	7213      	strb	r3, [r2, #8]
    1c9c:	7253      	strb	r3, [r2, #9]
    1c9e:	7293      	strb	r3, [r2, #10]
    1ca0:	72d3      	strb	r3, [r2, #11]
    1ca2:	7313      	strb	r3, [r2, #12]
    1ca4:	7353      	strb	r3, [r2, #13]
    1ca6:	7393      	strb	r3, [r2, #14]
    1ca8:	73d3      	strb	r3, [r2, #15]
    1caa:	1d01      	adds	r1, r0, #4
    1cac:	7023      	strb	r3, [r4, #0]
    1cae:	7063      	strb	r3, [r4, #1]
    1cb0:	70a3      	strb	r3, [r4, #2]
    1cb2:	70e3      	strb	r3, [r4, #3]
    1cb4:	7123      	strb	r3, [r4, #4]
    1cb6:	7163      	strb	r3, [r4, #5]
    1cb8:	71a3      	strb	r3, [r4, #6]
    1cba:	71e3      	strb	r3, [r4, #7]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1cbc:	7223      	strb	r3, [r4, #8]
    1cbe:	7263      	strb	r3, [r4, #9]
    1cc0:	72a3      	strb	r3, [r4, #10]
    1cc2:	72e3      	strb	r3, [r4, #11]
    1cc4:	7323      	strb	r3, [r4, #12]
    1cc6:	7363      	strb	r3, [r4, #13]
    1cc8:	73a3      	strb	r3, [r4, #14]
    1cca:	73e3      	strb	r3, [r4, #15]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1ccc:	3450      	adds	r4, #80	; 0x50
    1cce:	7023      	strb	r3, [r4, #0]
    1cd0:	6583      	str	r3, [r0, #88]	; 0x58
    1cd2:	6783      	str	r3, [r0, #120]	; 0x78
    1cd4:	7063      	strb	r3, [r4, #1]
    1cd6:	65c3      	str	r3, [r0, #92]	; 0x5c
    1cd8:	67c3      	str	r3, [r0, #124]	; 0x7c
    1cda:	70a3      	strb	r3, [r4, #2]
    1cdc:	6603      	str	r3, [r0, #96]	; 0x60
    1cde:	67cb      	str	r3, [r1, #124]	; 0x7c
    1ce0:	3197      	adds	r1, #151	; 0x97
    1ce2:	700b      	strb	r3, [r1, #0]
	config->double_buffering_enabled  = true;
    1ce4:	2101      	movs	r1, #1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1ce6:	3a30      	subs	r2, #48	; 0x30
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1ce8:	6643      	str	r3, [r0, #100]	; 0x64
    1cea:	67d3      	str	r3, [r2, #124]	; 0x7c
    1cec:	3294      	adds	r2, #148	; 0x94
    1cee:	7013      	strb	r3, [r2, #0]
    1cf0:	3a14      	subs	r2, #20
    1cf2:	6683      	str	r3, [r0, #104]	; 0x68
    1cf4:	6013      	str	r3, [r2, #0]
    1cf6:	7553      	strb	r3, [r2, #21]
    1cf8:	3204      	adds	r2, #4
    1cfa:	66c3      	str	r3, [r0, #108]	; 0x6c
    1cfc:	6013      	str	r3, [r2, #0]
    1cfe:	7493      	strb	r3, [r2, #18]
    1d00:	3204      	adds	r2, #4
    1d02:	6703      	str	r3, [r0, #112]	; 0x70
    1d04:	6013      	str	r3, [r2, #0]
    1d06:	73d3      	strb	r3, [r2, #15]
    1d08:	6743      	str	r3, [r0, #116]	; 0x74
    1d0a:	3204      	adds	r2, #4
	config->run_in_standby            = false;
    1d0c:	30a1      	adds	r0, #161	; 0xa1
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1d0e:	6013      	str	r3, [r2, #0]
	config->double_buffering_enabled  = true;
    1d10:	7311      	strb	r1, [r2, #12]
	config->run_in_standby            = false;
    1d12:	7003      	strb	r3, [r0, #0]
}
    1d14:	bd10      	pop	{r4, pc}
    1d16:	46c0      	nop			; (mov r8, r8)
    1d18:	00ffffff 	.word	0x00ffffff

00001d1c <tcc_init>:
{
    1d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d1e:	0006      	movs	r6, r0
    1d20:	b08f      	sub	sp, #60	; 0x3c
	uint8_t module_index = _tcc_get_inst_index(hw);
    1d22:	0008      	movs	r0, r1
{
    1d24:	000d      	movs	r5, r1
    1d26:	0014      	movs	r4, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    1d28:	f7ff ff5b 	bl	1be2 <_tcc_get_inst_index>
			PM->APBCMASK.reg |= mask;
    1d2c:	2320      	movs	r3, #32
    1d2e:	4aa3      	ldr	r2, [pc, #652]	; (1fbc <tcc_init+0x2a0>)
    1d30:	9009      	str	r0, [sp, #36]	; 0x24
    1d32:	6a11      	ldr	r1, [r2, #32]
		return STATUS_ERR_DENIED;
    1d34:	201c      	movs	r0, #28
    1d36:	430b      	orrs	r3, r1
    1d38:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    1d3a:	682b      	ldr	r3, [r5, #0]
    1d3c:	079b      	lsls	r3, r3, #30
    1d3e:	d407      	bmi.n	1d50 <tcc_init+0x34>
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    1d40:	682b      	ldr	r3, [r5, #0]
    1d42:	07db      	lsls	r3, r3, #31
    1d44:	d404      	bmi.n	1d50 <tcc_init+0x34>
    1d46:	4a9e      	ldr	r2, [pc, #632]	; (1fc0 <tcc_init+0x2a4>)
	if ((config->counter.count > count_max)
    1d48:	6823      	ldr	r3, [r4, #0]
    1d4a:	4293      	cmp	r3, r2
    1d4c:	d902      	bls.n	1d54 <tcc_init+0x38>
		return STATUS_ERR_INVALID_ARG;
    1d4e:	2017      	movs	r0, #23
}
    1d50:	b00f      	add	sp, #60	; 0x3c
    1d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		|| (config->counter.period > count_max)
    1d54:	6863      	ldr	r3, [r4, #4]
    1d56:	4293      	cmp	r3, r2
    1d58:	d8f9      	bhi.n	1d4e <tcc_init+0x32>
    1d5a:	0023      	movs	r3, r4
    1d5c:	0021      	movs	r1, r4
    1d5e:	331c      	adds	r3, #28
    1d60:	312c      	adds	r1, #44	; 0x2c
		if ((config->compare.match[i] > count_max)
    1d62:	6818      	ldr	r0, [r3, #0]
    1d64:	4290      	cmp	r0, r2
    1d66:	d8f2      	bhi.n	1d4e <tcc_init+0x32>
    1d68:	3304      	adds	r3, #4
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1d6a:	428b      	cmp	r3, r1
    1d6c:	d1f9      	bne.n	1d62 <tcc_init+0x46>
    1d6e:	2200      	movs	r2, #0
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1d70:	2180      	movs	r1, #128	; 0x80
    1d72:	9202      	str	r2, [sp, #8]
    1d74:	0449      	lsls	r1, r1, #17
		if (config->capture.channel_function[i] ==
    1d76:	18a0      	adds	r0, r4, r2
    1d78:	7c00      	ldrb	r0, [r0, #16]
    1d7a:	2801      	cmp	r0, #1
    1d7c:	d104      	bne.n	1d88 <tcc_init+0x6c>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    1d7e:	0008      	movs	r0, r1
    1d80:	4090      	lsls	r0, r2
    1d82:	9f02      	ldr	r7, [sp, #8]
    1d84:	4307      	orrs	r7, r0
    1d86:	9702      	str	r7, [sp, #8]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    1d88:	3201      	adds	r2, #1
    1d8a:	2a04      	cmp	r2, #4
    1d8c:	d1f3      	bne.n	1d76 <tcc_init+0x5a>
	if (config->run_in_standby) {
    1d8e:	0022      	movs	r2, r4
    1d90:	32a1      	adds	r2, #161	; 0xa1
    1d92:	7812      	ldrb	r2, [r2, #0]
    1d94:	2a00      	cmp	r2, #0
    1d96:	d004      	beq.n	1da2 <tcc_init+0x86>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    1d98:	2280      	movs	r2, #128	; 0x80
    1d9a:	9902      	ldr	r1, [sp, #8]
    1d9c:	0112      	lsls	r2, r2, #4
    1d9e:	4311      	orrs	r1, r2
    1da0:	9102      	str	r1, [sp, #8]
	if (config->counter.oneshot) {
    1da2:	7a22      	ldrb	r2, [r4, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    1da4:	1e51      	subs	r1, r2, #1
    1da6:	418a      	sbcs	r2, r1
    1da8:	0092      	lsls	r2, r2, #2
    1daa:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    1dac:	7a62      	ldrb	r2, [r4, #9]
    1dae:	2a01      	cmp	r2, #1
    1db0:	d102      	bne.n	1db8 <tcc_init+0x9c>
		ctrlb |= TCC_CTRLBSET_DIR;
    1db2:	9903      	ldr	r1, [sp, #12]
    1db4:	4311      	orrs	r1, r2
    1db6:	9103      	str	r1, [sp, #12]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1db8:	7b22      	ldrb	r2, [r4, #12]
    1dba:	9206      	str	r2, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1dbc:	7ae2      	ldrb	r2, [r4, #11]
    1dbe:	9207      	str	r2, [sp, #28]
    1dc0:	2200      	movs	r2, #0
    1dc2:	4694      	mov	ip, r2
		if (cfg->capture_channel >= cc_num) {
    1dc4:	7a5f      	ldrb	r7, [r3, #9]
    1dc6:	2f03      	cmp	r7, #3
    1dc8:	d8c1      	bhi.n	1d4e <tcc_init+0x32>
		if (cfg->filter_value > 0xF) {
    1dca:	7819      	ldrb	r1, [r3, #0]
    1dcc:	290f      	cmp	r1, #15
    1dce:	d8be      	bhi.n	1d4e <tcc_init+0x32>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1dd0:	20f0      	movs	r0, #240	; 0xf0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1dd2:	785a      	ldrb	r2, [r3, #1]
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1dd4:	0500      	lsls	r0, r0, #20
    1dd6:	0609      	lsls	r1, r1, #24
    1dd8:	4001      	ands	r1, r0
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1dda:	0412      	lsls	r2, r2, #16
    1ddc:	430a      	orrs	r2, r1
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1dde:	7899      	ldrb	r1, [r3, #2]
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    1de0:	9201      	str	r2, [sp, #4]
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    1de2:	1e48      	subs	r0, r1, #1
    1de4:	4181      	sbcs	r1, r0
    1de6:	01c9      	lsls	r1, r1, #7
    1de8:	9104      	str	r1, [sp, #16]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1dea:	78d9      	ldrb	r1, [r3, #3]
				| TCC_FCTRLA_SRC(cfg->source)
    1dec:	2203      	movs	r2, #3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1dee:	1e48      	subs	r0, r1, #1
    1df0:	4181      	sbcs	r1, r0
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1df2:	7918      	ldrb	r0, [r3, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    1df4:	00c9      	lsls	r1, r1, #3
    1df6:	9105      	str	r1, [sp, #20]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1df8:	1e41      	subs	r1, r0, #1
    1dfa:	4188      	sbcs	r0, r1
    1dfc:	0101      	lsls	r1, r0, #4
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1dfe:	2060      	movs	r0, #96	; 0x60
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    1e00:	9108      	str	r1, [sp, #32]
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1e02:	7999      	ldrb	r1, [r3, #6]
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1e04:	02bf      	lsls	r7, r7, #10
				| TCC_FCTRLA_BLANK(cfg->blanking)
    1e06:	0149      	lsls	r1, r1, #5
    1e08:	4001      	ands	r1, r0
				| TCC_FCTRLA_SRC(cfg->source)
    1e0a:	7958      	ldrb	r0, [r3, #5]
    1e0c:	4010      	ands	r0, r2
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e0e:	9a01      	ldr	r2, [sp, #4]
    1e10:	4302      	orrs	r2, r0
    1e12:	430a      	orrs	r2, r1
				| TCC_FCTRLA_HALT(cfg->halt_action)
    1e14:	21c0      	movs	r1, #192	; 0xc0
    1e16:	79d8      	ldrb	r0, [r3, #7]
    1e18:	0089      	lsls	r1, r1, #2
    1e1a:	0200      	lsls	r0, r0, #8
    1e1c:	4001      	ands	r1, r0
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1e1e:	20e0      	movs	r0, #224	; 0xe0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e20:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    1e22:	7a1a      	ldrb	r2, [r3, #8]
    1e24:	01c0      	lsls	r0, r0, #7
    1e26:	0312      	lsls	r2, r2, #12
    1e28:	4002      	ands	r2, r0
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1e2a:	20c0      	movs	r0, #192	; 0xc0
    1e2c:	0100      	lsls	r0, r0, #4
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e2e:	4311      	orrs	r1, r2
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    1e30:	4007      	ands	r7, r0
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e32:	430f      	orrs	r7, r1
		value_buffer[i] = fault;
    1e34:	4661      	mov	r1, ip
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    1e36:	9a04      	ldr	r2, [sp, #16]
    1e38:	330a      	adds	r3, #10
    1e3a:	4317      	orrs	r7, r2
    1e3c:	9a05      	ldr	r2, [sp, #20]
    1e3e:	4317      	orrs	r7, r2
    1e40:	9a08      	ldr	r2, [sp, #32]
    1e42:	4317      	orrs	r7, r2
		value_buffer[i] = fault;
    1e44:	aa0c      	add	r2, sp, #48	; 0x30
    1e46:	508f      	str	r7, [r1, r2]
    1e48:	2204      	movs	r2, #4
    1e4a:	4494      	add	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1e4c:	4662      	mov	r2, ip
    1e4e:	2a08      	cmp	r2, #8
    1e50:	d1b8      	bne.n	1dc4 <tcc_init+0xa8>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1e52:	2280      	movs	r2, #128	; 0x80
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1e54:	2300      	movs	r3, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1e56:	0252      	lsls	r2, r2, #9
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1e58:	2002      	movs	r0, #2
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1e5a:	4694      	mov	ip, r2
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    1e5c:	9301      	str	r3, [sp, #4]
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1e5e:	30ff      	adds	r0, #255	; 0xff
    1e60:	18e2      	adds	r2, r4, r3
		if (config->wave_ext.invert[i]) {
    1e62:	0017      	movs	r7, r2
    1e64:	3750      	adds	r7, #80	; 0x50
    1e66:	783f      	ldrb	r7, [r7, #0]
    1e68:	2f00      	cmp	r7, #0
    1e6a:	d004      	beq.n	1e76 <tcc_init+0x15a>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    1e6c:	4667      	mov	r7, ip
    1e6e:	409f      	lsls	r7, r3
    1e70:	9901      	ldr	r1, [sp, #4]
    1e72:	4339      	orrs	r1, r7
    1e74:	9101      	str	r1, [sp, #4]
		if (config->wave_ext.non_recoverable_fault[i].output !=
    1e76:	001f      	movs	r7, r3
    1e78:	3741      	adds	r7, #65	; 0x41
    1e7a:	5dd2      	ldrb	r2, [r2, r7]
    1e7c:	2a00      	cmp	r2, #0
    1e7e:	d007      	beq.n	1e90 <tcc_init+0x174>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    1e80:	2a02      	cmp	r2, #2
    1e82:	d000      	beq.n	1e86 <tcc_init+0x16a>
    1e84:	e098      	b.n	1fb8 <tcc_init+0x29c>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    1e86:	0002      	movs	r2, r0
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1e88:	409a      	lsls	r2, r3
    1e8a:	9901      	ldr	r1, [sp, #4]
    1e8c:	4311      	orrs	r1, r2
    1e8e:	9101      	str	r1, [sp, #4]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    1e90:	3301      	adds	r3, #1
    1e92:	2b08      	cmp	r3, #8
    1e94:	d1e4      	bne.n	1e60 <tcc_init+0x144>
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1e96:	2230      	movs	r2, #48	; 0x30
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1e98:	2107      	movs	r1, #7
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1e9a:	7e63      	ldrb	r3, [r4, #25]
    1e9c:	011b      	lsls	r3, r3, #4
    1e9e:	4013      	ands	r3, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    1ea0:	7e22      	ldrb	r2, [r4, #24]
    1ea2:	400a      	ands	r2, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1ea4:	4313      	orrs	r3, r2
			wave |= (TCC_WAVE_POL0 << n);
    1ea6:	2280      	movs	r2, #128	; 0x80
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    1ea8:	9304      	str	r3, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1eaa:	2300      	movs	r3, #0
			wave |= (TCC_WAVE_POL0 << n);
    1eac:	0252      	lsls	r2, r2, #9
		if (wav_cfg->wave_polarity[n]) {
    1eae:	18e1      	adds	r1, r4, r3
    1eb0:	7d09      	ldrb	r1, [r1, #20]
    1eb2:	2900      	cmp	r1, #0
    1eb4:	d004      	beq.n	1ec0 <tcc_init+0x1a4>
			wave |= (TCC_WAVE_POL0 << n);
    1eb6:	0011      	movs	r1, r2
    1eb8:	4099      	lsls	r1, r3
    1eba:	9804      	ldr	r0, [sp, #16]
    1ebc:	4308      	orrs	r0, r1
    1ebe:	9004      	str	r0, [sp, #16]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    1ec0:	3301      	adds	r3, #1
    1ec2:	2b04      	cmp	r3, #4
    1ec4:	d1f3      	bne.n	1eae <tcc_init+0x192>
    1ec6:	0031      	movs	r1, r6
		module_inst->callback[i] = NULL;
    1ec8:	2300      	movs	r3, #0
    1eca:	1d32      	adds	r2, r6, #4
    1ecc:	3134      	adds	r1, #52	; 0x34
    1ece:	c208      	stmia	r2!, {r3}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1ed0:	428a      	cmp	r2, r1
    1ed2:	d1fc      	bne.n	1ece <tcc_init+0x1b2>
	module_inst->register_callback_mask = 0;
    1ed4:	6373      	str	r3, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    1ed6:	63b3      	str	r3, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    1ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gclk_chan_config.source_generator = config->counter.clock_source;
    1eda:	aa0a      	add	r2, sp, #40	; 0x28
	_tcc_instances[module_index] = module_inst;
    1edc:	0098      	lsls	r0, r3, #2
    1ede:	4b39      	ldr	r3, [pc, #228]	; (1fc4 <tcc_init+0x2a8>)
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ee0:	0011      	movs	r1, r2
	_tcc_instances[module_index] = module_inst;
    1ee2:	50c6      	str	r6, [r0, r3]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1ee4:	0023      	movs	r3, r4
	module_inst->hw = hw;
    1ee6:	6035      	str	r5, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    1ee8:	33a0      	adds	r3, #160	; 0xa0
    1eea:	781b      	ldrb	r3, [r3, #0]
    1eec:	363c      	adds	r6, #60	; 0x3c
    1eee:	7033      	strb	r3, [r6, #0]
	gclk_chan_config.source_generator = config->counter.clock_source;
    1ef0:	7aa3      	ldrb	r3, [r4, #10]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ef2:	2011      	movs	r0, #17
	gclk_chan_config.source_generator = config->counter.clock_source;
    1ef4:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    1ef6:	f7ff fdf3 	bl	1ae0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    1efa:	2011      	movs	r0, #17
    1efc:	f7ff fdb4 	bl	1a68 <system_gclk_chan_enable>
    1f00:	0023      	movs	r3, r4
    1f02:	0027      	movs	r7, r4
    1f04:	0026      	movs	r6, r4
    1f06:	3378      	adds	r3, #120	; 0x78
    1f08:	3798      	adds	r7, #152	; 0x98
    1f0a:	3658      	adds	r6, #88	; 0x58
    1f0c:	9305      	str	r3, [sp, #20]
		if (!config->pins.enable_wave_out_pin[i]) {
    1f0e:	783b      	ldrb	r3, [r7, #0]
    1f10:	2b00      	cmp	r3, #0
    1f12:	d00d      	beq.n	1f30 <tcc_init+0x214>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1f14:	2301      	movs	r3, #1
    1f16:	a90b      	add	r1, sp, #44	; 0x2c
    1f18:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    1f1a:	2300      	movs	r3, #0
    1f1c:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1f1e:	3320      	adds	r3, #32
    1f20:	18f3      	adds	r3, r6, r3
    1f22:	781b      	ldrb	r3, [r3, #0]
		system_pinmux_pin_set_config(
    1f24:	7830      	ldrb	r0, [r6, #0]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    1f26:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1f28:	2301      	movs	r3, #1
    1f2a:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1f2c:	f7ff fe3a 	bl	1ba4 <system_pinmux_pin_set_config>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    1f30:	9b05      	ldr	r3, [sp, #20]
    1f32:	3604      	adds	r6, #4
    1f34:	3701      	adds	r7, #1
    1f36:	42b3      	cmp	r3, r6
    1f38:	d1e9      	bne.n	1f0e <tcc_init+0x1f2>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1f3a:	9b06      	ldr	r3, [sp, #24]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1f3c:	9a07      	ldr	r2, [sp, #28]
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    1f3e:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    1f40:	0212      	lsls	r2, r2, #8
    1f42:	4313      	orrs	r3, r2
    1f44:	9a02      	ldr	r2, [sp, #8]
    1f46:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    1f48:	602b      	str	r3, [r5, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1f4a:	2304      	movs	r3, #4
    1f4c:	68aa      	ldr	r2, [r5, #8]
    1f4e:	421a      	tst	r2, r3
    1f50:	d1fc      	bne.n	1f4c <tcc_init+0x230>
	hw->CTRLBCLR.reg = 0xFF;
    1f52:	23ff      	movs	r3, #255	; 0xff
    1f54:	712b      	strb	r3, [r5, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    1f56:	3bfb      	subs	r3, #251	; 0xfb
    1f58:	68aa      	ldr	r2, [r5, #8]
    1f5a:	421a      	tst	r2, r3
    1f5c:	d1fc      	bne.n	1f58 <tcc_init+0x23c>
	hw->CTRLBSET.reg = ctrlb;
    1f5e:	466b      	mov	r3, sp
    1f60:	7b1b      	ldrb	r3, [r3, #12]
    1f62:	716b      	strb	r3, [r5, #5]
	hw->FCTRLA.reg = faults[0];
    1f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    1f66:	60eb      	str	r3, [r5, #12]
	hw->FCTRLB.reg = faults[1];
    1f68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1f6a:	612b      	str	r3, [r5, #16]
	hw->DRVCTRL.reg = drvctrl;
    1f6c:	9b01      	ldr	r3, [sp, #4]
    1f6e:	61ab      	str	r3, [r5, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    1f70:	4b15      	ldr	r3, [pc, #84]	; (1fc8 <tcc_init+0x2ac>)
    1f72:	68aa      	ldr	r2, [r5, #8]
    1f74:	421a      	tst	r2, r3
    1f76:	d1fc      	bne.n	1f72 <tcc_init+0x256>
	hw->WAVE.reg = waves[0];
    1f78:	9b04      	ldr	r3, [sp, #16]
    1f7a:	63eb      	str	r3, [r5, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    1f7c:	2310      	movs	r3, #16
    1f7e:	68aa      	ldr	r2, [r5, #8]
    1f80:	421a      	tst	r2, r3
    1f82:	d1fc      	bne.n	1f7e <tcc_init+0x262>
	hw->COUNT.reg = config->counter.count;
    1f84:	6823      	ldr	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1f86:	4a11      	ldr	r2, [pc, #68]	; (1fcc <tcc_init+0x2b0>)
	hw->COUNT.reg = config->counter.count;
    1f88:	636b      	str	r3, [r5, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    1f8a:	68ab      	ldr	r3, [r5, #8]
    1f8c:	4013      	ands	r3, r2
    1f8e:	d1fc      	bne.n	1f8a <tcc_init+0x26e>
	hw->PER.reg = (config->counter.period);
    1f90:	6862      	ldr	r2, [r4, #4]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1f92:	490f      	ldr	r1, [pc, #60]	; (1fd0 <tcc_init+0x2b4>)
	hw->PER.reg = (config->counter.period);
    1f94:	642a      	str	r2, [r5, #64]	; 0x40
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    1f96:	000a      	movs	r2, r1
    1f98:	409a      	lsls	r2, r3
		while (hw->SYNCBUSY.reg & (
    1f9a:	68a8      	ldr	r0, [r5, #8]
    1f9c:	4010      	ands	r0, r2
    1f9e:	d1fc      	bne.n	1f9a <tcc_init+0x27e>
		hw->CC[i].reg = (config->compare.match[i]);
    1fa0:	009a      	lsls	r2, r3, #2
    1fa2:	18a2      	adds	r2, r4, r2
    1fa4:	69d6      	ldr	r6, [r2, #28]
    1fa6:	001a      	movs	r2, r3
    1fa8:	3210      	adds	r2, #16
    1faa:	0092      	lsls	r2, r2, #2
    1fac:	18aa      	adds	r2, r5, r2
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1fae:	3301      	adds	r3, #1
		hw->CC[i].reg = (config->compare.match[i]);
    1fb0:	6056      	str	r6, [r2, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    1fb2:	2b04      	cmp	r3, #4
    1fb4:	d1ef      	bne.n	1f96 <tcc_init+0x27a>
    1fb6:	e6cb      	b.n	1d50 <tcc_init+0x34>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    1fb8:	2201      	movs	r2, #1
    1fba:	e765      	b.n	1e88 <tcc_init+0x16c>
    1fbc:	40000400 	.word	0x40000400
    1fc0:	00ffffff 	.word	0x00ffffff
    1fc4:	20000228 	.word	0x20000228
    1fc8:	00020040 	.word	0x00020040
    1fcc:	00040080 	.word	0x00040080
    1fd0:	00080100 	.word	0x00080100

00001fd4 <tcc_set_compare_value>:
		const uint32_t compare)
{
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1fd4:	0003      	movs	r3, r0
{
    1fd6:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1fd8:	333c      	adds	r3, #60	; 0x3c
    1fda:	781b      	ldrb	r3, [r3, #0]
    1fdc:	6800      	ldr	r0, [r0, #0]
    1fde:	f7ff fe03 	bl	1be8 <_tcc_set_compare_value.isra.5>
			module_inst->double_buffering_enabled);
}
    1fe2:	bd10      	pop	{r4, pc}

00001fe4 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1fe6:	2500      	movs	r5, #0
	struct tcc_module *module =
    1fe8:	4b0b      	ldr	r3, [pc, #44]	; (2018 <_tcc_interrupt_handler+0x34>)
    1fea:	0080      	lsls	r0, r0, #2
    1fec:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1fee:	6823      	ldr	r3, [r4, #0]
    1ff0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1ff2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1ff4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1ff6:	4013      	ands	r3, r2
    1ff8:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1ffa:	4b08      	ldr	r3, [pc, #32]	; (201c <_tcc_interrupt_handler+0x38>)
    1ffc:	58ef      	ldr	r7, [r5, r3]
    1ffe:	4237      	tst	r7, r6
    2000:	d005      	beq.n	200e <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2002:	1963      	adds	r3, r4, r5
    2004:	685b      	ldr	r3, [r3, #4]
    2006:	0020      	movs	r0, r4
    2008:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    200a:	6823      	ldr	r3, [r4, #0]
    200c:	62df      	str	r7, [r3, #44]	; 0x2c
    200e:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2010:	2d30      	cmp	r5, #48	; 0x30
    2012:	d1f2      	bne.n	1ffa <_tcc_interrupt_handler+0x16>
		}
	}
}
    2014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2016:	46c0      	nop			; (mov r8, r8)
    2018:	20000228 	.word	0x20000228
    201c:	00002868 	.word	0x00002868

00002020 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2020:	b510      	push	{r4, lr}
    2022:	2000      	movs	r0, #0
    2024:	f7ff ffde 	bl	1fe4 <_tcc_interrupt_handler>
    2028:	bd10      	pop	{r4, pc}

0000202a <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    202a:	1c93      	adds	r3, r2, #2
    202c:	009b      	lsls	r3, r3, #2
    202e:	5019      	str	r1, [r3, r0]
    2030:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2032:	2a02      	cmp	r2, #2
    2034:	d104      	bne.n	2040 <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2036:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2038:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    203a:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    203c:	2000      	movs	r0, #0
    203e:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2040:	2a03      	cmp	r2, #3
    2042:	d101      	bne.n	2048 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2044:	321d      	adds	r2, #29
    2046:	e7f7      	b.n	2038 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    2048:	2101      	movs	r1, #1
    204a:	4091      	lsls	r1, r2
    204c:	430b      	orrs	r3, r1
    204e:	e7f4      	b.n	203a <tc_register_callback+0x10>

00002050 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2050:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2052:	2601      	movs	r6, #1
	struct tc_module *module
    2054:	4b14      	ldr	r3, [pc, #80]	; (20a8 <_tc_interrupt_handler+0x58>)
    2056:	0080      	lsls	r0, r0, #2
    2058:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    205a:	6823      	ldr	r3, [r4, #0]
    205c:	7e22      	ldrb	r2, [r4, #24]
    205e:	7e65      	ldrb	r5, [r4, #25]
    2060:	7b9b      	ldrb	r3, [r3, #14]
    2062:	4015      	ands	r5, r2
    2064:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    2066:	4235      	tst	r5, r6
    2068:	d004      	beq.n	2074 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    206a:	68a3      	ldr	r3, [r4, #8]
    206c:	0020      	movs	r0, r4
    206e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2070:	6823      	ldr	r3, [r4, #0]
    2072:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2074:	2602      	movs	r6, #2
    2076:	4235      	tst	r5, r6
    2078:	d004      	beq.n	2084 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    207a:	68e3      	ldr	r3, [r4, #12]
    207c:	0020      	movs	r0, r4
    207e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2080:	6823      	ldr	r3, [r4, #0]
    2082:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2084:	2610      	movs	r6, #16
    2086:	4235      	tst	r5, r6
    2088:	d004      	beq.n	2094 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    208a:	6923      	ldr	r3, [r4, #16]
    208c:	0020      	movs	r0, r4
    208e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2090:	6823      	ldr	r3, [r4, #0]
    2092:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2094:	2620      	movs	r6, #32
    2096:	4235      	tst	r5, r6
    2098:	d004      	beq.n	20a4 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    209a:	6963      	ldr	r3, [r4, #20]
    209c:	0020      	movs	r0, r4
    209e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    20a0:	6823      	ldr	r3, [r4, #0]
    20a2:	739e      	strb	r6, [r3, #14]
	}
}
    20a4:	bd70      	pop	{r4, r5, r6, pc}
    20a6:	46c0      	nop			; (mov r8, r8)
    20a8:	2000022c 	.word	0x2000022c

000020ac <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    20ac:	b510      	push	{r4, lr}
    20ae:	2000      	movs	r0, #0
    20b0:	f7ff ffce 	bl	2050 <_tc_interrupt_handler>
    20b4:	bd10      	pop	{r4, pc}

000020b6 <TC2_Handler>:
    20b6:	b510      	push	{r4, lr}
    20b8:	2001      	movs	r0, #1
    20ba:	f7ff ffc9 	bl	2050 <_tc_interrupt_handler>
    20be:	bd10      	pop	{r4, pc}

000020c0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    20c0:	4b06      	ldr	r3, [pc, #24]	; (20dc <_tc_get_inst_index+0x1c>)
    20c2:	4298      	cmp	r0, r3
    20c4:	d007      	beq.n	20d6 <_tc_get_inst_index+0x16>
    20c6:	4a06      	ldr	r2, [pc, #24]	; (20e0 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    20c8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    20ca:	4290      	cmp	r0, r2
    20cc:	d101      	bne.n	20d2 <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    20ce:	3301      	adds	r3, #1
			return i;
    20d0:	b2db      	uxtb	r3, r3
}
    20d2:	0018      	movs	r0, r3
    20d4:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    20d6:	2300      	movs	r3, #0
    20d8:	e7fa      	b.n	20d0 <_tc_get_inst_index+0x10>
    20da:	46c0      	nop			; (mov r8, r8)
    20dc:	42001800 	.word	0x42001800
    20e0:	42001c00 	.word	0x42001c00

000020e4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    20e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e6:	0005      	movs	r5, r0
    20e8:	b085      	sub	sp, #20
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    20ea:	0008      	movs	r0, r1
{
    20ec:	0014      	movs	r4, r2
    20ee:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    20f0:	f7ff ffe6 	bl	20c0 <_tc_get_inst_index>

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    20f4:	466a      	mov	r2, sp
    20f6:	2312      	movs	r3, #18
    20f8:	7113      	strb	r3, [r2, #4]
    20fa:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    20fc:	332e      	adds	r3, #46	; 0x2e
    20fe:	8113      	strh	r3, [r2, #8]
    2100:	3340      	adds	r3, #64	; 0x40
    2102:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    2104:	2300      	movs	r3, #0
    2106:	60ab      	str	r3, [r5, #8]
    2108:	60eb      	str	r3, [r5, #12]
    210a:	612b      	str	r3, [r5, #16]
    210c:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    210e:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    2110:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2112:	4b7c      	ldr	r3, [pc, #496]	; (2304 <tc_init+0x220>)
    2114:	0082      	lsls	r2, r0, #2
    2116:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2118:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    211a:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    211c:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    211e:	2b08      	cmp	r3, #8
    2120:	d103      	bne.n	212a <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2122:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2124:	07fa      	lsls	r2, r7, #31
    2126:	d500      	bpl.n	212a <tc_init+0x46>
    2128:	e0d5      	b.n	22d6 <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    212a:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    212c:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    212e:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2130:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2132:	4213      	tst	r3, r2
    2134:	d000      	beq.n	2138 <tc_init+0x54>
    2136:	e0ce      	b.n	22d6 <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2138:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    213a:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    213c:	06db      	lsls	r3, r3, #27
    213e:	d500      	bpl.n	2142 <tc_init+0x5e>
    2140:	e0c9      	b.n	22d6 <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2142:	2102      	movs	r1, #2
    2144:	8833      	ldrh	r3, [r6, #0]
    2146:	400b      	ands	r3, r1
    2148:	d000      	beq.n	214c <tc_init+0x68>
    214a:	e0c4      	b.n	22d6 <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    214c:	7c21      	ldrb	r1, [r4, #16]
    214e:	2900      	cmp	r1, #0
    2150:	d008      	beq.n	2164 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2152:	a903      	add	r1, sp, #12
	config->powersave    = false;
    2154:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2156:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    2158:	7d20      	ldrb	r0, [r4, #20]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    215a:	708a      	strb	r2, [r1, #2]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    215c:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    215e:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    2160:	f7ff fd20 	bl	1ba4 <system_pinmux_pin_set_config>
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2164:	7f23      	ldrb	r3, [r4, #28]
    2166:	2b00      	cmp	r3, #0
    2168:	d00e      	beq.n	2188 <tc_init+0xa4>
	config->powersave    = false;
    216a:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    216c:	2301      	movs	r3, #1
    216e:	a903      	add	r1, sp, #12
	config->powersave    = false;
    2170:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2172:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2174:	708b      	strb	r3, [r1, #2]
    2176:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2178:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    217a:	331f      	adds	r3, #31
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    217c:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    217e:	18e3      	adds	r3, r4, r3
    2180:	7818      	ldrb	r0, [r3, #0]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2182:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    2184:	f7ff fd0e 	bl	1ba4 <system_pinmux_pin_set_config>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    2188:	007a      	lsls	r2, r7, #1
    218a:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    218c:	4668      	mov	r0, sp
    218e:	2208      	movs	r2, #8
    2190:	1880      	adds	r0, r0, r2
    2192:	4662      	mov	r2, ip
    2194:	4b5c      	ldr	r3, [pc, #368]	; (2308 <tc_init+0x224>)
    2196:	5a82      	ldrh	r2, [r0, r2]
    2198:	6a19      	ldr	r1, [r3, #32]
    219a:	430a      	orrs	r2, r1
    219c:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    219e:	78a2      	ldrb	r2, [r4, #2]
    21a0:	2a08      	cmp	r2, #8
    21a2:	d10a      	bne.n	21ba <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    21a4:	1c79      	adds	r1, r7, #1
    21a6:	004a      	lsls	r2, r1, #1
    21a8:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    21aa:	2108      	movs	r1, #8
    21ac:	466a      	mov	r2, sp
    21ae:	1852      	adds	r2, r2, r1
    21b0:	4661      	mov	r1, ip
    21b2:	6a18      	ldr	r0, [r3, #32]
    21b4:	5a52      	ldrh	r2, [r2, r1]
    21b6:	4302      	orrs	r2, r0
    21b8:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    21ba:	466a      	mov	r2, sp
    21bc:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    21be:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    21c0:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    21c2:	466b      	mov	r3, sp
    21c4:	3304      	adds	r3, #4
    21c6:	5ddf      	ldrb	r7, [r3, r7]
    21c8:	0038      	movs	r0, r7
    21ca:	f7ff fc89 	bl	1ae0 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    21ce:	0038      	movs	r0, r7
    21d0:	f7ff fc4a 	bl	1a68 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
    21d4:	8923      	ldrh	r3, [r4, #8]
    21d6:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    21d8:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    21da:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    21dc:	78a3      	ldrb	r3, [r4, #2]
    21de:	430b      	orrs	r3, r1
	ctrla_tmp =
    21e0:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    21e2:	7862      	ldrb	r2, [r4, #1]
    21e4:	2a00      	cmp	r2, #0
    21e6:	d002      	beq.n	21ee <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    21e8:	2280      	movs	r2, #128	; 0x80
    21ea:	0112      	lsls	r2, r2, #4
    21ec:	4313      	orrs	r3, r2
    21ee:	6829      	ldr	r1, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    21f0:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    21f2:	b252      	sxtb	r2, r2
    21f4:	2a00      	cmp	r2, #0
    21f6:	dbfb      	blt.n	21f0 <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    21f8:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    21fa:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    21fc:	1e5a      	subs	r2, r3, #1
    21fe:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    2200:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2202:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    2204:	2a00      	cmp	r2, #0
    2206:	d001      	beq.n	220c <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2208:	2201      	movs	r2, #1
    220a:	4313      	orrs	r3, r2
    220c:	6829      	ldr	r1, [r5, #0]
    220e:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    2210:	b252      	sxtb	r2, r2
    2212:	2a00      	cmp	r2, #0
    2214:	dbfb      	blt.n	220e <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2216:	22ff      	movs	r2, #255	; 0xff
    2218:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    221a:	2b00      	cmp	r3, #0
    221c:	d005      	beq.n	222a <tc_init+0x146>
    221e:	6829      	ldr	r1, [r5, #0]
    2220:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    2222:	b252      	sxtb	r2, r2
    2224:	2a00      	cmp	r2, #0
    2226:	dbfb      	blt.n	2220 <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2228:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    222a:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    222c:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    222e:	2b00      	cmp	r3, #0
    2230:	d001      	beq.n	2236 <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    2232:	2310      	movs	r3, #16
    2234:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    2236:	7b23      	ldrb	r3, [r4, #12]
    2238:	2b00      	cmp	r3, #0
    223a:	d001      	beq.n	2240 <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    223c:	2320      	movs	r3, #32
    223e:	431a      	orrs	r2, r3
    2240:	6829      	ldr	r1, [r5, #0]
    2242:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2244:	b25b      	sxtb	r3, r3
    2246:	2b00      	cmp	r3, #0
    2248:	dbfb      	blt.n	2242 <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    224a:	71b2      	strb	r2, [r6, #6]
    224c:	682b      	ldr	r3, [r5, #0]
    224e:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2250:	b252      	sxtb	r2, r2
    2252:	2a00      	cmp	r2, #0
    2254:	dbfb      	blt.n	224e <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    2256:	792a      	ldrb	r2, [r5, #4]
    2258:	2a04      	cmp	r2, #4
    225a:	d019      	beq.n	2290 <tc_init+0x1ac>
    225c:	2a08      	cmp	r2, #8
    225e:	d03c      	beq.n	22da <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    2260:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2262:	2a00      	cmp	r2, #0
    2264:	d137      	bne.n	22d6 <tc_init+0x1f2>
    2266:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2268:	b252      	sxtb	r2, r2
    226a:	2a00      	cmp	r2, #0
    226c:	dbfb      	blt.n	2266 <tc_init+0x182>
				= config->counter_16_bit.value;
    226e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2270:	8233      	strh	r3, [r6, #16]
    2272:	682a      	ldr	r2, [r5, #0]
    2274:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2276:	b25b      	sxtb	r3, r3
    2278:	2b00      	cmp	r3, #0
    227a:	dbfb      	blt.n	2274 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    227c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    227e:	8333      	strh	r3, [r6, #24]
    2280:	682a      	ldr	r2, [r5, #0]
    2282:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2284:	b25b      	sxtb	r3, r3
    2286:	2b00      	cmp	r3, #0
    2288:	dbfb      	blt.n	2282 <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    228a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    228c:	8373      	strh	r3, [r6, #26]
    228e:	e021      	b.n	22d4 <tc_init+0x1f0>
    2290:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2292:	b252      	sxtb	r2, r2
    2294:	2a00      	cmp	r2, #0
    2296:	dbfb      	blt.n	2290 <tc_init+0x1ac>
					config->counter_8_bit.value;
    2298:	0023      	movs	r3, r4
    229a:	3328      	adds	r3, #40	; 0x28
    229c:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    229e:	7433      	strb	r3, [r6, #16]
    22a0:	682a      	ldr	r2, [r5, #0]
    22a2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    22a4:	b25b      	sxtb	r3, r3
    22a6:	2b00      	cmp	r3, #0
    22a8:	dbfb      	blt.n	22a2 <tc_init+0x1be>
					config->counter_8_bit.period;
    22aa:	0023      	movs	r3, r4
    22ac:	3329      	adds	r3, #41	; 0x29
    22ae:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    22b0:	7533      	strb	r3, [r6, #20]
    22b2:	682a      	ldr	r2, [r5, #0]
    22b4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    22b6:	b25b      	sxtb	r3, r3
    22b8:	2b00      	cmp	r3, #0
    22ba:	dbfb      	blt.n	22b4 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    22bc:	0023      	movs	r3, r4
    22be:	332a      	adds	r3, #42	; 0x2a
    22c0:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    22c2:	7633      	strb	r3, [r6, #24]
    22c4:	682a      	ldr	r2, [r5, #0]
    22c6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    22c8:	b25b      	sxtb	r3, r3
    22ca:	2b00      	cmp	r3, #0
    22cc:	dbfb      	blt.n	22c6 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    22ce:	342b      	adds	r4, #43	; 0x2b
    22d0:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    22d2:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    22d4:	2000      	movs	r0, #0
}
    22d6:	b005      	add	sp, #20
    22d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    22da:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    22dc:	b252      	sxtb	r2, r2
    22de:	2a00      	cmp	r2, #0
    22e0:	dbfb      	blt.n	22da <tc_init+0x1f6>
				= config->counter_32_bit.value;
    22e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    22e4:	6133      	str	r3, [r6, #16]
    22e6:	682a      	ldr	r2, [r5, #0]
    22e8:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    22ea:	b25b      	sxtb	r3, r3
    22ec:	2b00      	cmp	r3, #0
    22ee:	dbfb      	blt.n	22e8 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    22f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    22f2:	61b3      	str	r3, [r6, #24]
    22f4:	682a      	ldr	r2, [r5, #0]
    22f6:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    22f8:	b25b      	sxtb	r3, r3
    22fa:	2b00      	cmp	r3, #0
    22fc:	dbfb      	blt.n	22f6 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    22fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2300:	61f3      	str	r3, [r6, #28]
    2302:	e7e7      	b.n	22d4 <tc_init+0x1f0>
    2304:	2000022c 	.word	0x2000022c
    2308:	40000400 	.word	0x40000400

0000230c <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    230c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    230e:	6804      	ldr	r4, [r0, #0]
    2310:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    2312:	b25b      	sxtb	r3, r3
    2314:	2b00      	cmp	r3, #0
    2316:	dbfb      	blt.n	2310 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2318:	7903      	ldrb	r3, [r0, #4]
    231a:	2b04      	cmp	r3, #4
    231c:	d00c      	beq.n	2338 <tc_set_compare_value+0x2c>
    231e:	2b08      	cmp	r3, #8
    2320:	d012      	beq.n	2348 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    2322:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2324:	2b00      	cmp	r3, #0
    2326:	d10e      	bne.n	2346 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    2328:	2017      	movs	r0, #23
			if (channel_index <
    232a:	2901      	cmp	r1, #1
    232c:	d80b      	bhi.n	2346 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    232e:	310c      	adds	r1, #12
						(uint16_t)compare;
    2330:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    2332:	0049      	lsls	r1, r1, #1
    2334:	530a      	strh	r2, [r1, r4]
    2336:	e005      	b.n	2344 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    2338:	2017      	movs	r0, #23
			if (channel_index <
    233a:	2901      	cmp	r1, #1
    233c:	d803      	bhi.n	2346 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    233e:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    2340:	1861      	adds	r1, r4, r1
    2342:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    2344:	2000      	movs	r0, #0
}
    2346:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2348:	2017      	movs	r0, #23
			if (channel_index <
    234a:	2901      	cmp	r1, #1
    234c:	d8fb      	bhi.n	2346 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    234e:	3106      	adds	r1, #6
    2350:	0089      	lsls	r1, r1, #2
    2352:	510a      	str	r2, [r1, r4]
    2354:	e7f6      	b.n	2344 <tc_set_compare_value+0x38>

00002356 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2356:	e7fe      	b.n	2356 <Dummy_Handler>

00002358 <Reset_Handler>:
        if (pSrc != pDest) {
    2358:	4821      	ldr	r0, [pc, #132]	; (23e0 <Reset_Handler+0x88>)
    235a:	4922      	ldr	r1, [pc, #136]	; (23e4 <Reset_Handler+0x8c>)
{
    235c:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    235e:	4288      	cmp	r0, r1
    2360:	d004      	beq.n	236c <Reset_Handler+0x14>
    2362:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    2364:	4c20      	ldr	r4, [pc, #128]	; (23e8 <Reset_Handler+0x90>)
    2366:	18ca      	adds	r2, r1, r3
    2368:	42a2      	cmp	r2, r4
    236a:	d332      	bcc.n	23d2 <Reset_Handler+0x7a>
                *pDest++ = 0;
    236c:	2100      	movs	r1, #0
    236e:	4b1f      	ldr	r3, [pc, #124]	; (23ec <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    2370:	4a1f      	ldr	r2, [pc, #124]	; (23f0 <Reset_Handler+0x98>)
    2372:	4293      	cmp	r3, r2
    2374:	d331      	bcc.n	23da <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2376:	21ff      	movs	r1, #255	; 0xff
    2378:	4b1e      	ldr	r3, [pc, #120]	; (23f4 <Reset_Handler+0x9c>)
    237a:	4a1f      	ldr	r2, [pc, #124]	; (23f8 <Reset_Handler+0xa0>)
    237c:	438b      	bics	r3, r1
    237e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2380:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2382:	250c      	movs	r5, #12
    2384:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    2386:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    2388:	4b1c      	ldr	r3, [pc, #112]	; (23fc <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    238a:	481d      	ldr	r0, [pc, #116]	; (2400 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    238c:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    238e:	78c3      	ldrb	r3, [r0, #3]
    2390:	39fc      	subs	r1, #252	; 0xfc
    2392:	438b      	bics	r3, r1
    2394:	4313      	orrs	r3, r2
    2396:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2398:	78c3      	ldrb	r3, [r0, #3]
    239a:	43ab      	bics	r3, r5
    239c:	4323      	orrs	r3, r4
    239e:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    23a0:	4b18      	ldr	r3, [pc, #96]	; (2404 <Reset_Handler+0xac>)
    23a2:	7b98      	ldrb	r0, [r3, #14]
    23a4:	43b0      	bics	r0, r6
    23a6:	0006      	movs	r6, r0
    23a8:	2020      	movs	r0, #32
    23aa:	4330      	orrs	r0, r6
    23ac:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    23ae:	7b98      	ldrb	r0, [r3, #14]
    23b0:	43a8      	bics	r0, r5
    23b2:	4304      	orrs	r4, r0
    23b4:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    23b6:	7b98      	ldrb	r0, [r3, #14]
    23b8:	4388      	bics	r0, r1
    23ba:	4302      	orrs	r2, r0
    23bc:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    23be:	2380      	movs	r3, #128	; 0x80
    23c0:	4a11      	ldr	r2, [pc, #68]	; (2408 <Reset_Handler+0xb0>)
    23c2:	6851      	ldr	r1, [r2, #4]
    23c4:	430b      	orrs	r3, r1
    23c6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    23c8:	f000 f9f0 	bl	27ac <__libc_init_array>
        main();
    23cc:	f000 f950 	bl	2670 <main>
    23d0:	e7fe      	b.n	23d0 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    23d2:	58c5      	ldr	r5, [r0, r3]
    23d4:	3304      	adds	r3, #4
    23d6:	6015      	str	r5, [r2, #0]
    23d8:	e7c5      	b.n	2366 <Reset_Handler+0xe>
                *pDest++ = 0;
    23da:	c302      	stmia	r3!, {r1}
    23dc:	e7c9      	b.n	2372 <Reset_Handler+0x1a>
    23de:	46c0      	nop			; (mov r8, r8)
    23e0:	000028e0 	.word	0x000028e0
    23e4:	20000000 	.word	0x20000000
    23e8:	20000020 	.word	0x20000020
    23ec:	20000020 	.word	0x20000020
    23f0:	2000025c 	.word	0x2000025c
    23f4:	00000000 	.word	0x00000000
    23f8:	e000ed00 	.word	0xe000ed00
    23fc:	410070fc 	.word	0x410070fc
    2400:	41005000 	.word	0x41005000
    2404:	41004800 	.word	0x41004800
    2408:	41004000 	.word	0x41004000

0000240c <set_color_green_indication>:
#define BUFFER_SET_COLOR_BLUE_PWM_TIMER                                        \
  { 0x02, 0x19 }
#define BUFFER_SET_COLOR_BLUE_PWM_FLASH                                        \
  { 0x01, 0x82 }

void set_color_green_indication(void) {
    240c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    240e:	2502      	movs	r5, #2
    2410:	ae01      	add	r6, sp, #4
    2412:	002a      	movs	r2, r5
    2414:	4907      	ldr	r1, [pc, #28]	; (2434 <set_color_green_indication+0x28>)
    2416:	0030      	movs	r0, r6
    2418:	f000 f9ec 	bl	27f4 <memcpy>
  packet.data = buffer_set_color_green;
  packet.address = KTD2026_DEVICE_ADDRESS;
    241c:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_green;
    241e:	4c06      	ldr	r4, [pc, #24]	; (2438 <set_color_green_indication+0x2c>)
    2420:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2422:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2424:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2426:	0021      	movs	r1, r4
    2428:	4804      	ldr	r0, [pc, #16]	; (243c <set_color_green_indication+0x30>)
    242a:	f7fe ff6f 	bl	130c <i2c_master_write_packet_wait>
    242e:	2800      	cmp	r0, #0
    2430:	d1f9      	bne.n	2426 <set_color_green_indication+0x1a>
         STATUS_OK) {
  }
}
    2432:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2434:	00002898 	.word	0x00002898
    2438:	20000014 	.word	0x20000014
    243c:	20000234 	.word	0x20000234

00002440 <set_color_red_indication>:

void set_color_red_indication(void) {
    2440:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    2442:	2502      	movs	r5, #2
    2444:	4909      	ldr	r1, [pc, #36]	; (246c <set_color_red_indication+0x2c>)
    2446:	ae01      	add	r6, sp, #4
    2448:	002a      	movs	r2, r5
    244a:	1949      	adds	r1, r1, r5
    244c:	0030      	movs	r0, r6
    244e:	f000 f9d1 	bl	27f4 <memcpy>
  packet.data = buffer_set_color_red;
  packet.address = KTD2026_DEVICE_ADDRESS;
    2452:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_red;
    2454:	4c06      	ldr	r4, [pc, #24]	; (2470 <set_color_red_indication+0x30>)
    2456:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2458:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    245a:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    245c:	0021      	movs	r1, r4
    245e:	4805      	ldr	r0, [pc, #20]	; (2474 <set_color_red_indication+0x34>)
    2460:	f7fe ff54 	bl	130c <i2c_master_write_packet_wait>
    2464:	2800      	cmp	r0, #0
    2466:	d1f9      	bne.n	245c <set_color_red_indication+0x1c>
         STATUS_OK) {
  }
}
    2468:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    246a:	46c0      	nop			; (mov r8, r8)
    246c:	00002898 	.word	0x00002898
    2470:	20000014 	.word	0x20000014
    2474:	20000234 	.word	0x20000234

00002478 <reset_chip>:
  }
}

void reset_chip(void) {

  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] =
    2478:	2204      	movs	r2, #4
void reset_chip(void) {
    247a:	b513      	push	{r0, r1, r4, lr}
  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] =
    247c:	ab01      	add	r3, sp, #4
    247e:	701a      	strb	r2, [r3, #0]
    2480:	2200      	movs	r2, #0
      BUFFER_TURN_OFF_MAIN_DIGITAL;
  packet.data = buffer_reset_green_red_channel;
    2482:	4c07      	ldr	r4, [pc, #28]	; (24a0 <reset_chip+0x28>)
  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] =
    2484:	705a      	strb	r2, [r3, #1]
  packet.data = buffer_reset_green_red_channel;
    2486:	6063      	str	r3, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2488:	2331      	movs	r3, #49	; 0x31
    248a:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    248c:	3b2f      	subs	r3, #47	; 0x2f
    248e:	8063      	strh	r3, [r4, #2]

  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2490:	0021      	movs	r1, r4
    2492:	4804      	ldr	r0, [pc, #16]	; (24a4 <reset_chip+0x2c>)
    2494:	f7fe ff3a 	bl	130c <i2c_master_write_packet_wait>
    2498:	2800      	cmp	r0, #0
    249a:	d1f9      	bne.n	2490 <reset_chip+0x18>
         STATUS_OK) {
  }
}
    249c:	bd13      	pop	{r0, r1, r4, pc}
    249e:	46c0      	nop			; (mov r8, r8)
    24a0:	20000014 	.word	0x20000014
    24a4:	20000234 	.word	0x20000234

000024a8 <set_battery_charge_routine>:

void set_battery_charge_routine(void) {
    24a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t buffer_set_color_green_PWM[DATA_LENGTH_PRIMARY] =
    24aa:	4c21      	ldr	r4, [pc, #132]	; (2530 <set_battery_charge_routine+0x88>)
    24ac:	2502      	movs	r5, #2
    24ae:	0021      	movs	r1, r4
void set_battery_charge_routine(void) {
    24b0:	b085      	sub	sp, #20
  uint8_t buffer_set_color_green_PWM[DATA_LENGTH_PRIMARY] =
    24b2:	310c      	adds	r1, #12
    24b4:	002a      	movs	r2, r5
    24b6:	4668      	mov	r0, sp
    24b8:	f000 f99c 	bl	27f4 <memcpy>
      BUFFER_SET_COLOR_GREEN_PWM;
  uint8_t buffer_set_charge_routine_flash_period[DATA_LENGTH_PRIMARY] =
    24bc:	0021      	movs	r1, r4
    24be:	af01      	add	r7, sp, #4
    24c0:	310e      	adds	r1, #14
    24c2:	002a      	movs	r2, r5
    24c4:	0038      	movs	r0, r7
    24c6:	f000 f995 	bl	27f4 <memcpy>
      BUFFER_SET_CHARGE_ROUTINE_FLASH_PERIOD;
  uint8_t buffer_set_charge_routine_trise_tfall[DATA_LENGTH_PRIMARY] =
    24ca:	0021      	movs	r1, r4
    24cc:	ae02      	add	r6, sp, #8
    24ce:	3110      	adds	r1, #16
    24d0:	002a      	movs	r2, r5
    24d2:	0030      	movs	r0, r6
    24d4:	f000 f98e 	bl	27f4 <memcpy>
      BUFFER_SET_CHARGE_ROUTINE_TRISE_TFALL;
  uint8_t buffer_set_charge_routine_PWM1_timer[DATA_LENGTH_PRIMARY] =
    24d8:	0021      	movs	r1, r4
    24da:	002a      	movs	r2, r5
    24dc:	3112      	adds	r1, #18
    24de:	a803      	add	r0, sp, #12
    24e0:	f000 f988 	bl	27f4 <memcpy>
      BUFFER_SET_CHARGE_ROUTINE_PWM1_TIMER;

  packet.address = KTD2026_DEVICE_ADDRESS;
    24e4:	2331      	movs	r3, #49	; 0x31
    24e6:	4c13      	ldr	r4, [pc, #76]	; (2534 <set_battery_charge_routine+0x8c>)
    24e8:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;

  packet.data = buffer_set_color_green_PWM;
    24ea:	466b      	mov	r3, sp
  packet.data_length = DATA_LENGTH_PRIMARY;
    24ec:	8065      	strh	r5, [r4, #2]
  packet.data = buffer_set_color_green_PWM;
    24ee:	6063      	str	r3, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    24f0:	4d11      	ldr	r5, [pc, #68]	; (2538 <set_battery_charge_routine+0x90>)
    24f2:	0021      	movs	r1, r4
    24f4:	0028      	movs	r0, r5
    24f6:	f7fe ff09 	bl	130c <i2c_master_write_packet_wait>
    24fa:	2800      	cmp	r0, #0
    24fc:	d1f8      	bne.n	24f0 <set_battery_charge_routine+0x48>
         STATUS_OK) {
  }

  packet.data = buffer_set_charge_routine_flash_period;
    24fe:	6067      	str	r7, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2500:	0021      	movs	r1, r4
    2502:	0028      	movs	r0, r5
    2504:	f7fe ff02 	bl	130c <i2c_master_write_packet_wait>
    2508:	2800      	cmp	r0, #0
    250a:	d1f9      	bne.n	2500 <set_battery_charge_routine+0x58>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_trise_tfall;
    250c:	6066      	str	r6, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    250e:	0021      	movs	r1, r4
    2510:	0028      	movs	r0, r5
    2512:	f7fe fefb 	bl	130c <i2c_master_write_packet_wait>
    2516:	2800      	cmp	r0, #0
    2518:	d1f9      	bne.n	250e <set_battery_charge_routine+0x66>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_PWM1_timer;
    251a:	ab03      	add	r3, sp, #12
    251c:	6063      	str	r3, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    251e:	0021      	movs	r1, r4
    2520:	0028      	movs	r0, r5
    2522:	f7fe fef3 	bl	130c <i2c_master_write_packet_wait>
    2526:	2800      	cmp	r0, #0
    2528:	d1f9      	bne.n	251e <set_battery_charge_routine+0x76>
         STATUS_OK) {
  }
}
    252a:	b005      	add	sp, #20
    252c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    252e:	46c0      	nop			; (mov r8, r8)
    2530:	00002898 	.word	0x00002898
    2534:	20000014 	.word	0x20000014
    2538:	20000234 	.word	0x20000234

0000253c <set_battery_low_routine>:

void set_battery_low_routine(void) {
    253c:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t buffer_set_color_red_PWM[DATA_LENGTH_PRIMARY] =
    253e:	4c21      	ldr	r4, [pc, #132]	; (25c4 <set_battery_low_routine+0x88>)
    2540:	2502      	movs	r5, #2
    2542:	0021      	movs	r1, r4
void set_battery_low_routine(void) {
    2544:	b085      	sub	sp, #20
  uint8_t buffer_set_color_red_PWM[DATA_LENGTH_PRIMARY] =
    2546:	3114      	adds	r1, #20
    2548:	002a      	movs	r2, r5
    254a:	4668      	mov	r0, sp
    254c:	f000 f952 	bl	27f4 <memcpy>
      BUFFER_SET_COLOR_RED_PWM;
  uint8_t buffer_set_low_routine_flash_period[DATA_LENGTH_PRIMARY] =
    2550:	0021      	movs	r1, r4
    2552:	af01      	add	r7, sp, #4
    2554:	3116      	adds	r1, #22
    2556:	002a      	movs	r2, r5
    2558:	0038      	movs	r0, r7
    255a:	f000 f94b 	bl	27f4 <memcpy>
      BUFFER_SET_LOW_ROUTINE_FLASH_PERIOD;
  uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY] =
    255e:	0021      	movs	r1, r4
    2560:	002a      	movs	r2, r5
    2562:	3118      	adds	r1, #24
    2564:	a802      	add	r0, sp, #8
    2566:	f000 f945 	bl	27f4 <memcpy>
      BUFFER_SET_LOW_ROUTINE_TRISE_TFALL;
  uint8_t buffer_set_low_routine_brightness[DATA_LENGTH_PRIMARY] =
    256a:	0021      	movs	r1, r4
    256c:	ae03      	add	r6, sp, #12
    256e:	311a      	adds	r1, #26
    2570:	002a      	movs	r2, r5
    2572:	0030      	movs	r0, r6
    2574:	f000 f93e 	bl	27f4 <memcpy>
      BUFFER_SET_COLOR_RED_BRIGHTNESS;

  packet.address = KTD2026_DEVICE_ADDRESS;
    2578:	2331      	movs	r3, #49	; 0x31
    257a:	4c13      	ldr	r4, [pc, #76]	; (25c8 <set_battery_low_routine+0x8c>)
    257c:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;

  packet.data = buffer_set_color_red_PWM;
    257e:	466b      	mov	r3, sp
  packet.data_length = DATA_LENGTH_PRIMARY;
    2580:	8065      	strh	r5, [r4, #2]
  packet.data = buffer_set_color_red_PWM;
    2582:	6063      	str	r3, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2584:	4d11      	ldr	r5, [pc, #68]	; (25cc <set_battery_low_routine+0x90>)
    2586:	0021      	movs	r1, r4
    2588:	0028      	movs	r0, r5
    258a:	f7fe febf 	bl	130c <i2c_master_write_packet_wait>
    258e:	2800      	cmp	r0, #0
    2590:	d1f8      	bne.n	2584 <set_battery_low_routine+0x48>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_flash_period;
    2592:	6067      	str	r7, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2594:	0021      	movs	r1, r4
    2596:	0028      	movs	r0, r5
    2598:	f7fe feb8 	bl	130c <i2c_master_write_packet_wait>
    259c:	2800      	cmp	r0, #0
    259e:	d1f9      	bne.n	2594 <set_battery_low_routine+0x58>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_brightness;
    25a0:	6066      	str	r6, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    25a2:	0021      	movs	r1, r4
    25a4:	0028      	movs	r0, r5
    25a6:	f7fe feb1 	bl	130c <i2c_master_write_packet_wait>
    25aa:	2800      	cmp	r0, #0
    25ac:	d1f9      	bne.n	25a2 <set_battery_low_routine+0x66>
         STATUS_OK) {
  }

  packet.data = buffer_set_low_routine_trise_tfall;
    25ae:	ab02      	add	r3, sp, #8
    25b0:	6063      	str	r3, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    25b2:	0021      	movs	r1, r4
    25b4:	0028      	movs	r0, r5
    25b6:	f7fe fea9 	bl	130c <i2c_master_write_packet_wait>
    25ba:	2800      	cmp	r0, #0
    25bc:	d1f9      	bne.n	25b2 <set_battery_low_routine+0x76>
         STATUS_OK) {
  }
}
    25be:	b005      	add	sp, #20
    25c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25c2:	46c0      	nop			; (mov r8, r8)
    25c4:	00002898 	.word	0x00002898
    25c8:	20000014 	.word	0x20000014
    25cc:	20000234 	.word	0x20000234

000025d0 <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    25d0:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    25d2:	2364      	movs	r3, #100	; 0x64
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
         STATUS_OK) {
  }
}

void i2c_master_setup(void) {
    25d4:	b570      	push	{r4, r5, r6, lr}
    25d6:	b08e      	sub	sp, #56	; 0x38
    25d8:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    25da:	0389      	lsls	r1, r1, #14
    25dc:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    25de:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    25e0:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    25e2:	4b1e      	ldr	r3, [pc, #120]	; (265c <i2c_master_setup+0x8c>)
	config->unknown_bus_state_timeout = 65535;
    25e4:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    25e6:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    25e8:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    25ea:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    25ec:	310a      	adds	r1, #10
    25ee:	4469      	add	r1, sp
    25f0:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    25f2:	a90c      	add	r1, sp, #48	; 0x30
    25f4:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    25f6:	2131      	movs	r1, #49	; 0x31
    25f8:	4469      	add	r1, sp
    25fa:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    25fc:	2132      	movs	r1, #50	; 0x32
    25fe:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2600:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    2602:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2604:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2606:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2608:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    260a:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    260c:	700b      	strb	r3, [r1, #0]
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    260e:	4e14      	ldr	r6, [pc, #80]	; (2660 <i2c_master_setup+0x90>)
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2610:	33d7      	adds	r3, #215	; 0xd7
    2612:	8613      	strh	r3, [r2, #48]	; 0x30
  config_i2c_master.buffer_timeout = 10000;
    2614:	4b13      	ldr	r3, [pc, #76]	; (2664 <i2c_master_setup+0x94>)
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    2616:	4914      	ldr	r1, [pc, #80]	; (2668 <i2c_master_setup+0x98>)
    2618:	0030      	movs	r0, r6
  config_i2c_master.buffer_timeout = 10000;
    261a:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    261c:	f7fe fd14 	bl	1048 <i2c_master_init>
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2620:	2207      	movs	r2, #7
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2622:	6835      	ldr	r5, [r6, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2624:	69ec      	ldr	r4, [r5, #28]
    2626:	4014      	ands	r4, r2
	while (i2c_master_is_syncing(module)) {
    2628:	d1fc      	bne.n	2624 <i2c_master_setup+0x54>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    262a:	2302      	movs	r3, #2
    262c:	682a      	ldr	r2, [r5, #0]
    262e:	4313      	orrs	r3, r2
    2630:	602b      	str	r3, [r5, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2632:	6830      	ldr	r0, [r6, #0]
    2634:	f7ff f842 	bl	16bc <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2638:	231f      	movs	r3, #31
    263a:	4018      	ands	r0, r3
    263c:	3b1e      	subs	r3, #30
    263e:	4083      	lsls	r3, r0
    2640:	4a0a      	ldr	r2, [pc, #40]	; (266c <i2c_master_setup+0x9c>)
    2642:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2644:	2210      	movs	r2, #16
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2646:	88f0      	ldrh	r0, [r6, #6]
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2648:	8b69      	ldrh	r1, [r5, #26]
    264a:	4211      	tst	r1, r2
    264c:	d103      	bne.n	2656 <i2c_master_setup+0x86>
		timeout_counter++;
    264e:	3401      	adds	r4, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2650:	4284      	cmp	r4, r0
    2652:	d3f9      	bcc.n	2648 <i2c_master_setup+0x78>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2654:	836a      	strh	r2, [r5, #26]
  i2c_master_enable(&i2c_master_instance);
    2656:	b00e      	add	sp, #56	; 0x38
    2658:	bd70      	pop	{r4, r5, r6, pc}
    265a:	46c0      	nop			; (mov r8, r8)
    265c:	00000d48 	.word	0x00000d48
    2660:	20000234 	.word	0x20000234
    2664:	00002710 	.word	0x00002710
    2668:	42001000 	.word	0x42001000
    266c:	e000e100 	.word	0xe000e100

00002670 <main>:

#include "system_logic.h"

#include "adc_sample.h"

int main(void) {
    2670:	b510      	push	{r4, lr}
  startup_sys_configs();
    2672:	f7fe fc29 	bl	ec8 <startup_sys_configs>
  while (true) {
    system_state(); // Get latest system_state
    2676:	f7fe fc9b 	bl	fb0 <system_state>
    system_logic(); // Invoke System Logic
    267a:	f7fe fa89 	bl	b90 <system_logic>
    267e:	e7fa      	b.n	2676 <main+0x6>

00002680 <__gnu_thumb1_case_uqi>:
    2680:	b402      	push	{r1}
    2682:	4671      	mov	r1, lr
    2684:	0849      	lsrs	r1, r1, #1
    2686:	0049      	lsls	r1, r1, #1
    2688:	5c09      	ldrb	r1, [r1, r0]
    268a:	0049      	lsls	r1, r1, #1
    268c:	448e      	add	lr, r1
    268e:	bc02      	pop	{r1}
    2690:	4770      	bx	lr
    2692:	46c0      	nop			; (mov r8, r8)

00002694 <__udivsi3>:
    2694:	2200      	movs	r2, #0
    2696:	0843      	lsrs	r3, r0, #1
    2698:	428b      	cmp	r3, r1
    269a:	d374      	bcc.n	2786 <__udivsi3+0xf2>
    269c:	0903      	lsrs	r3, r0, #4
    269e:	428b      	cmp	r3, r1
    26a0:	d35f      	bcc.n	2762 <__udivsi3+0xce>
    26a2:	0a03      	lsrs	r3, r0, #8
    26a4:	428b      	cmp	r3, r1
    26a6:	d344      	bcc.n	2732 <__udivsi3+0x9e>
    26a8:	0b03      	lsrs	r3, r0, #12
    26aa:	428b      	cmp	r3, r1
    26ac:	d328      	bcc.n	2700 <__udivsi3+0x6c>
    26ae:	0c03      	lsrs	r3, r0, #16
    26b0:	428b      	cmp	r3, r1
    26b2:	d30d      	bcc.n	26d0 <__udivsi3+0x3c>
    26b4:	22ff      	movs	r2, #255	; 0xff
    26b6:	0209      	lsls	r1, r1, #8
    26b8:	ba12      	rev	r2, r2
    26ba:	0c03      	lsrs	r3, r0, #16
    26bc:	428b      	cmp	r3, r1
    26be:	d302      	bcc.n	26c6 <__udivsi3+0x32>
    26c0:	1212      	asrs	r2, r2, #8
    26c2:	0209      	lsls	r1, r1, #8
    26c4:	d065      	beq.n	2792 <__udivsi3+0xfe>
    26c6:	0b03      	lsrs	r3, r0, #12
    26c8:	428b      	cmp	r3, r1
    26ca:	d319      	bcc.n	2700 <__udivsi3+0x6c>
    26cc:	e000      	b.n	26d0 <__udivsi3+0x3c>
    26ce:	0a09      	lsrs	r1, r1, #8
    26d0:	0bc3      	lsrs	r3, r0, #15
    26d2:	428b      	cmp	r3, r1
    26d4:	d301      	bcc.n	26da <__udivsi3+0x46>
    26d6:	03cb      	lsls	r3, r1, #15
    26d8:	1ac0      	subs	r0, r0, r3
    26da:	4152      	adcs	r2, r2
    26dc:	0b83      	lsrs	r3, r0, #14
    26de:	428b      	cmp	r3, r1
    26e0:	d301      	bcc.n	26e6 <__udivsi3+0x52>
    26e2:	038b      	lsls	r3, r1, #14
    26e4:	1ac0      	subs	r0, r0, r3
    26e6:	4152      	adcs	r2, r2
    26e8:	0b43      	lsrs	r3, r0, #13
    26ea:	428b      	cmp	r3, r1
    26ec:	d301      	bcc.n	26f2 <__udivsi3+0x5e>
    26ee:	034b      	lsls	r3, r1, #13
    26f0:	1ac0      	subs	r0, r0, r3
    26f2:	4152      	adcs	r2, r2
    26f4:	0b03      	lsrs	r3, r0, #12
    26f6:	428b      	cmp	r3, r1
    26f8:	d301      	bcc.n	26fe <__udivsi3+0x6a>
    26fa:	030b      	lsls	r3, r1, #12
    26fc:	1ac0      	subs	r0, r0, r3
    26fe:	4152      	adcs	r2, r2
    2700:	0ac3      	lsrs	r3, r0, #11
    2702:	428b      	cmp	r3, r1
    2704:	d301      	bcc.n	270a <__udivsi3+0x76>
    2706:	02cb      	lsls	r3, r1, #11
    2708:	1ac0      	subs	r0, r0, r3
    270a:	4152      	adcs	r2, r2
    270c:	0a83      	lsrs	r3, r0, #10
    270e:	428b      	cmp	r3, r1
    2710:	d301      	bcc.n	2716 <__udivsi3+0x82>
    2712:	028b      	lsls	r3, r1, #10
    2714:	1ac0      	subs	r0, r0, r3
    2716:	4152      	adcs	r2, r2
    2718:	0a43      	lsrs	r3, r0, #9
    271a:	428b      	cmp	r3, r1
    271c:	d301      	bcc.n	2722 <__udivsi3+0x8e>
    271e:	024b      	lsls	r3, r1, #9
    2720:	1ac0      	subs	r0, r0, r3
    2722:	4152      	adcs	r2, r2
    2724:	0a03      	lsrs	r3, r0, #8
    2726:	428b      	cmp	r3, r1
    2728:	d301      	bcc.n	272e <__udivsi3+0x9a>
    272a:	020b      	lsls	r3, r1, #8
    272c:	1ac0      	subs	r0, r0, r3
    272e:	4152      	adcs	r2, r2
    2730:	d2cd      	bcs.n	26ce <__udivsi3+0x3a>
    2732:	09c3      	lsrs	r3, r0, #7
    2734:	428b      	cmp	r3, r1
    2736:	d301      	bcc.n	273c <__udivsi3+0xa8>
    2738:	01cb      	lsls	r3, r1, #7
    273a:	1ac0      	subs	r0, r0, r3
    273c:	4152      	adcs	r2, r2
    273e:	0983      	lsrs	r3, r0, #6
    2740:	428b      	cmp	r3, r1
    2742:	d301      	bcc.n	2748 <__udivsi3+0xb4>
    2744:	018b      	lsls	r3, r1, #6
    2746:	1ac0      	subs	r0, r0, r3
    2748:	4152      	adcs	r2, r2
    274a:	0943      	lsrs	r3, r0, #5
    274c:	428b      	cmp	r3, r1
    274e:	d301      	bcc.n	2754 <__udivsi3+0xc0>
    2750:	014b      	lsls	r3, r1, #5
    2752:	1ac0      	subs	r0, r0, r3
    2754:	4152      	adcs	r2, r2
    2756:	0903      	lsrs	r3, r0, #4
    2758:	428b      	cmp	r3, r1
    275a:	d301      	bcc.n	2760 <__udivsi3+0xcc>
    275c:	010b      	lsls	r3, r1, #4
    275e:	1ac0      	subs	r0, r0, r3
    2760:	4152      	adcs	r2, r2
    2762:	08c3      	lsrs	r3, r0, #3
    2764:	428b      	cmp	r3, r1
    2766:	d301      	bcc.n	276c <__udivsi3+0xd8>
    2768:	00cb      	lsls	r3, r1, #3
    276a:	1ac0      	subs	r0, r0, r3
    276c:	4152      	adcs	r2, r2
    276e:	0883      	lsrs	r3, r0, #2
    2770:	428b      	cmp	r3, r1
    2772:	d301      	bcc.n	2778 <__udivsi3+0xe4>
    2774:	008b      	lsls	r3, r1, #2
    2776:	1ac0      	subs	r0, r0, r3
    2778:	4152      	adcs	r2, r2
    277a:	0843      	lsrs	r3, r0, #1
    277c:	428b      	cmp	r3, r1
    277e:	d301      	bcc.n	2784 <__udivsi3+0xf0>
    2780:	004b      	lsls	r3, r1, #1
    2782:	1ac0      	subs	r0, r0, r3
    2784:	4152      	adcs	r2, r2
    2786:	1a41      	subs	r1, r0, r1
    2788:	d200      	bcs.n	278c <__udivsi3+0xf8>
    278a:	4601      	mov	r1, r0
    278c:	4152      	adcs	r2, r2
    278e:	4610      	mov	r0, r2
    2790:	4770      	bx	lr
    2792:	e7ff      	b.n	2794 <__udivsi3+0x100>
    2794:	b501      	push	{r0, lr}
    2796:	2000      	movs	r0, #0
    2798:	f000 f806 	bl	27a8 <__aeabi_idiv0>
    279c:	bd02      	pop	{r1, pc}
    279e:	46c0      	nop			; (mov r8, r8)

000027a0 <__aeabi_uidivmod>:
    27a0:	2900      	cmp	r1, #0
    27a2:	d0f7      	beq.n	2794 <__udivsi3+0x100>
    27a4:	e776      	b.n	2694 <__udivsi3>
    27a6:	4770      	bx	lr

000027a8 <__aeabi_idiv0>:
    27a8:	4770      	bx	lr
    27aa:	46c0      	nop			; (mov r8, r8)

000027ac <__libc_init_array>:
    27ac:	b570      	push	{r4, r5, r6, lr}
    27ae:	2600      	movs	r6, #0
    27b0:	4d0c      	ldr	r5, [pc, #48]	; (27e4 <__libc_init_array+0x38>)
    27b2:	4c0d      	ldr	r4, [pc, #52]	; (27e8 <__libc_init_array+0x3c>)
    27b4:	1b64      	subs	r4, r4, r5
    27b6:	10a4      	asrs	r4, r4, #2
    27b8:	42a6      	cmp	r6, r4
    27ba:	d109      	bne.n	27d0 <__libc_init_array+0x24>
    27bc:	2600      	movs	r6, #0
    27be:	f000 f87f 	bl	28c0 <_init>
    27c2:	4d0a      	ldr	r5, [pc, #40]	; (27ec <__libc_init_array+0x40>)
    27c4:	4c0a      	ldr	r4, [pc, #40]	; (27f0 <__libc_init_array+0x44>)
    27c6:	1b64      	subs	r4, r4, r5
    27c8:	10a4      	asrs	r4, r4, #2
    27ca:	42a6      	cmp	r6, r4
    27cc:	d105      	bne.n	27da <__libc_init_array+0x2e>
    27ce:	bd70      	pop	{r4, r5, r6, pc}
    27d0:	00b3      	lsls	r3, r6, #2
    27d2:	58eb      	ldr	r3, [r5, r3]
    27d4:	4798      	blx	r3
    27d6:	3601      	adds	r6, #1
    27d8:	e7ee      	b.n	27b8 <__libc_init_array+0xc>
    27da:	00b3      	lsls	r3, r6, #2
    27dc:	58eb      	ldr	r3, [r5, r3]
    27de:	4798      	blx	r3
    27e0:	3601      	adds	r6, #1
    27e2:	e7f2      	b.n	27ca <__libc_init_array+0x1e>
    27e4:	000028cc 	.word	0x000028cc
    27e8:	000028cc 	.word	0x000028cc
    27ec:	000028cc 	.word	0x000028cc
    27f0:	000028d0 	.word	0x000028d0

000027f4 <memcpy>:
    27f4:	2300      	movs	r3, #0
    27f6:	b510      	push	{r4, lr}
    27f8:	429a      	cmp	r2, r3
    27fa:	d100      	bne.n	27fe <memcpy+0xa>
    27fc:	bd10      	pop	{r4, pc}
    27fe:	5ccc      	ldrb	r4, [r1, r3]
    2800:	54c4      	strb	r4, [r0, r3]
    2802:	3301      	adds	r3, #1
    2804:	e7f8      	b.n	27f8 <memcpy+0x4>
    2806:	0000      	movs	r0, r0
    2808:	00000002 	.word	0x00000002
    280c:	00000003 	.word	0x00000003
    2810:	00000004 	.word	0x00000004
    2814:	00000005 	.word	0x00000005
    2818:	00000006 	.word	0x00000006
    281c:	00000007 	.word	0x00000007
    2820:	0000000e 	.word	0x0000000e
    2824:	0000000f 	.word	0x0000000f
    2828:	0000000a 	.word	0x0000000a
    282c:	0000000b 	.word	0x0000000b
    2830:	0000ffff 	.word	0x0000ffff
    2834:	0000ffff 	.word	0x0000ffff
    2838:	0000ffff 	.word	0x0000ffff
    283c:	0000ffff 	.word	0x0000ffff
    2840:	0000ffff 	.word	0x0000ffff
    2844:	0000ffff 	.word	0x0000ffff
    2848:	0000ffff 	.word	0x0000ffff
    284c:	0000ffff 	.word	0x0000ffff
    2850:	0000ffff 	.word	0x0000ffff
    2854:	0000ffff 	.word	0x0000ffff

00002858 <tc_interrupt_vectors.12581>:
    2858:	00000e0d 42000800 42000c00 42001000     .......B...B...B

00002868 <_tcc_intflag>:
    2868:	00000001 00000002 00000004 00000008     ................
    2878:	00001000 00002000 00004000 00008000     ..... ...@......
    2888:	00010000 00020000 00040000 00080000     ................
    2898:	01040404 05041004 15041404 10010804     ................
    28a8:	1c02ef05 82010204 50063202 03082004     .........2.P. ..
    28b8:	15080908 00001902                       ........

000028c0 <_init>:
    28c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28c6:	bc08      	pop	{r3}
    28c8:	469e      	mov	lr, r3
    28ca:	4770      	bx	lr

000028cc <__init_array_start>:
    28cc:	000000b5 	.word	0x000000b5

000028d0 <_fini>:
    28d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28d2:	46c0      	nop			; (mov r8, r8)
    28d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    28d6:	bc08      	pop	{r3}
    28d8:	469e      	mov	lr, r3
    28da:	4770      	bx	lr

000028dc <__fini_array_start>:
    28dc:	0000008d 	.word	0x0000008d
