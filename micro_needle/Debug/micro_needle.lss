
micro_needle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00002fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000228  20000020  00002ff0  00020020  2**2
                  ALLOC
  3 .stack        00000400  20000248  00003218  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00057b36  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f54  00000000  00000000  00077bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00007af1  00000000  00000000  0007db2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000870  00000000  00000000  0008561e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000920  00000000  00000000  00085e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b469  00000000  00000000  000867ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015264  00000000  00000000  000a1c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007d285  00000000  00000000  000b6e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000142c  00000000  00000000  00134100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 06 00 20 49 27 00 00 45 27 00 00 45 27 00 00     H.. I'..E'..E'..
	...
      2c:	45 27 00 00 00 00 00 00 00 00 00 00 45 27 00 00     E'..........E'..
      3c:	45 27 00 00 45 27 00 00 45 27 00 00 45 27 00 00     E'..E'..E'..E'..
      4c:	45 27 00 00 31 06 00 00 45 27 00 00 45 27 00 00     E'..1...E'..E'..
      5c:	45 27 00 00 45 27 00 00 29 19 00 00 39 19 00 00     E'..E'..)...9...
      6c:	49 19 00 00 fd 23 00 00 9d 24 00 00 a7 24 00 00     I....#...$...$..
      7c:	45 27 00 00 45 27 00 00 45 27 00 00 45 27 00 00     E'..E'..E'..E'..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00002fd0 	.word	0x00002fd0

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00002fd0 	.word	0x00002fd0
      e4:	00002fd0 	.word	0x00002fd0
      e8:	00000000 	.word	0x00000000

000000ec <configure_adc>:
#include <adc_sample.h>

uint16_t adc_result;

void configure_adc(void)
{
      ec:	b510      	push	{r4, lr}
      ee:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
      f0:	4668      	mov	r0, sp
      f2:	f000 f85d 	bl	1b0 <adc_get_config_defaults>
	//config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
	adc_init(&adc_instance, ADC, &config_adc);
      f6:	4c0d      	ldr	r4, [pc, #52]	; (12c <configure_adc+0x40>)
      f8:	466a      	mov	r2, sp
      fa:	490d      	ldr	r1, [pc, #52]	; (130 <configure_adc+0x44>)
      fc:	0020      	movs	r0, r4
      fe:	f000 f87b 	bl	1f8 <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     102:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     104:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     106:	b25b      	sxtb	r3, r3
     108:	2b00      	cmp	r3, #0
     10a:	dbfb      	blt.n	104 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     10c:	230f      	movs	r3, #15
     10e:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     110:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     112:	7813      	ldrb	r3, [r2, #0]
     114:	2102      	movs	r1, #2
     116:	430b      	orrs	r3, r1
     118:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     11a:	4b04      	ldr	r3, [pc, #16]	; (12c <configure_adc+0x40>)
     11c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     11e:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     120:	b25b      	sxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	dbfb      	blt.n	11e <configure_adc+0x32>
	adc_enable(&adc_instance);
}
     126:	b00c      	add	sp, #48	; 0x30
     128:	bd10      	pop	{r4, pc}
     12a:	46c0      	nop			; (mov r8, r8)
     12c:	2000009c 	.word	0x2000009c
     130:	42002000 	.word	0x42002000

00000134 <sample_adc>:


void sample_adc(void){
     134:	b530      	push	{r4, r5, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     136:	4b1c      	ldr	r3, [pc, #112]	; (1a8 <sample_adc+0x74>)
     138:	6819      	ldr	r1, [r3, #0]
     13a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
     13c:	b25b      	sxtb	r3, r3
     13e:	2b00      	cmp	r3, #0
     140:	dbfb      	blt.n	13a <sample_adc+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     142:	7b0b      	ldrb	r3, [r1, #12]
     144:	2202      	movs	r2, #2
     146:	4313      	orrs	r3, r2
     148:	730b      	strb	r3, [r1, #12]
     14a:	7e4b      	ldrb	r3, [r1, #25]

	while (adc_is_syncing(module_inst)) {
     14c:	b25b      	sxtb	r3, r3
     14e:	2b00      	cmp	r3, #0
     150:	dbfb      	blt.n	14a <sample_adc+0x16>
	if (int_flags & ADC_INTFLAG_RESRDY) {
     152:	2001      	movs	r0, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
     154:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
     156:	2402      	movs	r4, #2
     158:	e001      	b.n	15e <sample_adc+0x2a>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     15a:	4210      	tst	r0, r2
     15c:	d10a      	bne.n	174 <sample_adc+0x40>
	uint32_t int_flags = adc_module->INTFLAG.reg;
     15e:	7e0b      	ldrb	r3, [r1, #24]
     160:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     162:	0002      	movs	r2, r0
     164:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
     166:	421d      	tst	r5, r3
     168:	d000      	beq.n	16c <sample_adc+0x38>
		status_flags |= ADC_STATUS_WINDOW;
     16a:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     16c:	421c      	tst	r4, r3
     16e:	d0f4      	beq.n	15a <sample_adc+0x26>
		status_flags |= ADC_STATUS_OVERRUN;
     170:	432a      	orrs	r2, r5
     172:	e7f2      	b.n	15a <sample_adc+0x26>
     174:	7e4b      	ldrb	r3, [r1, #25]
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
     176:	b25b      	sxtb	r3, r3
     178:	2b00      	cmp	r3, #0
     17a:	dbfb      	blt.n	174 <sample_adc+0x40>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     17c:	8b4a      	ldrh	r2, [r1, #26]
     17e:	4b0b      	ldr	r3, [pc, #44]	; (1ac <sample_adc+0x78>)
     180:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     182:	2301      	movs	r3, #1
     184:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     186:	7e0a      	ldrb	r2, [r1, #24]
     188:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
     18a:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
     18c:	0750      	lsls	r0, r2, #29
     18e:	d501      	bpl.n	194 <sample_adc+0x60>
		status_flags |= ADC_STATUS_WINDOW;
     190:	2002      	movs	r0, #2
     192:	4303      	orrs	r3, r0
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     194:	0792      	lsls	r2, r2, #30
     196:	d501      	bpl.n	19c <sample_adc+0x68>
		status_flags |= ADC_STATUS_OVERRUN;
     198:	2204      	movs	r2, #4
     19a:	4313      	orrs	r3, r2

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     19c:	075b      	lsls	r3, r3, #29
     19e:	d501      	bpl.n	1a4 <sample_adc+0x70>
	adc_module->INTFLAG.reg = int_flags;
     1a0:	2302      	movs	r3, #2
     1a2:	760b      	strb	r3, [r1, #24]
	adc_start_conversion(&adc_instance);
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     1a4:	bd30      	pop	{r4, r5, pc}
     1a6:	46c0      	nop			; (mov r8, r8)
     1a8:	2000009c 	.word	0x2000009c
     1ac:	20000098 	.word	0x20000098

000001b0 <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     1b0:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     1b2:	2200      	movs	r2, #0
     1b4:	2300      	movs	r3, #0
     1b6:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1b8:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1ba:	2100      	movs	r1, #0
     1bc:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1be:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1c0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1c2:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     1c4:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1c6:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1c8:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1ca:	24c0      	movs	r4, #192	; 0xc0
     1cc:	0164      	lsls	r4, r4, #5
     1ce:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1d0:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1d2:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1d4:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     1d6:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     1d8:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1da:	242a      	movs	r4, #42	; 0x2a
     1dc:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     1de:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     1e0:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     1e2:	3c06      	subs	r4, #6
     1e4:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     1e6:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     1e8:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     1ea:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     1ec:	232b      	movs	r3, #43	; 0x2b
     1ee:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     1f0:	3301      	adds	r3, #1
     1f2:	54c1      	strb	r1, [r0, r3]
}
     1f4:	bd10      	pop	{r4, pc}
	...

000001f8 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     1f8:	b5f0      	push	{r4, r5, r6, r7, lr}
     1fa:	46de      	mov	lr, fp
     1fc:	4657      	mov	r7, sl
     1fe:	464e      	mov	r6, r9
     200:	b5c0      	push	{r6, r7, lr}
     202:	b096      	sub	sp, #88	; 0x58
     204:	0007      	movs	r7, r0
     206:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     208:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     20a:	4abd      	ldr	r2, [pc, #756]	; (500 <STACK_SIZE+0x100>)
     20c:	6a10      	ldr	r0, [r2, #32]
     20e:	2380      	movs	r3, #128	; 0x80
     210:	005b      	lsls	r3, r3, #1
     212:	4303      	orrs	r3, r0
     214:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     216:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     218:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     21a:	07db      	lsls	r3, r3, #31
     21c:	d505      	bpl.n	22a <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     21e:	b016      	add	sp, #88	; 0x58
     220:	bc1c      	pop	{r2, r3, r4}
     222:	4691      	mov	r9, r2
     224:	469a      	mov	sl, r3
     226:	46a3      	mov	fp, r4
     228:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     22a:	780b      	ldrb	r3, [r1, #0]
		return STATUS_ERR_DENIED;
     22c:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     22e:	079b      	lsls	r3, r3, #30
     230:	d4f5      	bmi.n	21e <adc_init+0x26>
	module_inst->reference = config->reference;
     232:	7873      	ldrb	r3, [r6, #1]
     234:	713b      	strb	r3, [r7, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     236:	2b00      	cmp	r3, #0
     238:	d104      	bne.n	244 <adc_init+0x4c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     23a:	4ab2      	ldr	r2, [pc, #712]	; (504 <STACK_SIZE+0x104>)
     23c:	6c13      	ldr	r3, [r2, #64]	; 0x40
     23e:	2104      	movs	r1, #4
     240:	430b      	orrs	r3, r1
     242:	6413      	str	r3, [r2, #64]	; 0x40
	Adc *const adc_module = module_inst->hw;
     244:	683b      	ldr	r3, [r7, #0]
     246:	469b      	mov	fp, r3
	gclk_chan_conf.source_generator = config->clock_source;
     248:	7833      	ldrb	r3, [r6, #0]
     24a:	466a      	mov	r2, sp
     24c:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     24e:	4669      	mov	r1, sp
     250:	2013      	movs	r0, #19
     252:	f001 fd8b 	bl	1d6c <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     256:	2013      	movs	r0, #19
     258:	f001 fd4a 	bl	1cf0 <system_gclk_chan_enable>
	if (config->pin_scan.inputs_to_scan != 0) {
     25c:	232c      	movs	r3, #44	; 0x2c
     25e:	5cf2      	ldrb	r2, [r6, r3]
     260:	2a00      	cmp	r2, #0
     262:	d057      	beq.n	314 <adc_init+0x11c>
		uint8_t offset = config->pin_scan.offset_start_scan;
     264:	3b01      	subs	r3, #1
     266:	5cf5      	ldrb	r5, [r6, r3]
		uint8_t start_pin =
     268:	7b33      	ldrb	r3, [r6, #12]
     26a:	18eb      	adds	r3, r5, r3
     26c:	b2db      	uxtb	r3, r3
		uint8_t end_pin =
     26e:	18d1      	adds	r1, r2, r3
		while (start_pin < end_pin) {
     270:	b2c9      	uxtb	r1, r1
     272:	428b      	cmp	r3, r1
     274:	d224      	bcs.n	2c0 <adc_init+0xc8>
     276:	1952      	adds	r2, r2, r5
     278:	b2d3      	uxtb	r3, r2
     27a:	4699      	mov	r9, r3
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     27c:	230f      	movs	r3, #15
     27e:	469a      	mov	sl, r3
     280:	e003      	b.n	28a <adc_init+0x92>
			offset++;
     282:	3501      	adds	r5, #1
     284:	b2ed      	uxtb	r5, r5
		while (start_pin < end_pin) {
     286:	45a9      	cmp	r9, r5
     288:	d01a      	beq.n	2c0 <adc_init+0xc8>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     28a:	7b33      	ldrb	r3, [r6, #12]
     28c:	4654      	mov	r4, sl
     28e:	402c      	ands	r4, r5
     290:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     292:	2250      	movs	r2, #80	; 0x50
     294:	499c      	ldr	r1, [pc, #624]	; (508 <STACK_SIZE+0x108>)
     296:	a802      	add	r0, sp, #8
     298:	f002 fd76 	bl	2d88 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     29c:	2c09      	cmp	r4, #9
     29e:	d8f0      	bhi.n	282 <adc_init+0x8a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2a0:	00a4      	lsls	r4, r4, #2
     2a2:	466b      	mov	r3, sp
     2a4:	2208      	movs	r2, #8
     2a6:	189b      	adds	r3, r3, r2
     2a8:	5918      	ldr	r0, [r3, r4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2aa:	a901      	add	r1, sp, #4
     2ac:	2300      	movs	r3, #0
     2ae:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2b0:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2b2:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2b4:	3301      	adds	r3, #1
     2b6:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2b8:	b2c0      	uxtb	r0, r0
     2ba:	f001 fdcb 	bl	1e54 <system_pinmux_pin_set_config>
     2be:	e7e0      	b.n	282 <adc_init+0x8a>
		_adc_configure_ain_pin(config->negative_input);
     2c0:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     2c2:	2250      	movs	r2, #80	; 0x50
     2c4:	4990      	ldr	r1, [pc, #576]	; (508 <STACK_SIZE+0x108>)
     2c6:	a802      	add	r0, sp, #8
     2c8:	f002 fd5e 	bl	2d88 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2cc:	2c09      	cmp	r4, #9
     2ce:	d913      	bls.n	2f8 <adc_init+0x100>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2d0:	7d73      	ldrb	r3, [r6, #21]
     2d2:	009b      	lsls	r3, r3, #2
     2d4:	b2db      	uxtb	r3, r3
     2d6:	465a      	mov	r2, fp
     2d8:	7013      	strb	r3, [r2, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2da:	7db3      	ldrb	r3, [r6, #22]
     2dc:	01db      	lsls	r3, r3, #7
     2de:	7872      	ldrb	r2, [r6, #1]
     2e0:	4313      	orrs	r3, r2
     2e2:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2e4:	465a      	mov	r2, fp
     2e6:	7053      	strb	r3, [r2, #1]
	switch (config->resolution) {
     2e8:	7933      	ldrb	r3, [r6, #4]
     2ea:	2b34      	cmp	r3, #52	; 0x34
     2ec:	d900      	bls.n	2f0 <adc_init+0xf8>
     2ee:	e171      	b.n	5d4 <STACK_SIZE+0x1d4>
     2f0:	009b      	lsls	r3, r3, #2
     2f2:	4a86      	ldr	r2, [pc, #536]	; (50c <STACK_SIZE+0x10c>)
     2f4:	58d3      	ldr	r3, [r2, r3]
     2f6:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2f8:	00a4      	lsls	r4, r4, #2
     2fa:	ab02      	add	r3, sp, #8
     2fc:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2fe:	a901      	add	r1, sp, #4
     300:	2300      	movs	r3, #0
     302:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     304:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     306:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     308:	3301      	adds	r3, #1
     30a:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     30c:	b2c0      	uxtb	r0, r0
     30e:	f001 fda1 	bl	1e54 <system_pinmux_pin_set_config>
     312:	e7dd      	b.n	2d0 <adc_init+0xd8>
		_adc_configure_ain_pin(config->positive_input);
     314:	7b34      	ldrb	r4, [r6, #12]
	const uint32_t pinmapping[] = {
     316:	2250      	movs	r2, #80	; 0x50
     318:	497b      	ldr	r1, [pc, #492]	; (508 <STACK_SIZE+0x108>)
     31a:	a802      	add	r0, sp, #8
     31c:	f002 fd34 	bl	2d88 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     320:	2c09      	cmp	r4, #9
     322:	d915      	bls.n	350 <adc_init+0x158>
		_adc_configure_ain_pin(config->negative_input);
     324:	89f4      	ldrh	r4, [r6, #14]
	const uint32_t pinmapping[] = {
     326:	2250      	movs	r2, #80	; 0x50
     328:	4977      	ldr	r1, [pc, #476]	; (508 <STACK_SIZE+0x108>)
     32a:	a802      	add	r0, sp, #8
     32c:	f002 fd2c 	bl	2d88 <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     330:	2c09      	cmp	r4, #9
     332:	d8cd      	bhi.n	2d0 <adc_init+0xd8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     334:	00a4      	lsls	r4, r4, #2
     336:	ab02      	add	r3, sp, #8
     338:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     33a:	a901      	add	r1, sp, #4
     33c:	2300      	movs	r3, #0
     33e:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     340:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     342:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     344:	3301      	adds	r3, #1
     346:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     348:	b2c0      	uxtb	r0, r0
     34a:	f001 fd83 	bl	1e54 <system_pinmux_pin_set_config>
     34e:	e7bf      	b.n	2d0 <adc_init+0xd8>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     350:	00a4      	lsls	r4, r4, #2
     352:	ab02      	add	r3, sp, #8
     354:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     356:	a901      	add	r1, sp, #4
     358:	2300      	movs	r3, #0
     35a:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     35c:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     35e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     360:	3301      	adds	r3, #1
     362:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     364:	b2c0      	uxtb	r0, r0
     366:	f001 fd75 	bl	1e54 <system_pinmux_pin_set_config>
     36a:	e7db      	b.n	324 <adc_init+0x12c>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     36c:	2304      	movs	r3, #4
		resolution = ADC_RESOLUTION_16BIT;
     36e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_4;
     370:	2102      	movs	r1, #2
     372:	e01a      	b.n	3aa <adc_init+0x1b2>
		adjres = config->divide_result;
     374:	7c71      	ldrb	r1, [r6, #17]
		accumulate = config->accumulate_samples;
     376:	7c33      	ldrb	r3, [r6, #16]
		resolution = ADC_RESOLUTION_16BIT;
     378:	2410      	movs	r4, #16
     37a:	e016      	b.n	3aa <adc_init+0x1b2>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     37c:	2306      	movs	r3, #6
		resolution = ADC_RESOLUTION_16BIT;
     37e:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     380:	2101      	movs	r1, #1
     382:	e012      	b.n	3aa <adc_init+0x1b2>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     384:	2308      	movs	r3, #8
		resolution = ADC_RESOLUTION_16BIT;
     386:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     388:	2100      	movs	r1, #0
     38a:	e00e      	b.n	3aa <adc_init+0x1b2>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     38c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_8BIT;
     38e:	2430      	movs	r4, #48	; 0x30
	uint8_t adjres = 0;
     390:	2100      	movs	r1, #0
     392:	e00a      	b.n	3aa <adc_init+0x1b2>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     394:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_10BIT;
     396:	2420      	movs	r4, #32
	uint8_t adjres = 0;
     398:	2100      	movs	r1, #0
     39a:	e006      	b.n	3aa <adc_init+0x1b2>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     39c:	2300      	movs	r3, #0
		resolution = ADC_RESOLUTION_12BIT;
     39e:	2400      	movs	r4, #0
	uint8_t adjres = 0;
     3a0:	2100      	movs	r1, #0
     3a2:	e002      	b.n	3aa <adc_init+0x1b2>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     3a4:	2302      	movs	r3, #2
		resolution = ADC_RESOLUTION_16BIT;
     3a6:	2410      	movs	r4, #16
		adjres = ADC_DIVIDE_RESULT_2;
     3a8:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     3aa:	0109      	lsls	r1, r1, #4
     3ac:	2270      	movs	r2, #112	; 0x70
     3ae:	400a      	ands	r2, r1
     3b0:	4313      	orrs	r3, r2
     3b2:	465a      	mov	r2, fp
     3b4:	7093      	strb	r3, [r2, #2]
	if (config->sample_length > 63) {
     3b6:	7df3      	ldrb	r3, [r6, #23]
		return STATUS_ERR_INVALID_ARG;
     3b8:	2017      	movs	r0, #23
	if (config->sample_length > 63) {
     3ba:	2b3f      	cmp	r3, #63	; 0x3f
     3bc:	d900      	bls.n	3c0 <adc_init+0x1c8>
     3be:	e72e      	b.n	21e <adc_init+0x26>
		adc_module->SAMPCTRL.reg =
     3c0:	70d3      	strb	r3, [r2, #3]
	Adc *const adc_module = module_inst->hw;
     3c2:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     3c4:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     3c6:	b25b      	sxtb	r3, r3
     3c8:	2b00      	cmp	r3, #0
     3ca:	dbfb      	blt.n	3c4 <adc_init+0x1cc>
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3cc:	7cf3      	ldrb	r3, [r6, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3ce:	8872      	ldrh	r2, [r6, #2]
     3d0:	4313      	orrs	r3, r2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3d2:	2224      	movs	r2, #36	; 0x24
     3d4:	5cb2      	ldrb	r2, [r6, r2]
     3d6:	00d2      	lsls	r2, r2, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3d8:	4313      	orrs	r3, r2
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3da:	7d32      	ldrb	r2, [r6, #20]
     3dc:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3de:	4313      	orrs	r3, r2
     3e0:	7cb2      	ldrb	r2, [r6, #18]
     3e2:	0052      	lsls	r2, r2, #1
     3e4:	4313      	orrs	r3, r2
     3e6:	4323      	orrs	r3, r4
	adc_module->CTRLB.reg =
     3e8:	465a      	mov	r2, fp
     3ea:	8093      	strh	r3, [r2, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ec:	7e33      	ldrb	r3, [r6, #24]
     3ee:	2b00      	cmp	r3, #0
     3f0:	d020      	beq.n	434 <STACK_SIZE+0x34>
		switch (resolution) {
     3f2:	2c10      	cmp	r4, #16
     3f4:	d100      	bne.n	3f8 <adc_init+0x200>
     3f6:	e0cf      	b.n	598 <STACK_SIZE+0x198>
     3f8:	d800      	bhi.n	3fc <adc_init+0x204>
     3fa:	e08f      	b.n	51c <STACK_SIZE+0x11c>
     3fc:	2c20      	cmp	r4, #32
     3fe:	d100      	bne.n	402 <STACK_SIZE+0x2>
     400:	e0ac      	b.n	55c <STACK_SIZE+0x15c>
     402:	2c30      	cmp	r4, #48	; 0x30
     404:	d116      	bne.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     406:	7cf2      	ldrb	r2, [r6, #19]
     408:	2a00      	cmp	r2, #0
     40a:	d00a      	beq.n	422 <STACK_SIZE+0x22>
					(config->window.window_lower_value > 127 ||
     40c:	69f2      	ldr	r2, [r6, #28]
     40e:	3280      	adds	r2, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     410:	2017      	movs	r0, #23
			if (config->differential_mode &&
     412:	2aff      	cmp	r2, #255	; 0xff
     414:	d900      	bls.n	418 <STACK_SIZE+0x18>
     416:	e702      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -128 ||
     418:	6a32      	ldr	r2, [r6, #32]
     41a:	3280      	adds	r2, #128	; 0x80
     41c:	2aff      	cmp	r2, #255	; 0xff
     41e:	d900      	bls.n	422 <STACK_SIZE+0x22>
     420:	e6fd      	b.n	21e <adc_init+0x26>
				return STATUS_ERR_INVALID_ARG;
     422:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 255 ||
     424:	69f2      	ldr	r2, [r6, #28]
     426:	2aff      	cmp	r2, #255	; 0xff
     428:	dd00      	ble.n	42c <STACK_SIZE+0x2c>
     42a:	e6f8      	b.n	21e <adc_init+0x26>
     42c:	6a32      	ldr	r2, [r6, #32]
     42e:	2aff      	cmp	r2, #255	; 0xff
     430:	dd00      	ble.n	434 <STACK_SIZE+0x34>
     432:	e6f4      	b.n	21e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     434:	6839      	ldr	r1, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     436:	7e4a      	ldrb	r2, [r1, #25]
	while (adc_is_syncing(module_inst)) {
     438:	b252      	sxtb	r2, r2
     43a:	2a00      	cmp	r2, #0
     43c:	dbfb      	blt.n	436 <STACK_SIZE+0x36>
	adc_module->WINCTRL.reg = config->window.window_mode;
     43e:	465a      	mov	r2, fp
     440:	7213      	strb	r3, [r2, #8]
	Adc *const adc_module = module_inst->hw;
     442:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     444:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     446:	b25b      	sxtb	r3, r3
     448:	2b00      	cmp	r3, #0
     44a:	dbfb      	blt.n	444 <STACK_SIZE+0x44>
	adc_module->WINLT.reg =
     44c:	8bb3      	ldrh	r3, [r6, #28]
     44e:	465a      	mov	r2, fp
     450:	8393      	strh	r3, [r2, #28]
	Adc *const adc_module = module_inst->hw;
     452:	683a      	ldr	r2, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     454:	7e53      	ldrb	r3, [r2, #25]
	while (adc_is_syncing(module_inst)) {
     456:	b25b      	sxtb	r3, r3
     458:	2b00      	cmp	r3, #0
     45a:	dbfb      	blt.n	454 <STACK_SIZE+0x54>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     45c:	8c33      	ldrh	r3, [r6, #32]
     45e:	465a      	mov	r2, fp
     460:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     462:	232c      	movs	r3, #44	; 0x2c
     464:	5cf3      	ldrb	r3, [r6, r3]
	if (inputs_to_scan > 0) {
     466:	2b00      	cmp	r3, #0
     468:	d005      	beq.n	476 <STACK_SIZE+0x76>
		inputs_to_scan--;
     46a:	3b01      	subs	r3, #1
     46c:	b2db      	uxtb	r3, r3
		return STATUS_ERR_INVALID_ARG;
     46e:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     470:	2b0f      	cmp	r3, #15
     472:	d900      	bls.n	476 <STACK_SIZE+0x76>
     474:	e6d3      	b.n	21e <adc_init+0x26>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     476:	222b      	movs	r2, #43	; 0x2b
     478:	5cb1      	ldrb	r1, [r6, r2]
		return STATUS_ERR_INVALID_ARG;
     47a:	2017      	movs	r0, #23
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     47c:	290f      	cmp	r1, #15
     47e:	d900      	bls.n	482 <STACK_SIZE+0x82>
     480:	e6cd      	b.n	21e <adc_init+0x26>
	Adc *const adc_module = module_inst->hw;
     482:	6838      	ldr	r0, [r7, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     484:	7e42      	ldrb	r2, [r0, #25]
	while (adc_is_syncing(module_inst)) {
     486:	b252      	sxtb	r2, r2
     488:	2a00      	cmp	r2, #0
     48a:	dbfb      	blt.n	484 <STACK_SIZE+0x84>
			config->negative_input |
     48c:	89f2      	ldrh	r2, [r6, #14]
			config->positive_input;
     48e:	7b30      	ldrb	r0, [r6, #12]
			config->negative_input |
     490:	4302      	orrs	r2, r0
     492:	68b0      	ldr	r0, [r6, #8]
     494:	4302      	orrs	r2, r0
			(config->pin_scan.offset_start_scan <<
     496:	0509      	lsls	r1, r1, #20
			config->negative_input |
     498:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     49a:	041b      	lsls	r3, r3, #16
			config->negative_input |
     49c:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     49e:	465a      	mov	r2, fp
     4a0:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     4a2:	232a      	movs	r3, #42	; 0x2a
     4a4:	5cf3      	ldrb	r3, [r6, r3]
     4a6:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     4a8:	230f      	movs	r3, #15
     4aa:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     4ac:	3315      	adds	r3, #21
     4ae:	5cf3      	ldrb	r3, [r6, r3]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d012      	beq.n	4da <STACK_SIZE+0xda>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4b4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
     4b6:	4a16      	ldr	r2, [pc, #88]	; (510 <STACK_SIZE+0x110>)
			return STATUS_ERR_INVALID_ARG;
     4b8:	2017      	movs	r0, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     4ba:	4293      	cmp	r3, r2
     4bc:	d900      	bls.n	4c0 <STACK_SIZE+0xc0>
     4be:	e6ae      	b.n	21e <adc_init+0x26>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     4c0:	465a      	mov	r2, fp
     4c2:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     4c4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
     4c6:	2380      	movs	r3, #128	; 0x80
     4c8:	011b      	lsls	r3, r3, #4
     4ca:	18d3      	adds	r3, r2, r3
     4cc:	4910      	ldr	r1, [pc, #64]	; (510 <STACK_SIZE+0x110>)
     4ce:	b29b      	uxth	r3, r3
     4d0:	428b      	cmp	r3, r1
     4d2:	d900      	bls.n	4d6 <STACK_SIZE+0xd6>
     4d4:	e6a3      	b.n	21e <adc_init+0x26>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     4d6:	465b      	mov	r3, fp
     4d8:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     4da:	4b0e      	ldr	r3, [pc, #56]	; (514 <STACK_SIZE+0x114>)
     4dc:	681b      	ldr	r3, [r3, #0]
     4de:	015b      	lsls	r3, r3, #5
     4e0:	22e0      	movs	r2, #224	; 0xe0
     4e2:	00d2      	lsls	r2, r2, #3
     4e4:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     4e6:	4a0c      	ldr	r2, [pc, #48]	; (518 <STACK_SIZE+0x118>)
     4e8:	6851      	ldr	r1, [r2, #4]
     4ea:	0149      	lsls	r1, r1, #5
     4ec:	6812      	ldr	r2, [r2, #0]
     4ee:	0ed2      	lsrs	r2, r2, #27
     4f0:	430a      	orrs	r2, r1
     4f2:	b2d2      	uxtb	r2, r2
			) |
     4f4:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     4f6:	465a      	mov	r2, fp
     4f8:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     4fa:	2000      	movs	r0, #0
     4fc:	e68f      	b.n	21e <adc_init+0x26>
     4fe:	46c0      	nop			; (mov r8, r8)
     500:	40000400 	.word	0x40000400
     504:	40000800 	.word	0x40000800
     508:	00002e70 	.word	0x00002e70
     50c:	00002d9c 	.word	0x00002d9c
     510:	00000fff 	.word	0x00000fff
     514:	00806024 	.word	0x00806024
     518:	00806020 	.word	0x00806020
		switch (resolution) {
     51c:	2c00      	cmp	r4, #0
     51e:	d189      	bne.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     520:	7cf2      	ldrb	r2, [r6, #19]
     522:	2a00      	cmp	r2, #0
     524:	d00f      	beq.n	546 <STACK_SIZE+0x146>
					(config->window.window_lower_value > 2047 ||
     526:	69f2      	ldr	r2, [r6, #28]
     528:	2180      	movs	r1, #128	; 0x80
     52a:	0109      	lsls	r1, r1, #4
     52c:	468c      	mov	ip, r1
     52e:	4462      	add	r2, ip
			if (config->differential_mode &&
     530:	4929      	ldr	r1, [pc, #164]	; (5d8 <STACK_SIZE+0x1d8>)
				return STATUS_ERR_INVALID_ARG;
     532:	2017      	movs	r0, #23
			if (config->differential_mode &&
     534:	428a      	cmp	r2, r1
     536:	d900      	bls.n	53a <STACK_SIZE+0x13a>
     538:	e671      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -2048 ||
     53a:	6a32      	ldr	r2, [r6, #32]
     53c:	4462      	add	r2, ip
     53e:	4926      	ldr	r1, [pc, #152]	; (5d8 <STACK_SIZE+0x1d8>)
     540:	428a      	cmp	r2, r1
     542:	d900      	bls.n	546 <STACK_SIZE+0x146>
     544:	e66b      	b.n	21e <adc_init+0x26>
			} else if (config->window.window_lower_value > 4095 ||
     546:	4a24      	ldr	r2, [pc, #144]	; (5d8 <STACK_SIZE+0x1d8>)
				return STATUS_ERR_INVALID_ARG;
     548:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 4095 ||
     54a:	69f1      	ldr	r1, [r6, #28]
     54c:	4291      	cmp	r1, r2
     54e:	dd00      	ble.n	552 <STACK_SIZE+0x152>
     550:	e665      	b.n	21e <adc_init+0x26>
     552:	6a31      	ldr	r1, [r6, #32]
     554:	4291      	cmp	r1, r2
     556:	dd00      	ble.n	55a <STACK_SIZE+0x15a>
     558:	e661      	b.n	21e <adc_init+0x26>
     55a:	e76b      	b.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     55c:	7cf2      	ldrb	r2, [r6, #19]
     55e:	2a00      	cmp	r2, #0
     560:	d00f      	beq.n	582 <STACK_SIZE+0x182>
					(config->window.window_lower_value > 511 ||
     562:	69f2      	ldr	r2, [r6, #28]
     564:	2180      	movs	r1, #128	; 0x80
     566:	0089      	lsls	r1, r1, #2
     568:	468c      	mov	ip, r1
     56a:	4462      	add	r2, ip
			if (config->differential_mode &&
     56c:	491b      	ldr	r1, [pc, #108]	; (5dc <STACK_SIZE+0x1dc>)
				return STATUS_ERR_INVALID_ARG;
     56e:	2017      	movs	r0, #23
			if (config->differential_mode &&
     570:	428a      	cmp	r2, r1
     572:	d900      	bls.n	576 <STACK_SIZE+0x176>
     574:	e653      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -512 ||
     576:	6a32      	ldr	r2, [r6, #32]
     578:	4462      	add	r2, ip
     57a:	4918      	ldr	r1, [pc, #96]	; (5dc <STACK_SIZE+0x1dc>)
     57c:	428a      	cmp	r2, r1
     57e:	d900      	bls.n	582 <STACK_SIZE+0x182>
     580:	e64d      	b.n	21e <adc_init+0x26>
			} else if (config->window.window_lower_value > 1023 ||
     582:	4a16      	ldr	r2, [pc, #88]	; (5dc <STACK_SIZE+0x1dc>)
				return STATUS_ERR_INVALID_ARG;
     584:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 1023 ||
     586:	69f1      	ldr	r1, [r6, #28]
     588:	4291      	cmp	r1, r2
     58a:	dd00      	ble.n	58e <STACK_SIZE+0x18e>
     58c:	e647      	b.n	21e <adc_init+0x26>
     58e:	6a31      	ldr	r1, [r6, #32]
     590:	4291      	cmp	r1, r2
     592:	dd00      	ble.n	596 <STACK_SIZE+0x196>
     594:	e643      	b.n	21e <adc_init+0x26>
     596:	e74d      	b.n	434 <STACK_SIZE+0x34>
			if (config->differential_mode &&
     598:	7cf2      	ldrb	r2, [r6, #19]
     59a:	2a00      	cmp	r2, #0
     59c:	d00f      	beq.n	5be <STACK_SIZE+0x1be>
					(config->window.window_lower_value > 32767 ||
     59e:	69f2      	ldr	r2, [r6, #28]
     5a0:	2180      	movs	r1, #128	; 0x80
     5a2:	0209      	lsls	r1, r1, #8
     5a4:	468c      	mov	ip, r1
     5a6:	4462      	add	r2, ip
			if (config->differential_mode &&
     5a8:	490d      	ldr	r1, [pc, #52]	; (5e0 <STACK_SIZE+0x1e0>)
				return STATUS_ERR_INVALID_ARG;
     5aa:	2017      	movs	r0, #23
			if (config->differential_mode &&
     5ac:	428a      	cmp	r2, r1
     5ae:	d900      	bls.n	5b2 <STACK_SIZE+0x1b2>
     5b0:	e635      	b.n	21e <adc_init+0x26>
					config->window.window_lower_value < -32768 ||
     5b2:	6a32      	ldr	r2, [r6, #32]
     5b4:	4462      	add	r2, ip
     5b6:	490a      	ldr	r1, [pc, #40]	; (5e0 <STACK_SIZE+0x1e0>)
     5b8:	428a      	cmp	r2, r1
     5ba:	d900      	bls.n	5be <STACK_SIZE+0x1be>
     5bc:	e62f      	b.n	21e <adc_init+0x26>
			} else if (config->window.window_lower_value > 65535 ||
     5be:	4a08      	ldr	r2, [pc, #32]	; (5e0 <STACK_SIZE+0x1e0>)
				return STATUS_ERR_INVALID_ARG;
     5c0:	2017      	movs	r0, #23
			} else if (config->window.window_lower_value > 65535 ||
     5c2:	69f1      	ldr	r1, [r6, #28]
     5c4:	4291      	cmp	r1, r2
     5c6:	dd00      	ble.n	5ca <STACK_SIZE+0x1ca>
     5c8:	e629      	b.n	21e <adc_init+0x26>
     5ca:	6a31      	ldr	r1, [r6, #32]
     5cc:	4291      	cmp	r1, r2
     5ce:	dd00      	ble.n	5d2 <STACK_SIZE+0x1d2>
     5d0:	e625      	b.n	21e <adc_init+0x26>
     5d2:	e72f      	b.n	434 <STACK_SIZE+0x34>
		return STATUS_ERR_INVALID_ARG;
     5d4:	2017      	movs	r0, #23
     5d6:	e622      	b.n	21e <adc_init+0x26>
     5d8:	00000fff 	.word	0x00000fff
     5dc:	000003ff 	.word	0x000003ff
     5e0:	0000ffff 	.word	0x0000ffff

000005e4 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     5e4:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     5e6:	2a00      	cmp	r2, #0
     5e8:	d001      	beq.n	5ee <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     5ea:	0018      	movs	r0, r3
     5ec:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     5ee:	008b      	lsls	r3, r1, #2
     5f0:	4a06      	ldr	r2, [pc, #24]	; (60c <extint_register_callback+0x28>)
     5f2:	589b      	ldr	r3, [r3, r2]
     5f4:	2b00      	cmp	r3, #0
     5f6:	d003      	beq.n	600 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     5f8:	4283      	cmp	r3, r0
     5fa:	d005      	beq.n	608 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     5fc:	231d      	movs	r3, #29
     5fe:	e7f4      	b.n	5ea <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     600:	0089      	lsls	r1, r1, #2
     602:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     604:	2300      	movs	r3, #0
     606:	e7f0      	b.n	5ea <extint_register_callback+0x6>
		return STATUS_OK;
     608:	2300      	movs	r3, #0
     60a:	e7ee      	b.n	5ea <extint_register_callback+0x6>
     60c:	200000a8 	.word	0x200000a8

00000610 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     610:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     612:	2900      	cmp	r1, #0
     614:	d001      	beq.n	61a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     616:	0018      	movs	r0, r3
     618:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     61a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     61c:	281f      	cmp	r0, #31
     61e:	d800      	bhi.n	622 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     620:	4a02      	ldr	r2, [pc, #8]	; (62c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     622:	2301      	movs	r3, #1
     624:	4083      	lsls	r3, r0
     626:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     628:	2300      	movs	r3, #0
     62a:	e7f4      	b.n	616 <extint_chan_enable_callback+0x6>
     62c:	40001800 	.word	0x40001800

00000630 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     630:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     632:	2200      	movs	r2, #0
     634:	4b10      	ldr	r3, [pc, #64]	; (678 <EIC_Handler+0x48>)
     636:	701a      	strb	r2, [r3, #0]
     638:	2300      	movs	r3, #0
     63a:	4910      	ldr	r1, [pc, #64]	; (67c <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     63c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     63e:	4e10      	ldr	r6, [pc, #64]	; (680 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     640:	4c0d      	ldr	r4, [pc, #52]	; (678 <EIC_Handler+0x48>)
     642:	e00a      	b.n	65a <EIC_Handler+0x2a>
		return eics[eic_index];
     644:	490d      	ldr	r1, [pc, #52]	; (67c <EIC_Handler+0x4c>)
     646:	e008      	b.n	65a <EIC_Handler+0x2a>
     648:	7823      	ldrb	r3, [r4, #0]
     64a:	3301      	adds	r3, #1
     64c:	b2db      	uxtb	r3, r3
     64e:	7023      	strb	r3, [r4, #0]
     650:	2b0f      	cmp	r3, #15
     652:	d810      	bhi.n	676 <EIC_Handler+0x46>
		return NULL;
     654:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     656:	2b1f      	cmp	r3, #31
     658:	d9f4      	bls.n	644 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     65a:	0028      	movs	r0, r5
     65c:	4018      	ands	r0, r3
     65e:	2201      	movs	r2, #1
     660:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     662:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     664:	4210      	tst	r0, r2
     666:	d0ef      	beq.n	648 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     668:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     66a:	009b      	lsls	r3, r3, #2
     66c:	599b      	ldr	r3, [r3, r6]
     66e:	2b00      	cmp	r3, #0
     670:	d0ea      	beq.n	648 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     672:	4798      	blx	r3
     674:	e7e8      	b.n	648 <EIC_Handler+0x18>
			}
		}
	}
}
     676:	bd70      	pop	{r4, r5, r6, pc}
     678:	200000a4 	.word	0x200000a4
     67c:	40001800 	.word	0x40001800
     680:	200000a8 	.word	0x200000a8

00000684 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     684:	4a04      	ldr	r2, [pc, #16]	; (698 <_extint_enable+0x14>)
     686:	7813      	ldrb	r3, [r2, #0]
     688:	2102      	movs	r1, #2
     68a:	430b      	orrs	r3, r1
     68c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     68e:	7853      	ldrb	r3, [r2, #1]
     690:	b25b      	sxtb	r3, r3
     692:	2b00      	cmp	r3, #0
     694:	dbfb      	blt.n	68e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     696:	4770      	bx	lr
     698:	40001800 	.word	0x40001800

0000069c <_system_extint_init>:
{
     69c:	b500      	push	{lr}
     69e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     6a0:	4a12      	ldr	r2, [pc, #72]	; (6ec <_system_extint_init+0x50>)
     6a2:	6993      	ldr	r3, [r2, #24]
     6a4:	2140      	movs	r1, #64	; 0x40
     6a6:	430b      	orrs	r3, r1
     6a8:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     6aa:	a901      	add	r1, sp, #4
     6ac:	2300      	movs	r3, #0
     6ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     6b0:	2005      	movs	r0, #5
     6b2:	f001 fb5b 	bl	1d6c <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     6b6:	2005      	movs	r0, #5
     6b8:	f001 fb1a 	bl	1cf0 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     6bc:	4a0c      	ldr	r2, [pc, #48]	; (6f0 <_system_extint_init+0x54>)
     6be:	7813      	ldrb	r3, [r2, #0]
     6c0:	2101      	movs	r1, #1
     6c2:	430b      	orrs	r3, r1
     6c4:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     6c6:	7853      	ldrb	r3, [r2, #1]
     6c8:	b25b      	sxtb	r3, r3
     6ca:	2b00      	cmp	r3, #0
     6cc:	dbfb      	blt.n	6c6 <_system_extint_init+0x2a>
     6ce:	4b09      	ldr	r3, [pc, #36]	; (6f4 <_system_extint_init+0x58>)
     6d0:	0019      	movs	r1, r3
     6d2:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     6d4:	2200      	movs	r2, #0
     6d6:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     6d8:	4299      	cmp	r1, r3
     6da:	d1fc      	bne.n	6d6 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6dc:	2210      	movs	r2, #16
     6de:	4b06      	ldr	r3, [pc, #24]	; (6f8 <_system_extint_init+0x5c>)
     6e0:	601a      	str	r2, [r3, #0]
	_extint_enable();
     6e2:	f7ff ffcf 	bl	684 <_extint_enable>
}
     6e6:	b003      	add	sp, #12
     6e8:	bd00      	pop	{pc}
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	40000400 	.word	0x40000400
     6f0:	40001800 	.word	0x40001800
     6f4:	200000a8 	.word	0x200000a8
     6f8:	e000e100 	.word	0xe000e100

000006fc <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     6fc:	2300      	movs	r3, #0
     6fe:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     700:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     702:	2201      	movs	r2, #1
     704:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     706:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     708:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     70a:	3302      	adds	r3, #2
     70c:	72c3      	strb	r3, [r0, #11]
}
     70e:	4770      	bx	lr

00000710 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     710:	b5f0      	push	{r4, r5, r6, r7, lr}
     712:	b083      	sub	sp, #12
     714:	0005      	movs	r5, r0
     716:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     718:	a901      	add	r1, sp, #4
     71a:	2300      	movs	r3, #0
     71c:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     71e:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     720:	7923      	ldrb	r3, [r4, #4]
     722:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     724:	7a23      	ldrb	r3, [r4, #8]
     726:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     728:	7820      	ldrb	r0, [r4, #0]
     72a:	f001 fb93 	bl	1e54 <system_pinmux_pin_set_config>
		return NULL;
     72e:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     730:	2d1f      	cmp	r5, #31
     732:	d800      	bhi.n	736 <extint_chan_set_config+0x26>
		return eics[eic_index];
     734:	4812      	ldr	r0, [pc, #72]	; (780 <extint_chan_set_config+0x70>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     736:	2207      	movs	r2, #7
     738:	402a      	ands	r2, r5
     73a:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     73c:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     73e:	7aa3      	ldrb	r3, [r4, #10]
     740:	2b00      	cmp	r3, #0
     742:	d001      	beq.n	748 <extint_chan_set_config+0x38>
     744:	2308      	movs	r3, #8
     746:	431f      	orrs	r7, r3
     748:	08eb      	lsrs	r3, r5, #3
     74a:	009b      	lsls	r3, r3, #2
     74c:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     74e:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     750:	260f      	movs	r6, #15
     752:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     754:	43b1      	bics	r1, r6
			(new_config << config_pos);
     756:	4097      	lsls	r7, r2
     758:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     75a:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     75c:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     75e:	7a63      	ldrb	r3, [r4, #9]
     760:	2b00      	cmp	r3, #0
     762:	d106      	bne.n	772 <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     764:	6943      	ldr	r3, [r0, #20]
     766:	2201      	movs	r2, #1
     768:	40aa      	lsls	r2, r5
     76a:	4393      	bics	r3, r2
     76c:	6143      	str	r3, [r0, #20]
	}
}
     76e:	b003      	add	sp, #12
     770:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     772:	6942      	ldr	r2, [r0, #20]
     774:	2301      	movs	r3, #1
     776:	40ab      	lsls	r3, r5
     778:	4313      	orrs	r3, r2
     77a:	6143      	str	r3, [r0, #20]
     77c:	e7f7      	b.n	76e <extint_chan_set_config+0x5e>
     77e:	46c0      	nop			; (mov r8, r8)
     780:	40001800 	.word	0x40001800

00000784 <is_button_two_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     784:	4b18      	ldr	r3, [pc, #96]	; (7e8 <is_button_two_pressed+0x64>)
     786:	6a1b      	ldr	r3, [r3, #32]
/************************************************************************/
/* Button 2 function													*/
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     788:	041b      	lsls	r3, r3, #16
     78a:	d41d      	bmi.n	7c8 <is_button_two_pressed+0x44>
    BUTTON_TWO_PRESS_STATUS = true;
     78c:	2201      	movs	r2, #1
     78e:	4b17      	ldr	r3, [pc, #92]	; (7ec <is_button_two_pressed+0x68>)
     790:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count--;
     792:	4a17      	ldr	r2, [pc, #92]	; (7f0 <is_button_two_pressed+0x6c>)
     794:	6813      	ldr	r3, [r2, #0]
     796:	3b01      	subs	r3, #1
     798:	6013      	str	r3, [r2, #0]
    long_press_B2_delay_count--;
     79a:	4a16      	ldr	r2, [pc, #88]	; (7f4 <is_button_two_pressed+0x70>)
     79c:	6813      	ldr	r3, [r2, #0]
     79e:	3b01      	subs	r3, #1
     7a0:	6013      	str	r3, [r2, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;

  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     7a2:	2b00      	cmp	r3, #0
     7a4:	dc05      	bgt.n	7b2 <is_button_two_pressed+0x2e>
    LongPressB2Flag = true;
     7a6:	2201      	movs	r2, #1
     7a8:	4b13      	ldr	r3, [pc, #76]	; (7f8 <is_button_two_pressed+0x74>)
     7aa:	701a      	strb	r2, [r3, #0]
    long_press_B2_delay_count = 0;
     7ac:	2200      	movs	r2, #0
     7ae:	4b11      	ldr	r3, [pc, #68]	; (7f4 <is_button_two_pressed+0x70>)
     7b0:	601a      	str	r2, [r3, #0]
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     7b2:	4b0f      	ldr	r3, [pc, #60]	; (7f0 <is_button_two_pressed+0x6c>)
     7b4:	681b      	ldr	r3, [r3, #0]
     7b6:	2b00      	cmp	r3, #0
     7b8:	dc10      	bgt.n	7dc <is_button_two_pressed+0x58>
    BUTTON_TWO_RELEASE_STATUS = false;
     7ba:	2300      	movs	r3, #0
     7bc:	4a0f      	ldr	r2, [pc, #60]	; (7fc <is_button_two_pressed+0x78>)
     7be:	7013      	strb	r3, [r2, #0]
    press_B2_delay_count = 0;
     7c0:	4a0b      	ldr	r2, [pc, #44]	; (7f0 <is_button_two_pressed+0x6c>)
     7c2:	6013      	str	r3, [r2, #0]
    return true;
     7c4:	2001      	movs	r0, #1
     7c6:	e00d      	b.n	7e4 <is_button_two_pressed+0x60>
    BUTTON_TWO_PRESS_STATUS = false;
     7c8:	2200      	movs	r2, #0
     7ca:	4b08      	ldr	r3, [pc, #32]	; (7ec <is_button_two_pressed+0x68>)
     7cc:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     7ce:	320a      	adds	r2, #10
     7d0:	4b07      	ldr	r3, [pc, #28]	; (7f0 <is_button_two_pressed+0x6c>)
     7d2:	601a      	str	r2, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     7d4:	3223      	adds	r2, #35	; 0x23
     7d6:	32ff      	adds	r2, #255	; 0xff
     7d8:	4b06      	ldr	r3, [pc, #24]	; (7f4 <is_button_two_pressed+0x70>)
     7da:	601a      	str	r2, [r3, #0]

  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
     7dc:	2201      	movs	r2, #1
     7de:	4b07      	ldr	r3, [pc, #28]	; (7fc <is_button_two_pressed+0x78>)
     7e0:	701a      	strb	r2, [r3, #0]
    return false;
     7e2:	2000      	movs	r0, #0
  }
     7e4:	4770      	bx	lr
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	41004400 	.word	0x41004400
     7ec:	2000003c 	.word	0x2000003c
     7f0:	20000004 	.word	0x20000004
     7f4:	20000000 	.word	0x20000000
     7f8:	2000003e 	.word	0x2000003e
     7fc:	2000003d 	.word	0x2000003d

00000800 <set_pwm_color_channel>:
uint8_t pwm_led_toggle_count = 0;
int flash_led_counter;
extern void flash_pwm_led(void);


void set_pwm_color_channel(uint8_t channel, bool enable) {
     800:	b510      	push	{r4, lr}
	if (enable){
     802:	2900      	cmp	r1, #0
     804:	d011      	beq.n	82a <set_pwm_color_channel+0x2a>
		tcc_set_compare_value(&tcc_instance,
     806:	4a0d      	ldr	r2, [pc, #52]	; (83c <set_pwm_color_channel+0x3c>)
     808:	0001      	movs	r1, r0
     80a:	480d      	ldr	r0, [pc, #52]	; (840 <set_pwm_color_channel+0x40>)
     80c:	f001 fdca 	bl	23a4 <tcc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     810:	4b0b      	ldr	r3, [pc, #44]	; (840 <set_pwm_color_channel+0x40>)
     812:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     814:	2104      	movs	r1, #4
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     816:	201f      	movs	r0, #31
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     818:	6893      	ldr	r3, [r2, #8]
     81a:	4219      	tst	r1, r3
     81c:	d1fc      	bne.n	818 <set_pwm_color_channel+0x18>
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     81e:	7953      	ldrb	r3, [r2, #5]
     820:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     822:	d008      	beq.n	836 <set_pwm_color_channel+0x36>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     824:	2b60      	cmp	r3, #96	; 0x60
     826:	d1f7      	bne.n	818 <set_pwm_color_channel+0x18>
     828:	e007      	b.n	83a <set_pwm_color_channel+0x3a>
		channel,
		INDICATION_LED_DUTY_CYCLE);
	}else{
		tcc_set_compare_value(&tcc_instance,
     82a:	2200      	movs	r2, #0
     82c:	0001      	movs	r1, r0
     82e:	4804      	ldr	r0, [pc, #16]	; (840 <set_pwm_color_channel+0x40>)
     830:	f001 fdb8 	bl	23a4 <tcc_set_compare_value>
     834:	e7ec      	b.n	810 <set_pwm_color_channel+0x10>
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     836:	2360      	movs	r3, #96	; 0x60
     838:	7153      	strb	r3, [r2, #5]
		channel,
		ZERO_DUTY_CYCLE);
	}
	
	tcc_force_double_buffer_update(&tcc_instance);
}
     83a:	bd10      	pop	{r4, pc}
     83c:	00000fff 	.word	0x00000fff
     840:	200000e8 	.word	0x200000e8

00000844 <pwm_led_system_cleanup>:



void pwm_led_system_cleanup(void) {
     844:	b510      	push	{r4, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     846:	2100      	movs	r1, #0
     848:	2000      	movs	r0, #0
     84a:	f7ff ffd9 	bl	800 <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     84e:	2100      	movs	r1, #0
     850:	2002      	movs	r0, #2
     852:	f7ff ffd5 	bl	800 <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     856:	2100      	movs	r1, #0
     858:	2001      	movs	r0, #1
     85a:	f7ff ffd1 	bl	800 <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     85e:	2100      	movs	r1, #0
     860:	2003      	movs	r0, #3
     862:	f7ff ffcd 	bl	800 <set_pwm_color_channel>
}
     866:	bd10      	pop	{r4, pc}

00000868 <set_pwm_color>:



void set_pwm_color(int color) {
     868:	b510      	push	{r4, lr}
	
	
	
	switch (color) {
     86a:	2806      	cmp	r0, #6
     86c:	d807      	bhi.n	87e <set_pwm_color+0x16>
     86e:	0080      	lsls	r0, r0, #2
     870:	4b18      	ldr	r3, [pc, #96]	; (8d4 <set_pwm_color+0x6c>)
     872:	581b      	ldr	r3, [r3, r0]
     874:	469f      	mov	pc, r3
		case 0:  // Red
		set_pwm_color_channel(RED_CHANNEL, true);
     876:	2101      	movs	r1, #1
     878:	2000      	movs	r0, #0
     87a:	f7ff ffc1 	bl	800 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
		break;
		default:
		break;
	}
}
     87e:	bd10      	pop	{r4, pc}
		set_pwm_color_channel(GREEN_CHANNEL, true);
     880:	2101      	movs	r1, #1
     882:	2001      	movs	r0, #1
     884:	f7ff ffbc 	bl	800 <set_pwm_color_channel>
		break;
     888:	e7f9      	b.n	87e <set_pwm_color+0x16>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     88a:	2101      	movs	r1, #1
     88c:	2002      	movs	r0, #2
     88e:	f7ff ffb7 	bl	800 <set_pwm_color_channel>
		break;
     892:	e7f4      	b.n	87e <set_pwm_color+0x16>
		set_pwm_color_channel(WHITE_CHANNEL, true);
     894:	2101      	movs	r1, #1
     896:	2003      	movs	r0, #3
     898:	f7ff ffb2 	bl	800 <set_pwm_color_channel>
		break;
     89c:	e7ef      	b.n	87e <set_pwm_color+0x16>
		set_pwm_color_channel(RED_CHANNEL, true);
     89e:	2101      	movs	r1, #1
     8a0:	2000      	movs	r0, #0
     8a2:	f7ff ffad 	bl	800 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     8a6:	2101      	movs	r1, #1
     8a8:	2001      	movs	r0, #1
     8aa:	f7ff ffa9 	bl	800 <set_pwm_color_channel>
		break;
     8ae:	e7e6      	b.n	87e <set_pwm_color+0x16>
		set_pwm_color_channel(RED_CHANNEL, true);
     8b0:	2101      	movs	r1, #1
     8b2:	2000      	movs	r0, #0
     8b4:	f7ff ffa4 	bl	800 <set_pwm_color_channel>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     8b8:	2101      	movs	r1, #1
     8ba:	2002      	movs	r0, #2
     8bc:	f7ff ffa0 	bl	800 <set_pwm_color_channel>
		break;
     8c0:	e7dd      	b.n	87e <set_pwm_color+0x16>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     8c2:	2101      	movs	r1, #1
     8c4:	2002      	movs	r0, #2
     8c6:	f7ff ff9b 	bl	800 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     8ca:	2101      	movs	r1, #1
     8cc:	2001      	movs	r0, #1
     8ce:	f7ff ff97 	bl	800 <set_pwm_color_channel>
}
     8d2:	e7d4      	b.n	87e <set_pwm_color+0x16>
     8d4:	00002ec0 	.word	0x00002ec0

000008d8 <configure_pwm_tcc>:


void configure_pwm_tcc(void)
{
     8d8:	b570      	push	{r4, r5, r6, lr}
	tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     8da:	4d1b      	ldr	r5, [pc, #108]	; (948 <configure_pwm_tcc+0x70>)
     8dc:	4c1b      	ldr	r4, [pc, #108]	; (94c <configure_pwm_tcc+0x74>)
     8de:	0029      	movs	r1, r5
     8e0:	0020      	movs	r0, r4
     8e2:	f001 fb07 	bl	1ef4 <tcc_get_config_defaults>
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     8e6:	2302      	movs	r3, #2
     8e8:	7623      	strb	r3, [r4, #24]
	config_tcc.counter.period											= CONF_DEFAULT_PERIOD;
     8ea:	4b19      	ldr	r3, [pc, #100]	; (950 <configure_pwm_tcc+0x78>)
     8ec:	6063      	str	r3, [r4, #4]
	
	
	config_tcc.compare.match[RED_CHANNEL]								= ZERO_DUTY_CYCLE;
     8ee:	2300      	movs	r3, #0
     8f0:	61e3      	str	r3, [r4, #28]
	config_tcc.compare.match[BLUE_CHANNEL]								= ZERO_DUTY_CYCLE;
     8f2:	6263      	str	r3, [r4, #36]	; 0x24
	config_tcc.compare.match[GREEN_CHANNEL]								= ZERO_DUTY_CYCLE;
     8f4:	6223      	str	r3, [r4, #32]
	config_tcc.compare.match[WHITE_CHANNEL]								= ZERO_DUTY_CYCLE;
     8f6:	62a3      	str	r3, [r4, #40]	; 0x28

	config_tcc.pins.wave_out_pin[RED_CHANNEL]							= PIN_PA04F_TCC0_WO0;		// RED
     8f8:	2204      	movs	r2, #4
     8fa:	65a2      	str	r2, [r4, #88]	; 0x58
	config_tcc.pins.wave_out_pin_mux[RED_CHANNEL]						= MUX_PA04F_TCC0_WO0;
     8fc:	2105      	movs	r1, #5
     8fe:	67a1      	str	r1, [r4, #120]	; 0x78
	config_tcc.pins.enable_wave_out_pin[RED_CHANNEL]					= true;
     900:	3301      	adds	r3, #1
     902:	2098      	movs	r0, #152	; 0x98
     904:	5423      	strb	r3, [r4, r0]
	
	config_tcc.pins.wave_out_pin[GREEN_CHANNEL]							= PIN_PA05F_TCC0_WO1;		// GREEN
     906:	65e1      	str	r1, [r4, #92]	; 0x5c
	config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL]						= MUX_PA05F_TCC0_WO1;
     908:	67e1      	str	r1, [r4, #124]	; 0x7c
	config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL]					= true;
     90a:	3194      	adds	r1, #148	; 0x94
     90c:	5463      	strb	r3, [r4, r1]

	config_tcc.pins.wave_out_pin[BLUE_CHANNEL]							= PIN_PA08E_TCC0_WO2;		// BLUE
     90e:	3991      	subs	r1, #145	; 0x91
     910:	6621      	str	r1, [r4, #96]	; 0x60
	config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL]						= MUX_PA08E_TCC0_WO2;
     912:	3178      	adds	r1, #120	; 0x78
     914:	5062      	str	r2, [r4, r1]
	config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL]					= true;
     916:	311a      	adds	r1, #26
     918:	5463      	strb	r3, [r4, r1]

	config_tcc.pins.wave_out_pin[WHITE_CHANNEL]							= PIN_PA09E_TCC0_WO3;		// WHITE
     91a:	3991      	subs	r1, #145	; 0x91
     91c:	6661      	str	r1, [r4, #100]	; 0x64
	config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL]						= MUX_PA09E_TCC0_WO3;
     91e:	317b      	adds	r1, #123	; 0x7b
     920:	5062      	str	r2, [r4, r1]
	config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL]				    = true;
     922:	3297      	adds	r2, #151	; 0x97
     924:	54a3      	strb	r3, [r4, r2]
	
	tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     926:	4e0b      	ldr	r6, [pc, #44]	; (954 <configure_pwm_tcc+0x7c>)
     928:	0022      	movs	r2, r4
     92a:	0029      	movs	r1, r5
     92c:	0030      	movs	r0, r6
     92e:	f001 fb7f 	bl	2030 <tcc_init>
	Tcc *const tcc_module = module_inst->hw;
     932:	6832      	ldr	r2, [r6, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     934:	2102      	movs	r1, #2
     936:	6893      	ldr	r3, [r2, #8]
     938:	4219      	tst	r1, r3
     93a:	d1fc      	bne.n	936 <configure_pwm_tcc+0x5e>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     93c:	6813      	ldr	r3, [r2, #0]
     93e:	2102      	movs	r1, #2
     940:	430b      	orrs	r3, r1
     942:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
	
}
     944:	bd70      	pop	{r4, r5, r6, pc}
     946:	46c0      	nop			; (mov r8, r8)
     948:	42001400 	.word	0x42001400
     94c:	20000144 	.word	0x20000144
     950:	00000fff 	.word	0x00000fff
     954:	200000e8 	.word	0x200000e8

00000958 <cycle_pwm_led>:
	//system_sleep();
//}



void cycle_pwm_led(void) {
     958:	b510      	push	{r4, lr}
	flash_led_counter = 0;
     95a:	2200      	movs	r2, #0
     95c:	4b09      	ldr	r3, [pc, #36]	; (984 <cycle_pwm_led+0x2c>)
     95e:	601a      	str	r2, [r3, #0]
	switch (pwm_led_toggle_count) {
     960:	4b09      	ldr	r3, [pc, #36]	; (988 <cycle_pwm_led+0x30>)
     962:	781b      	ldrb	r3, [r3, #0]
     964:	2b01      	cmp	r3, #1
     966:	d002      	beq.n	96e <cycle_pwm_led+0x16>
     968:	2b06      	cmp	r3, #6
     96a:	d004      	beq.n	976 <cycle_pwm_led+0x1e>
		case 6:
		pwm_led_toggle_count = 0;
		pwm_led_system_cleanup();							// Reset to 1 for red
		break;
	}
}
     96c:	bd10      	pop	{r4, pc}
		SET_RED;	
     96e:	2000      	movs	r0, #0
     970:	f7ff ff7a 	bl	868 <set_pwm_color>
		break;
     974:	e7fa      	b.n	96c <cycle_pwm_led+0x14>
		pwm_led_toggle_count = 0;
     976:	2200      	movs	r2, #0
     978:	4b03      	ldr	r3, [pc, #12]	; (988 <cycle_pwm_led+0x30>)
     97a:	701a      	strb	r2, [r3, #0]
		pwm_led_system_cleanup();							// Reset to 1 for red
     97c:	f7ff ff62 	bl	844 <pwm_led_system_cleanup>
}
     980:	e7f4      	b.n	96c <cycle_pwm_led+0x14>
     982:	46c0      	nop			; (mov r8, r8)
     984:	20000048 	.word	0x20000048
     988:	2000003f 	.word	0x2000003f

0000098c <flash_pwm_led>:


void flash_pwm_led(void){
     98c:	b510      	push	{r4, lr}
	
	
	if (flash_led_counter < 1){
     98e:	4b0d      	ldr	r3, [pc, #52]	; (9c4 <flash_pwm_led+0x38>)
     990:	681b      	ldr	r3, [r3, #0]
     992:	2b00      	cmp	r3, #0
     994:	dd09      	ble.n	9aa <flash_pwm_led+0x1e>
		SET_RED;
	}
	if (flash_led_counter > 1 && flash_led_counter <= 3){
     996:	4b0b      	ldr	r3, [pc, #44]	; (9c4 <flash_pwm_led+0x38>)
     998:	681b      	ldr	r3, [r3, #0]
     99a:	3b02      	subs	r3, #2
     99c:	2b01      	cmp	r3, #1
     99e:	d908      	bls.n	9b2 <flash_pwm_led+0x26>
		SET_GRN;
	}
	if (flash_led_counter > 3){
     9a0:	4b08      	ldr	r3, [pc, #32]	; (9c4 <flash_pwm_led+0x38>)
     9a2:	681b      	ldr	r3, [r3, #0]
     9a4:	2b03      	cmp	r3, #3
     9a6:	dc08      	bgt.n	9ba <flash_pwm_led+0x2e>
		SET_BLU;
	}
     9a8:	bd10      	pop	{r4, pc}
		SET_RED;
     9aa:	2000      	movs	r0, #0
     9ac:	f7ff ff5c 	bl	868 <set_pwm_color>
     9b0:	e7f1      	b.n	996 <flash_pwm_led+0xa>
		SET_GRN;
     9b2:	2001      	movs	r0, #1
     9b4:	f7ff ff58 	bl	868 <set_pwm_color>
     9b8:	e7f2      	b.n	9a0 <flash_pwm_led+0x14>
		SET_BLU;
     9ba:	2002      	movs	r0, #2
     9bc:	f7ff ff54 	bl	868 <set_pwm_color>
     9c0:	e7f2      	b.n	9a8 <flash_pwm_led+0x1c>
     9c2:	46c0      	nop			; (mov r8, r8)
     9c4:	20000048 	.word	0x20000048

000009c8 <configure_pwm_generator>:
bool pulsating_motor_routine = false;
uint8_t motor_toggle_count = -1;
bool motor_running = false;

void configure_pwm_generator (void)
{
     9c8:	b500      	push	{lr}
     9ca:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     9cc:	aa01      	add	r2, sp, #4
     9ce:	2300      	movs	r3, #0
     9d0:	2100      	movs	r1, #0
     9d2:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     9d4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     9d6:	2000      	movs	r0, #0
     9d8:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     9da:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     9dc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     9de:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     9e0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     9e2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     9e4:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     9e6:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     9e8:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     9ea:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     9ec:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     9ee:	8593      	strh	r3, [r2, #44]	; 0x2c
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
     9f0:	3304      	adds	r3, #4
     9f2:	7093      	strb	r3, [r2, #2]
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     9f4:	21a0      	movs	r1, #160	; 0xa0
     9f6:	00c9      	lsls	r1, r1, #3
     9f8:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     9fa:	2055      	movs	r0, #85	; 0x55
     9fc:	2129      	movs	r1, #41	; 0x29
     9fe:	5450      	strb	r0, [r2, r1]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     a00:	3840      	subs	r0, #64	; 0x40
     a02:	3101      	adds	r1, #1
     a04:	5450      	strb	r0, [r2, r1]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     a06:	3116      	adds	r1, #22
     a08:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     a0a:	3936      	subs	r1, #54	; 0x36
     a0c:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     a0e:	6193      	str	r3, [r2, #24]

	config_tc.pwm_channel[0].enabled = true;
     a10:	3b03      	subs	r3, #3
     a12:	7413      	strb	r3, [r2, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     a14:	4902      	ldr	r1, [pc, #8]	; (a20 <configure_pwm_generator+0x58>)
     a16:	4803      	ldr	r0, [pc, #12]	; (a24 <configure_pwm_generator+0x5c>)
     a18:	f001 fd5c 	bl	24d4 <tc_init>
}
     a1c:	b00f      	add	sp, #60	; 0x3c
     a1e:	bd00      	pop	{pc}
     a20:	42001c00 	.word	0x42001c00
     a24:	200001e8 	.word	0x200001e8

00000a28 <motor_enable>:



void motor_enable(void){
     a28:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a2a:	4b09      	ldr	r3, [pc, #36]	; (a50 <motor_enable+0x28>)
     a2c:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     a2e:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     a30:	b25b      	sxtb	r3, r3
     a32:	2b00      	cmp	r3, #0
     a34:	dbfb      	blt.n	a2e <motor_enable+0x6>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     a36:	8813      	ldrh	r3, [r2, #0]
     a38:	2102      	movs	r1, #2
     a3a:	430b      	orrs	r3, r1
     a3c:	8013      	strh	r3, [r2, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     a3e:	2240      	movs	r2, #64	; 0x40
     a40:	4b04      	ldr	r3, [pc, #16]	; (a54 <motor_enable+0x2c>)
     a42:	619a      	str	r2, [r3, #24]
	tc_enable(&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
	motor_running = true;
     a44:	3a3f      	subs	r2, #63	; 0x3f
     a46:	4b04      	ldr	r3, [pc, #16]	; (a58 <motor_enable+0x30>)
     a48:	701a      	strb	r2, [r3, #0]
	set_motor_speed_1_indication();
     a4a:	f001 ffcb 	bl	29e4 <set_motor_speed_1_indication>
}
     a4e:	bd10      	pop	{r4, pc}
     a50:	200001e8 	.word	0x200001e8
     a54:	41004400 	.word	0x41004400
     a58:	20000041 	.word	0x20000041

00000a5c <motor_disable>:


void motor_disable(void){
     a5c:	b510      	push	{r4, lr}
	pulsating_motor_routine = false;
     a5e:	2300      	movs	r3, #0
     a60:	4a0e      	ldr	r2, [pc, #56]	; (a9c <motor_disable+0x40>)
     a62:	7013      	strb	r3, [r2, #0]
	motor_toggle_count = -1;
     a64:	21ff      	movs	r1, #255	; 0xff
     a66:	4a0e      	ldr	r2, [pc, #56]	; (aa0 <motor_disable+0x44>)
     a68:	7011      	strb	r1, [r2, #0]
	motor_running = false;
     a6a:	4a0e      	ldr	r2, [pc, #56]	; (aa4 <motor_disable+0x48>)
     a6c:	7013      	strb	r3, [r2, #0]
	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     a6e:	4c0e      	ldr	r4, [pc, #56]	; (aa8 <motor_disable+0x4c>)
     a70:	2215      	movs	r2, #21
     a72:	2100      	movs	r1, #0
     a74:	0020      	movs	r0, r4
     a76:	f001 fe3d 	bl	26f4 <tc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     a7a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     a7c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     a7e:	b25b      	sxtb	r3, r3
     a80:	2b00      	cmp	r3, #0
     a82:	dbfb      	blt.n	a7c <motor_disable+0x20>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     a84:	233b      	movs	r3, #59	; 0x3b
     a86:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     a88:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     a8a:	8813      	ldrh	r3, [r2, #0]
     a8c:	2102      	movs	r1, #2
     a8e:	438b      	bics	r3, r1
     a90:	8013      	strh	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     a92:	2240      	movs	r2, #64	; 0x40
     a94:	4b05      	ldr	r3, [pc, #20]	; (aac <motor_disable+0x50>)
     a96:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
}
     a98:	bd10      	pop	{r4, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	20000042 	.word	0x20000042
     aa0:	20000008 	.word	0x20000008
     aa4:	20000041 	.word	0x20000041
     aa8:	200001e8 	.word	0x200001e8
     aac:	41004400 	.word	0x41004400

00000ab0 <cycle_pwm_motor>:



void cycle_pwm_motor (void)
{
     ab0:	b510      	push	{r4, lr}
	{
		if (motor_running)
     ab2:	4b16      	ldr	r3, [pc, #88]	; (b0c <cycle_pwm_motor+0x5c>)
     ab4:	781b      	ldrb	r3, [r3, #0]
     ab6:	2b00      	cmp	r3, #0
     ab8:	d008      	beq.n	acc <cycle_pwm_motor+0x1c>
		{
			if (motor_toggle_count == 2)
     aba:	4b15      	ldr	r3, [pc, #84]	; (b10 <cycle_pwm_motor+0x60>)
     abc:	781b      	ldrb	r3, [r3, #0]
     abe:	2b02      	cmp	r3, #2
     ac0:	d005      	beq.n	ace <cycle_pwm_motor+0x1e>
			{
				tc_set_compare_value (&pwm_generator_instance,
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
				set_motor_speed_2_indication();
			}
			else if (motor_toggle_count == 3)
     ac2:	2b03      	cmp	r3, #3
     ac4:	d00b      	beq.n	ade <cycle_pwm_motor+0x2e>
				tc_set_compare_value (&pwm_generator_instance,
				TC_COMPARE_CAPTURE_CHANNEL_0,
				SECOND_DUTY_CYCLE);
				set_motor_speed_3_indication();
			}
			else if (motor_toggle_count == 4)
     ac6:	2b04      	cmp	r3, #4
     ac8:	d011      	beq.n	aee <cycle_pwm_motor+0x3e>
				TC_COMPARE_CAPTURE_CHANNEL_0,
				SECOND_DUTY_CYCLE);
				set_motor_pulsating_indication();
			}
			
			else if (motor_toggle_count > 4)
     aca:	d81b      	bhi.n	b04 <cycle_pwm_motor+0x54>
					motor_disable();
			}
		}
	}

}
     acc:	bd10      	pop	{r4, pc}
				tc_set_compare_value (&pwm_generator_instance,
     ace:	2222      	movs	r2, #34	; 0x22
     ad0:	2100      	movs	r1, #0
     ad2:	4810      	ldr	r0, [pc, #64]	; (b14 <cycle_pwm_motor+0x64>)
     ad4:	f001 fe0e 	bl	26f4 <tc_set_compare_value>
				set_motor_speed_2_indication();
     ad8:	f001 ffae 	bl	2a38 <set_motor_speed_2_indication>
     adc:	e7f6      	b.n	acc <cycle_pwm_motor+0x1c>
				tc_set_compare_value (&pwm_generator_instance,
     ade:	224d      	movs	r2, #77	; 0x4d
     ae0:	2100      	movs	r1, #0
     ae2:	480c      	ldr	r0, [pc, #48]	; (b14 <cycle_pwm_motor+0x64>)
     ae4:	f001 fe06 	bl	26f4 <tc_set_compare_value>
				set_motor_speed_3_indication();
     ae8:	f001 ffd2 	bl	2a90 <set_motor_speed_3_indication>
     aec:	e7ee      	b.n	acc <cycle_pwm_motor+0x1c>
				pulsating_motor_routine = true;
     aee:	2201      	movs	r2, #1
     af0:	4b09      	ldr	r3, [pc, #36]	; (b18 <cycle_pwm_motor+0x68>)
     af2:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
     af4:	324c      	adds	r2, #76	; 0x4c
     af6:	2100      	movs	r1, #0
     af8:	4806      	ldr	r0, [pc, #24]	; (b14 <cycle_pwm_motor+0x64>)
     afa:	f001 fdfb 	bl	26f4 <tc_set_compare_value>
				set_motor_pulsating_indication();
     afe:	f001 fff3 	bl	2ae8 <set_motor_pulsating_indication>
     b02:	e7e3      	b.n	acc <cycle_pwm_motor+0x1c>
					motor_disable();
     b04:	f7ff ffaa 	bl	a5c <motor_disable>
}
     b08:	e7e0      	b.n	acc <cycle_pwm_motor+0x1c>
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	20000041 	.word	0x20000041
     b10:	20000008 	.word	0x20000008
     b14:	200001e8 	.word	0x200001e8
     b18:	20000042 	.word	0x20000042

00000b1c <toggle_nsleep>:



 void toggle_nsleep(void){
	 static bool PULSATING_MOTOR = false;
	 if (pulsating_motor_routine){
     b1c:	4b0a      	ldr	r3, [pc, #40]	; (b48 <toggle_nsleep+0x2c>)
     b1e:	781b      	ldrb	r3, [r3, #0]
     b20:	2b00      	cmp	r3, #0
     b22:	d009      	beq.n	b38 <toggle_nsleep+0x1c>
		 if (PULSATING_MOTOR){
     b24:	4b09      	ldr	r3, [pc, #36]	; (b4c <toggle_nsleep+0x30>)
     b26:	781b      	ldrb	r3, [r3, #0]
     b28:	2b00      	cmp	r3, #0
     b2a:	d106      	bne.n	b3a <toggle_nsleep+0x1e>
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			 PULSATING_MOTOR = false;
			 }else{
			 PULSATING_MOTOR = true;
     b2c:	2201      	movs	r2, #1
     b2e:	4b07      	ldr	r3, [pc, #28]	; (b4c <toggle_nsleep+0x30>)
     b30:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     b32:	323f      	adds	r2, #63	; 0x3f
     b34:	4b06      	ldr	r3, [pc, #24]	; (b50 <toggle_nsleep+0x34>)
     b36:	619a      	str	r2, [r3, #24]
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
		 }
	 }
 }
     b38:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
     b3a:	2240      	movs	r2, #64	; 0x40
     b3c:	4b04      	ldr	r3, [pc, #16]	; (b50 <toggle_nsleep+0x34>)
     b3e:	615a      	str	r2, [r3, #20]
			 PULSATING_MOTOR = false;
     b40:	2200      	movs	r2, #0
     b42:	4b02      	ldr	r3, [pc, #8]	; (b4c <toggle_nsleep+0x30>)
     b44:	701a      	strb	r2, [r3, #0]
     b46:	e7f7      	b.n	b38 <toggle_nsleep+0x1c>
     b48:	20000042 	.word	0x20000042
     b4c:	20000040 	.word	0x20000040
     b50:	41004400 	.word	0x41004400

00000b54 <system_inactive>:
int SleepTickCount;
extern int flash_led_counter = 0;
void flash_pwm_led(void);


 void system_inactive(void) {
     b54:	b510      	push	{r4, lr}
	 motor_disable();							// shutdown PWM motor
     b56:	f7ff ff81 	bl	a5c <motor_disable>
	 pwm_led_system_cleanup();					// shutdown illumination led
     b5a:	f7ff fe73 	bl	844 <pwm_led_system_cleanup>
	 pwm_led_toggle_count = 0;					// reset counter to start the routine from beginning
     b5e:	2200      	movs	r2, #0
     b60:	4b02      	ldr	r3, [pc, #8]	; (b6c <system_inactive+0x18>)
     b62:	701a      	strb	r2, [r3, #0]
	 reset_chip();
     b64:	f001 fe96 	bl	2894 <reset_chip>
 }
     b68:	bd10      	pop	{r4, pc}
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	2000003f 	.word	0x2000003f

00000b70 <regular_routine>:


void regular_routine(void) {
     b70:	b510      	push	{r4, lr}

	/** shift from button 1 --> 2 11/17
	
	**/
	
	if (is_button_two_pressed()) {
     b72:	f7ff fe07 	bl	784 <is_button_two_pressed>
     b76:	2800      	cmp	r0, #0
     b78:	d031      	beq.n	bde <regular_routine+0x6e>
		SleepTickCount = SLEEP_TICK_COUNT;
     b7a:	4a30      	ldr	r2, [pc, #192]	; (c3c <regular_routine+0xcc>)
     b7c:	4b30      	ldr	r3, [pc, #192]	; (c40 <regular_routine+0xd0>)
     b7e:	601a      	str	r2, [r3, #0]
		if (LongPressB2Flag) {
     b80:	4b30      	ldr	r3, [pc, #192]	; (c44 <regular_routine+0xd4>)
     b82:	781b      	ldrb	r3, [r3, #0]
     b84:	2b00      	cmp	r3, #0
     b86:	d125      	bne.n	bd4 <regular_routine+0x64>
			system_inactive();
			LongPressB2Flag = false;															// ALLOW IT TO CYCLE AGAIN
			} else {
			if (!motor_status_changed && !led_button_status_changed && !Vbus_State) {			// makeshift to stop led array working when connected
     b88:	4b2f      	ldr	r3, [pc, #188]	; (c48 <regular_routine+0xd8>)
     b8a:	781b      	ldrb	r3, [r3, #0]
     b8c:	2b00      	cmp	r3, #0
     b8e:	d126      	bne.n	bde <regular_routine+0x6e>
     b90:	4b2e      	ldr	r3, [pc, #184]	; (c4c <regular_routine+0xdc>)
     b92:	781b      	ldrb	r3, [r3, #0]
     b94:	2b00      	cmp	r3, #0
     b96:	d122      	bne.n	bde <regular_routine+0x6e>
     b98:	4b2d      	ldr	r3, [pc, #180]	; (c50 <regular_routine+0xe0>)
     b9a:	781b      	ldrb	r3, [r3, #0]
     b9c:	2b00      	cmp	r3, #0
     b9e:	d11e      	bne.n	bde <regular_routine+0x6e>
				led_button_status_changed = true;
     ba0:	3301      	adds	r3, #1
     ba2:	4a2a      	ldr	r2, [pc, #168]	; (c4c <regular_routine+0xdc>)
     ba4:	7013      	strb	r3, [r2, #0]
				motor_status_changed = true;
     ba6:	4a28      	ldr	r2, [pc, #160]	; (c48 <regular_routine+0xd8>)
     ba8:	7013      	strb	r3, [r2, #0]
				

				pwm_led_toggle_count++;
     baa:	4a2a      	ldr	r2, [pc, #168]	; (c54 <regular_routine+0xe4>)
     bac:	7813      	ldrb	r3, [r2, #0]
     bae:	3301      	adds	r3, #1
     bb0:	7013      	strb	r3, [r2, #0]
				motor_toggle_count++;
     bb2:	4a29      	ldr	r2, [pc, #164]	; (c58 <regular_routine+0xe8>)
     bb4:	7813      	ldrb	r3, [r2, #0]
     bb6:	3301      	adds	r3, #1
     bb8:	7013      	strb	r3, [r2, #0]
				
				//if(!BATTERY_LOWEST){
					cycle_pwm_led();
     bba:	f7ff fecd 	bl	958 <cycle_pwm_led>
					if (!motor_running && motor_toggle_count == 1) {
     bbe:	4b27      	ldr	r3, [pc, #156]	; (c5c <regular_routine+0xec>)
     bc0:	781b      	ldrb	r3, [r3, #0]
     bc2:	2b00      	cmp	r3, #0
     bc4:	d103      	bne.n	bce <regular_routine+0x5e>
     bc6:	4b24      	ldr	r3, [pc, #144]	; (c58 <regular_routine+0xe8>)
     bc8:	781b      	ldrb	r3, [r3, #0]
     bca:	2b01      	cmp	r3, #1
     bcc:	d024      	beq.n	c18 <regular_routine+0xa8>
						motor_enable();
						} else {
						cycle_pwm_motor();
     bce:	f7ff ff6f 	bl	ab0 <cycle_pwm_motor>
     bd2:	e004      	b.n	bde <regular_routine+0x6e>
			system_inactive();
     bd4:	f7ff ffbe 	bl	b54 <system_inactive>
			LongPressB2Flag = false;															// ALLOW IT TO CYCLE AGAIN
     bd8:	2200      	movs	r2, #0
     bda:	4b1a      	ldr	r3, [pc, #104]	; (c44 <regular_routine+0xd4>)
     bdc:	701a      	strb	r2, [r3, #0]
				//}
			}
		}	
	}

	if (BUTTON_TWO_RELEASE_STATUS) {
     bde:	4b20      	ldr	r3, [pc, #128]	; (c60 <regular_routine+0xf0>)
     be0:	781b      	ldrb	r3, [r3, #0]
     be2:	2b00      	cmp	r3, #0
     be4:	d004      	beq.n	bf0 <regular_routine+0x80>
		motor_status_changed = false;
     be6:	2300      	movs	r3, #0
     be8:	4a17      	ldr	r2, [pc, #92]	; (c48 <regular_routine+0xd8>)
     bea:	7013      	strb	r3, [r2, #0]
		led_button_status_changed = false;
     bec:	4a17      	ldr	r2, [pc, #92]	; (c4c <regular_routine+0xdc>)
     bee:	7013      	strb	r3, [r2, #0]
	}
	
	if(BATTERY_LOWEST){
     bf0:	4b1c      	ldr	r3, [pc, #112]	; (c64 <regular_routine+0xf4>)
     bf2:	781b      	ldrb	r3, [r3, #0]
     bf4:	2b00      	cmp	r3, #0
     bf6:	d112      	bne.n	c1e <regular_routine+0xae>
	//}
	//if (BUTTON_TWO_RELEASE_STATUS) {
		//led_button_status_changed = false;
	//}

	if (Vbus_State == false) {
     bf8:	4b15      	ldr	r3, [pc, #84]	; (c50 <regular_routine+0xe0>)
     bfa:	781b      	ldrb	r3, [r3, #0]
     bfc:	2b00      	cmp	r3, #0
     bfe:	d00a      	beq.n	c16 <regular_routine+0xa6>
		;																							// Enable Motor PWM
		} else {
		
		if (motor_running){
     c00:	4b16      	ldr	r3, [pc, #88]	; (c5c <regular_routine+0xec>)
     c02:	781b      	ldrb	r3, [r3, #0]
     c04:	2b00      	cmp	r3, #0
     c06:	d112      	bne.n	c2e <regular_routine+0xbe>
			system_inactive();
		}
		// ITS PLUGGED IN
		if (Chargn_On_State == false) {																// battery charging (plugged in)
     c08:	4b17      	ldr	r3, [pc, #92]	; (c68 <regular_routine+0xf8>)
     c0a:	781b      	ldrb	r3, [r3, #0]
     c0c:	2b00      	cmp	r3, #0
     c0e:	d011      	beq.n	c34 <regular_routine+0xc4>
			BATTERY_CHARGING = true;																// show battery charge routine
			} else {
			BATTERY_CHARGING = false;
     c10:	2200      	movs	r2, #0
     c12:	4b16      	ldr	r3, [pc, #88]	; (c6c <regular_routine+0xfc>)
     c14:	701a      	strb	r2, [r3, #0]
		}
		
	}
}
     c16:	bd10      	pop	{r4, pc}
						motor_enable();
     c18:	f7ff ff06 	bl	a28 <motor_enable>
     c1c:	e7df      	b.n	bde <regular_routine+0x6e>
		motor_disable();							// shutdown PWM motor
     c1e:	f7ff ff1d 	bl	a5c <motor_disable>
		pwm_led_system_cleanup();					// shutdown illumination led
     c22:	f7ff fe0f 	bl	844 <pwm_led_system_cleanup>
		pwm_led_toggle_count = 0;	
     c26:	2200      	movs	r2, #0
     c28:	4b0a      	ldr	r3, [pc, #40]	; (c54 <regular_routine+0xe4>)
     c2a:	701a      	strb	r2, [r3, #0]
     c2c:	e7e4      	b.n	bf8 <regular_routine+0x88>
			system_inactive();
     c2e:	f7ff ff91 	bl	b54 <system_inactive>
     c32:	e7e9      	b.n	c08 <regular_routine+0x98>
			BATTERY_CHARGING = true;																// show battery charge routine
     c34:	2201      	movs	r2, #1
     c36:	4b0d      	ldr	r3, [pc, #52]	; (c6c <regular_routine+0xfc>)
     c38:	701a      	strb	r2, [r3, #0]
     c3a:	e7ec      	b.n	c16 <regular_routine+0xa6>
     c3c:	00000bb8 	.word	0x00000bb8
     c40:	2000000c 	.word	0x2000000c
     c44:	2000003e 	.word	0x2000003e
     c48:	2000004d 	.word	0x2000004d
     c4c:	2000004c 	.word	0x2000004c
     c50:	20000205 	.word	0x20000205
     c54:	2000003f 	.word	0x2000003f
     c58:	20000008 	.word	0x20000008
     c5c:	20000041 	.word	0x20000041
     c60:	2000003d 	.word	0x2000003d
     c64:	20000046 	.word	0x20000046
     c68:	20000206 	.word	0x20000206
     c6c:	20000044 	.word	0x20000044

00000c70 <get_battery_level>:
 //}


void get_battery_level(void) {
	//bool logic = !motor_running && !Vbus_State;
	bool logic = !Vbus_State;
     c70:	4b20      	ldr	r3, [pc, #128]	; (cf4 <get_battery_level+0x84>)
	if (logic){
     c72:	781b      	ldrb	r3, [r3, #0]
     c74:	2b00      	cmp	r3, #0
     c76:	d134      	bne.n	ce2 <get_battery_level+0x72>
			if (adc_result <= VOLTAGE_THRESH_LOWEST) {
     c78:	4b1f      	ldr	r3, [pc, #124]	; (cf8 <get_battery_level+0x88>)
     c7a:	881b      	ldrh	r3, [r3, #0]
     c7c:	4a1f      	ldr	r2, [pc, #124]	; (cfc <get_battery_level+0x8c>)
     c7e:	4293      	cmp	r3, r2
     c80:	d914      	bls.n	cac <get_battery_level+0x3c>
				BATTERY_LOWEST = true;
				BATTERY_LOW = false;
				BATTERY_CHARGED = false;
				
			}
			else if (adc_result > VOLTAGE_THRESH_LOWEST && adc_result <= VOLTAGE_THRESH_LOW) { // Ensure adc_result > VOLTAGE_THRESH_LOWEST
     c82:	4a1f      	ldr	r2, [pc, #124]	; (d00 <get_battery_level+0x90>)
     c84:	189a      	adds	r2, r3, r2
     c86:	b292      	uxth	r2, r2
     c88:	2a23      	cmp	r2, #35	; 0x23
     c8a:	d918      	bls.n	cbe <get_battery_level+0x4e>
				// LOW SITUATION
				BATTERY_LOWEST = false;
				BATTERY_LOW = true;
				BATTERY_CHARGED = false;
				
			} else if (adc_result > VOLTAGE_THRESH_LOW && adc_result <= VOLTAGE_THRESH_MAX){
     c8c:	4a1d      	ldr	r2, [pc, #116]	; (d04 <get_battery_level+0x94>)
     c8e:	4694      	mov	ip, r2
     c90:	4463      	add	r3, ip
     c92:	226c      	movs	r2, #108	; 0x6c
     c94:	32ff      	adds	r2, #255	; 0xff
     c96:	b29b      	uxth	r3, r3
     c98:	4293      	cmp	r3, r2
     c9a:	d819      	bhi.n	cd0 <get_battery_level+0x60>
				BATTERY_LOWEST = false;
     c9c:	2300      	movs	r3, #0
     c9e:	4a1a      	ldr	r2, [pc, #104]	; (d08 <get_battery_level+0x98>)
     ca0:	7013      	strb	r3, [r2, #0]
				BATTERY_LOW = false;
     ca2:	4a1a      	ldr	r2, [pc, #104]	; (d0c <get_battery_level+0x9c>)
     ca4:	7013      	strb	r3, [r2, #0]
				BATTERY_CHARGED = false;
     ca6:	4a1a      	ldr	r2, [pc, #104]	; (d10 <get_battery_level+0xa0>)
     ca8:	7013      	strb	r3, [r2, #0]
     caa:	e021      	b.n	cf0 <get_battery_level+0x80>
				BATTERY_LOWEST = true;
     cac:	2201      	movs	r2, #1
     cae:	4b16      	ldr	r3, [pc, #88]	; (d08 <get_battery_level+0x98>)
     cb0:	701a      	strb	r2, [r3, #0]
				BATTERY_LOW = false;
     cb2:	2300      	movs	r3, #0
     cb4:	4a15      	ldr	r2, [pc, #84]	; (d0c <get_battery_level+0x9c>)
     cb6:	7013      	strb	r3, [r2, #0]
				BATTERY_CHARGED = false;
     cb8:	4a15      	ldr	r2, [pc, #84]	; (d10 <get_battery_level+0xa0>)
     cba:	7013      	strb	r3, [r2, #0]
     cbc:	e018      	b.n	cf0 <get_battery_level+0x80>
				BATTERY_LOWEST = false;
     cbe:	2300      	movs	r3, #0
     cc0:	4a11      	ldr	r2, [pc, #68]	; (d08 <get_battery_level+0x98>)
     cc2:	7013      	strb	r3, [r2, #0]
				BATTERY_LOW = true;
     cc4:	2101      	movs	r1, #1
     cc6:	4a11      	ldr	r2, [pc, #68]	; (d0c <get_battery_level+0x9c>)
     cc8:	7011      	strb	r1, [r2, #0]
				BATTERY_CHARGED = false;
     cca:	4a11      	ldr	r2, [pc, #68]	; (d10 <get_battery_level+0xa0>)
     ccc:	7013      	strb	r3, [r2, #0]
     cce:	e00f      	b.n	cf0 <get_battery_level+0x80>
			} 
			else{
				BATTERY_LOWEST = false;
     cd0:	2300      	movs	r3, #0
     cd2:	4a0d      	ldr	r2, [pc, #52]	; (d08 <get_battery_level+0x98>)
     cd4:	7013      	strb	r3, [r2, #0]
				BATTERY_LOW = false;
     cd6:	4a0d      	ldr	r2, [pc, #52]	; (d0c <get_battery_level+0x9c>)
     cd8:	7013      	strb	r3, [r2, #0]
				BATTERY_CHARGED = true;
     cda:	2201      	movs	r2, #1
     cdc:	4b0c      	ldr	r3, [pc, #48]	; (d10 <get_battery_level+0xa0>)
     cde:	701a      	strb	r2, [r3, #0]
     ce0:	e006      	b.n	cf0 <get_battery_level+0x80>
			}		
	} 
	else 
	{
		if (Charged_State)
     ce2:	4b0c      	ldr	r3, [pc, #48]	; (d14 <get_battery_level+0xa4>)
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	2b00      	cmp	r3, #0
     ce8:	d002      	beq.n	cf0 <get_battery_level+0x80>
		{
			BATTERY_CHARGED = true;
     cea:	2201      	movs	r2, #1
     cec:	4b08      	ldr	r3, [pc, #32]	; (d10 <get_battery_level+0xa0>)
     cee:	701a      	strb	r2, [r3, #0]
		}
	}
	
}
     cf0:	4770      	bx	lr
     cf2:	46c0      	nop			; (mov r8, r8)
     cf4:	20000205 	.word	0x20000205
     cf8:	20000098 	.word	0x20000098
     cfc:	00000c4d 	.word	0x00000c4d
     d00:	fffff3b2 	.word	0xfffff3b2
     d04:	fffff38e 	.word	0xfffff38e
     d08:	20000046 	.word	0x20000046
     d0c:	20000045 	.word	0x20000045
     d10:	20000043 	.word	0x20000043
     d14:	20000207 	.word	0x20000207

00000d18 <put_to_sleep>:
 /* LOGIC MACHINE		                                                */
 /************************************************************************/
void sys_sleep_logic(void);

void put_to_sleep(void);
void put_to_sleep(void){
     d18:	b510      	push	{r4, lr}
		system_inactive();													// once entered sleep mode -- sys inactive
     d1a:	f7ff ff1b 	bl	b54 <system_inactive>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
     d1e:	4a04      	ldr	r2, [pc, #16]	; (d30 <put_to_sleep+0x18>)
     d20:	6913      	ldr	r3, [r2, #16]
     d22:	2104      	movs	r1, #4
     d24:	430b      	orrs	r3, r1
     d26:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     d28:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
     d2c:	bf30      	wfi
		system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY);						// set sleep mode 0
		system_sleep();
}
     d2e:	bd10      	pop	{r4, pc}
     d30:	e000ed00 	.word	0xe000ed00

00000d34 <system_logic>:
void sys_sleep_logic(void){
	put_to_sleep();
}


 void system_logic(void) {
     d34:	b510      	push	{r4, lr}
	 if (SYS_TICK_10MS) {
     d36:	4b1d      	ldr	r3, [pc, #116]	; (dac <system_logic+0x78>)
     d38:	781b      	ldrb	r3, [r3, #0]
     d3a:	2b00      	cmp	r3, #0
     d3c:	d108      	bne.n	d50 <system_logic+0x1c>
		 SYS_TICK_10MS = false;
		 system_state();					// Get latest system_state
		 regular_routine();

	 }
	 if (SYS_TICK_200MS) {
     d3e:	4b1c      	ldr	r3, [pc, #112]	; (db0 <system_logic+0x7c>)
     d40:	781b      	ldrb	r3, [r3, #0]
     d42:	2b00      	cmp	r3, #0
     d44:	d10c      	bne.n	d60 <system_logic+0x2c>
			flash_pwm_led();
		 }else{
				flash_led_counter = 0; 
		 }
	 }
	 if (SYS_SLEEP){
     d46:	4b1b      	ldr	r3, [pc, #108]	; (db4 <system_logic+0x80>)
     d48:	781b      	ldrb	r3, [r3, #0]
     d4a:	2b00      	cmp	r3, #0
     d4c:	d127      	bne.n	d9e <system_logic+0x6a>
		SYS_SLEEP = false;
		sys_sleep_logic();
	 }
 }
     d4e:	bd10      	pop	{r4, pc}
		 SYS_TICK_10MS = false;
     d50:	2200      	movs	r2, #0
     d52:	4b16      	ldr	r3, [pc, #88]	; (dac <system_logic+0x78>)
     d54:	701a      	strb	r2, [r3, #0]
		 system_state();					// Get latest system_state
     d56:	f000 f9ef 	bl	1138 <system_state>
		 regular_routine();
     d5a:	f7ff ff09 	bl	b70 <regular_routine>
     d5e:	e7ee      	b.n	d3e <system_logic+0xa>
		 SYS_TICK_200MS = false;
     d60:	2200      	movs	r2, #0
     d62:	4b13      	ldr	r3, [pc, #76]	; (db0 <system_logic+0x7c>)
     d64:	701a      	strb	r2, [r3, #0]
		 toggle_nsleep();
     d66:	f7ff fed9 	bl	b1c <toggle_nsleep>
		 sample_adc();
     d6a:	f7ff f9e3 	bl	134 <sample_adc>
		 get_battery_level();
     d6e:	f7ff ff7f 	bl	c70 <get_battery_level>
		 if (motor_toggle_count == 0){
     d72:	4b11      	ldr	r3, [pc, #68]	; (db8 <system_logic+0x84>)
     d74:	781b      	ldrb	r3, [r3, #0]
     d76:	2b00      	cmp	r3, #0
     d78:	d10d      	bne.n	d96 <system_logic+0x62>
			flash_led_counter++;	 
     d7a:	4b10      	ldr	r3, [pc, #64]	; (dbc <system_logic+0x88>)
     d7c:	681b      	ldr	r3, [r3, #0]
     d7e:	3301      	adds	r3, #1
			if (flash_led_counter > 7){
     d80:	2b07      	cmp	r3, #7
     d82:	dc04      	bgt.n	d8e <system_logic+0x5a>
			flash_led_counter++;	 
     d84:	4a0d      	ldr	r2, [pc, #52]	; (dbc <system_logic+0x88>)
     d86:	6013      	str	r3, [r2, #0]
			flash_pwm_led();
     d88:	f7ff fe00 	bl	98c <flash_pwm_led>
     d8c:	e7db      	b.n	d46 <system_logic+0x12>
				flash_led_counter = 7;
     d8e:	2207      	movs	r2, #7
     d90:	4b0a      	ldr	r3, [pc, #40]	; (dbc <system_logic+0x88>)
     d92:	601a      	str	r2, [r3, #0]
     d94:	e7f8      	b.n	d88 <system_logic+0x54>
				flash_led_counter = 0; 
     d96:	2200      	movs	r2, #0
     d98:	4b08      	ldr	r3, [pc, #32]	; (dbc <system_logic+0x88>)
     d9a:	601a      	str	r2, [r3, #0]
     d9c:	e7d3      	b.n	d46 <system_logic+0x12>
		SYS_SLEEP = false;
     d9e:	2200      	movs	r2, #0
     da0:	4b04      	ldr	r3, [pc, #16]	; (db4 <system_logic+0x80>)
     da2:	701a      	strb	r2, [r3, #0]
	put_to_sleep();
     da4:	f7ff ffb8 	bl	d18 <put_to_sleep>
 }
     da8:	e7d1      	b.n	d4e <system_logic+0x1a>
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	20000050 	.word	0x20000050
     db0:	20000051 	.word	0x20000051
     db4:	2000004e 	.word	0x2000004e
     db8:	20000008 	.word	0x20000008
     dbc:	20000048 	.word	0x20000048

00000dc0 <sys_tc_callback>:
	static int tick_count_100ms;
	static int tick_count_200ms;
	//static int tick_count_500ms;
	//static int tick_count_1000ms;

	tick_count_1ms++;
     dc0:	4a24      	ldr	r2, [pc, #144]	; (e54 <sys_tc_callback+0x94>)
     dc2:	6813      	ldr	r3, [r2, #0]
     dc4:	3301      	adds	r3, #1
     dc6:	6013      	str	r3, [r2, #0]
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
     dc8:	2b09      	cmp	r3, #9
     dca:	dd09      	ble.n	de0 <sys_tc_callback+0x20>
	{
		tick_count_10ms++;
     dcc:	4a22      	ldr	r2, [pc, #136]	; (e58 <sys_tc_callback+0x98>)
     dce:	6813      	ldr	r3, [r2, #0]
     dd0:	3301      	adds	r3, #1
     dd2:	6013      	str	r3, [r2, #0]
		tick_count_1ms = 0;
     dd4:	2200      	movs	r2, #0
     dd6:	4b1f      	ldr	r3, [pc, #124]	; (e54 <sys_tc_callback+0x94>)
     dd8:	601a      	str	r2, [r3, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
     dda:	3201      	adds	r2, #1
     ddc:	4b1f      	ldr	r3, [pc, #124]	; (e5c <sys_tc_callback+0x9c>)
     dde:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
     de0:	4b1d      	ldr	r3, [pc, #116]	; (e58 <sys_tc_callback+0x98>)
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	2b04      	cmp	r3, #4
     de6:	dd09      	ble.n	dfc <sys_tc_callback+0x3c>
	{
		tick_count_50ms++;
     de8:	4a1d      	ldr	r2, [pc, #116]	; (e60 <sys_tc_callback+0xa0>)
     dea:	6813      	ldr	r3, [r2, #0]
     dec:	3301      	adds	r3, #1
     dee:	6013      	str	r3, [r2, #0]
		tick_count_10ms = 0;
     df0:	2200      	movs	r2, #0
     df2:	4b19      	ldr	r3, [pc, #100]	; (e58 <sys_tc_callback+0x98>)
     df4:	601a      	str	r2, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
     df6:	3201      	adds	r2, #1
     df8:	4b1a      	ldr	r3, [pc, #104]	; (e64 <sys_tc_callback+0xa4>)
     dfa:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
     dfc:	4b18      	ldr	r3, [pc, #96]	; (e60 <sys_tc_callback+0xa0>)
     dfe:	681b      	ldr	r3, [r3, #0]
     e00:	2b01      	cmp	r3, #1
     e02:	dd09      	ble.n	e18 <sys_tc_callback+0x58>
	{
		tick_count_100ms++;
     e04:	4a18      	ldr	r2, [pc, #96]	; (e68 <sys_tc_callback+0xa8>)
     e06:	6813      	ldr	r3, [r2, #0]
     e08:	3301      	adds	r3, #1
     e0a:	6013      	str	r3, [r2, #0]
		tick_count_50ms = 0;
     e0c:	2200      	movs	r2, #0
     e0e:	4b14      	ldr	r3, [pc, #80]	; (e60 <sys_tc_callback+0xa0>)
     e10:	601a      	str	r2, [r3, #0]
		SYS_TICK_100MS = true;									// Flag for 100ms interval
     e12:	3201      	adds	r2, #1
     e14:	4b15      	ldr	r3, [pc, #84]	; (e6c <sys_tc_callback+0xac>)
     e16:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
     e18:	4b13      	ldr	r3, [pc, #76]	; (e68 <sys_tc_callback+0xa8>)
     e1a:	681b      	ldr	r3, [r3, #0]
     e1c:	2b01      	cmp	r3, #1
     e1e:	dd10      	ble.n	e42 <sys_tc_callback+0x82>
	{
		tick_count_200ms++;
     e20:	4a13      	ldr	r2, [pc, #76]	; (e70 <sys_tc_callback+0xb0>)
     e22:	6813      	ldr	r3, [r2, #0]
     e24:	3301      	adds	r3, #1
     e26:	6013      	str	r3, [r2, #0]
		tick_count_100ms = 0;
     e28:	2200      	movs	r2, #0
     e2a:	4b0f      	ldr	r3, [pc, #60]	; (e68 <sys_tc_callback+0xa8>)
     e2c:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
     e2e:	3201      	adds	r2, #1
     e30:	4b10      	ldr	r3, [pc, #64]	; (e74 <sys_tc_callback+0xb4>)
     e32:	701a      	strb	r2, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	if (SYS_TICK_200MS){
		SleepTickCount--;
     e34:	4a10      	ldr	r2, [pc, #64]	; (e78 <sys_tc_callback+0xb8>)
     e36:	6813      	ldr	r3, [r2, #0]
     e38:	3b01      	subs	r3, #1
     e3a:	6013      	str	r3, [r2, #0]
		if (SleepTickCount < 1){
     e3c:	2b00      	cmp	r3, #0
     e3e:	dd05      	ble.n	e4c <sys_tc_callback+0x8c>
		//tick_count_500ms = 0;
		//SYS_TICK_1000MS = true;                                 // Flag for 1000ms interval
		////port_pin_toggle_output_level (LED0_PIN);               // visually check sys clock on PA16
	//}
	
}
     e40:	4770      	bx	lr
	if (SYS_TICK_200MS){
     e42:	4b0c      	ldr	r3, [pc, #48]	; (e74 <sys_tc_callback+0xb4>)
     e44:	781b      	ldrb	r3, [r3, #0]
     e46:	2b00      	cmp	r3, #0
     e48:	d0fa      	beq.n	e40 <sys_tc_callback+0x80>
     e4a:	e7f3      	b.n	e34 <sys_tc_callback+0x74>
			SYS_SLEEP = true;
     e4c:	2201      	movs	r2, #1
     e4e:	4b0b      	ldr	r3, [pc, #44]	; (e7c <sys_tc_callback+0xbc>)
     e50:	701a      	strb	r2, [r3, #0]
}
     e52:	e7f5      	b.n	e40 <sys_tc_callback+0x80>
     e54:	2000005c 	.word	0x2000005c
     e58:	20000058 	.word	0x20000058
     e5c:	20000050 	.word	0x20000050
     e60:	20000064 	.word	0x20000064
     e64:	20000052 	.word	0x20000052
     e68:	20000054 	.word	0x20000054
     e6c:	2000004f 	.word	0x2000004f
     e70:	20000060 	.word	0x20000060
     e74:	20000051 	.word	0x20000051
     e78:	2000000c 	.word	0x2000000c
     e7c:	2000004e 	.word	0x2000004e

00000e80 <extint_detection_callback>:
void extint_detection_callback(void)
{
	//motor_enable();
	//LED_Off(LED0_PIN);
	//set_color_cyan_indication();
	SleepTickCount = SLEEP_TICK_COUNT;
     e80:	4a01      	ldr	r2, [pc, #4]	; (e88 <extint_detection_callback+0x8>)
     e82:	4b02      	ldr	r3, [pc, #8]	; (e8c <extint_detection_callback+0xc>)
     e84:	601a      	str	r2, [r3, #0]
	
}
     e86:	4770      	bx	lr
     e88:	00000bb8 	.word	0x00000bb8
     e8c:	2000000c 	.word	0x2000000c

00000e90 <configure_port_pins>:
{
     e90:	b5f0      	push	{r4, r5, r6, r7, lr}
     e92:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     e94:	ac01      	add	r4, sp, #4
     e96:	2600      	movs	r6, #0
     e98:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
     e9a:	70a6      	strb	r6, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     e9c:	2702      	movs	r7, #2
     e9e:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     ea0:	0021      	movs	r1, r4
     ea2:	201b      	movs	r0, #27
     ea4:	f000 f986 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     ea8:	2501      	movs	r5, #1
     eaa:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     eac:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     eae:	0021      	movs	r1, r4
     eb0:	2006      	movs	r0, #6
     eb2:	f000 f97f 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     eb6:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;								// START AT PULL UP.
     eb8:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     eba:	0021      	movs	r1, r4
     ebc:	2007      	movs	r0, #7
     ebe:	f000 f979 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     ec2:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;							// START AT PULL DOWN.
     ec4:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
     ec6:	0021      	movs	r1, r4
     ec8:	200f      	movs	r0, #15
     eca:	f000 f973 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     ece:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     ed0:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(BAT_CHARGED_PIN, &config_port_pin);
     ed2:	0021      	movs	r1, r4
     ed4:	200b      	movs	r0, #11
     ed6:	f000 f96d 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     eda:	7025      	strb	r5, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     edc:	7067      	strb	r7, [r4, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     ede:	0021      	movs	r1, r4
     ee0:	2003      	movs	r0, #3
     ee2:	f000 f967 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     ee6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     ee8:	0021      	movs	r1, r4
     eea:	2010      	movs	r0, #16
     eec:	f000 f962 	bl	11b4 <port_pin_set_config>
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     ef0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
     ef2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_1, &config_port_pin);
     ef4:	0021      	movs	r1, r4
     ef6:	200e      	movs	r0, #14
     ef8:	f000 f95c 	bl	11b4 <port_pin_set_config>
}
     efc:	b003      	add	sp, #12
     efe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f00 <configure_system_tc>:
 {
     f00:	b510      	push	{r4, lr}
     f02:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
     f04:	aa01      	add	r2, sp, #4
     f06:	2300      	movs	r3, #0
     f08:	2100      	movs	r1, #0
     f0a:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     f0c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     f0e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     f10:	2000      	movs	r0, #0
     f12:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     f14:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     f16:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     f18:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     f1a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     f1c:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     f1e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     f20:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     f22:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     f24:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     f26:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
     f28:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     f2a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     f2c:	8593      	strh	r3, [r2, #44]	; 0x2c
	 config_tc.counter_size = TC_COUNTER_SIZE;
     f2e:	3304      	adds	r3, #4
     f30:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     f32:	23a0      	movs	r3, #160	; 0xa0
     f34:	00db      	lsls	r3, r3, #3
     f36:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     f38:	216f      	movs	r1, #111	; 0x6f
     f3a:	2329      	movs	r3, #41	; 0x29
     f3c:	54d1      	strb	r1, [r2, r3]
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     f3e:	3b28      	subs	r3, #40	; 0x28
     f40:	7413      	strb	r3, [r2, #16]
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     f42:	4c08      	ldr	r4, [pc, #32]	; (f64 <configure_system_tc+0x64>)
     f44:	4908      	ldr	r1, [pc, #32]	; (f68 <configure_system_tc+0x68>)
     f46:	0020      	movs	r0, r4
     f48:	f001 fac4 	bl	24d4 <tc_init>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     f4c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     f4e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
     f50:	b25b      	sxtb	r3, r3
     f52:	2b00      	cmp	r3, #0
     f54:	dbfb      	blt.n	f4e <configure_system_tc+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     f56:	8813      	ldrh	r3, [r2, #0]
     f58:	2102      	movs	r1, #2
     f5a:	430b      	orrs	r3, r1
     f5c:	8013      	strh	r3, [r2, #0]
 }
     f5e:	b00e      	add	sp, #56	; 0x38
     f60:	bd10      	pop	{r4, pc}
     f62:	46c0      	nop			; (mov r8, r8)
     f64:	20000128 	.word	0x20000128
     f68:	42001800 	.word	0x42001800

00000f6c <system_tc_callbacks>:
{
     f6c:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
     f6e:	4c0c      	ldr	r4, [pc, #48]	; (fa0 <system_tc_callbacks+0x34>)
     f70:	2200      	movs	r2, #0
     f72:	490c      	ldr	r1, [pc, #48]	; (fa4 <system_tc_callbacks+0x38>)
     f74:	0020      	movs	r0, r4
     f76:	f001 fa46 	bl	2406 <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     f7a:	6820      	ldr	r0, [r4, #0]
     f7c:	f001 fa98 	bl	24b0 <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     f80:	4b09      	ldr	r3, [pc, #36]	; (fa8 <system_tc_callbacks+0x3c>)
     f82:	5c1a      	ldrb	r2, [r3, r0]
     f84:	231f      	movs	r3, #31
     f86:	4013      	ands	r3, r2
     f88:	2201      	movs	r2, #1
     f8a:	0011      	movs	r1, r2
     f8c:	4099      	lsls	r1, r3
     f8e:	4b07      	ldr	r3, [pc, #28]	; (fac <system_tc_callbacks+0x40>)
     f90:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     f92:	7e63      	ldrb	r3, [r4, #25]
     f94:	2101      	movs	r1, #1
     f96:	430b      	orrs	r3, r1
     f98:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     f9a:	6823      	ldr	r3, [r4, #0]
     f9c:	735a      	strb	r2, [r3, #13]
}
     f9e:	bd10      	pop	{r4, pc}
     fa0:	20000128 	.word	0x20000128
     fa4:	00000dc1 	.word	0x00000dc1
     fa8:	00002edc 	.word	0x00002edc
     fac:	e000e100 	.word	0xe000e100

00000fb0 <configure_extint_channel>:
{
     fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fb2:	b085      	sub	sp, #20
	extint_chan_get_config_defaults(&config_extint_chan);
     fb4:	ac01      	add	r4, sp, #4
     fb6:	0020      	movs	r0, r4
     fb8:	f7ff fba0 	bl	6fc <extint_chan_get_config_defaults>
	config_extint_chan.gpio_pin           = PIN_PA15A_EIC_EXTINT1;
     fbc:	230f      	movs	r3, #15
     fbe:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA15A_EIC_EXTINT1;
     fc0:	2700      	movs	r7, #0
     fc2:	6067      	str	r7, [r4, #4]
	config_extint_chan.wake_if_sleeping   = true;
     fc4:	2501      	movs	r5, #1
     fc6:	7265      	strb	r5, [r4, #9]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     fc8:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     fca:	2603      	movs	r6, #3
     fcc:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
     fce:	0021      	movs	r1, r4
     fd0:	2001      	movs	r0, #1
     fd2:	f7ff fb9d 	bl	710 <extint_chan_set_config>
	extint_chan_get_config_defaults(&config_extint_chan);
     fd6:	0020      	movs	r0, r4
     fd8:	f7ff fb90 	bl	6fc <extint_chan_get_config_defaults>
	config_extint_chan.gpio_pin           = PIN_PA11A_EIC_EXTINT3;
     fdc:	230b      	movs	r3, #11
     fde:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux       = MUX_PA11A_EIC_EXTINT3;
     fe0:	6067      	str	r7, [r4, #4]
	config_extint_chan.wake_if_sleeping   = true;
     fe2:	7265      	strb	r5, [r4, #9]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_UP;
     fe4:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
     fe6:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(PA_11_EIC_LINE_custom, &config_extint_chan);
     fe8:	0021      	movs	r1, r4
     fea:	2003      	movs	r0, #3
     fec:	f7ff fb90 	bl	710 <extint_chan_set_config>
}
     ff0:	b005      	add	sp, #20
     ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000ff4 <configure_extint_callbacks>:
{
     ff4:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback,
     ff6:	4c0a      	ldr	r4, [pc, #40]	; (1020 <configure_extint_callbacks+0x2c>)
     ff8:	2200      	movs	r2, #0
     ffa:	2101      	movs	r1, #1
     ffc:	0020      	movs	r0, r4
     ffe:	f7ff faf1 	bl	5e4 <extint_register_callback>
	extint_chan_enable_callback(BUTTON_0_EIC_LINE_custom,
    1002:	2100      	movs	r1, #0
    1004:	2001      	movs	r0, #1
    1006:	f7ff fb03 	bl	610 <extint_chan_enable_callback>
	extint_register_callback(extint_detection_callback,
    100a:	2200      	movs	r2, #0
    100c:	2103      	movs	r1, #3
    100e:	0020      	movs	r0, r4
    1010:	f7ff fae8 	bl	5e4 <extint_register_callback>
	extint_chan_enable_callback(PA_11_EIC_LINE_custom,
    1014:	2100      	movs	r1, #0
    1016:	2003      	movs	r0, #3
    1018:	f7ff fafa 	bl	610 <extint_chan_enable_callback>
}
    101c:	bd10      	pop	{r4, pc}
    101e:	46c0      	nop			; (mov r8, r8)
    1020:	00000e81 	.word	0x00000e81

00001024 <configure_sleep_clock>:
    1024:	4a02      	ldr	r2, [pc, #8]	; (1030 <configure_sleep_clock+0xc>)
    1026:	6993      	ldr	r3, [r2, #24]
    1028:	2140      	movs	r1, #64	; 0x40
    102a:	430b      	orrs	r3, r1
    102c:	6193      	str	r3, [r2, #24]
	enum status_code result = system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, mask);

	if (result != STATUS_OK) {
		Assert(false);
	}
}
    102e:	4770      	bx	lr
    1030:	40000400 	.word	0x40000400

00001034 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
    1034:	4b06      	ldr	r3, [pc, #24]	; (1050 <startup_default_pin_state+0x1c>)
    1036:	2240      	movs	r2, #64	; 0x40
    1038:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    103a:	3240      	adds	r2, #64	; 0x40
    103c:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    103e:	2280      	movs	r2, #128	; 0x80
    1040:	0212      	lsls	r2, r2, #8
    1042:	615a      	str	r2, [r3, #20]
    1044:	2280      	movs	r2, #128	; 0x80
    1046:	0112      	lsls	r2, r2, #4
    1048:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    104a:	2208      	movs	r2, #8
    104c:	619a      	str	r2, [r3, #24]
	 port_pin_set_output_level(SWITCH_OFF_PIN,HIGH);					// at high rev 2
	 port_pin_set_output_level(BUTTON_2,LOW);
	 port_pin_set_output_level(BAT_CHARGED_PIN,LOW);
	 port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	 //port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
 }
    104e:	4770      	bx	lr
    1050:	41004400 	.word	0x41004400

00001054 <startup_sys_configs>:
void put_to_sleep(void);

/************************************************************************/
/* SYSTEM startup function call (config functions)						*/
/************************************************************************/
void startup_sys_configs(void){
    1054:	b510      	push	{r4, lr}
	system_init();												// System Initialize
    1056:	f000 ff14 	bl	1e82 <system_init>
	cpu_irq_enable();
    105a:	2201      	movs	r2, #1
    105c:	4b0f      	ldr	r3, [pc, #60]	; (109c <startup_sys_configs+0x48>)
    105e:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1060:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1064:	b662      	cpsie	i
	system_interrupt_enable_global();							// System Interrupts
	configure_port_pins();										// System PORTs
    1066:	f7ff ff13 	bl	e90 <configure_port_pins>
	startup_default_pin_state();
    106a:	f7ff ffe3 	bl	1034 <startup_default_pin_state>
	i2c_master_setup();											// Startup I2C
    106e:	f001 fd83 	bl	2b78 <i2c_master_setup>
	configure_system_tc();										// System Clock
    1072:	f7ff ff45 	bl	f00 <configure_system_tc>
	system_tc_callbacks();										// System Clock Callback
    1076:	f7ff ff79 	bl	f6c <system_tc_callbacks>
	configure_pwm_tcc();										// Startup PWM
    107a:	f7ff fc2d 	bl	8d8 <configure_pwm_tcc>
	configure_adc();
    107e:	f7ff f835 	bl	ec <configure_adc>
	configure_pwm_generator();
    1082:	f7ff fca1 	bl	9c8 <configure_pwm_generator>
	
	
	
	configure_sleep_clock();
    1086:	f7ff ffcd 	bl	1024 <configure_sleep_clock>
	configure_extint_channel();
    108a:	f7ff ff91 	bl	fb0 <configure_extint_channel>
	configure_extint_callbacks();
    108e:	f7ff ffb1 	bl	ff4 <configure_extint_callbacks>
	SleepTickCount = SLEEP_TICK_COUNT;
    1092:	4a03      	ldr	r2, [pc, #12]	; (10a0 <startup_sys_configs+0x4c>)
    1094:	4b03      	ldr	r3, [pc, #12]	; (10a4 <startup_sys_configs+0x50>)
    1096:	601a      	str	r2, [r3, #0]
	extint_detection_callback();
	
}
    1098:	bd10      	pop	{r4, pc}
    109a:	46c0      	nop			; (mov r8, r8)
    109c:	20000010 	.word	0x20000010
    10a0:	00000bb8 	.word	0x00000bb8
    10a4:	2000000c 	.word	0x2000000c

000010a8 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
    10a8:	4906      	ldr	r1, [pc, #24]	; (10c4 <update_battery_states+0x1c>)
    10aa:	6a0b      	ldr	r3, [r1, #32]
    10ac:	0edb      	lsrs	r3, r3, #27
    10ae:	2201      	movs	r2, #1
    10b0:	4013      	ands	r3, r2
#define CHARGED_STATE port_pin_get_input_level(BAT_CHARGED_PIN)
//#define CHARGN_OFF_STATE port_pin_get_input_level(CHARGN_OFF_PIN)


void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
    10b2:	4805      	ldr	r0, [pc, #20]	; (10c8 <update_battery_states+0x20>)
    10b4:	7003      	strb	r3, [r0, #0]
    10b6:	6a0b      	ldr	r3, [r1, #32]
    10b8:	0adb      	lsrs	r3, r3, #11
    10ba:	401a      	ands	r2, r3
  Charged_State = CHARGED_STATE;
    10bc:	4b03      	ldr	r3, [pc, #12]	; (10cc <update_battery_states+0x24>)
    10be:	701a      	strb	r2, [r3, #0]
}
    10c0:	4770      	bx	lr
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	41004400 	.word	0x41004400
    10c8:	20000205 	.word	0x20000205
    10cc:	20000207 	.word	0x20000207

000010d0 <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
    10d0:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

	if (Vbus_State) {
    10d2:	4b13      	ldr	r3, [pc, #76]	; (1120 <display_battery_state+0x50>)
    10d4:	781b      	ldrb	r3, [r3, #0]
    10d6:	2b00      	cmp	r3, #0
    10d8:	d009      	beq.n	10ee <display_battery_state+0x1e>
		//port_pin_set_output_level(BAT_CHARGED_PIN, false);
		//system_inactive();										// turn  off all motor/ led array if plugged in
		if (!Charged_State) {
    10da:	4b12      	ldr	r3, [pc, #72]	; (1124 <display_battery_state+0x54>)
    10dc:	781b      	ldrb	r3, [r3, #0]
    10de:	2b00      	cmp	r3, #0
    10e0:	d102      	bne.n	10e8 <display_battery_state+0x18>
			set_battery_charge_routine();						//  blink
    10e2:	f001 fbf3 	bl	28cc <set_battery_charge_routine>
					set_color_red_indication();
				}
		}else{
		}
	}
}
    10e6:	bd10      	pop	{r4, pc}
			set_color_green_indication();
    10e8:	f001 fb9c 	bl	2824 <set_color_green_indication>
    10ec:	e7fb      	b.n	10e6 <display_battery_state+0x16>
		if (!motor_running){
    10ee:	4b0e      	ldr	r3, [pc, #56]	; (1128 <display_battery_state+0x58>)
    10f0:	781b      	ldrb	r3, [r3, #0]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d1f7      	bne.n	10e6 <display_battery_state+0x16>
				if (BATTERY_LOWEST) {
    10f6:	4b0d      	ldr	r3, [pc, #52]	; (112c <display_battery_state+0x5c>)
    10f8:	781b      	ldrb	r3, [r3, #0]
    10fa:	2b00      	cmp	r3, #0
    10fc:	d1f3      	bne.n	10e6 <display_battery_state+0x16>
				} else if (BATTERY_LOW) {
    10fe:	4b0c      	ldr	r3, [pc, #48]	; (1130 <display_battery_state+0x60>)
    1100:	781b      	ldrb	r3, [r3, #0]
    1102:	2b00      	cmp	r3, #0
    1104:	d106      	bne.n	1114 <display_battery_state+0x44>
				} else if (BATTERY_CHARGED) {
    1106:	4b0b      	ldr	r3, [pc, #44]	; (1134 <display_battery_state+0x64>)
    1108:	781b      	ldrb	r3, [r3, #0]
    110a:	2b00      	cmp	r3, #0
    110c:	d105      	bne.n	111a <display_battery_state+0x4a>
					set_color_red_indication();
    110e:	f001 fba5 	bl	285c <set_color_red_indication>
}
    1112:	e7e8      	b.n	10e6 <display_battery_state+0x16>
					set_battery_low_routine();					//  blink
    1114:	f001 fc20 	bl	2958 <set_battery_low_routine>
    1118:	e7e5      	b.n	10e6 <display_battery_state+0x16>
					set_color_green_indication();
    111a:	f001 fb83 	bl	2824 <set_color_green_indication>
    111e:	e7e2      	b.n	10e6 <display_battery_state+0x16>
    1120:	20000205 	.word	0x20000205
    1124:	20000207 	.word	0x20000207
    1128:	20000041 	.word	0x20000041
    112c:	20000046 	.word	0x20000046
    1130:	20000045 	.word	0x20000045
    1134:	20000043 	.word	0x20000043

00001138 <system_state>:

/************************************************************************/
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void) {
    1138:	b510      	push	{r4, lr}
  update_battery_states();
    113a:	f7ff ffb5 	bl	10a8 <update_battery_states>
  display_battery_state();
    113e:	f7ff ffc7 	bl	10d0 <display_battery_state>
    1142:	bd10      	pop	{r4, pc}

00001144 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1144:	4b0c      	ldr	r3, [pc, #48]	; (1178 <cpu_irq_enter_critical+0x34>)
    1146:	681b      	ldr	r3, [r3, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	d106      	bne.n	115a <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    114c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1150:	2b00      	cmp	r3, #0
    1152:	d007      	beq.n	1164 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1154:	2200      	movs	r2, #0
    1156:	4b09      	ldr	r3, [pc, #36]	; (117c <cpu_irq_enter_critical+0x38>)
    1158:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    115a:	4a07      	ldr	r2, [pc, #28]	; (1178 <cpu_irq_enter_critical+0x34>)
    115c:	6813      	ldr	r3, [r2, #0]
    115e:	3301      	adds	r3, #1
    1160:	6013      	str	r3, [r2, #0]
}
    1162:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1164:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1166:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    116a:	2200      	movs	r2, #0
    116c:	4b04      	ldr	r3, [pc, #16]	; (1180 <cpu_irq_enter_critical+0x3c>)
    116e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1170:	3201      	adds	r2, #1
    1172:	4b02      	ldr	r3, [pc, #8]	; (117c <cpu_irq_enter_critical+0x38>)
    1174:	701a      	strb	r2, [r3, #0]
    1176:	e7f0      	b.n	115a <cpu_irq_enter_critical+0x16>
    1178:	20000068 	.word	0x20000068
    117c:	2000006c 	.word	0x2000006c
    1180:	20000010 	.word	0x20000010

00001184 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1184:	4b08      	ldr	r3, [pc, #32]	; (11a8 <cpu_irq_leave_critical+0x24>)
    1186:	681a      	ldr	r2, [r3, #0]
    1188:	3a01      	subs	r2, #1
    118a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    118c:	681b      	ldr	r3, [r3, #0]
    118e:	2b00      	cmp	r3, #0
    1190:	d109      	bne.n	11a6 <cpu_irq_leave_critical+0x22>
    1192:	4b06      	ldr	r3, [pc, #24]	; (11ac <cpu_irq_leave_critical+0x28>)
    1194:	781b      	ldrb	r3, [r3, #0]
    1196:	2b00      	cmp	r3, #0
    1198:	d005      	beq.n	11a6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    119a:	2201      	movs	r2, #1
    119c:	4b04      	ldr	r3, [pc, #16]	; (11b0 <cpu_irq_leave_critical+0x2c>)
    119e:	701a      	strb	r2, [r3, #0]
    11a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    11a4:	b662      	cpsie	i
	}
}
    11a6:	4770      	bx	lr
    11a8:	20000068 	.word	0x20000068
    11ac:	2000006c 	.word	0x2000006c
    11b0:	20000010 	.word	0x20000010

000011b4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    11b4:	b500      	push	{lr}
    11b6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    11b8:	ab01      	add	r3, sp, #4
    11ba:	2280      	movs	r2, #128	; 0x80
    11bc:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    11be:	780a      	ldrb	r2, [r1, #0]
    11c0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    11c2:	784a      	ldrb	r2, [r1, #1]
    11c4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    11c6:	788a      	ldrb	r2, [r1, #2]
    11c8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    11ca:	0019      	movs	r1, r3
    11cc:	f000 fe42 	bl	1e54 <system_pinmux_pin_set_config>
}
    11d0:	b003      	add	sp, #12
    11d2:	bd00      	pop	{pc}

000011d4 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    11d4:	6801      	ldr	r1, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    11d6:	2207      	movs	r2, #7
    11d8:	69cb      	ldr	r3, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    11da:	421a      	tst	r2, r3
    11dc:	d1fc      	bne.n	11d8 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
    11de:	4770      	bx	lr

000011e0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    11e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    11e2:	46ce      	mov	lr, r9
    11e4:	4647      	mov	r7, r8
    11e6:	b580      	push	{r7, lr}
    11e8:	b083      	sub	sp, #12
    11ea:	0007      	movs	r7, r0
    11ec:	000d      	movs	r5, r1
    11ee:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    11f0:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    11f2:	0008      	movs	r0, r1
    11f4:	f000 fb4e 	bl	1894 <_sercom_get_sercom_inst_index>
			PM->APBCMASK.reg |= mask;
    11f8:	4a58      	ldr	r2, [pc, #352]	; (135c <i2c_master_init+0x17c>)
    11fa:	6a11      	ldr	r1, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    11fc:	1c84      	adds	r4, r0, #2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    11fe:	2301      	movs	r3, #1
    1200:	40a3      	lsls	r3, r4
    1202:	430b      	orrs	r3, r1
    1204:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1206:	a901      	add	r1, sp, #4
    1208:	7b33      	ldrb	r3, [r6, #12]
    120a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    120c:	300e      	adds	r0, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    120e:	b2c4      	uxtb	r4, r0
    1210:	0020      	movs	r0, r4
    1212:	f000 fdab 	bl	1d6c <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    1216:	0020      	movs	r0, r4
    1218:	f000 fd6a 	bl	1cf0 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    121c:	7b30      	ldrb	r0, [r6, #12]
    121e:	2100      	movs	r1, #0
    1220:	f000 fab6 	bl	1790 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1224:	682b      	ldr	r3, [r5, #0]
		return STATUS_ERR_DENIED;
    1226:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    1228:	079b      	lsls	r3, r3, #30
    122a:	d504      	bpl.n	1236 <i2c_master_init+0x56>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    122c:	b003      	add	sp, #12
    122e:	bc0c      	pop	{r2, r3}
    1230:	4690      	mov	r8, r2
    1232:	4699      	mov	r9, r3
    1234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    1236:	682b      	ldr	r3, [r5, #0]
		return STATUS_BUSY;
    1238:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    123a:	07db      	lsls	r3, r3, #31
    123c:	d4f6      	bmi.n	122c <i2c_master_init+0x4c>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    123e:	6838      	ldr	r0, [r7, #0]
    1240:	f000 fb28 	bl	1894 <_sercom_get_sercom_inst_index>
    1244:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    1246:	4946      	ldr	r1, [pc, #280]	; (1360 <i2c_master_init+0x180>)
    1248:	f000 fb42 	bl	18d0 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
    124c:	00a4      	lsls	r4, r4, #2
    124e:	4b45      	ldr	r3, [pc, #276]	; (1364 <i2c_master_init+0x184>)
    1250:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    1252:	2300      	movs	r3, #0
    1254:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    1256:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    1258:	2200      	movs	r2, #0
    125a:	4690      	mov	r8, r2
    125c:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    125e:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    1260:	2225      	movs	r2, #37	; 0x25
    1262:	4641      	mov	r1, r8
    1264:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
    1266:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    1268:	3314      	adds	r3, #20
    126a:	602b      	str	r3, [r5, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    126c:	683c      	ldr	r4, [r7, #0]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    126e:	0020      	movs	r0, r4
    1270:	f000 fb10 	bl	1894 <_sercom_get_sercom_inst_index>
    1274:	4681      	mov	r9, r0
    1276:	2380      	movs	r3, #128	; 0x80
    1278:	466a      	mov	r2, sp
    127a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    127c:	466b      	mov	r3, sp
    127e:	4642      	mov	r2, r8
    1280:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1282:	2301      	movs	r3, #1
    1284:	466a      	mov	r2, sp
    1286:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1288:	466b      	mov	r3, sp
    128a:	4642      	mov	r2, r8
    128c:	70da      	strb	r2, [r3, #3]
	uint32_t pad0 = config->pinmux_pad0;
    128e:	69f0      	ldr	r0, [r6, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1290:	6a35      	ldr	r5, [r6, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1292:	2800      	cmp	r0, #0
    1294:	d057      	beq.n	1346 <i2c_master_init+0x166>
	pin_conf.mux_position = pad0 & 0xFFFF;
    1296:	466b      	mov	r3, sp
    1298:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    129a:	2302      	movs	r3, #2
    129c:	466a      	mov	r2, sp
    129e:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    12a0:	0c00      	lsrs	r0, r0, #16
    12a2:	b2c0      	uxtb	r0, r0
    12a4:	4669      	mov	r1, sp
    12a6:	f000 fdd5 	bl	1e54 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
    12aa:	2d00      	cmp	r5, #0
    12ac:	d050      	beq.n	1350 <i2c_master_init+0x170>
	pin_conf.mux_position = pad1 & 0xFFFF;
    12ae:	466b      	mov	r3, sp
    12b0:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    12b2:	2302      	movs	r3, #2
    12b4:	466a      	mov	r2, sp
    12b6:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    12b8:	0c28      	lsrs	r0, r5, #16
    12ba:	b2c0      	uxtb	r0, r0
    12bc:	4669      	mov	r1, sp
    12be:	f000 fdc9 	bl	1e54 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    12c2:	8ab3      	ldrh	r3, [r6, #20]
    12c4:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    12c6:	8af3      	ldrh	r3, [r6, #22]
    12c8:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    12ca:	7e33      	ldrb	r3, [r6, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    12cc:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    12ce:	2b00      	cmp	r3, #0
    12d0:	d104      	bne.n	12dc <i2c_master_init+0xfc>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    12d2:	4b25      	ldr	r3, [pc, #148]	; (1368 <i2c_master_init+0x188>)
    12d4:	789b      	ldrb	r3, [r3, #2]
    12d6:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    12d8:	0fdb      	lsrs	r3, r3, #31
    12da:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    12dc:	68b1      	ldr	r1, [r6, #8]
    12de:	6933      	ldr	r3, [r6, #16]
    12e0:	430b      	orrs	r3, r1
    12e2:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    12e4:	2224      	movs	r2, #36	; 0x24
    12e6:	5cb2      	ldrb	r2, [r6, r2]
    12e8:	2a00      	cmp	r2, #0
    12ea:	d002      	beq.n	12f2 <i2c_master_init+0x112>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    12ec:	2280      	movs	r2, #128	; 0x80
    12ee:	05d2      	lsls	r2, r2, #23
    12f0:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    12f2:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    12f4:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    12f6:	222c      	movs	r2, #44	; 0x2c
    12f8:	5cb2      	ldrb	r2, [r6, r2]
    12fa:	2a00      	cmp	r2, #0
    12fc:	d103      	bne.n	1306 <i2c_master_init+0x126>
    12fe:	2280      	movs	r2, #128	; 0x80
    1300:	0492      	lsls	r2, r2, #18
    1302:	4291      	cmp	r1, r2
    1304:	d102      	bne.n	130c <i2c_master_init+0x12c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1306:	2280      	movs	r2, #128	; 0x80
    1308:	0512      	lsls	r2, r2, #20
    130a:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    130c:	222d      	movs	r2, #45	; 0x2d
    130e:	5cb2      	ldrb	r2, [r6, r2]
    1310:	2a00      	cmp	r2, #0
    1312:	d002      	beq.n	131a <i2c_master_init+0x13a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    1314:	2280      	movs	r2, #128	; 0x80
    1316:	0412      	lsls	r2, r2, #16
    1318:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    131a:	222e      	movs	r2, #46	; 0x2e
    131c:	5cb2      	ldrb	r2, [r6, r2]
    131e:	2a00      	cmp	r2, #0
    1320:	d002      	beq.n	1328 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    1322:	2280      	movs	r2, #128	; 0x80
    1324:	03d2      	lsls	r2, r2, #15
    1326:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    1328:	6822      	ldr	r2, [r4, #0]
    132a:	4313      	orrs	r3, r2
    132c:	6023      	str	r3, [r4, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    132e:	2380      	movs	r3, #128	; 0x80
    1330:	005b      	lsls	r3, r3, #1
    1332:	6063      	str	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    1334:	464d      	mov	r5, r9
    1336:	350e      	adds	r5, #14
    1338:	b2e8      	uxtb	r0, r5
    133a:	f000 fd23 	bl	1d84 <system_gclk_chan_get_hz>
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    133e:	2323      	movs	r3, #35	; 0x23
    1340:	60e3      	str	r3, [r4, #12]
	return _i2c_master_set_config(module, config);
    1342:	2000      	movs	r0, #0
    1344:	e772      	b.n	122c <i2c_master_init+0x4c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1346:	2100      	movs	r1, #0
    1348:	0020      	movs	r0, r4
    134a:	f000 fa43 	bl	17d4 <_sercom_get_default_pad>
    134e:	e7a2      	b.n	1296 <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1350:	2101      	movs	r1, #1
    1352:	0020      	movs	r0, r4
    1354:	f000 fa3e 	bl	17d4 <_sercom_get_default_pad>
    1358:	0005      	movs	r5, r0
    135a:	e7a8      	b.n	12ae <i2c_master_init+0xce>
    135c:	40000400 	.word	0x40000400
    1360:	000015b1 	.word	0x000015b1
    1364:	20000208 	.word	0x20000208
    1368:	41002000 	.word	0x41002000

0000136c <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    136c:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    136e:	7e1a      	ldrb	r2, [r3, #24]
    1370:	0792      	lsls	r2, r2, #30
    1372:	d507      	bpl.n	1384 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1374:	2202      	movs	r2, #2
    1376:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1378:	8b5b      	ldrh	r3, [r3, #26]
    137a:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    137c:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    137e:	17db      	asrs	r3, r3, #31
    1380:	4018      	ands	r0, r3
}
    1382:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1384:	8b5a      	ldrh	r2, [r3, #26]
    1386:	0752      	lsls	r2, r2, #29
    1388:	d506      	bpl.n	1398 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    138a:	6859      	ldr	r1, [r3, #4]
    138c:	22c0      	movs	r2, #192	; 0xc0
    138e:	0292      	lsls	r2, r2, #10
    1390:	430a      	orrs	r2, r1
    1392:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    1394:	2018      	movs	r0, #24
    1396:	e7f4      	b.n	1382 <_i2c_master_address_response+0x16>
	return STATUS_OK;
    1398:	2000      	movs	r0, #0
    139a:	e7f2      	b.n	1382 <_i2c_master_address_response+0x16>

0000139c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    139c:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    139e:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    13a0:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13a2:	2401      	movs	r4, #1
    13a4:	2502      	movs	r5, #2
    13a6:	7e11      	ldrb	r1, [r2, #24]
    13a8:	4221      	tst	r1, r4
    13aa:	d10b      	bne.n	13c4 <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    13ac:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    13ae:	4229      	tst	r1, r5
    13b0:	d106      	bne.n	13c0 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    13b2:	3301      	adds	r3, #1
    13b4:	b29b      	uxth	r3, r3
    13b6:	8901      	ldrh	r1, [r0, #8]
    13b8:	4299      	cmp	r1, r3
    13ba:	d8f4      	bhi.n	13a6 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    13bc:	2012      	movs	r0, #18
    13be:	e002      	b.n	13c6 <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    13c0:	2000      	movs	r0, #0
    13c2:	e000      	b.n	13c6 <_i2c_master_wait_for_bus+0x2a>
    13c4:	2000      	movs	r0, #0
}
    13c6:	bd30      	pop	{r4, r5, pc}

000013c8 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    13c8:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13ca:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    13cc:	6862      	ldr	r2, [r4, #4]
    13ce:	2380      	movs	r3, #128	; 0x80
    13d0:	02db      	lsls	r3, r3, #11
    13d2:	4313      	orrs	r3, r2
    13d4:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    13d6:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    13d8:	f7ff ffe0 	bl	139c <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    13dc:	2301      	movs	r3, #1
    13de:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    13e0:	bd10      	pop	{r4, pc}
	...

000013e4 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    13e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e6:	46de      	mov	lr, fp
    13e8:	4657      	mov	r7, sl
    13ea:	464e      	mov	r6, r9
    13ec:	4645      	mov	r5, r8
    13ee:	b5e0      	push	{r5, r6, r7, lr}
    13f0:	b083      	sub	sp, #12
    13f2:	0006      	movs	r6, r0
    13f4:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    13f6:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    13f8:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    13fa:	f7ff feeb 	bl	11d4 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    13fe:	7a7b      	ldrb	r3, [r7, #9]
    1400:	2b00      	cmp	r3, #0
    1402:	d11d      	bne.n	1440 <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1404:	686b      	ldr	r3, [r5, #4]
    1406:	4a30      	ldr	r2, [pc, #192]	; (14c8 <_i2c_master_write_packet+0xe4>)
    1408:	4013      	ands	r3, r2
    140a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    140c:	7a3b      	ldrb	r3, [r7, #8]
    140e:	2b00      	cmp	r3, #0
    1410:	d01b      	beq.n	144a <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1412:	883b      	ldrh	r3, [r7, #0]
    1414:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1416:	7a7a      	ldrb	r2, [r7, #9]
    1418:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    141a:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    141c:	2280      	movs	r2, #128	; 0x80
    141e:	0212      	lsls	r2, r2, #8
    1420:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1422:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1424:	0030      	movs	r0, r6
    1426:	f7ff ffb9 	bl	139c <_i2c_master_wait_for_bus>
    142a:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    142c:	2800      	cmp	r0, #0
    142e:	d013      	beq.n	1458 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    1430:	9801      	ldr	r0, [sp, #4]
    1432:	b003      	add	sp, #12
    1434:	bc3c      	pop	{r2, r3, r4, r5}
    1436:	4690      	mov	r8, r2
    1438:	4699      	mov	r9, r3
    143a:	46a2      	mov	sl, r4
    143c:	46ab      	mov	fp, r5
    143e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1440:	7ab9      	ldrb	r1, [r7, #10]
    1442:	0030      	movs	r0, r6
    1444:	f7ff ffc0 	bl	13c8 <_i2c_master_send_hs_master_code>
    1448:	e7dc      	b.n	1404 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    144a:	883b      	ldrh	r3, [r7, #0]
    144c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    144e:	7a7a      	ldrb	r2, [r7, #9]
    1450:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1452:	4313      	orrs	r3, r2
    1454:	626b      	str	r3, [r5, #36]	; 0x24
    1456:	e7e5      	b.n	1424 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    1458:	0030      	movs	r0, r6
    145a:	f7ff ff87 	bl	136c <_i2c_master_address_response>
    145e:	1e03      	subs	r3, r0, #0
    1460:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1462:	d1e5      	bne.n	1430 <_i2c_master_write_packet+0x4c>
    1464:	46a0      	mov	r8, r4
    1466:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1468:	3320      	adds	r3, #32
    146a:	4699      	mov	r9, r3
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    146c:	3308      	adds	r3, #8
    146e:	469a      	mov	sl, r3
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1470:	3b24      	subs	r3, #36	; 0x24
    1472:	469b      	mov	fp, r3
		while (tmp_data_length--) {
    1474:	4544      	cmp	r4, r8
    1476:	d018      	beq.n	14aa <_i2c_master_write_packet+0xc6>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1478:	8b6b      	ldrh	r3, [r5, #26]
    147a:	464a      	mov	r2, r9
    147c:	4213      	tst	r3, r2
    147e:	d020      	beq.n	14c2 <_i2c_master_write_packet+0xde>
			_i2c_master_wait_for_sync(module);
    1480:	0030      	movs	r0, r6
    1482:	f7ff fea7 	bl	11d4 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1486:	687b      	ldr	r3, [r7, #4]
    1488:	5d1b      	ldrb	r3, [r3, r4]
    148a:	4652      	mov	r2, sl
    148c:	54ab      	strb	r3, [r5, r2]
			tmp_status = _i2c_master_wait_for_bus(module);
    148e:	0030      	movs	r0, r6
    1490:	f7ff ff84 	bl	139c <_i2c_master_wait_for_bus>
			if (tmp_status != STATUS_OK) {
    1494:	2800      	cmp	r0, #0
    1496:	d107      	bne.n	14a8 <_i2c_master_write_packet+0xc4>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1498:	8b6b      	ldrh	r3, [r5, #26]
    149a:	3401      	adds	r4, #1
    149c:	465a      	mov	r2, fp
    149e:	4213      	tst	r3, r2
    14a0:	d0e8      	beq.n	1474 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    14a2:	231e      	movs	r3, #30
    14a4:	9301      	str	r3, [sp, #4]
    14a6:	e000      	b.n	14aa <_i2c_master_write_packet+0xc6>
			tmp_status = _i2c_master_wait_for_bus(module);
    14a8:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    14aa:	7ab3      	ldrb	r3, [r6, #10]
    14ac:	2b00      	cmp	r3, #0
    14ae:	d0bf      	beq.n	1430 <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    14b0:	0030      	movs	r0, r6
    14b2:	f7ff fe8f 	bl	11d4 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    14b6:	686a      	ldr	r2, [r5, #4]
    14b8:	23c0      	movs	r3, #192	; 0xc0
    14ba:	029b      	lsls	r3, r3, #10
    14bc:	4313      	orrs	r3, r2
    14be:	606b      	str	r3, [r5, #4]
    14c0:	e7b6      	b.n	1430 <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    14c2:	2341      	movs	r3, #65	; 0x41
    14c4:	9301      	str	r3, [sp, #4]
    14c6:	e7b3      	b.n	1430 <_i2c_master_write_packet+0x4c>
    14c8:	fffbffff 	.word	0xfffbffff

000014cc <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    14cc:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    14ce:	8b83      	ldrh	r3, [r0, #28]
    14d0:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    14d2:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    14d4:	2b00      	cmp	r3, #0
    14d6:	d001      	beq.n	14dc <i2c_master_write_packet_wait+0x10>

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    14d8:	0010      	movs	r0, r2
    14da:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    14dc:	3301      	adds	r3, #1
    14de:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    14e0:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    14e2:	f7ff ff7f 	bl	13e4 <_i2c_master_write_packet>
    14e6:	0002      	movs	r2, r0
    14e8:	e7f6      	b.n	14d8 <i2c_master_write_packet_wait+0xc>

000014ea <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    14ea:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    14ec:	2207      	movs	r2, #7
    14ee:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    14f0:	421a      	tst	r2, r3
    14f2:	d1fc      	bne.n	14ee <_i2c_master_wait_for_sync+0x4>
}
    14f4:	4770      	bx	lr

000014f6 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    14f6:	b570      	push	{r4, r5, r6, lr}
    14f8:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14fa:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    14fc:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    14fe:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1500:	8b83      	ldrh	r3, [r0, #28]
    1502:	1aed      	subs	r5, r5, r3
    1504:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    1506:	8b83      	ldrh	r3, [r0, #28]
    1508:	3b01      	subs	r3, #1
    150a:	b29b      	uxth	r3, r3
    150c:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    150e:	0113      	lsls	r3, r2, #4
    1510:	d51d      	bpl.n	154e <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1512:	7ac3      	ldrb	r3, [r0, #11]
    1514:	2b00      	cmp	r3, #0
    1516:	d003      	beq.n	1520 <_i2c_master_read+0x2a>
    1518:	8b83      	ldrh	r3, [r0, #28]
    151a:	b29b      	uxth	r3, r3
    151c:	2b01      	cmp	r3, #1
    151e:	d010      	beq.n	1542 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1520:	8ba3      	ldrh	r3, [r4, #28]
    1522:	b29b      	uxth	r3, r3
    1524:	2b00      	cmp	r3, #0
    1526:	d102      	bne.n	152e <_i2c_master_read+0x38>
		if (module->send_stop) {
    1528:	7aa3      	ldrb	r3, [r4, #10]
    152a:	2b00      	cmp	r3, #0
    152c:	d11c      	bne.n	1568 <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    152e:	0020      	movs	r0, r4
    1530:	f7ff ffdb 	bl	14ea <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1534:	6a23      	ldr	r3, [r4, #32]
    1536:	195d      	adds	r5, r3, r5
    1538:	2328      	movs	r3, #40	; 0x28
    153a:	5cf3      	ldrb	r3, [r6, r3]
    153c:	b2db      	uxtb	r3, r3
    153e:	702b      	strb	r3, [r5, #0]
}
    1540:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1542:	6872      	ldr	r2, [r6, #4]
    1544:	2380      	movs	r3, #128	; 0x80
    1546:	02db      	lsls	r3, r3, #11
    1548:	4313      	orrs	r3, r2
    154a:	6073      	str	r3, [r6, #4]
    154c:	e7e8      	b.n	1520 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    154e:	7ac3      	ldrb	r3, [r0, #11]
    1550:	2b00      	cmp	r3, #0
    1552:	d0e5      	beq.n	1520 <_i2c_master_read+0x2a>
    1554:	8b83      	ldrh	r3, [r0, #28]
    1556:	b29b      	uxth	r3, r3
    1558:	2b00      	cmp	r3, #0
    155a:	d1e1      	bne.n	1520 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    155c:	6872      	ldr	r2, [r6, #4]
    155e:	2380      	movs	r3, #128	; 0x80
    1560:	02db      	lsls	r3, r3, #11
    1562:	4313      	orrs	r3, r2
    1564:	6073      	str	r3, [r6, #4]
    1566:	e7db      	b.n	1520 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1568:	0020      	movs	r0, r4
    156a:	f7ff ffbe 	bl	14ea <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    156e:	6872      	ldr	r2, [r6, #4]
    1570:	23c0      	movs	r3, #192	; 0xc0
    1572:	029b      	lsls	r3, r3, #10
    1574:	4313      	orrs	r3, r2
    1576:	6073      	str	r3, [r6, #4]
    1578:	e7d9      	b.n	152e <_i2c_master_read+0x38>

0000157a <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    157a:	b570      	push	{r4, r5, r6, lr}
    157c:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    157e:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1580:	8b6b      	ldrh	r3, [r5, #26]
    1582:	075b      	lsls	r3, r3, #29
    1584:	d503      	bpl.n	158e <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1586:	221e      	movs	r2, #30
    1588:	2325      	movs	r3, #37	; 0x25
    158a:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    158c:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    158e:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1590:	8b83      	ldrh	r3, [r0, #28]
    1592:	1af6      	subs	r6, r6, r3
    1594:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1596:	8b83      	ldrh	r3, [r0, #28]
    1598:	3b01      	subs	r3, #1
    159a:	b29b      	uxth	r3, r3
    159c:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    159e:	f7ff ffa4 	bl	14ea <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    15a2:	6a23      	ldr	r3, [r4, #32]
    15a4:	199e      	adds	r6, r3, r6
    15a6:	7833      	ldrb	r3, [r6, #0]
    15a8:	b2db      	uxtb	r3, r3
    15aa:	2228      	movs	r2, #40	; 0x28
    15ac:	54ab      	strb	r3, [r5, r2]
    15ae:	e7ed      	b.n	158c <_i2c_master_write+0x12>

000015b0 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    15b0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    15b2:	0080      	lsls	r0, r0, #2
    15b4:	4b75      	ldr	r3, [pc, #468]	; (178c <_i2c_master_interrupt_handler+0x1dc>)
    15b6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    15b8:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    15ba:	682b      	ldr	r3, [r5, #0]
    15bc:	011b      	lsls	r3, r3, #4
    15be:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    15c0:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    15c2:	7e26      	ldrb	r6, [r4, #24]
    15c4:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    15c6:	8b63      	ldrh	r3, [r4, #26]
    15c8:	b29b      	uxth	r3, r3
    15ca:	2b00      	cmp	r3, #0
    15cc:	d103      	bne.n	15d6 <_i2c_master_interrupt_handler+0x26>
    15ce:	8ba3      	ldrh	r3, [r4, #28]
    15d0:	b29b      	uxth	r3, r3
    15d2:	2b00      	cmp	r3, #0
    15d4:	d123      	bne.n	161e <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    15d6:	8b63      	ldrh	r3, [r4, #26]
    15d8:	b29b      	uxth	r3, r3
    15da:	2b00      	cmp	r3, #0
    15dc:	d008      	beq.n	15f0 <_i2c_master_interrupt_handler+0x40>
    15de:	8ba3      	ldrh	r3, [r4, #28]
    15e0:	b29b      	uxth	r3, r3
    15e2:	2b00      	cmp	r3, #0
    15e4:	d104      	bne.n	15f0 <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    15e6:	3325      	adds	r3, #37	; 0x25
    15e8:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    15ea:	2b05      	cmp	r3, #5
    15ec:	d100      	bne.n	15f0 <_i2c_master_interrupt_handler+0x40>
    15ee:	e06d      	b.n	16cc <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    15f0:	8b63      	ldrh	r3, [r4, #26]
    15f2:	b29b      	uxth	r3, r3
    15f4:	2b00      	cmp	r3, #0
    15f6:	d024      	beq.n	1642 <_i2c_master_interrupt_handler+0x92>
    15f8:	8ba3      	ldrh	r3, [r4, #28]
    15fa:	b29b      	uxth	r3, r3
    15fc:	2b00      	cmp	r3, #0
    15fe:	d020      	beq.n	1642 <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1600:	8b6b      	ldrh	r3, [r5, #26]
    1602:	069b      	lsls	r3, r3, #26
    1604:	d500      	bpl.n	1608 <_i2c_master_interrupt_handler+0x58>
    1606:	e081      	b.n	170c <_i2c_master_interrupt_handler+0x15c>
    1608:	2a00      	cmp	r2, #0
    160a:	d004      	beq.n	1616 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    160c:	8ba3      	ldrh	r3, [r4, #28]
    160e:	b29b      	uxth	r3, r3
    1610:	2b01      	cmp	r3, #1
    1612:	d100      	bne.n	1616 <_i2c_master_interrupt_handler+0x66>
    1614:	e07a      	b.n	170c <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1616:	2241      	movs	r2, #65	; 0x41
    1618:	2325      	movs	r3, #37	; 0x25
    161a:	54e2      	strb	r2, [r4, r3]
    161c:	e011      	b.n	1642 <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    161e:	7e2b      	ldrb	r3, [r5, #24]
    1620:	07db      	lsls	r3, r3, #31
    1622:	d507      	bpl.n	1634 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1624:	2301      	movs	r3, #1
    1626:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1628:	8b6b      	ldrh	r3, [r5, #26]
    162a:	079b      	lsls	r3, r3, #30
    162c:	d52e      	bpl.n	168c <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    162e:	2241      	movs	r2, #65	; 0x41
    1630:	2325      	movs	r3, #37	; 0x25
    1632:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1634:	8ba3      	ldrh	r3, [r4, #28]
    1636:	b29b      	uxth	r3, r3
    1638:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    163a:	2325      	movs	r3, #37	; 0x25
    163c:	5ce3      	ldrb	r3, [r4, r3]
    163e:	2b05      	cmp	r3, #5
    1640:	d038      	beq.n	16b4 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1642:	8b63      	ldrh	r3, [r4, #26]
    1644:	b29b      	uxth	r3, r3
    1646:	2b00      	cmp	r3, #0
    1648:	d007      	beq.n	165a <_i2c_master_interrupt_handler+0xaa>
    164a:	8ba3      	ldrh	r3, [r4, #28]
    164c:	b29b      	uxth	r3, r3
    164e:	2b00      	cmp	r3, #0
    1650:	d103      	bne.n	165a <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1652:	3325      	adds	r3, #37	; 0x25
    1654:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1656:	2b05      	cmp	r3, #5
    1658:	d064      	beq.n	1724 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    165a:	2325      	movs	r3, #37	; 0x25
    165c:	5ce3      	ldrb	r3, [r4, r3]
    165e:	2b05      	cmp	r3, #5
    1660:	d013      	beq.n	168a <_i2c_master_interrupt_handler+0xda>
    1662:	2325      	movs	r3, #37	; 0x25
    1664:	5ce3      	ldrb	r3, [r4, r3]
    1666:	2b00      	cmp	r3, #0
    1668:	d00f      	beq.n	168a <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    166a:	2303      	movs	r3, #3
    166c:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    166e:	2300      	movs	r3, #0
    1670:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1672:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1674:	3325      	adds	r3, #37	; 0x25
    1676:	5ce3      	ldrb	r3, [r4, r3]
    1678:	2b41      	cmp	r3, #65	; 0x41
    167a:	d003      	beq.n	1684 <_i2c_master_interrupt_handler+0xd4>
    167c:	7aa3      	ldrb	r3, [r4, #10]
    167e:	2b00      	cmp	r3, #0
    1680:	d000      	beq.n	1684 <_i2c_master_interrupt_handler+0xd4>
    1682:	e075      	b.n	1770 <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1684:	0773      	lsls	r3, r6, #29
    1686:	d500      	bpl.n	168a <_i2c_master_interrupt_handler+0xda>
    1688:	e07b      	b.n	1782 <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    168a:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    168c:	8b6b      	ldrh	r3, [r5, #26]
    168e:	075b      	lsls	r3, r3, #29
    1690:	d5d0      	bpl.n	1634 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1692:	2218      	movs	r2, #24
    1694:	2325      	movs	r3, #37	; 0x25
    1696:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1698:	2300      	movs	r3, #0
    169a:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    169c:	7aa3      	ldrb	r3, [r4, #10]
    169e:	2b00      	cmp	r3, #0
    16a0:	d0c8      	beq.n	1634 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    16a2:	0020      	movs	r0, r4
    16a4:	f7ff ff21 	bl	14ea <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16a8:	686a      	ldr	r2, [r5, #4]
    16aa:	23c0      	movs	r3, #192	; 0xc0
    16ac:	029b      	lsls	r3, r3, #10
    16ae:	4313      	orrs	r3, r2
    16b0:	606b      	str	r3, [r5, #4]
    16b2:	e7bf      	b.n	1634 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    16b4:	331f      	adds	r3, #31
    16b6:	5ce3      	ldrb	r3, [r4, r3]
    16b8:	2b00      	cmp	r3, #0
    16ba:	d003      	beq.n	16c4 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    16bc:	0020      	movs	r0, r4
    16be:	f7ff ff1a 	bl	14f6 <_i2c_master_read>
    16c2:	e7be      	b.n	1642 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    16c4:	0020      	movs	r0, r4
    16c6:	f7ff ff58 	bl	157a <_i2c_master_write>
    16ca:	e7ba      	b.n	1642 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    16cc:	331f      	adds	r3, #31
    16ce:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    16d0:	2b00      	cmp	r3, #0
    16d2:	d000      	beq.n	16d6 <_i2c_master_interrupt_handler+0x126>
    16d4:	e78c      	b.n	15f0 <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    16d6:	3303      	adds	r3, #3
    16d8:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    16da:	2300      	movs	r3, #0
    16dc:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    16de:	3325      	adds	r3, #37	; 0x25
    16e0:	2200      	movs	r2, #0
    16e2:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    16e4:	7aa3      	ldrb	r3, [r4, #10]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d107      	bne.n	16fa <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    16ea:	2301      	movs	r3, #1
    16ec:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    16ee:	07f3      	lsls	r3, r6, #31
    16f0:	d5a7      	bpl.n	1642 <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    16f2:	68e3      	ldr	r3, [r4, #12]
    16f4:	0020      	movs	r0, r4
    16f6:	4798      	blx	r3
    16f8:	e7a3      	b.n	1642 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    16fa:	0020      	movs	r0, r4
    16fc:	f7ff fef5 	bl	14ea <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1700:	686a      	ldr	r2, [r5, #4]
    1702:	23c0      	movs	r3, #192	; 0xc0
    1704:	029b      	lsls	r3, r3, #10
    1706:	4313      	orrs	r3, r2
    1708:	606b      	str	r3, [r5, #4]
    170a:	e7f0      	b.n	16ee <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    170c:	2324      	movs	r3, #36	; 0x24
    170e:	5ce3      	ldrb	r3, [r4, r3]
    1710:	2b00      	cmp	r3, #0
    1712:	d103      	bne.n	171c <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1714:	0020      	movs	r0, r4
    1716:	f7ff ff30 	bl	157a <_i2c_master_write>
    171a:	e792      	b.n	1642 <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    171c:	0020      	movs	r0, r4
    171e:	f7ff feea 	bl	14f6 <_i2c_master_read>
    1722:	e78e      	b.n	1642 <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1724:	331f      	adds	r3, #31
    1726:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1728:	2b01      	cmp	r3, #1
    172a:	d196      	bne.n	165a <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    172c:	7e2b      	ldrb	r3, [r5, #24]
    172e:	079b      	lsls	r3, r3, #30
    1730:	d501      	bpl.n	1736 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1732:	2302      	movs	r3, #2
    1734:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1736:	2303      	movs	r3, #3
    1738:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    173a:	2300      	movs	r3, #0
    173c:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    173e:	3325      	adds	r3, #37	; 0x25
    1740:	2200      	movs	r2, #0
    1742:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1744:	07b3      	lsls	r3, r6, #30
    1746:	d503      	bpl.n	1750 <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1748:	2324      	movs	r3, #36	; 0x24
    174a:	5ce3      	ldrb	r3, [r4, r3]
    174c:	2b01      	cmp	r3, #1
    174e:	d00b      	beq.n	1768 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1750:	07f3      	lsls	r3, r6, #31
    1752:	d400      	bmi.n	1756 <_i2c_master_interrupt_handler+0x1a6>
    1754:	e781      	b.n	165a <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1756:	2324      	movs	r3, #36	; 0x24
    1758:	5ce3      	ldrb	r3, [r4, r3]
    175a:	2b00      	cmp	r3, #0
    175c:	d000      	beq.n	1760 <_i2c_master_interrupt_handler+0x1b0>
    175e:	e77c      	b.n	165a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1760:	68e3      	ldr	r3, [r4, #12]
    1762:	0020      	movs	r0, r4
    1764:	4798      	blx	r3
    1766:	e778      	b.n	165a <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1768:	6923      	ldr	r3, [r4, #16]
    176a:	0020      	movs	r0, r4
    176c:	4798      	blx	r3
    176e:	e774      	b.n	165a <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1770:	0020      	movs	r0, r4
    1772:	f7ff feba 	bl	14ea <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1776:	686a      	ldr	r2, [r5, #4]
    1778:	23e0      	movs	r3, #224	; 0xe0
    177a:	02db      	lsls	r3, r3, #11
    177c:	4313      	orrs	r3, r2
    177e:	606b      	str	r3, [r5, #4]
    1780:	e780      	b.n	1684 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1782:	6963      	ldr	r3, [r4, #20]
    1784:	0020      	movs	r0, r4
    1786:	4798      	blx	r3
}
    1788:	e77f      	b.n	168a <_i2c_master_interrupt_handler+0xda>
    178a:	46c0      	nop			; (mov r8, r8)
    178c:	20000208 	.word	0x20000208

00001790 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1790:	b510      	push	{r4, lr}
    1792:	b082      	sub	sp, #8
    1794:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1796:	4b0e      	ldr	r3, [pc, #56]	; (17d0 <sercom_set_gclk_generator+0x40>)
    1798:	781b      	ldrb	r3, [r3, #0]
    179a:	2b00      	cmp	r3, #0
    179c:	d007      	beq.n	17ae <sercom_set_gclk_generator+0x1e>
    179e:	2900      	cmp	r1, #0
    17a0:	d105      	bne.n	17ae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    17a2:	4b0b      	ldr	r3, [pc, #44]	; (17d0 <sercom_set_gclk_generator+0x40>)
    17a4:	785b      	ldrb	r3, [r3, #1]
    17a6:	4283      	cmp	r3, r0
    17a8:	d010      	beq.n	17cc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    17aa:	201d      	movs	r0, #29
    17ac:	e00c      	b.n	17c8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    17ae:	a901      	add	r1, sp, #4
    17b0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    17b2:	200d      	movs	r0, #13
    17b4:	f000 fada 	bl	1d6c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    17b8:	200d      	movs	r0, #13
    17ba:	f000 fa99 	bl	1cf0 <system_gclk_chan_enable>
		_sercom_config.generator_source = generator_source;
    17be:	4b04      	ldr	r3, [pc, #16]	; (17d0 <sercom_set_gclk_generator+0x40>)
    17c0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    17c2:	2201      	movs	r2, #1
    17c4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    17c6:	2000      	movs	r0, #0
}
    17c8:	b002      	add	sp, #8
    17ca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    17cc:	2000      	movs	r0, #0
    17ce:	e7fb      	b.n	17c8 <sercom_set_gclk_generator+0x38>
    17d0:	20000070 	.word	0x20000070

000017d4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    17d4:	4b20      	ldr	r3, [pc, #128]	; (1858 <_sercom_get_default_pad+0x84>)
    17d6:	4298      	cmp	r0, r3
    17d8:	d017      	beq.n	180a <_sercom_get_default_pad+0x36>
    17da:	4b20      	ldr	r3, [pc, #128]	; (185c <_sercom_get_default_pad+0x88>)
    17dc:	4298      	cmp	r0, r3
    17de:	d024      	beq.n	182a <_sercom_get_default_pad+0x56>
    17e0:	4b1f      	ldr	r3, [pc, #124]	; (1860 <_sercom_get_default_pad+0x8c>)
    17e2:	4298      	cmp	r0, r3
    17e4:	d001      	beq.n	17ea <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    17e6:	2000      	movs	r0, #0
}
    17e8:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17ea:	2901      	cmp	r1, #1
    17ec:	d007      	beq.n	17fe <_sercom_get_default_pad+0x2a>
    17ee:	2900      	cmp	r1, #0
    17f0:	d02b      	beq.n	184a <_sercom_get_default_pad+0x76>
    17f2:	2902      	cmp	r1, #2
    17f4:	d005      	beq.n	1802 <_sercom_get_default_pad+0x2e>
    17f6:	2903      	cmp	r1, #3
    17f8:	d005      	beq.n	1806 <_sercom_get_default_pad+0x32>
	return 0;
    17fa:	2000      	movs	r0, #0
    17fc:	e7f4      	b.n	17e8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    17fe:	4819      	ldr	r0, [pc, #100]	; (1864 <_sercom_get_default_pad+0x90>)
    1800:	e7f2      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1802:	4819      	ldr	r0, [pc, #100]	; (1868 <_sercom_get_default_pad+0x94>)
    1804:	e7f0      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1806:	4819      	ldr	r0, [pc, #100]	; (186c <_sercom_get_default_pad+0x98>)
    1808:	e7ee      	b.n	17e8 <_sercom_get_default_pad+0x14>
    180a:	2901      	cmp	r1, #1
    180c:	d007      	beq.n	181e <_sercom_get_default_pad+0x4a>
    180e:	2900      	cmp	r1, #0
    1810:	d01d      	beq.n	184e <_sercom_get_default_pad+0x7a>
    1812:	2902      	cmp	r1, #2
    1814:	d005      	beq.n	1822 <_sercom_get_default_pad+0x4e>
    1816:	2903      	cmp	r1, #3
    1818:	d005      	beq.n	1826 <_sercom_get_default_pad+0x52>
	return 0;
    181a:	2000      	movs	r0, #0
    181c:	e7e4      	b.n	17e8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    181e:	4814      	ldr	r0, [pc, #80]	; (1870 <_sercom_get_default_pad+0x9c>)
    1820:	e7e2      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1822:	4814      	ldr	r0, [pc, #80]	; (1874 <_sercom_get_default_pad+0xa0>)
    1824:	e7e0      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1826:	4814      	ldr	r0, [pc, #80]	; (1878 <_sercom_get_default_pad+0xa4>)
    1828:	e7de      	b.n	17e8 <_sercom_get_default_pad+0x14>
    182a:	2901      	cmp	r1, #1
    182c:	d007      	beq.n	183e <_sercom_get_default_pad+0x6a>
    182e:	2900      	cmp	r1, #0
    1830:	d00f      	beq.n	1852 <_sercom_get_default_pad+0x7e>
    1832:	2902      	cmp	r1, #2
    1834:	d005      	beq.n	1842 <_sercom_get_default_pad+0x6e>
    1836:	2903      	cmp	r1, #3
    1838:	d005      	beq.n	1846 <_sercom_get_default_pad+0x72>
	return 0;
    183a:	2000      	movs	r0, #0
    183c:	e7d4      	b.n	17e8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    183e:	480f      	ldr	r0, [pc, #60]	; (187c <_sercom_get_default_pad+0xa8>)
    1840:	e7d2      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1842:	480f      	ldr	r0, [pc, #60]	; (1880 <_sercom_get_default_pad+0xac>)
    1844:	e7d0      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1846:	480f      	ldr	r0, [pc, #60]	; (1884 <_sercom_get_default_pad+0xb0>)
    1848:	e7ce      	b.n	17e8 <_sercom_get_default_pad+0x14>
    184a:	480f      	ldr	r0, [pc, #60]	; (1888 <_sercom_get_default_pad+0xb4>)
    184c:	e7cc      	b.n	17e8 <_sercom_get_default_pad+0x14>
    184e:	480f      	ldr	r0, [pc, #60]	; (188c <_sercom_get_default_pad+0xb8>)
    1850:	e7ca      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1852:	480f      	ldr	r0, [pc, #60]	; (1890 <_sercom_get_default_pad+0xbc>)
    1854:	e7c8      	b.n	17e8 <_sercom_get_default_pad+0x14>
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	42000c00 	.word	0x42000c00
    185c:	42001000 	.word	0x42001000
    1860:	42000800 	.word	0x42000800
    1864:	00050003 	.word	0x00050003
    1868:	00060003 	.word	0x00060003
    186c:	00070003 	.word	0x00070003
    1870:	00170002 	.word	0x00170002
    1874:	001e0003 	.word	0x001e0003
    1878:	001f0003 	.word	0x001f0003
    187c:	00170003 	.word	0x00170003
    1880:	00100003 	.word	0x00100003
    1884:	00190003 	.word	0x00190003
    1888:	00040003 	.word	0x00040003
    188c:	00160002 	.word	0x00160002
    1890:	00160003 	.word	0x00160003

00001894 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1894:	b530      	push	{r4, r5, lr}
    1896:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1898:	aa01      	add	r2, sp, #4
    189a:	4b0b      	ldr	r3, [pc, #44]	; (18c8 <_sercom_get_sercom_inst_index+0x34>)
    189c:	cb32      	ldmia	r3!, {r1, r4, r5}
    189e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18a0:	0003      	movs	r3, r0
    18a2:	9a01      	ldr	r2, [sp, #4]
    18a4:	4282      	cmp	r2, r0
    18a6:	d00c      	beq.n	18c2 <_sercom_get_sercom_inst_index+0x2e>
    18a8:	9a02      	ldr	r2, [sp, #8]
    18aa:	4282      	cmp	r2, r0
    18ac:	d007      	beq.n	18be <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    18ae:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    18b0:	9a03      	ldr	r2, [sp, #12]
    18b2:	429a      	cmp	r2, r3
    18b4:	d001      	beq.n	18ba <_sercom_get_sercom_inst_index+0x26>
}
    18b6:	b005      	add	sp, #20
    18b8:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    18ba:	3002      	adds	r0, #2
    18bc:	e002      	b.n	18c4 <_sercom_get_sercom_inst_index+0x30>
    18be:	2001      	movs	r0, #1
    18c0:	e000      	b.n	18c4 <_sercom_get_sercom_inst_index+0x30>
    18c2:	2000      	movs	r0, #0
			return i;
    18c4:	b2c0      	uxtb	r0, r0
    18c6:	e7f6      	b.n	18b6 <_sercom_get_sercom_inst_index+0x22>
    18c8:	00002ee0 	.word	0x00002ee0

000018cc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    18cc:	4770      	bx	lr
	...

000018d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    18d0:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    18d2:	4b0a      	ldr	r3, [pc, #40]	; (18fc <_sercom_set_handler+0x2c>)
    18d4:	781b      	ldrb	r3, [r3, #0]
    18d6:	2b00      	cmp	r3, #0
    18d8:	d10c      	bne.n	18f4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18da:	4c09      	ldr	r4, [pc, #36]	; (1900 <_sercom_set_handler+0x30>)
    18dc:	4d09      	ldr	r5, [pc, #36]	; (1904 <_sercom_set_handler+0x34>)
    18de:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
    18e0:	4b09      	ldr	r3, [pc, #36]	; (1908 <_sercom_set_handler+0x38>)
    18e2:	2200      	movs	r2, #0
    18e4:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18e6:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
    18e8:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    18ea:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
    18ec:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
    18ee:	3201      	adds	r2, #1
    18f0:	4b02      	ldr	r3, [pc, #8]	; (18fc <_sercom_set_handler+0x2c>)
    18f2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    18f4:	0080      	lsls	r0, r0, #2
    18f6:	4b02      	ldr	r3, [pc, #8]	; (1900 <_sercom_set_handler+0x30>)
    18f8:	50c1      	str	r1, [r0, r3]
}
    18fa:	bd30      	pop	{r4, r5, pc}
    18fc:	20000072 	.word	0x20000072
    1900:	20000074 	.word	0x20000074
    1904:	000018cd 	.word	0x000018cd
    1908:	20000208 	.word	0x20000208

0000190c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    190c:	b510      	push	{r4, lr}
    190e:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1910:	ac01      	add	r4, sp, #4
    1912:	2309      	movs	r3, #9
    1914:	7023      	strb	r3, [r4, #0]
    1916:	3301      	adds	r3, #1
    1918:	7063      	strb	r3, [r4, #1]
    191a:	3301      	adds	r3, #1
    191c:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    191e:	f7ff ffb9 	bl	1894 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1922:	5620      	ldrsb	r0, [r4, r0]
}
    1924:	b002      	add	sp, #8
    1926:	bd10      	pop	{r4, pc}

00001928 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1928:	b510      	push	{r4, lr}
    192a:	4b02      	ldr	r3, [pc, #8]	; (1934 <SERCOM0_Handler+0xc>)
    192c:	681b      	ldr	r3, [r3, #0]
    192e:	2000      	movs	r0, #0
    1930:	4798      	blx	r3
    1932:	bd10      	pop	{r4, pc}
    1934:	20000074 	.word	0x20000074

00001938 <SERCOM1_Handler>:
    1938:	b510      	push	{r4, lr}
    193a:	4b02      	ldr	r3, [pc, #8]	; (1944 <SERCOM1_Handler+0xc>)
    193c:	685b      	ldr	r3, [r3, #4]
    193e:	2001      	movs	r0, #1
    1940:	4798      	blx	r3
    1942:	bd10      	pop	{r4, pc}
    1944:	20000074 	.word	0x20000074

00001948 <SERCOM2_Handler>:
    1948:	b510      	push	{r4, lr}
    194a:	4b02      	ldr	r3, [pc, #8]	; (1954 <SERCOM2_Handler+0xc>)
    194c:	689b      	ldr	r3, [r3, #8]
    194e:	2002      	movs	r0, #2
    1950:	4798      	blx	r3
    1952:	bd10      	pop	{r4, pc}
    1954:	20000074 	.word	0x20000074

00001958 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1958:	b510      	push	{r4, lr}
	switch (clock_source) {
    195a:	2808      	cmp	r0, #8
    195c:	d803      	bhi.n	1966 <system_clock_source_get_hz+0xe>
    195e:	0080      	lsls	r0, r0, #2
    1960:	4b1c      	ldr	r3, [pc, #112]	; (19d4 <system_clock_source_get_hz+0x7c>)
    1962:	581b      	ldr	r3, [r3, r0]
    1964:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    1966:	2000      	movs	r0, #0
    1968:	e032      	b.n	19d0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    196a:	4b1b      	ldr	r3, [pc, #108]	; (19d8 <system_clock_source_get_hz+0x80>)
    196c:	6918      	ldr	r0, [r3, #16]
    196e:	e02f      	b.n	19d0 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1970:	4b1a      	ldr	r3, [pc, #104]	; (19dc <system_clock_source_get_hz+0x84>)
    1972:	6a1b      	ldr	r3, [r3, #32]
    1974:	059b      	lsls	r3, r3, #22
    1976:	0f9b      	lsrs	r3, r3, #30
    1978:	4819      	ldr	r0, [pc, #100]	; (19e0 <system_clock_source_get_hz+0x88>)
    197a:	40d8      	lsrs	r0, r3
    197c:	e028      	b.n	19d0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    197e:	4b16      	ldr	r3, [pc, #88]	; (19d8 <system_clock_source_get_hz+0x80>)
    1980:	6958      	ldr	r0, [r3, #20]
    1982:	e025      	b.n	19d0 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1984:	4b14      	ldr	r3, [pc, #80]	; (19d8 <system_clock_source_get_hz+0x80>)
    1986:	681b      	ldr	r3, [r3, #0]
			return 0;
    1988:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    198a:	079b      	lsls	r3, r3, #30
    198c:	d520      	bpl.n	19d0 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    198e:	4913      	ldr	r1, [pc, #76]	; (19dc <system_clock_source_get_hz+0x84>)
    1990:	2210      	movs	r2, #16
    1992:	68cb      	ldr	r3, [r1, #12]
    1994:	421a      	tst	r2, r3
    1996:	d0fc      	beq.n	1992 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    1998:	4b0f      	ldr	r3, [pc, #60]	; (19d8 <system_clock_source_get_hz+0x80>)
    199a:	681a      	ldr	r2, [r3, #0]
    199c:	2324      	movs	r3, #36	; 0x24
    199e:	4013      	ands	r3, r2
    19a0:	2b04      	cmp	r3, #4
    19a2:	d001      	beq.n	19a8 <system_clock_source_get_hz+0x50>
			return 48000000UL;
    19a4:	480f      	ldr	r0, [pc, #60]	; (19e4 <system_clock_source_get_hz+0x8c>)
    19a6:	e013      	b.n	19d0 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19a8:	2000      	movs	r0, #0
    19aa:	f000 f9eb 	bl	1d84 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    19ae:	4b0a      	ldr	r3, [pc, #40]	; (19d8 <system_clock_source_get_hz+0x80>)
    19b0:	689b      	ldr	r3, [r3, #8]
    19b2:	041b      	lsls	r3, r3, #16
    19b4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19b6:	4358      	muls	r0, r3
    19b8:	e00a      	b.n	19d0 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19ba:	2350      	movs	r3, #80	; 0x50
    19bc:	4a07      	ldr	r2, [pc, #28]	; (19dc <system_clock_source_get_hz+0x84>)
    19be:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    19c0:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    19c2:	075b      	lsls	r3, r3, #29
    19c4:	d504      	bpl.n	19d0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    19c6:	4b04      	ldr	r3, [pc, #16]	; (19d8 <system_clock_source_get_hz+0x80>)
    19c8:	68d8      	ldr	r0, [r3, #12]
    19ca:	e001      	b.n	19d0 <system_clock_source_get_hz+0x78>
		return 32768UL;
    19cc:	2080      	movs	r0, #128	; 0x80
    19ce:	0200      	lsls	r0, r0, #8
	}
}
    19d0:	bd10      	pop	{r4, pc}
    19d2:	46c0      	nop			; (mov r8, r8)
    19d4:	00002eec 	.word	0x00002eec
    19d8:	20000080 	.word	0x20000080
    19dc:	40000800 	.word	0x40000800
    19e0:	007a1200 	.word	0x007a1200
    19e4:	02dc6c00 	.word	0x02dc6c00

000019e8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    19e8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    19ea:	490c      	ldr	r1, [pc, #48]	; (1a1c <system_clock_source_osc8m_set_config+0x34>)
    19ec:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    19ee:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    19f0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    19f2:	7840      	ldrb	r0, [r0, #1]
    19f4:	2201      	movs	r2, #1
    19f6:	4010      	ands	r0, r2
    19f8:	0180      	lsls	r0, r0, #6
    19fa:	2640      	movs	r6, #64	; 0x40
    19fc:	43b3      	bics	r3, r6
    19fe:	4303      	orrs	r3, r0
    1a00:	402a      	ands	r2, r5
    1a02:	01d2      	lsls	r2, r2, #7
    1a04:	2080      	movs	r0, #128	; 0x80
    1a06:	4383      	bics	r3, r0
    1a08:	4313      	orrs	r3, r2
    1a0a:	2203      	movs	r2, #3
    1a0c:	4022      	ands	r2, r4
    1a0e:	0212      	lsls	r2, r2, #8
    1a10:	4803      	ldr	r0, [pc, #12]	; (1a20 <system_clock_source_osc8m_set_config+0x38>)
    1a12:	4003      	ands	r3, r0
    1a14:	4313      	orrs	r3, r2
    1a16:	620b      	str	r3, [r1, #32]
}
    1a18:	bd70      	pop	{r4, r5, r6, pc}
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	40000800 	.word	0x40000800
    1a20:	fffffcff 	.word	0xfffffcff

00001a24 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a24:	2808      	cmp	r0, #8
    1a26:	d803      	bhi.n	1a30 <system_clock_source_enable+0xc>
    1a28:	0080      	lsls	r0, r0, #2
    1a2a:	4b25      	ldr	r3, [pc, #148]	; (1ac0 <system_clock_source_enable+0x9c>)
    1a2c:	581b      	ldr	r3, [r3, r0]
    1a2e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1a30:	2017      	movs	r0, #23
    1a32:	e044      	b.n	1abe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a34:	4a23      	ldr	r2, [pc, #140]	; (1ac4 <system_clock_source_enable+0xa0>)
    1a36:	6a13      	ldr	r3, [r2, #32]
    1a38:	2102      	movs	r1, #2
    1a3a:	430b      	orrs	r3, r1
    1a3c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1a3e:	2000      	movs	r0, #0
    1a40:	e03d      	b.n	1abe <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a42:	4a20      	ldr	r2, [pc, #128]	; (1ac4 <system_clock_source_enable+0xa0>)
    1a44:	6993      	ldr	r3, [r2, #24]
    1a46:	2102      	movs	r1, #2
    1a48:	430b      	orrs	r3, r1
    1a4a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1a4c:	2000      	movs	r0, #0
		break;
    1a4e:	e036      	b.n	1abe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a50:	4a1c      	ldr	r2, [pc, #112]	; (1ac4 <system_clock_source_enable+0xa0>)
    1a52:	8a13      	ldrh	r3, [r2, #16]
    1a54:	2102      	movs	r1, #2
    1a56:	430b      	orrs	r3, r1
    1a58:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1a5a:	2000      	movs	r0, #0
		break;
    1a5c:	e02f      	b.n	1abe <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1a5e:	4a19      	ldr	r2, [pc, #100]	; (1ac4 <system_clock_source_enable+0xa0>)
    1a60:	8a93      	ldrh	r3, [r2, #20]
    1a62:	2102      	movs	r1, #2
    1a64:	430b      	orrs	r3, r1
    1a66:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1a68:	2000      	movs	r0, #0
		break;
    1a6a:	e028      	b.n	1abe <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1a6c:	4916      	ldr	r1, [pc, #88]	; (1ac8 <system_clock_source_enable+0xa4>)
    1a6e:	680b      	ldr	r3, [r1, #0]
    1a70:	2202      	movs	r2, #2
    1a72:	4313      	orrs	r3, r2
    1a74:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1a76:	4b13      	ldr	r3, [pc, #76]	; (1ac4 <system_clock_source_enable+0xa0>)
    1a78:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a7a:	0019      	movs	r1, r3
    1a7c:	320e      	adds	r2, #14
    1a7e:	68cb      	ldr	r3, [r1, #12]
    1a80:	421a      	tst	r2, r3
    1a82:	d0fc      	beq.n	1a7e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1a84:	4a10      	ldr	r2, [pc, #64]	; (1ac8 <system_clock_source_enable+0xa4>)
    1a86:	6891      	ldr	r1, [r2, #8]
    1a88:	4b0e      	ldr	r3, [pc, #56]	; (1ac4 <system_clock_source_enable+0xa0>)
    1a8a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1a8c:	6852      	ldr	r2, [r2, #4]
    1a8e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1a90:	2200      	movs	r2, #0
    1a92:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1a94:	0019      	movs	r1, r3
    1a96:	3210      	adds	r2, #16
    1a98:	68cb      	ldr	r3, [r1, #12]
    1a9a:	421a      	tst	r2, r3
    1a9c:	d0fc      	beq.n	1a98 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1a9e:	4b0a      	ldr	r3, [pc, #40]	; (1ac8 <system_clock_source_enable+0xa4>)
    1aa0:	681b      	ldr	r3, [r3, #0]
    1aa2:	b29b      	uxth	r3, r3
    1aa4:	4a07      	ldr	r2, [pc, #28]	; (1ac4 <system_clock_source_enable+0xa0>)
    1aa6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1aa8:	2000      	movs	r0, #0
    1aaa:	e008      	b.n	1abe <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1aac:	4905      	ldr	r1, [pc, #20]	; (1ac4 <system_clock_source_enable+0xa0>)
    1aae:	2244      	movs	r2, #68	; 0x44
    1ab0:	5c8b      	ldrb	r3, [r1, r2]
    1ab2:	2002      	movs	r0, #2
    1ab4:	4303      	orrs	r3, r0
    1ab6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1ab8:	2000      	movs	r0, #0
		break;
    1aba:	e000      	b.n	1abe <system_clock_source_enable+0x9a>
		return STATUS_OK;
    1abc:	2000      	movs	r0, #0
}
    1abe:	4770      	bx	lr
    1ac0:	00002f10 	.word	0x00002f10
    1ac4:	40000800 	.word	0x40000800
    1ac8:	20000080 	.word	0x20000080

00001acc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1acc:	b570      	push	{r4, r5, r6, lr}
    1ace:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1ad0:	22c2      	movs	r2, #194	; 0xc2
    1ad2:	00d2      	lsls	r2, r2, #3
    1ad4:	4b20      	ldr	r3, [pc, #128]	; (1b58 <system_clock_init+0x8c>)
    1ad6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1ad8:	4a20      	ldr	r2, [pc, #128]	; (1b5c <system_clock_init+0x90>)
    1ada:	6853      	ldr	r3, [r2, #4]
    1adc:	211e      	movs	r1, #30
    1ade:	438b      	bics	r3, r1
    1ae0:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1ae2:	2301      	movs	r3, #1
    1ae4:	466a      	mov	r2, sp
    1ae6:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1ae8:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1aea:	b2e0      	uxtb	r0, r4
    1aec:	4669      	mov	r1, sp
    1aee:	f000 f93d 	bl	1d6c <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1af2:	3401      	adds	r4, #1
    1af4:	2c18      	cmp	r4, #24
    1af6:	d1f8      	bne.n	1aea <system_clock_init+0x1e>

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1af8:	a803      	add	r0, sp, #12
    1afa:	2400      	movs	r4, #0
    1afc:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1afe:	7084      	strb	r4, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1b00:	2501      	movs	r5, #1
    1b02:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b04:	f7ff ff70 	bl	19e8 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b08:	2006      	movs	r0, #6
    1b0a:	f7ff ff8b 	bl	1a24 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b0e:	f000 f829 	bl	1b64 <system_gclk_init>
	config->division_factor    = 1;
    1b12:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1b14:	466b      	mov	r3, sp
    1b16:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b18:	2606      	movs	r6, #6
    1b1a:	701e      	strb	r6, [r3, #0]
	config->run_in_standby     = false;
    1b1c:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1b1e:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1b20:	4669      	mov	r1, sp
    1b22:	2005      	movs	r0, #5
    1b24:	f000 f830 	bl	1b88 <system_gclk_gen_set_config>
    1b28:	2005      	movs	r0, #5
    1b2a:	f000 f885 	bl	1c38 <system_gclk_gen_enable>
	PM->CPUSEL.reg = (uint32_t)divider;
    1b2e:	4b0c      	ldr	r3, [pc, #48]	; (1b60 <system_clock_init+0x94>)
    1b30:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1b32:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1b34:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1b36:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1b38:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1b3a:	466b      	mov	r3, sp
    1b3c:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b3e:	701e      	strb	r6, [r3, #0]
	config->output_enable      = false;
    1b40:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1b42:	721d      	strb	r5, [r3, #8]
    1b44:	4669      	mov	r1, sp
    1b46:	2000      	movs	r0, #0
    1b48:	f000 f81e 	bl	1b88 <system_gclk_gen_set_config>
    1b4c:	2000      	movs	r0, #0
    1b4e:	f000 f873 	bl	1c38 <system_gclk_gen_enable>
#endif
}
    1b52:	b004      	add	sp, #16
    1b54:	bd70      	pop	{r4, r5, r6, pc}
    1b56:	46c0      	nop			; (mov r8, r8)
    1b58:	40000800 	.word	0x40000800
    1b5c:	41004000 	.word	0x41004000
    1b60:	40000400 	.word	0x40000400

00001b64 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1b64:	4a06      	ldr	r2, [pc, #24]	; (1b80 <system_gclk_init+0x1c>)
    1b66:	6993      	ldr	r3, [r2, #24]
    1b68:	2108      	movs	r1, #8
    1b6a:	430b      	orrs	r3, r1
    1b6c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1b6e:	2201      	movs	r2, #1
    1b70:	4b04      	ldr	r3, [pc, #16]	; (1b84 <system_gclk_init+0x20>)
    1b72:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1b74:	0019      	movs	r1, r3
    1b76:	780b      	ldrb	r3, [r1, #0]
    1b78:	4213      	tst	r3, r2
    1b7a:	d1fc      	bne.n	1b76 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1b7c:	4770      	bx	lr
    1b7e:	46c0      	nop			; (mov r8, r8)
    1b80:	40000400 	.word	0x40000400
    1b84:	40000c00 	.word	0x40000c00

00001b88 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1b88:	b570      	push	{r4, r5, r6, lr}
    1b8a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1b8c:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1b8e:	780d      	ldrb	r5, [r1, #0]
    1b90:	022d      	lsls	r5, r5, #8
    1b92:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1b94:	784b      	ldrb	r3, [r1, #1]
    1b96:	2b00      	cmp	r3, #0
    1b98:	d002      	beq.n	1ba0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1b9a:	2380      	movs	r3, #128	; 0x80
    1b9c:	02db      	lsls	r3, r3, #11
    1b9e:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1ba0:	7a4b      	ldrb	r3, [r1, #9]
    1ba2:	2b00      	cmp	r3, #0
    1ba4:	d002      	beq.n	1bac <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1ba6:	2380      	movs	r3, #128	; 0x80
    1ba8:	031b      	lsls	r3, r3, #12
    1baa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1bac:	6848      	ldr	r0, [r1, #4]
    1bae:	2801      	cmp	r0, #1
    1bb0:	d910      	bls.n	1bd4 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1bb2:	1e43      	subs	r3, r0, #1
    1bb4:	4218      	tst	r0, r3
    1bb6:	d134      	bne.n	1c22 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1bb8:	2802      	cmp	r0, #2
    1bba:	d930      	bls.n	1c1e <system_gclk_gen_set_config+0x96>
    1bbc:	2302      	movs	r3, #2
    1bbe:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1bc0:	3201      	adds	r2, #1
						mask <<= 1) {
    1bc2:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1bc4:	4298      	cmp	r0, r3
    1bc6:	d8fb      	bhi.n	1bc0 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1bc8:	0212      	lsls	r2, r2, #8
    1bca:	4332      	orrs	r2, r6
    1bcc:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1bce:	2380      	movs	r3, #128	; 0x80
    1bd0:	035b      	lsls	r3, r3, #13
    1bd2:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1bd4:	7a0b      	ldrb	r3, [r1, #8]
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	d002      	beq.n	1be0 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1bda:	2380      	movs	r3, #128	; 0x80
    1bdc:	039b      	lsls	r3, r3, #14
    1bde:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1be0:	4a13      	ldr	r2, [pc, #76]	; (1c30 <system_gclk_gen_set_config+0xa8>)
    1be2:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1be4:	b25b      	sxtb	r3, r3
    1be6:	2b00      	cmp	r3, #0
    1be8:	dbfb      	blt.n	1be2 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    1bea:	f7ff faab 	bl	1144 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1bee:	4b11      	ldr	r3, [pc, #68]	; (1c34 <system_gclk_gen_set_config+0xac>)
    1bf0:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1bf2:	4a0f      	ldr	r2, [pc, #60]	; (1c30 <system_gclk_gen_set_config+0xa8>)
    1bf4:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1bf6:	b25b      	sxtb	r3, r3
    1bf8:	2b00      	cmp	r3, #0
    1bfa:	dbfb      	blt.n	1bf4 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1bfc:	4b0c      	ldr	r3, [pc, #48]	; (1c30 <system_gclk_gen_set_config+0xa8>)
    1bfe:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c00:	001a      	movs	r2, r3
    1c02:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1c04:	b25b      	sxtb	r3, r3
    1c06:	2b00      	cmp	r3, #0
    1c08:	dbfb      	blt.n	1c02 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1c0a:	4a09      	ldr	r2, [pc, #36]	; (1c30 <system_gclk_gen_set_config+0xa8>)
    1c0c:	6853      	ldr	r3, [r2, #4]
    1c0e:	2180      	movs	r1, #128	; 0x80
    1c10:	0249      	lsls	r1, r1, #9
    1c12:	400b      	ands	r3, r1
    1c14:	431d      	orrs	r5, r3
    1c16:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1c18:	f7ff fab4 	bl	1184 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1c1c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1c1e:	2200      	movs	r2, #0
    1c20:	e7d2      	b.n	1bc8 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1c22:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1c24:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c26:	2380      	movs	r3, #128	; 0x80
    1c28:	029b      	lsls	r3, r3, #10
    1c2a:	431d      	orrs	r5, r3
    1c2c:	e7d2      	b.n	1bd4 <system_gclk_gen_set_config+0x4c>
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	40000c00 	.word	0x40000c00
    1c34:	40000c08 	.word	0x40000c08

00001c38 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1c38:	b510      	push	{r4, lr}
    1c3a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c3c:	4a0b      	ldr	r2, [pc, #44]	; (1c6c <system_gclk_gen_enable+0x34>)
    1c3e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c40:	b25b      	sxtb	r3, r3
    1c42:	2b00      	cmp	r3, #0
    1c44:	dbfb      	blt.n	1c3e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1c46:	f7ff fa7d 	bl	1144 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c4a:	4b09      	ldr	r3, [pc, #36]	; (1c70 <system_gclk_gen_enable+0x38>)
    1c4c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c4e:	4a07      	ldr	r2, [pc, #28]	; (1c6c <system_gclk_gen_enable+0x34>)
    1c50:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c52:	b25b      	sxtb	r3, r3
    1c54:	2b00      	cmp	r3, #0
    1c56:	dbfb      	blt.n	1c50 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1c58:	4a04      	ldr	r2, [pc, #16]	; (1c6c <system_gclk_gen_enable+0x34>)
    1c5a:	6851      	ldr	r1, [r2, #4]
    1c5c:	2380      	movs	r3, #128	; 0x80
    1c5e:	025b      	lsls	r3, r3, #9
    1c60:	430b      	orrs	r3, r1
    1c62:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1c64:	f7ff fa8e 	bl	1184 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1c68:	bd10      	pop	{r4, pc}
    1c6a:	46c0      	nop			; (mov r8, r8)
    1c6c:	40000c00 	.word	0x40000c00
    1c70:	40000c04 	.word	0x40000c04

00001c74 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1c74:	b570      	push	{r4, r5, r6, lr}
    1c76:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c78:	4a1a      	ldr	r2, [pc, #104]	; (1ce4 <system_gclk_gen_get_hz+0x70>)
    1c7a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c7c:	b25b      	sxtb	r3, r3
    1c7e:	2b00      	cmp	r3, #0
    1c80:	dbfb      	blt.n	1c7a <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1c82:	f7ff fa5f 	bl	1144 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1c86:	4b18      	ldr	r3, [pc, #96]	; (1ce8 <system_gclk_gen_get_hz+0x74>)
    1c88:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c8a:	4a16      	ldr	r2, [pc, #88]	; (1ce4 <system_gclk_gen_get_hz+0x70>)
    1c8c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1c8e:	b25b      	sxtb	r3, r3
    1c90:	2b00      	cmp	r3, #0
    1c92:	dbfb      	blt.n	1c8c <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1c94:	4e13      	ldr	r6, [pc, #76]	; (1ce4 <system_gclk_gen_get_hz+0x70>)
    1c96:	6870      	ldr	r0, [r6, #4]
    1c98:	04c0      	lsls	r0, r0, #19
    1c9a:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1c9c:	f7ff fe5c 	bl	1958 <system_clock_source_get_hz>
    1ca0:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1ca2:	4b11      	ldr	r3, [pc, #68]	; (1ce8 <system_gclk_gen_get_hz+0x74>)
    1ca4:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1ca6:	6876      	ldr	r6, [r6, #4]
    1ca8:	02f6      	lsls	r6, r6, #11
    1caa:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1cac:	4b0f      	ldr	r3, [pc, #60]	; (1cec <system_gclk_gen_get_hz+0x78>)
    1cae:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cb0:	4a0c      	ldr	r2, [pc, #48]	; (1ce4 <system_gclk_gen_get_hz+0x70>)
    1cb2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1cb4:	b25b      	sxtb	r3, r3
    1cb6:	2b00      	cmp	r3, #0
    1cb8:	dbfb      	blt.n	1cb2 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1cba:	4b0a      	ldr	r3, [pc, #40]	; (1ce4 <system_gclk_gen_get_hz+0x70>)
    1cbc:	689c      	ldr	r4, [r3, #8]
    1cbe:	0224      	lsls	r4, r4, #8
    1cc0:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1cc2:	f7ff fa5f 	bl	1184 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1cc6:	2e00      	cmp	r6, #0
    1cc8:	d107      	bne.n	1cda <system_gclk_gen_get_hz+0x66>
    1cca:	2c01      	cmp	r4, #1
    1ccc:	d907      	bls.n	1cde <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1cce:	0021      	movs	r1, r4
    1cd0:	0028      	movs	r0, r5
    1cd2:	f000 ffa9 	bl	2c28 <__udivsi3>
    1cd6:	0005      	movs	r5, r0
    1cd8:	e001      	b.n	1cde <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1cda:	3401      	adds	r4, #1
    1cdc:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1cde:	0028      	movs	r0, r5
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
    1ce2:	46c0      	nop			; (mov r8, r8)
    1ce4:	40000c00 	.word	0x40000c00
    1ce8:	40000c04 	.word	0x40000c04
    1cec:	40000c08 	.word	0x40000c08

00001cf0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1cf0:	b510      	push	{r4, lr}
    1cf2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1cf4:	f7ff fa26 	bl	1144 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1cf8:	4b05      	ldr	r3, [pc, #20]	; (1d10 <system_gclk_chan_enable+0x20>)
    1cfa:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1cfc:	4a05      	ldr	r2, [pc, #20]	; (1d14 <system_gclk_chan_enable+0x24>)
    1cfe:	8853      	ldrh	r3, [r2, #2]
    1d00:	2180      	movs	r1, #128	; 0x80
    1d02:	01c9      	lsls	r1, r1, #7
    1d04:	430b      	orrs	r3, r1
    1d06:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1d08:	f7ff fa3c 	bl	1184 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d0c:	bd10      	pop	{r4, pc}
    1d0e:	46c0      	nop			; (mov r8, r8)
    1d10:	40000c02 	.word	0x40000c02
    1d14:	40000c00 	.word	0x40000c00

00001d18 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1d18:	b510      	push	{r4, lr}
    1d1a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d1c:	f7ff fa12 	bl	1144 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d20:	4b0e      	ldr	r3, [pc, #56]	; (1d5c <system_gclk_chan_disable+0x44>)
    1d22:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1d24:	4a0e      	ldr	r2, [pc, #56]	; (1d60 <system_gclk_chan_disable+0x48>)
    1d26:	8853      	ldrh	r3, [r2, #2]
    1d28:	051b      	lsls	r3, r3, #20
    1d2a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1d2c:	8853      	ldrh	r3, [r2, #2]
    1d2e:	490d      	ldr	r1, [pc, #52]	; (1d64 <system_gclk_chan_disable+0x4c>)
    1d30:	400b      	ands	r3, r1
    1d32:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1d34:	8853      	ldrh	r3, [r2, #2]
    1d36:	490c      	ldr	r1, [pc, #48]	; (1d68 <system_gclk_chan_disable+0x50>)
    1d38:	400b      	ands	r3, r1
    1d3a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1d3c:	0011      	movs	r1, r2
    1d3e:	2280      	movs	r2, #128	; 0x80
    1d40:	01d2      	lsls	r2, r2, #7
    1d42:	884b      	ldrh	r3, [r1, #2]
    1d44:	4213      	tst	r3, r2
    1d46:	d1fc      	bne.n	1d42 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1d48:	4905      	ldr	r1, [pc, #20]	; (1d60 <system_gclk_chan_disable+0x48>)
    1d4a:	884a      	ldrh	r2, [r1, #2]
    1d4c:	0203      	lsls	r3, r0, #8
    1d4e:	4805      	ldr	r0, [pc, #20]	; (1d64 <system_gclk_chan_disable+0x4c>)
    1d50:	4002      	ands	r2, r0
    1d52:	4313      	orrs	r3, r2
    1d54:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1d56:	f7ff fa15 	bl	1184 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d5a:	bd10      	pop	{r4, pc}
    1d5c:	40000c02 	.word	0x40000c02
    1d60:	40000c00 	.word	0x40000c00
    1d64:	fffff0ff 	.word	0xfffff0ff
    1d68:	ffffbfff 	.word	0xffffbfff

00001d6c <system_gclk_chan_set_config>:
{
    1d6c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1d6e:	780c      	ldrb	r4, [r1, #0]
    1d70:	0224      	lsls	r4, r4, #8
    1d72:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1d74:	f7ff ffd0 	bl	1d18 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1d78:	b2a4      	uxth	r4, r4
    1d7a:	4b01      	ldr	r3, [pc, #4]	; (1d80 <system_gclk_chan_set_config+0x14>)
    1d7c:	805c      	strh	r4, [r3, #2]
}
    1d7e:	bd10      	pop	{r4, pc}
    1d80:	40000c00 	.word	0x40000c00

00001d84 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1d84:	b510      	push	{r4, lr}
    1d86:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1d88:	f7ff f9dc 	bl	1144 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d8c:	4b05      	ldr	r3, [pc, #20]	; (1da4 <system_gclk_chan_get_hz+0x20>)
    1d8e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1d90:	4b05      	ldr	r3, [pc, #20]	; (1da8 <system_gclk_chan_get_hz+0x24>)
    1d92:	885c      	ldrh	r4, [r3, #2]
    1d94:	0524      	lsls	r4, r4, #20
    1d96:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1d98:	f7ff f9f4 	bl	1184 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1d9c:	0020      	movs	r0, r4
    1d9e:	f7ff ff69 	bl	1c74 <system_gclk_gen_get_hz>
}
    1da2:	bd10      	pop	{r4, pc}
    1da4:	40000c02 	.word	0x40000c02
    1da8:	40000c00 	.word	0x40000c00

00001dac <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1dac:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1dae:	78d3      	ldrb	r3, [r2, #3]
    1db0:	2b00      	cmp	r3, #0
    1db2:	d135      	bne.n	1e20 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1db4:	7813      	ldrb	r3, [r2, #0]
    1db6:	2b80      	cmp	r3, #128	; 0x80
    1db8:	d029      	beq.n	1e0e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1dba:	061b      	lsls	r3, r3, #24
    1dbc:	2480      	movs	r4, #128	; 0x80
    1dbe:	0264      	lsls	r4, r4, #9
    1dc0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1dc2:	7854      	ldrb	r4, [r2, #1]
    1dc4:	2502      	movs	r5, #2
    1dc6:	43ac      	bics	r4, r5
    1dc8:	d106      	bne.n	1dd8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1dca:	7894      	ldrb	r4, [r2, #2]
    1dcc:	2c00      	cmp	r4, #0
    1dce:	d120      	bne.n	1e12 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1dd0:	2480      	movs	r4, #128	; 0x80
    1dd2:	02a4      	lsls	r4, r4, #10
    1dd4:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1dd6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1dd8:	7854      	ldrb	r4, [r2, #1]
    1dda:	3c01      	subs	r4, #1
    1ddc:	2c01      	cmp	r4, #1
    1dde:	d91c      	bls.n	1e1a <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1de0:	040d      	lsls	r5, r1, #16
    1de2:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1de4:	24a0      	movs	r4, #160	; 0xa0
    1de6:	05e4      	lsls	r4, r4, #23
    1de8:	432c      	orrs	r4, r5
    1dea:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1dec:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1dee:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1df0:	24d0      	movs	r4, #208	; 0xd0
    1df2:	0624      	lsls	r4, r4, #24
    1df4:	432c      	orrs	r4, r5
    1df6:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1df8:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1dfa:	78d4      	ldrb	r4, [r2, #3]
    1dfc:	2c00      	cmp	r4, #0
    1dfe:	d122      	bne.n	1e46 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1e00:	035b      	lsls	r3, r3, #13
    1e02:	d51c      	bpl.n	1e3e <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1e04:	7893      	ldrb	r3, [r2, #2]
    1e06:	2b01      	cmp	r3, #1
    1e08:	d01e      	beq.n	1e48 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1e0a:	6141      	str	r1, [r0, #20]
    1e0c:	e017      	b.n	1e3e <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1e0e:	2300      	movs	r3, #0
    1e10:	e7d7      	b.n	1dc2 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e12:	24c0      	movs	r4, #192	; 0xc0
    1e14:	02e4      	lsls	r4, r4, #11
    1e16:	4323      	orrs	r3, r4
    1e18:	e7dd      	b.n	1dd6 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1e1a:	4c0d      	ldr	r4, [pc, #52]	; (1e50 <_system_pinmux_config+0xa4>)
    1e1c:	4023      	ands	r3, r4
    1e1e:	e7df      	b.n	1de0 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1e20:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1e22:	040c      	lsls	r4, r1, #16
    1e24:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1e26:	23a0      	movs	r3, #160	; 0xa0
    1e28:	05db      	lsls	r3, r3, #23
    1e2a:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e2c:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1e2e:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1e30:	23d0      	movs	r3, #208	; 0xd0
    1e32:	061b      	lsls	r3, r3, #24
    1e34:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1e36:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1e38:	78d3      	ldrb	r3, [r2, #3]
    1e3a:	2b00      	cmp	r3, #0
    1e3c:	d103      	bne.n	1e46 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e3e:	7853      	ldrb	r3, [r2, #1]
    1e40:	3b01      	subs	r3, #1
    1e42:	2b01      	cmp	r3, #1
    1e44:	d902      	bls.n	1e4c <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1e46:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1e48:	6181      	str	r1, [r0, #24]
    1e4a:	e7f8      	b.n	1e3e <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1e4c:	6081      	str	r1, [r0, #8]
}
    1e4e:	e7fa      	b.n	1e46 <_system_pinmux_config+0x9a>
    1e50:	fffbffff 	.word	0xfffbffff

00001e54 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1e54:	b510      	push	{r4, lr}
    1e56:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1e58:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1e5a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1e5c:	2900      	cmp	r1, #0
    1e5e:	d104      	bne.n	1e6a <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1e60:	0943      	lsrs	r3, r0, #5
    1e62:	01db      	lsls	r3, r3, #7
    1e64:	4905      	ldr	r1, [pc, #20]	; (1e7c <system_pinmux_pin_set_config+0x28>)
    1e66:	468c      	mov	ip, r1
    1e68:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1e6a:	241f      	movs	r4, #31
    1e6c:	4020      	ands	r0, r4
    1e6e:	2101      	movs	r1, #1
    1e70:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1e72:	0018      	movs	r0, r3
    1e74:	f7ff ff9a 	bl	1dac <_system_pinmux_config>
}
    1e78:	bd10      	pop	{r4, pc}
    1e7a:	46c0      	nop			; (mov r8, r8)
    1e7c:	41004400 	.word	0x41004400

00001e80 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1e80:	4770      	bx	lr

00001e82 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1e82:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1e84:	f7ff fe22 	bl	1acc <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1e88:	f7ff fffa 	bl	1e80 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1e8c:	f7fe fc06 	bl	69c <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1e90:	f7ff fff6 	bl	1e80 <_system_dummy_init>
}
    1e94:	bd10      	pop	{r4, pc}

00001e96 <_tcc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
    1e96:	2000      	movs	r0, #0
    1e98:	4770      	bx	lr
	...

00001e9c <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1e9c:	b530      	push	{r4, r5, lr}
    1e9e:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1ea0:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1ea2:	2903      	cmp	r1, #3
    1ea4:	d900      	bls.n	1ea8 <_tcc_set_compare_value+0xc>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1ea6:	bd30      	pop	{r4, r5, pc}
	if (compare > max_count) {
    1ea8:	4d11      	ldr	r5, [pc, #68]	; (1ef0 <_tcc_set_compare_value+0x54>)
    1eaa:	42aa      	cmp	r2, r5
    1eac:	d8fb      	bhi.n	1ea6 <_tcc_set_compare_value+0xa>
	Tcc *const tcc_module = module_inst->hw;
    1eae:	6820      	ldr	r0, [r4, #0]
	if (double_buffering_enabled) {
    1eb0:	2b00      	cmp	r3, #0
    1eb2:	d010      	beq.n	1ed6 <_tcc_set_compare_value+0x3a>
				(TCC_STATUS_CCBV0 << channel_index)) {
    1eb4:	2480      	movs	r4, #128	; 0x80
    1eb6:	0264      	lsls	r4, r4, #9
    1eb8:	408c      	lsls	r4, r1
		while(tcc_module->STATUS.reg  &
    1eba:	6b03      	ldr	r3, [r0, #48]	; 0x30
    1ebc:	421c      	tst	r4, r3
    1ebe:	d1fc      	bne.n	1eba <_tcc_set_compare_value+0x1e>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1ec0:	2480      	movs	r4, #128	; 0x80
    1ec2:	0324      	lsls	r4, r4, #12
    1ec4:	408c      	lsls	r4, r1
		while(tcc_module->SYNCBUSY.reg  &
    1ec6:	6883      	ldr	r3, [r0, #8]
    1ec8:	421c      	tst	r4, r3
    1eca:	d1fc      	bne.n	1ec6 <_tcc_set_compare_value+0x2a>
		tcc_module->CCB[channel_index].reg = compare;
    1ecc:	311c      	adds	r1, #28
    1ece:	0089      	lsls	r1, r1, #2
    1ed0:	500a      	str	r2, [r1, r0]
	return STATUS_OK;
    1ed2:	2000      	movs	r0, #0
    1ed4:	e7e7      	b.n	1ea6 <_tcc_set_compare_value+0xa>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1ed6:	2480      	movs	r4, #128	; 0x80
    1ed8:	0064      	lsls	r4, r4, #1
    1eda:	408c      	lsls	r4, r1
    1edc:	6883      	ldr	r3, [r0, #8]
    1ede:	421c      	tst	r4, r3
    1ee0:	d1fc      	bne.n	1edc <_tcc_set_compare_value+0x40>
		tcc_module->CC[channel_index].reg = compare;
    1ee2:	3110      	adds	r1, #16
    1ee4:	0089      	lsls	r1, r1, #2
    1ee6:	1841      	adds	r1, r0, r1
    1ee8:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1eea:	2000      	movs	r0, #0
    1eec:	e7db      	b.n	1ea6 <_tcc_set_compare_value+0xa>
    1eee:	46c0      	nop			; (mov r8, r8)
    1ef0:	00ffffff 	.word	0x00ffffff

00001ef4 <tcc_get_config_defaults>:
	config->counter.count                  = 0;
    1ef4:	2300      	movs	r3, #0
    1ef6:	6003      	str	r3, [r0, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    1ef8:	4a4c      	ldr	r2, [pc, #304]	; (202c <tcc_get_config_defaults+0x138>)
    1efa:	6042      	str	r2, [r0, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    1efc:	7283      	strb	r3, [r0, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    1efe:	72c3      	strb	r3, [r0, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    1f00:	7303      	strb	r3, [r0, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    1f02:	7243      	strb	r3, [r0, #9]
	config->counter.oneshot                = false;
    1f04:	7203      	strb	r3, [r0, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    1f06:	61c3      	str	r3, [r0, #28]
    1f08:	6203      	str	r3, [r0, #32]
    1f0a:	6243      	str	r3, [r0, #36]	; 0x24
    1f0c:	6283      	str	r3, [r0, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    1f0e:	7503      	strb	r3, [r0, #20]
    1f10:	7543      	strb	r3, [r0, #21]
    1f12:	7583      	strb	r3, [r0, #22]
    1f14:	75c3      	strb	r3, [r0, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    1f16:	7603      	strb	r3, [r0, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    1f18:	7643      	strb	r3, [r0, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    1f1a:	7403      	strb	r3, [r0, #16]
    1f1c:	7443      	strb	r3, [r0, #17]
    1f1e:	7483      	strb	r3, [r0, #18]
    1f20:	74c3      	strb	r3, [r0, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    1f22:	222c      	movs	r2, #44	; 0x2c
    1f24:	5483      	strb	r3, [r0, r2]
    1f26:	3201      	adds	r2, #1
    1f28:	5483      	strb	r3, [r0, r2]
    1f2a:	3201      	adds	r2, #1
    1f2c:	5483      	strb	r3, [r0, r2]
    1f2e:	3201      	adds	r2, #1
    1f30:	5483      	strb	r3, [r0, r2]
    1f32:	3201      	adds	r2, #1
    1f34:	5483      	strb	r3, [r0, r2]
    1f36:	3201      	adds	r2, #1
    1f38:	5483      	strb	r3, [r0, r2]
    1f3a:	3201      	adds	r2, #1
    1f3c:	5483      	strb	r3, [r0, r2]
    1f3e:	3201      	adds	r2, #1
    1f40:	5483      	strb	r3, [r0, r2]
    1f42:	3201      	adds	r2, #1
    1f44:	5483      	strb	r3, [r0, r2]
    1f46:	3201      	adds	r2, #1
    1f48:	5483      	strb	r3, [r0, r2]
    1f4a:	3201      	adds	r2, #1
    1f4c:	5483      	strb	r3, [r0, r2]
    1f4e:	3201      	adds	r2, #1
    1f50:	5483      	strb	r3, [r0, r2]
    1f52:	3201      	adds	r2, #1
    1f54:	5483      	strb	r3, [r0, r2]
    1f56:	3201      	adds	r2, #1
    1f58:	5483      	strb	r3, [r0, r2]
    1f5a:	3201      	adds	r2, #1
    1f5c:	5483      	strb	r3, [r0, r2]
    1f5e:	3201      	adds	r2, #1
    1f60:	5483      	strb	r3, [r0, r2]
    1f62:	3201      	adds	r2, #1
    1f64:	5483      	strb	r3, [r0, r2]
    1f66:	3201      	adds	r2, #1
    1f68:	5483      	strb	r3, [r0, r2]
    1f6a:	3201      	adds	r2, #1
    1f6c:	5483      	strb	r3, [r0, r2]
    1f6e:	3201      	adds	r2, #1
    1f70:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    1f72:	3201      	adds	r2, #1
    1f74:	5483      	strb	r3, [r0, r2]
    1f76:	3201      	adds	r2, #1
    1f78:	5483      	strb	r3, [r0, r2]
    1f7a:	3201      	adds	r2, #1
    1f7c:	5483      	strb	r3, [r0, r2]
    1f7e:	3201      	adds	r2, #1
    1f80:	5483      	strb	r3, [r0, r2]
    1f82:	3201      	adds	r2, #1
    1f84:	5483      	strb	r3, [r0, r2]
    1f86:	3201      	adds	r2, #1
    1f88:	5483      	strb	r3, [r0, r2]
    1f8a:	3201      	adds	r2, #1
    1f8c:	5483      	strb	r3, [r0, r2]
    1f8e:	3201      	adds	r2, #1
    1f90:	5483      	strb	r3, [r0, r2]
    1f92:	3201      	adds	r2, #1
    1f94:	5483      	strb	r3, [r0, r2]
    1f96:	3201      	adds	r2, #1
    1f98:	5483      	strb	r3, [r0, r2]
    1f9a:	3201      	adds	r2, #1
    1f9c:	5483      	strb	r3, [r0, r2]
    1f9e:	3201      	adds	r2, #1
    1fa0:	5483      	strb	r3, [r0, r2]
    1fa2:	3201      	adds	r2, #1
    1fa4:	5483      	strb	r3, [r0, r2]
    1fa6:	3201      	adds	r2, #1
    1fa8:	5483      	strb	r3, [r0, r2]
    1faa:	3201      	adds	r2, #1
    1fac:	5483      	strb	r3, [r0, r2]
    1fae:	3201      	adds	r2, #1
    1fb0:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    1fb2:	3201      	adds	r2, #1
    1fb4:	5483      	strb	r3, [r0, r2]
    1fb6:	3201      	adds	r2, #1
    1fb8:	5483      	strb	r3, [r0, r2]
    1fba:	3201      	adds	r2, #1
    1fbc:	5483      	strb	r3, [r0, r2]
    1fbe:	3201      	adds	r2, #1
    1fc0:	5483      	strb	r3, [r0, r2]
    1fc2:	3201      	adds	r2, #1
    1fc4:	5483      	strb	r3, [r0, r2]
    1fc6:	3201      	adds	r2, #1
    1fc8:	5483      	strb	r3, [r0, r2]
    1fca:	3201      	adds	r2, #1
    1fcc:	5483      	strb	r3, [r0, r2]
    1fce:	3201      	adds	r2, #1
    1fd0:	5483      	strb	r3, [r0, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    1fd2:	3241      	adds	r2, #65	; 0x41
    1fd4:	5483      	strb	r3, [r0, r2]
    1fd6:	6583      	str	r3, [r0, #88]	; 0x58
    1fd8:	6783      	str	r3, [r0, #120]	; 0x78
    1fda:	3201      	adds	r2, #1
    1fdc:	5483      	strb	r3, [r0, r2]
    1fde:	65c3      	str	r3, [r0, #92]	; 0x5c
    1fe0:	67c3      	str	r3, [r0, #124]	; 0x7c
    1fe2:	3201      	adds	r2, #1
    1fe4:	5483      	strb	r3, [r0, r2]
    1fe6:	6603      	str	r3, [r0, #96]	; 0x60
    1fe8:	3a1a      	subs	r2, #26
    1fea:	5083      	str	r3, [r0, r2]
    1fec:	321b      	adds	r2, #27
    1fee:	5483      	strb	r3, [r0, r2]
    1ff0:	6643      	str	r3, [r0, #100]	; 0x64
    1ff2:	3a17      	subs	r2, #23
    1ff4:	5083      	str	r3, [r0, r2]
    1ff6:	3218      	adds	r2, #24
    1ff8:	5483      	strb	r3, [r0, r2]
    1ffa:	6683      	str	r3, [r0, #104]	; 0x68
    1ffc:	3a14      	subs	r2, #20
    1ffe:	5083      	str	r3, [r0, r2]
    2000:	3215      	adds	r2, #21
    2002:	5483      	strb	r3, [r0, r2]
    2004:	66c3      	str	r3, [r0, #108]	; 0x6c
    2006:	3a11      	subs	r2, #17
    2008:	5083      	str	r3, [r0, r2]
    200a:	3212      	adds	r2, #18
    200c:	5483      	strb	r3, [r0, r2]
    200e:	6703      	str	r3, [r0, #112]	; 0x70
    2010:	3a0e      	subs	r2, #14
    2012:	5083      	str	r3, [r0, r2]
    2014:	320f      	adds	r2, #15
    2016:	5483      	strb	r3, [r0, r2]
    2018:	6743      	str	r3, [r0, #116]	; 0x74
    201a:	3a0b      	subs	r2, #11
    201c:	5083      	str	r3, [r0, r2]
	config->double_buffering_enabled  = true;
    201e:	2101      	movs	r1, #1
    2020:	320c      	adds	r2, #12
    2022:	5481      	strb	r1, [r0, r2]
	config->run_in_standby            = false;
    2024:	3201      	adds	r2, #1
    2026:	5483      	strb	r3, [r0, r2]
}
    2028:	4770      	bx	lr
    202a:	46c0      	nop			; (mov r8, r8)
    202c:	00ffffff 	.word	0x00ffffff

00002030 <tcc_init>:
{
    2030:	b5f0      	push	{r4, r5, r6, r7, lr}
    2032:	46de      	mov	lr, fp
    2034:	4657      	mov	r7, sl
    2036:	464e      	mov	r6, r9
    2038:	4645      	mov	r5, r8
    203a:	b5e0      	push	{r5, r6, r7, lr}
    203c:	b08d      	sub	sp, #52	; 0x34
    203e:	0006      	movs	r6, r0
    2040:	000c      	movs	r4, r1
    2042:	0015      	movs	r5, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    2044:	0008      	movs	r0, r1
    2046:	f7ff ff26 	bl	1e96 <_tcc_get_inst_index>
    204a:	0003      	movs	r3, r0
			PM->APBCMASK.reg |= mask;
    204c:	49cc      	ldr	r1, [pc, #816]	; (2380 <tcc_init+0x350>)
    204e:	6a0a      	ldr	r2, [r1, #32]
    2050:	2020      	movs	r0, #32
    2052:	4302      	orrs	r2, r0
    2054:	620a      	str	r2, [r1, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    2056:	6822      	ldr	r2, [r4, #0]
		return STATUS_ERR_DENIED;
    2058:	3804      	subs	r0, #4
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    205a:	0792      	lsls	r2, r2, #30
    205c:	d506      	bpl.n	206c <tcc_init+0x3c>
}
    205e:	b00d      	add	sp, #52	; 0x34
    2060:	bc3c      	pop	{r2, r3, r4, r5}
    2062:	4690      	mov	r8, r2
    2064:	4699      	mov	r9, r3
    2066:	46a2      	mov	sl, r4
    2068:	46ab      	mov	fp, r5
    206a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    206c:	6822      	ldr	r2, [r4, #0]
    206e:	2701      	movs	r7, #1
    2070:	4017      	ands	r7, r2
    2072:	d1f4      	bne.n	205e <tcc_init+0x2e>
	if ((config->counter.count > count_max)
    2074:	4ac3      	ldr	r2, [pc, #780]	; (2384 <tcc_init+0x354>)
		return STATUS_ERR_INVALID_ARG;
    2076:	3805      	subs	r0, #5
	if ((config->counter.count > count_max)
    2078:	6829      	ldr	r1, [r5, #0]
    207a:	4291      	cmp	r1, r2
    207c:	d8ef      	bhi.n	205e <tcc_init+0x2e>
		|| (config->counter.period > count_max)
    207e:	6869      	ldr	r1, [r5, #4]
    2080:	4291      	cmp	r1, r2
    2082:	d8ec      	bhi.n	205e <tcc_init+0x2e>
		if ((config->compare.match[i] > count_max)
    2084:	69e9      	ldr	r1, [r5, #28]
    2086:	4291      	cmp	r1, r2
    2088:	d900      	bls.n	208c <tcc_init+0x5c>
    208a:	e175      	b.n	2378 <tcc_init+0x348>
    208c:	6a29      	ldr	r1, [r5, #32]
    208e:	4291      	cmp	r1, r2
    2090:	d900      	bls.n	2094 <tcc_init+0x64>
    2092:	e173      	b.n	237c <tcc_init+0x34c>
    2094:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2096:	4291      	cmp	r1, r2
    2098:	d900      	bls.n	209c <tcc_init+0x6c>
    209a:	e17d      	b.n	2398 <tcc_init+0x368>
    209c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    209e:	4291      	cmp	r1, r2
    20a0:	d900      	bls.n	20a4 <tcc_init+0x74>
    20a2:	e17b      	b.n	239c <tcc_init+0x36c>
		if (config->capture.channel_function[i] ==
    20a4:	7c2a      	ldrb	r2, [r5, #16]
    20a6:	3a01      	subs	r2, #1
    20a8:	4250      	negs	r0, r2
    20aa:	4150      	adcs	r0, r2
    20ac:	0602      	lsls	r2, r0, #24
    20ae:	9201      	str	r2, [sp, #4]
    20b0:	7c6a      	ldrb	r2, [r5, #17]
    20b2:	2a01      	cmp	r2, #1
    20b4:	d031      	beq.n	211a <tcc_init+0xea>
    20b6:	7caa      	ldrb	r2, [r5, #18]
    20b8:	2a01      	cmp	r2, #1
    20ba:	d034      	beq.n	2126 <tcc_init+0xf6>
    20bc:	7cea      	ldrb	r2, [r5, #19]
    20be:	2a01      	cmp	r2, #1
    20c0:	d037      	beq.n	2132 <tcc_init+0x102>
	if (config->run_in_standby) {
    20c2:	22a1      	movs	r2, #161	; 0xa1
    20c4:	5caa      	ldrb	r2, [r5, r2]
    20c6:	2a00      	cmp	r2, #0
    20c8:	d004      	beq.n	20d4 <tcc_init+0xa4>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    20ca:	2280      	movs	r2, #128	; 0x80
    20cc:	0112      	lsls	r2, r2, #4
    20ce:	9901      	ldr	r1, [sp, #4]
    20d0:	4311      	orrs	r1, r2
    20d2:	9101      	str	r1, [sp, #4]
	if (config->counter.oneshot) {
    20d4:	7a2a      	ldrb	r2, [r5, #8]
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    20d6:	1e51      	subs	r1, r2, #1
    20d8:	418a      	sbcs	r2, r1
    20da:	0092      	lsls	r2, r2, #2
    20dc:	9203      	str	r2, [sp, #12]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    20de:	7a6a      	ldrb	r2, [r5, #9]
    20e0:	2a01      	cmp	r2, #1
    20e2:	d02c      	beq.n	213e <tcc_init+0x10e>
		if (cfg->capture_channel >= cc_num) {
    20e4:	2235      	movs	r2, #53	; 0x35
    20e6:	5caa      	ldrb	r2, [r5, r2]
    20e8:	2a03      	cmp	r2, #3
    20ea:	d900      	bls.n	20ee <tcc_init+0xbe>
    20ec:	e158      	b.n	23a0 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
    20ee:	212c      	movs	r1, #44	; 0x2c
    20f0:	5c69      	ldrb	r1, [r5, r1]
    20f2:	290f      	cmp	r1, #15
    20f4:	d900      	bls.n	20f8 <tcc_init+0xc8>
    20f6:	e153      	b.n	23a0 <tcc_init+0x370>
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    20f8:	7b28      	ldrb	r0, [r5, #12]
    20fa:	9004      	str	r0, [sp, #16]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    20fc:	7ae8      	ldrb	r0, [r5, #11]
    20fe:	9005      	str	r0, [sp, #20]
    2100:	202d      	movs	r0, #45	; 0x2d
    2102:	4682      	mov	sl, r0
    2104:	44aa      	add	sl, r5
    2106:	2000      	movs	r0, #0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2108:	9702      	str	r7, [sp, #8]
    210a:	4684      	mov	ip, r0
    210c:	9606      	str	r6, [sp, #24]
    210e:	000e      	movs	r6, r1
    2110:	46a0      	mov	r8, r4
    2112:	4654      	mov	r4, sl
    2114:	46a9      	mov	r9, r5
    2116:	9307      	str	r3, [sp, #28]
    2118:	e047      	b.n	21aa <tcc_init+0x17a>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    211a:	2280      	movs	r2, #128	; 0x80
    211c:	0492      	lsls	r2, r2, #18
    211e:	9901      	ldr	r1, [sp, #4]
    2120:	4311      	orrs	r1, r2
    2122:	9101      	str	r1, [sp, #4]
    2124:	e7c7      	b.n	20b6 <tcc_init+0x86>
    2126:	2280      	movs	r2, #128	; 0x80
    2128:	04d2      	lsls	r2, r2, #19
    212a:	9901      	ldr	r1, [sp, #4]
    212c:	4311      	orrs	r1, r2
    212e:	9101      	str	r1, [sp, #4]
    2130:	e7c4      	b.n	20bc <tcc_init+0x8c>
    2132:	2280      	movs	r2, #128	; 0x80
    2134:	0512      	lsls	r2, r2, #20
    2136:	9901      	ldr	r1, [sp, #4]
    2138:	4311      	orrs	r1, r2
    213a:	9101      	str	r1, [sp, #4]
    213c:	e7c1      	b.n	20c2 <tcc_init+0x92>
		ctrlb |= TCC_CTRLBSET_DIR;
    213e:	9903      	ldr	r1, [sp, #12]
    2140:	4311      	orrs	r1, r2
    2142:	9103      	str	r1, [sp, #12]
    2144:	e7ce      	b.n	20e4 <tcc_init+0xb4>
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2146:	0292      	lsls	r2, r2, #10
    2148:	25c0      	movs	r5, #192	; 0xc0
    214a:	012d      	lsls	r5, r5, #4
    214c:	402a      	ands	r2, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    214e:	4332      	orrs	r2, r6
				| TCC_FCTRLA_SRC(cfg->source)
    2150:	790d      	ldrb	r5, [r1, #4]
    2152:	2603      	movs	r6, #3
    2154:	402e      	ands	r6, r5
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2156:	4332      	orrs	r2, r6
    2158:	4655      	mov	r5, sl
    215a:	432a      	orrs	r2, r5
				| TCC_FCTRLA_BLANK(cfg->blanking)
    215c:	794e      	ldrb	r6, [r1, #5]
    215e:	0176      	lsls	r6, r6, #5
    2160:	2560      	movs	r5, #96	; 0x60
    2162:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2164:	432a      	orrs	r2, r5
				| TCC_FCTRLA_HALT(cfg->halt_action)
    2166:	798d      	ldrb	r5, [r1, #6]
    2168:	022d      	lsls	r5, r5, #8
    216a:	26c0      	movs	r6, #192	; 0xc0
    216c:	00b6      	lsls	r6, r6, #2
    216e:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    2170:	432a      	orrs	r2, r5
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    2172:	79cd      	ldrb	r5, [r1, #7]
    2174:	032d      	lsls	r5, r5, #12
    2176:	26e0      	movs	r6, #224	; 0xe0
    2178:	01f6      	lsls	r6, r6, #7
    217a:	4035      	ands	r5, r6
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    217c:	432a      	orrs	r2, r5
    217e:	4310      	orrs	r0, r2
    2180:	4303      	orrs	r3, r0
    2182:	431f      	orrs	r7, r3
		value_buffer[i] = fault;
    2184:	ab08      	add	r3, sp, #32
    2186:	4662      	mov	r2, ip
    2188:	2008      	movs	r0, #8
    218a:	181b      	adds	r3, r3, r0
    218c:	509f      	str	r7, [r3, r2]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    218e:	2a04      	cmp	r2, #4
    2190:	d028      	beq.n	21e4 <tcc_init+0x1b4>
		if (cfg->capture_channel >= cc_num) {
    2192:	7c8a      	ldrb	r2, [r1, #18]
    2194:	2a03      	cmp	r2, #3
    2196:	d900      	bls.n	219a <tcc_init+0x16a>
    2198:	e102      	b.n	23a0 <tcc_init+0x370>
		if (cfg->filter_value > 0xF) {
    219a:	7a4e      	ldrb	r6, [r1, #9]
    219c:	340a      	adds	r4, #10
    219e:	2304      	movs	r3, #4
    21a0:	469a      	mov	sl, r3
    21a2:	44d4      	add	ip, sl
    21a4:	2e0f      	cmp	r6, #15
    21a6:	d900      	bls.n	21aa <tcc_init+0x17a>
    21a8:	e0fa      	b.n	23a0 <tcc_init+0x370>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    21aa:	0636      	lsls	r6, r6, #24
    21ac:	23f0      	movs	r3, #240	; 0xf0
    21ae:	051b      	lsls	r3, r3, #20
    21b0:	401e      	ands	r6, r3
    21b2:	0021      	movs	r1, r4
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    21b4:	7825      	ldrb	r5, [r4, #0]
    21b6:	042d      	lsls	r5, r5, #16
    21b8:	23ff      	movs	r3, #255	; 0xff
    21ba:	041b      	lsls	r3, r3, #16
    21bc:	401d      	ands	r5, r3
    21be:	46aa      	mov	sl, r5
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    21c0:	7863      	ldrb	r3, [r4, #1]
    21c2:	2080      	movs	r0, #128	; 0x80
    21c4:	2b00      	cmp	r3, #0
    21c6:	d100      	bne.n	21ca <tcc_init+0x19a>
    21c8:	9802      	ldr	r0, [sp, #8]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    21ca:	788f      	ldrb	r7, [r1, #2]
    21cc:	2308      	movs	r3, #8
    21ce:	2f00      	cmp	r7, #0
    21d0:	d100      	bne.n	21d4 <tcc_init+0x1a4>
    21d2:	9b02      	ldr	r3, [sp, #8]
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    21d4:	78cf      	ldrb	r7, [r1, #3]
    21d6:	46bb      	mov	fp, r7
    21d8:	2710      	movs	r7, #16
    21da:	465d      	mov	r5, fp
    21dc:	2d00      	cmp	r5, #0
    21de:	d1b2      	bne.n	2146 <tcc_init+0x116>
    21e0:	9f02      	ldr	r7, [sp, #8]
    21e2:	e7b0      	b.n	2146 <tcc_init+0x116>
    21e4:	9e06      	ldr	r6, [sp, #24]
    21e6:	4644      	mov	r4, r8
    21e8:	464d      	mov	r5, r9
    21ea:	9b07      	ldr	r3, [sp, #28]
    21ec:	4648      	mov	r0, r9
    21ee:	3050      	adds	r0, #80	; 0x50
    21f0:	4649      	mov	r1, r9
    21f2:	3141      	adds	r1, #65	; 0x41
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    21f4:	2200      	movs	r2, #0
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    21f6:	2780      	movs	r7, #128	; 0x80
    21f8:	027f      	lsls	r7, r7, #9
    21fa:	46bc      	mov	ip, r7
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    21fc:	2701      	movs	r7, #1
    21fe:	46b9      	mov	r9, r7
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    2200:	2702      	movs	r7, #2
    2202:	37ff      	adds	r7, #255	; 0xff
    2204:	46ba      	mov	sl, r7
    2206:	001f      	movs	r7, r3
    2208:	0013      	movs	r3, r2
    220a:	46a0      	mov	r8, r4
    220c:	003c      	movs	r4, r7
    220e:	e007      	b.n	2220 <tcc_init+0x1f0>
    2210:	4657      	mov	r7, sl
    2212:	4097      	lsls	r7, r2
    2214:	433b      	orrs	r3, r7
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2216:	3201      	adds	r2, #1
    2218:	3001      	adds	r0, #1
    221a:	3102      	adds	r1, #2
    221c:	2a08      	cmp	r2, #8
    221e:	d00e      	beq.n	223e <tcc_init+0x20e>
		if (config->wave_ext.invert[i]) {
    2220:	7807      	ldrb	r7, [r0, #0]
    2222:	2f00      	cmp	r7, #0
    2224:	d002      	beq.n	222c <tcc_init+0x1fc>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    2226:	4667      	mov	r7, ip
    2228:	4097      	lsls	r7, r2
    222a:	433b      	orrs	r3, r7
		if (config->wave_ext.non_recoverable_fault[i].output !=
    222c:	780f      	ldrb	r7, [r1, #0]
    222e:	2f00      	cmp	r7, #0
    2230:	d0f1      	beq.n	2216 <tcc_init+0x1e6>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    2232:	2f02      	cmp	r7, #2
    2234:	d0ec      	beq.n	2210 <tcc_init+0x1e0>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    2236:	464f      	mov	r7, r9
    2238:	4097      	lsls	r7, r2
    223a:	433b      	orrs	r3, r7
    223c:	e7eb      	b.n	2216 <tcc_init+0x1e6>
    223e:	0022      	movs	r2, r4
    2240:	4644      	mov	r4, r8
    2242:	4698      	mov	r8, r3
    2244:	0013      	movs	r3, r2
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2246:	7e6a      	ldrb	r2, [r5, #25]
    2248:	0112      	lsls	r2, r2, #4
    224a:	2130      	movs	r1, #48	; 0x30
    224c:	4011      	ands	r1, r2
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    224e:	7e28      	ldrb	r0, [r5, #24]
    2250:	2207      	movs	r2, #7
    2252:	4002      	ands	r2, r0
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    2254:	4311      	orrs	r1, r2
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2256:	2200      	movs	r2, #0
			wave |= (TCC_WAVE_POL0 << n);
    2258:	2080      	movs	r0, #128	; 0x80
    225a:	0240      	lsls	r0, r0, #9
    225c:	000f      	movs	r7, r1
    225e:	e002      	b.n	2266 <tcc_init+0x236>
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2260:	3201      	adds	r2, #1
    2262:	2a04      	cmp	r2, #4
    2264:	d007      	beq.n	2276 <tcc_init+0x246>
		if (wav_cfg->wave_polarity[n]) {
    2266:	18a9      	adds	r1, r5, r2
    2268:	7d09      	ldrb	r1, [r1, #20]
    226a:	2900      	cmp	r1, #0
    226c:	d0f8      	beq.n	2260 <tcc_init+0x230>
			wave |= (TCC_WAVE_POL0 << n);
    226e:	0001      	movs	r1, r0
    2270:	4091      	lsls	r1, r2
    2272:	430f      	orrs	r7, r1
    2274:	e7f4      	b.n	2260 <tcc_init+0x230>
    2276:	46ba      	mov	sl, r7
    2278:	1d32      	adds	r2, r6, #4
    227a:	0030      	movs	r0, r6
    227c:	3034      	adds	r0, #52	; 0x34
		module_inst->callback[i] = NULL;
    227e:	2100      	movs	r1, #0
    2280:	c202      	stmia	r2!, {r1}
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2282:	4290      	cmp	r0, r2
    2284:	d1fc      	bne.n	2280 <tcc_init+0x250>
	module_inst->register_callback_mask = 0;
    2286:	2200      	movs	r2, #0
    2288:	6372      	str	r2, [r6, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    228a:	63b2      	str	r2, [r6, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    228c:	009b      	lsls	r3, r3, #2
    228e:	4a3e      	ldr	r2, [pc, #248]	; (2388 <tcc_init+0x358>)
    2290:	509e      	str	r6, [r3, r2]
	module_inst->hw = hw;
    2292:	6034      	str	r4, [r6, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2294:	23a0      	movs	r3, #160	; 0xa0
    2296:	5cea      	ldrb	r2, [r5, r3]
    2298:	3b64      	subs	r3, #100	; 0x64
    229a:	54f2      	strb	r2, [r6, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    229c:	a909      	add	r1, sp, #36	; 0x24
    229e:	7aab      	ldrb	r3, [r5, #10]
    22a0:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    22a2:	2011      	movs	r0, #17
    22a4:	f7ff fd62 	bl	1d6c <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    22a8:	2011      	movs	r0, #17
    22aa:	f7ff fd21 	bl	1cf0 <system_gclk_chan_enable>
    22ae:	002f      	movs	r7, r5
    22b0:	3798      	adds	r7, #152	; 0x98
    22b2:	002e      	movs	r6, r5
    22b4:	3658      	adds	r6, #88	; 0x58
    22b6:	2378      	movs	r3, #120	; 0x78
    22b8:	4699      	mov	r9, r3
    22ba:	44a9      	add	r9, r5
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22bc:	3b77      	subs	r3, #119	; 0x77
    22be:	469b      	mov	fp, r3
	config->powersave    = false;
    22c0:	0023      	movs	r3, r4
    22c2:	464c      	mov	r4, r9
    22c4:	4699      	mov	r9, r3
    22c6:	e003      	b.n	22d0 <tcc_init+0x2a0>
    22c8:	3701      	adds	r7, #1
    22ca:	3604      	adds	r6, #4
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    22cc:	42b4      	cmp	r4, r6
    22ce:	d012      	beq.n	22f6 <tcc_init+0x2c6>
		if (!config->pins.enable_wave_out_pin[i]) {
    22d0:	783b      	ldrb	r3, [r7, #0]
    22d2:	2b00      	cmp	r3, #0
    22d4:	d0f8      	beq.n	22c8 <tcc_init+0x298>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22d6:	ab08      	add	r3, sp, #32
    22d8:	465a      	mov	r2, fp
    22da:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    22dc:	2200      	movs	r2, #0
    22de:	70da      	strb	r2, [r3, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    22e0:	2220      	movs	r2, #32
    22e2:	18b2      	adds	r2, r6, r2
    22e4:	7812      	ldrb	r2, [r2, #0]
    22e6:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    22e8:	465a      	mov	r2, fp
    22ea:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
    22ec:	7830      	ldrb	r0, [r6, #0]
    22ee:	0019      	movs	r1, r3
    22f0:	f7ff fdb0 	bl	1e54 <system_pinmux_pin_set_config>
    22f4:	e7e8      	b.n	22c8 <tcc_init+0x298>
    22f6:	464c      	mov	r4, r9
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    22f8:	9b04      	ldr	r3, [sp, #16]
    22fa:	031b      	lsls	r3, r3, #12
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    22fc:	9a05      	ldr	r2, [sp, #20]
    22fe:	0212      	lsls	r2, r2, #8
    2300:	4313      	orrs	r3, r2
    2302:	9a01      	ldr	r2, [sp, #4]
    2304:	4313      	orrs	r3, r2
	hw->CTRLA.reg = ctrla;
    2306:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2308:	2204      	movs	r2, #4
    230a:	68a3      	ldr	r3, [r4, #8]
    230c:	421a      	tst	r2, r3
    230e:	d1fc      	bne.n	230a <tcc_init+0x2da>
	hw->CTRLBCLR.reg = 0xFF;
    2310:	23ff      	movs	r3, #255	; 0xff
    2312:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2314:	2204      	movs	r2, #4
    2316:	68a3      	ldr	r3, [r4, #8]
    2318:	421a      	tst	r2, r3
    231a:	d1fc      	bne.n	2316 <tcc_init+0x2e6>
	hw->CTRLBSET.reg = ctrlb;
    231c:	466b      	mov	r3, sp
    231e:	7b1b      	ldrb	r3, [r3, #12]
    2320:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    2322:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2324:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    2326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2328:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    232a:	4643      	mov	r3, r8
    232c:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    232e:	4a17      	ldr	r2, [pc, #92]	; (238c <tcc_init+0x35c>)
    2330:	68a3      	ldr	r3, [r4, #8]
    2332:	4213      	tst	r3, r2
    2334:	d1fc      	bne.n	2330 <tcc_init+0x300>
	hw->WAVE.reg = waves[0];
    2336:	4653      	mov	r3, sl
    2338:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    233a:	2210      	movs	r2, #16
    233c:	68a3      	ldr	r3, [r4, #8]
    233e:	421a      	tst	r2, r3
    2340:	d1fc      	bne.n	233c <tcc_init+0x30c>
	hw->COUNT.reg = config->counter.count;
    2342:	682b      	ldr	r3, [r5, #0]
    2344:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    2346:	4a12      	ldr	r2, [pc, #72]	; (2390 <tcc_init+0x360>)
    2348:	68a3      	ldr	r3, [r4, #8]
    234a:	4213      	tst	r3, r2
    234c:	d1fc      	bne.n	2348 <tcc_init+0x318>
	hw->PER.reg = (config->counter.period);
    234e:	686b      	ldr	r3, [r5, #4]
    2350:	6423      	str	r3, [r4, #64]	; 0x40
    2352:	351c      	adds	r5, #28
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2354:	2100      	movs	r1, #0
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    2356:	480f      	ldr	r0, [pc, #60]	; (2394 <tcc_init+0x364>)
    2358:	0002      	movs	r2, r0
    235a:	408a      	lsls	r2, r1
		while (hw->SYNCBUSY.reg & (
    235c:	68a3      	ldr	r3, [r4, #8]
    235e:	421a      	tst	r2, r3
    2360:	d1fc      	bne.n	235c <tcc_init+0x32c>
		hw->CC[i].reg = (config->compare.match[i]);
    2362:	cd04      	ldmia	r5!, {r2}
    2364:	000b      	movs	r3, r1
    2366:	3310      	adds	r3, #16
    2368:	009b      	lsls	r3, r3, #2
    236a:	18e3      	adds	r3, r4, r3
    236c:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    236e:	3101      	adds	r1, #1
    2370:	2904      	cmp	r1, #4
    2372:	d1f1      	bne.n	2358 <tcc_init+0x328>
	return STATUS_OK;
    2374:	2000      	movs	r0, #0
    2376:	e672      	b.n	205e <tcc_init+0x2e>
			return STATUS_ERR_INVALID_ARG;
    2378:	2017      	movs	r0, #23
    237a:	e670      	b.n	205e <tcc_init+0x2e>
    237c:	2017      	movs	r0, #23
    237e:	e66e      	b.n	205e <tcc_init+0x2e>
    2380:	40000400 	.word	0x40000400
    2384:	00ffffff 	.word	0x00ffffff
    2388:	20000214 	.word	0x20000214
    238c:	00020040 	.word	0x00020040
    2390:	00040080 	.word	0x00040080
    2394:	00080100 	.word	0x00080100
    2398:	2017      	movs	r0, #23
    239a:	e660      	b.n	205e <tcc_init+0x2e>
    239c:	2017      	movs	r0, #23
    239e:	e65e      	b.n	205e <tcc_init+0x2e>
    23a0:	2017      	movs	r0, #23
    23a2:	e65c      	b.n	205e <tcc_init+0x2e>

000023a4 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    23a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    23a6:	233c      	movs	r3, #60	; 0x3c
    23a8:	5cc3      	ldrb	r3, [r0, r3]
    23aa:	f7ff fd77 	bl	1e9c <_tcc_set_compare_value>
			module_inst->double_buffering_enabled);
}
    23ae:	bd10      	pop	{r4, pc}

000023b0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    23b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    23b2:	46c6      	mov	lr, r8
    23b4:	b500      	push	{lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    23b6:	0080      	lsls	r0, r0, #2
    23b8:	4b0e      	ldr	r3, [pc, #56]	; (23f4 <_tcc_interrupt_handler+0x44>)
    23ba:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    23bc:	683b      	ldr	r3, [r7, #0]
    23be:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    23c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    23c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    23c4:	4013      	ands	r3, r2
    23c6:	401e      	ands	r6, r3
    23c8:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    23ca:	4b0b      	ldr	r3, [pc, #44]	; (23f8 <_tcc_interrupt_handler+0x48>)
    23cc:	4698      	mov	r8, r3
    23ce:	e002      	b.n	23d6 <_tcc_interrupt_handler+0x26>
    23d0:	3404      	adds	r4, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    23d2:	2c30      	cmp	r4, #48	; 0x30
    23d4:	d00a      	beq.n	23ec <_tcc_interrupt_handler+0x3c>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    23d6:	4643      	mov	r3, r8
    23d8:	58e5      	ldr	r5, [r4, r3]
    23da:	4235      	tst	r5, r6
    23dc:	d0f8      	beq.n	23d0 <_tcc_interrupt_handler+0x20>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    23de:	193b      	adds	r3, r7, r4
    23e0:	685b      	ldr	r3, [r3, #4]
    23e2:	0038      	movs	r0, r7
    23e4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    23e6:	683b      	ldr	r3, [r7, #0]
    23e8:	62dd      	str	r5, [r3, #44]	; 0x2c
    23ea:	e7f1      	b.n	23d0 <_tcc_interrupt_handler+0x20>
		}
	}
}
    23ec:	bc04      	pop	{r2}
    23ee:	4690      	mov	r8, r2
    23f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23f2:	46c0      	nop			; (mov r8, r8)
    23f4:	20000214 	.word	0x20000214
    23f8:	00002f34 	.word	0x00002f34

000023fc <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    23fc:	b510      	push	{r4, lr}
    23fe:	2000      	movs	r0, #0
    2400:	f7ff ffd6 	bl	23b0 <_tcc_interrupt_handler>
    2404:	bd10      	pop	{r4, pc}

00002406 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    2406:	1c93      	adds	r3, r2, #2
    2408:	009b      	lsls	r3, r3, #2
    240a:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    240c:	2a02      	cmp	r2, #2
    240e:	d009      	beq.n	2424 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2410:	2a03      	cmp	r2, #3
    2412:	d00c      	beq.n	242e <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    2414:	2301      	movs	r3, #1
    2416:	4093      	lsls	r3, r2
    2418:	001a      	movs	r2, r3
    241a:	7e03      	ldrb	r3, [r0, #24]
    241c:	4313      	orrs	r3, r2
    241e:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2420:	2000      	movs	r0, #0
    2422:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    2424:	7e03      	ldrb	r3, [r0, #24]
    2426:	2210      	movs	r2, #16
    2428:	4313      	orrs	r3, r2
    242a:	7603      	strb	r3, [r0, #24]
    242c:	e7f8      	b.n	2420 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    242e:	7e03      	ldrb	r3, [r0, #24]
    2430:	2220      	movs	r2, #32
    2432:	4313      	orrs	r3, r2
    2434:	7603      	strb	r3, [r0, #24]
    2436:	e7f3      	b.n	2420 <tc_register_callback+0x1a>

00002438 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2438:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    243a:	0080      	lsls	r0, r0, #2
    243c:	4b16      	ldr	r3, [pc, #88]	; (2498 <_tc_interrupt_handler+0x60>)
    243e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2440:	6823      	ldr	r3, [r4, #0]
    2442:	7b9d      	ldrb	r5, [r3, #14]
    2444:	7e22      	ldrb	r2, [r4, #24]
    2446:	7e63      	ldrb	r3, [r4, #25]
    2448:	4013      	ands	r3, r2
    244a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    244c:	07eb      	lsls	r3, r5, #31
    244e:	d406      	bmi.n	245e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    2450:	07ab      	lsls	r3, r5, #30
    2452:	d40b      	bmi.n	246c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    2454:	06eb      	lsls	r3, r5, #27
    2456:	d410      	bmi.n	247a <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    2458:	06ab      	lsls	r3, r5, #26
    245a:	d415      	bmi.n	2488 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    245c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    245e:	0020      	movs	r0, r4
    2460:	68a3      	ldr	r3, [r4, #8]
    2462:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    2464:	2301      	movs	r3, #1
    2466:	6822      	ldr	r2, [r4, #0]
    2468:	7393      	strb	r3, [r2, #14]
    246a:	e7f1      	b.n	2450 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    246c:	0020      	movs	r0, r4
    246e:	68e3      	ldr	r3, [r4, #12]
    2470:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    2472:	2302      	movs	r3, #2
    2474:	6822      	ldr	r2, [r4, #0]
    2476:	7393      	strb	r3, [r2, #14]
    2478:	e7ec      	b.n	2454 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    247a:	0020      	movs	r0, r4
    247c:	6923      	ldr	r3, [r4, #16]
    247e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    2480:	2310      	movs	r3, #16
    2482:	6822      	ldr	r2, [r4, #0]
    2484:	7393      	strb	r3, [r2, #14]
    2486:	e7e7      	b.n	2458 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2488:	0020      	movs	r0, r4
    248a:	6963      	ldr	r3, [r4, #20]
    248c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    248e:	6823      	ldr	r3, [r4, #0]
    2490:	2220      	movs	r2, #32
    2492:	739a      	strb	r2, [r3, #14]
}
    2494:	e7e2      	b.n	245c <_tc_interrupt_handler+0x24>
    2496:	46c0      	nop			; (mov r8, r8)
    2498:	20000218 	.word	0x20000218

0000249c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    249c:	b510      	push	{r4, lr}
    249e:	2000      	movs	r0, #0
    24a0:	f7ff ffca 	bl	2438 <_tc_interrupt_handler>
    24a4:	bd10      	pop	{r4, pc}

000024a6 <TC2_Handler>:
    24a6:	b510      	push	{r4, lr}
    24a8:	2001      	movs	r0, #1
    24aa:	f7ff ffc5 	bl	2438 <_tc_interrupt_handler>
    24ae:	bd10      	pop	{r4, pc}

000024b0 <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    24b0:	4b06      	ldr	r3, [pc, #24]	; (24cc <_tc_get_inst_index+0x1c>)
    24b2:	4298      	cmp	r0, r3
    24b4:	d008      	beq.n	24c8 <_tc_get_inst_index+0x18>
    24b6:	4a06      	ldr	r2, [pc, #24]	; (24d0 <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    24b8:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    24ba:	4290      	cmp	r0, r2
    24bc:	d001      	beq.n	24c2 <_tc_get_inst_index+0x12>
}
    24be:	0018      	movs	r0, r3
    24c0:	4770      	bx	lr
    24c2:	3301      	adds	r3, #1
			return i;
    24c4:	b2db      	uxtb	r3, r3
    24c6:	e7fa      	b.n	24be <_tc_get_inst_index+0xe>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    24c8:	2300      	movs	r3, #0
    24ca:	e7fb      	b.n	24c4 <_tc_get_inst_index+0x14>
    24cc:	42001800 	.word	0x42001800
    24d0:	42001c00 	.word	0x42001c00

000024d4 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    24d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    24d6:	b085      	sub	sp, #20
    24d8:	0004      	movs	r4, r0
    24da:	000d      	movs	r5, r1
    24dc:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    24de:	0008      	movs	r0, r1
    24e0:	f7ff ffe6 	bl	24b0 <_tc_get_inst_index>
    24e4:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    24e6:	ab03      	add	r3, sp, #12
    24e8:	2212      	movs	r2, #18
    24ea:	701a      	strb	r2, [r3, #0]
    24ec:	705a      	strb	r2, [r3, #1]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    24ee:	ab02      	add	r3, sp, #8
    24f0:	322e      	adds	r2, #46	; 0x2e
    24f2:	801a      	strh	r2, [r3, #0]
    24f4:	3240      	adds	r2, #64	; 0x40
    24f6:	805a      	strh	r2, [r3, #2]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    24f8:	2300      	movs	r3, #0
    24fa:	60a3      	str	r3, [r4, #8]
    24fc:	60e3      	str	r3, [r4, #12]
    24fe:	6123      	str	r3, [r4, #16]
    2500:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    2502:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    2504:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2506:	0082      	lsls	r2, r0, #2
    2508:	4b78      	ldr	r3, [pc, #480]	; (26ec <tc_init+0x218>)
    250a:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    250c:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    250e:	78b3      	ldrb	r3, [r6, #2]
    2510:	2b08      	cmp	r3, #8
    2512:	d006      	beq.n	2522 <tc_init+0x4e>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2514:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2516:	882b      	ldrh	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2518:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    251a:	07db      	lsls	r3, r3, #31
    251c:	d505      	bpl.n	252a <tc_init+0x56>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    251e:	b005      	add	sp, #20
    2520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    2522:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2524:	07fa      	lsls	r2, r7, #31
    2526:	d4fa      	bmi.n	251e <tc_init+0x4a>
    2528:	e7f4      	b.n	2514 <tc_init+0x40>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    252a:	7beb      	ldrb	r3, [r5, #15]
		return STATUS_ERR_DENIED;
    252c:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    252e:	06db      	lsls	r3, r3, #27
    2530:	d4f5      	bmi.n	251e <tc_init+0x4a>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2532:	882b      	ldrh	r3, [r5, #0]
    2534:	079b      	lsls	r3, r3, #30
    2536:	d4f2      	bmi.n	251e <tc_init+0x4a>
	if (config->pwm_channel[0].enabled) {
    2538:	7c33      	ldrb	r3, [r6, #16]
    253a:	2b00      	cmp	r3, #0
    253c:	d000      	beq.n	2540 <tc_init+0x6c>
    253e:	e07a      	b.n	2636 <tc_init+0x162>
	if (config->pwm_channel[1].enabled) {
    2540:	7f33      	ldrb	r3, [r6, #28]
    2542:	2b00      	cmp	r3, #0
    2544:	d000      	beq.n	2548 <tc_init+0x74>
    2546:	e082      	b.n	264e <tc_init+0x17a>
    2548:	4969      	ldr	r1, [pc, #420]	; (26f0 <tc_init+0x21c>)
    254a:	6a08      	ldr	r0, [r1, #32]
			inst_pm_apbmask[instance]);
    254c:	007a      	lsls	r2, r7, #1
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    254e:	ab02      	add	r3, sp, #8
    2550:	5ad3      	ldrh	r3, [r2, r3]
    2552:	4303      	orrs	r3, r0
    2554:	620b      	str	r3, [r1, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    2556:	78b3      	ldrb	r3, [r6, #2]
    2558:	2b08      	cmp	r3, #8
    255a:	d100      	bne.n	255e <tc_init+0x8a>
    255c:	e087      	b.n	266e <tc_init+0x19a>
	gclk_chan_config.source_generator = config->clock_source;
    255e:	7833      	ldrb	r3, [r6, #0]
    2560:	466a      	mov	r2, sp
    2562:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    2564:	ab03      	add	r3, sp, #12
    2566:	5ddf      	ldrb	r7, [r3, r7]
    2568:	4669      	mov	r1, sp
    256a:	0038      	movs	r0, r7
    256c:	f7ff fbfe 	bl	1d6c <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2570:	0038      	movs	r0, r7
    2572:	f7ff fbbd 	bl	1cf0 <system_gclk_chan_enable>
	ctrla_tmp =
    2576:	8931      	ldrh	r1, [r6, #8]
    2578:	88b3      	ldrh	r3, [r6, #4]
    257a:	430b      	orrs	r3, r1
			(uint32_t)config->wave_generation |
    257c:	78b1      	ldrb	r1, [r6, #2]
    257e:	79b2      	ldrb	r2, [r6, #6]
    2580:	4311      	orrs	r1, r2
	ctrla_tmp =
    2582:	4319      	orrs	r1, r3
	if (config->run_in_standby) {
    2584:	7873      	ldrb	r3, [r6, #1]
    2586:	2b00      	cmp	r3, #0
    2588:	d002      	beq.n	2590 <tc_init+0xbc>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    258a:	2380      	movs	r3, #128	; 0x80
    258c:	011b      	lsls	r3, r3, #4
    258e:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2590:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2592:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    2594:	b25b      	sxtb	r3, r3
    2596:	2b00      	cmp	r3, #0
    2598:	dbfb      	blt.n	2592 <tc_init+0xbe>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    259a:	8029      	strh	r1, [r5, #0]
	if (config->oneshot) {
    259c:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    259e:	1e4b      	subs	r3, r1, #1
    25a0:	4199      	sbcs	r1, r3
    25a2:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    25a4:	7bb3      	ldrb	r3, [r6, #14]
    25a6:	2b00      	cmp	r3, #0
    25a8:	d001      	beq.n	25ae <tc_init+0xda>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25aa:	2301      	movs	r3, #1
    25ac:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ae:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25b0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25b2:	b25b      	sxtb	r3, r3
    25b4:	2b00      	cmp	r3, #0
    25b6:	dbfb      	blt.n	25b0 <tc_init+0xdc>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25b8:	23ff      	movs	r3, #255	; 0xff
    25ba:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    25bc:	2900      	cmp	r1, #0
    25be:	d005      	beq.n	25cc <tc_init+0xf8>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25c0:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25c2:	7bd3      	ldrb	r3, [r2, #15]
		while (tc_is_syncing(module_inst)) {
    25c4:	b25b      	sxtb	r3, r3
    25c6:	2b00      	cmp	r3, #0
    25c8:	dbfb      	blt.n	25c2 <tc_init+0xee>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    25ca:	7169      	strb	r1, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    25cc:	7ab1      	ldrb	r1, [r6, #10]
		if (config->enable_capture_on_channel[i] == true) {
    25ce:	7af3      	ldrb	r3, [r6, #11]
    25d0:	2b00      	cmp	r3, #0
    25d2:	d001      	beq.n	25d8 <tc_init+0x104>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25d4:	2310      	movs	r3, #16
    25d6:	4319      	orrs	r1, r3
		if (config->enable_capture_on_channel[i] == true) {
    25d8:	7b33      	ldrb	r3, [r6, #12]
    25da:	2b00      	cmp	r3, #0
    25dc:	d001      	beq.n	25e2 <tc_init+0x10e>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    25de:	2320      	movs	r3, #32
    25e0:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25e2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25e4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25e6:	b25b      	sxtb	r3, r3
    25e8:	2b00      	cmp	r3, #0
    25ea:	dbfb      	blt.n	25e4 <tc_init+0x110>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    25ec:	71a9      	strb	r1, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    25ee:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    25f0:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    25f2:	b25b      	sxtb	r3, r3
    25f4:	2b00      	cmp	r3, #0
    25f6:	dbfb      	blt.n	25f0 <tc_init+0x11c>
	switch (module_inst->counter_size) {
    25f8:	7923      	ldrb	r3, [r4, #4]
    25fa:	2b04      	cmp	r3, #4
    25fc:	d03f      	beq.n	267e <tc_init+0x1aa>
    25fe:	2b08      	cmp	r3, #8
    2600:	d05e      	beq.n	26c0 <tc_init+0x1ec>
	return STATUS_ERR_INVALID_ARG;
    2602:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    2604:	2b00      	cmp	r3, #0
    2606:	d000      	beq.n	260a <tc_init+0x136>
    2608:	e789      	b.n	251e <tc_init+0x4a>
    260a:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    260c:	b25b      	sxtb	r3, r3
    260e:	2b00      	cmp	r3, #0
    2610:	dbfb      	blt.n	260a <tc_init+0x136>
				= config->counter_16_bit.value;
    2612:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    2614:	822b      	strh	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2616:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2618:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    261a:	b25b      	sxtb	r3, r3
    261c:	2b00      	cmp	r3, #0
    261e:	dbfb      	blt.n	2618 <tc_init+0x144>
					config->counter_16_bit.compare_capture_channel[0];
    2620:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2622:	832b      	strh	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2624:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2626:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2628:	b25b      	sxtb	r3, r3
    262a:	2b00      	cmp	r3, #0
    262c:	dbfb      	blt.n	2626 <tc_init+0x152>
					config->counter_16_bit.compare_capture_channel[1];
    262e:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2630:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2632:	2000      	movs	r0, #0
    2634:	e773      	b.n	251e <tc_init+0x4a>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2636:	a901      	add	r1, sp, #4
    2638:	2301      	movs	r3, #1
    263a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    263c:	2200      	movs	r2, #0
    263e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2640:	7e32      	ldrb	r2, [r6, #24]
    2642:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2644:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2646:	7d30      	ldrb	r0, [r6, #20]
    2648:	f7ff fc04 	bl	1e54 <system_pinmux_pin_set_config>
    264c:	e778      	b.n	2540 <tc_init+0x6c>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    264e:	a901      	add	r1, sp, #4
    2650:	2301      	movs	r3, #1
    2652:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2654:	2200      	movs	r2, #0
    2656:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2658:	3224      	adds	r2, #36	; 0x24
    265a:	18b2      	adds	r2, r6, r2
    265c:	7812      	ldrb	r2, [r2, #0]
    265e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2660:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    2662:	331f      	adds	r3, #31
    2664:	18f3      	adds	r3, r6, r3
    2666:	7818      	ldrb	r0, [r3, #0]
    2668:	f7ff fbf4 	bl	1e54 <system_pinmux_pin_set_config>
    266c:	e76c      	b.n	2548 <tc_init+0x74>
    266e:	6a08      	ldr	r0, [r1, #32]
				inst_pm_apbmask[instance + 1]);
    2670:	1c7a      	adds	r2, r7, #1
    2672:	0052      	lsls	r2, r2, #1
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    2674:	ab02      	add	r3, sp, #8
    2676:	5ad3      	ldrh	r3, [r2, r3]
    2678:	4303      	orrs	r3, r0
    267a:	620b      	str	r3, [r1, #32]
    267c:	e76f      	b.n	255e <tc_init+0x8a>
    267e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2680:	b25b      	sxtb	r3, r3
    2682:	2b00      	cmp	r3, #0
    2684:	dbfb      	blt.n	267e <tc_init+0x1aa>
					config->counter_8_bit.value;
    2686:	2328      	movs	r3, #40	; 0x28
    2688:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    268a:	742b      	strb	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    268c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    268e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2690:	b25b      	sxtb	r3, r3
    2692:	2b00      	cmp	r3, #0
    2694:	dbfb      	blt.n	268e <tc_init+0x1ba>
					config->counter_8_bit.period;
    2696:	2329      	movs	r3, #41	; 0x29
    2698:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    269a:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    269c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    269e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26a0:	b25b      	sxtb	r3, r3
    26a2:	2b00      	cmp	r3, #0
    26a4:	dbfb      	blt.n	269e <tc_init+0x1ca>
					config->counter_8_bit.compare_capture_channel[0];
    26a6:	232a      	movs	r3, #42	; 0x2a
    26a8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    26aa:	762b      	strb	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26ac:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ae:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26b0:	b25b      	sxtb	r3, r3
    26b2:	2b00      	cmp	r3, #0
    26b4:	dbfb      	blt.n	26ae <tc_init+0x1da>
					config->counter_8_bit.compare_capture_channel[1];
    26b6:	232b      	movs	r3, #43	; 0x2b
    26b8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    26ba:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    26bc:	2000      	movs	r0, #0
    26be:	e72e      	b.n	251e <tc_init+0x4a>
    26c0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26c2:	b25b      	sxtb	r3, r3
    26c4:	2b00      	cmp	r3, #0
    26c6:	dbfb      	blt.n	26c0 <tc_init+0x1ec>
				= config->counter_32_bit.value;
    26c8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    26ca:	612b      	str	r3, [r5, #16]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26cc:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26ce:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26d0:	b25b      	sxtb	r3, r3
    26d2:	2b00      	cmp	r3, #0
    26d4:	dbfb      	blt.n	26ce <tc_init+0x1fa>
			hw->COUNT32.CC[0].reg =
    26d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    26d8:	61ab      	str	r3, [r5, #24]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    26da:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    26dc:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    26de:	b25b      	sxtb	r3, r3
    26e0:	2b00      	cmp	r3, #0
    26e2:	dbfb      	blt.n	26dc <tc_init+0x208>
					config->counter_32_bit.compare_capture_channel[1];
    26e4:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    26e6:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    26e8:	2000      	movs	r0, #0
    26ea:	e718      	b.n	251e <tc_init+0x4a>
    26ec:	20000218 	.word	0x20000218
    26f0:	40000400 	.word	0x40000400

000026f4 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    26f4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    26f6:	6804      	ldr	r4, [r0, #0]
    26f8:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    26fa:	b25b      	sxtb	r3, r3
    26fc:	2b00      	cmp	r3, #0
    26fe:	dbfb      	blt.n	26f8 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2700:	7903      	ldrb	r3, [r0, #4]
    2702:	2b04      	cmp	r3, #4
    2704:	d005      	beq.n	2712 <tc_set_compare_value+0x1e>
    2706:	2b08      	cmp	r3, #8
    2708:	d014      	beq.n	2734 <tc_set_compare_value+0x40>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    270a:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    270c:	2b00      	cmp	r3, #0
    270e:	d008      	beq.n	2722 <tc_set_compare_value+0x2e>
}
    2710:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    2712:	2017      	movs	r0, #23
			if (channel_index <
    2714:	2901      	cmp	r1, #1
    2716:	d8fb      	bhi.n	2710 <tc_set_compare_value+0x1c>
						(uint8_t)compare;
    2718:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    271a:	1861      	adds	r1, r4, r1
    271c:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    271e:	2000      	movs	r0, #0
    2720:	e7f6      	b.n	2710 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2722:	2017      	movs	r0, #23
			if (channel_index <
    2724:	2901      	cmp	r1, #1
    2726:	d8f3      	bhi.n	2710 <tc_set_compare_value+0x1c>
						(uint16_t)compare;
    2728:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    272a:	310c      	adds	r1, #12
    272c:	0049      	lsls	r1, r1, #1
    272e:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    2730:	2000      	movs	r0, #0
    2732:	e7ed      	b.n	2710 <tc_set_compare_value+0x1c>
	return STATUS_ERR_INVALID_ARG;
    2734:	2017      	movs	r0, #23
			if (channel_index <
    2736:	2901      	cmp	r1, #1
    2738:	d8ea      	bhi.n	2710 <tc_set_compare_value+0x1c>
				tc_module->COUNT32.CC[channel_index].reg =
    273a:	3106      	adds	r1, #6
    273c:	0089      	lsls	r1, r1, #2
    273e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    2740:	2000      	movs	r0, #0
    2742:	e7e5      	b.n	2710 <tc_set_compare_value+0x1c>

00002744 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    2744:	e7fe      	b.n	2744 <Dummy_Handler>
	...

00002748 <Reset_Handler>:
{
    2748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    274a:	4a2a      	ldr	r2, [pc, #168]	; (27f4 <Reset_Handler+0xac>)
    274c:	4b2a      	ldr	r3, [pc, #168]	; (27f8 <Reset_Handler+0xb0>)
    274e:	429a      	cmp	r2, r3
    2750:	d011      	beq.n	2776 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    2752:	001a      	movs	r2, r3
    2754:	4b29      	ldr	r3, [pc, #164]	; (27fc <Reset_Handler+0xb4>)
    2756:	429a      	cmp	r2, r3
    2758:	d20d      	bcs.n	2776 <Reset_Handler+0x2e>
    275a:	4a29      	ldr	r2, [pc, #164]	; (2800 <Reset_Handler+0xb8>)
    275c:	3303      	adds	r3, #3
    275e:	1a9b      	subs	r3, r3, r2
    2760:	089b      	lsrs	r3, r3, #2
    2762:	3301      	adds	r3, #1
    2764:	009b      	lsls	r3, r3, #2
    2766:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    2768:	4823      	ldr	r0, [pc, #140]	; (27f8 <Reset_Handler+0xb0>)
    276a:	4922      	ldr	r1, [pc, #136]	; (27f4 <Reset_Handler+0xac>)
    276c:	588c      	ldr	r4, [r1, r2]
    276e:	5084      	str	r4, [r0, r2]
    2770:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    2772:	429a      	cmp	r2, r3
    2774:	d1fa      	bne.n	276c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    2776:	4a23      	ldr	r2, [pc, #140]	; (2804 <Reset_Handler+0xbc>)
    2778:	4b23      	ldr	r3, [pc, #140]	; (2808 <Reset_Handler+0xc0>)
    277a:	429a      	cmp	r2, r3
    277c:	d20a      	bcs.n	2794 <Reset_Handler+0x4c>
    277e:	43d3      	mvns	r3, r2
    2780:	4921      	ldr	r1, [pc, #132]	; (2808 <Reset_Handler+0xc0>)
    2782:	185b      	adds	r3, r3, r1
    2784:	2103      	movs	r1, #3
    2786:	438b      	bics	r3, r1
    2788:	3304      	adds	r3, #4
    278a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    278c:	2100      	movs	r1, #0
    278e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    2790:	4293      	cmp	r3, r2
    2792:	d1fc      	bne.n	278e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2794:	4a1d      	ldr	r2, [pc, #116]	; (280c <Reset_Handler+0xc4>)
    2796:	21ff      	movs	r1, #255	; 0xff
    2798:	4b1d      	ldr	r3, [pc, #116]	; (2810 <Reset_Handler+0xc8>)
    279a:	438b      	bics	r3, r1
    279c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    279e:	39fd      	subs	r1, #253	; 0xfd
    27a0:	2390      	movs	r3, #144	; 0x90
    27a2:	005b      	lsls	r3, r3, #1
    27a4:	4a1b      	ldr	r2, [pc, #108]	; (2814 <Reset_Handler+0xcc>)
    27a6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    27a8:	4a1b      	ldr	r2, [pc, #108]	; (2818 <Reset_Handler+0xd0>)
    27aa:	78d3      	ldrb	r3, [r2, #3]
    27ac:	2503      	movs	r5, #3
    27ae:	43ab      	bics	r3, r5
    27b0:	2402      	movs	r4, #2
    27b2:	4323      	orrs	r3, r4
    27b4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    27b6:	78d3      	ldrb	r3, [r2, #3]
    27b8:	270c      	movs	r7, #12
    27ba:	43bb      	bics	r3, r7
    27bc:	2608      	movs	r6, #8
    27be:	4333      	orrs	r3, r6
    27c0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    27c2:	4b16      	ldr	r3, [pc, #88]	; (281c <Reset_Handler+0xd4>)
    27c4:	7b98      	ldrb	r0, [r3, #14]
    27c6:	2230      	movs	r2, #48	; 0x30
    27c8:	4390      	bics	r0, r2
    27ca:	2220      	movs	r2, #32
    27cc:	4310      	orrs	r0, r2
    27ce:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    27d0:	7b99      	ldrb	r1, [r3, #14]
    27d2:	43b9      	bics	r1, r7
    27d4:	4331      	orrs	r1, r6
    27d6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    27d8:	7b9a      	ldrb	r2, [r3, #14]
    27da:	43aa      	bics	r2, r5
    27dc:	4322      	orrs	r2, r4
    27de:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    27e0:	4a0f      	ldr	r2, [pc, #60]	; (2820 <Reset_Handler+0xd8>)
    27e2:	6853      	ldr	r3, [r2, #4]
    27e4:	2180      	movs	r1, #128	; 0x80
    27e6:	430b      	orrs	r3, r1
    27e8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    27ea:	f000 faa9 	bl	2d40 <__libc_init_array>
        main();
    27ee:	f000 fa13 	bl	2c18 <main>
    27f2:	e7fe      	b.n	27f2 <Reset_Handler+0xaa>
    27f4:	00002fd0 	.word	0x00002fd0
    27f8:	20000000 	.word	0x20000000
    27fc:	20000020 	.word	0x20000020
    2800:	20000004 	.word	0x20000004
    2804:	20000020 	.word	0x20000020
    2808:	20000248 	.word	0x20000248
    280c:	e000ed00 	.word	0xe000ed00
    2810:	00000000 	.word	0x00000000
    2814:	41007000 	.word	0x41007000
    2818:	41005000 	.word	0x41005000
    281c:	41004800 	.word	0x41004800
    2820:	41004000 	.word	0x41004000

00002824 <set_color_green_indication>:
#define BUFFER_SET_COLOR_BLUE_PWM						{0x04, 0x20}
#define BUFFER_SET_COLOR_BLUE_PWM_TIMER					{0x02, 0x19}
#define BUFFER_SET_COLOR_BLUE_PWM_FLASH					{0x01, 0x82}


void set_color_green_indication(void) {
    2824:	b530      	push	{r4, r5, lr}
    2826:	b083      	sub	sp, #12
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    2828:	aa01      	add	r2, sp, #4
    282a:	4b09      	ldr	r3, [pc, #36]	; (2850 <set_color_green_indication+0x2c>)
    282c:	881b      	ldrh	r3, [r3, #0]
    282e:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_green;
    2830:	4b08      	ldr	r3, [pc, #32]	; (2854 <set_color_green_indication+0x30>)
    2832:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2834:	2231      	movs	r2, #49	; 0x31
    2836:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2838:	3a2f      	subs	r2, #47	; 0x2f
    283a:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    283c:	001d      	movs	r5, r3
    283e:	4c06      	ldr	r4, [pc, #24]	; (2858 <set_color_green_indication+0x34>)
    2840:	0029      	movs	r1, r5
    2842:	0020      	movs	r0, r4
    2844:	f7fe fe42 	bl	14cc <i2c_master_write_packet_wait>
    2848:	2800      	cmp	r0, #0
    284a:	d1f9      	bne.n	2840 <set_color_green_indication+0x1c>
         STATUS_OK) {
  }
}
    284c:	b003      	add	sp, #12
    284e:	bd30      	pop	{r4, r5, pc}
    2850:	00002f64 	.word	0x00002f64
    2854:	20000014 	.word	0x20000014
    2858:	20000220 	.word	0x20000220

0000285c <set_color_red_indication>:

void set_color_red_indication(void) {
    285c:	b530      	push	{r4, r5, lr}
    285e:	b083      	sub	sp, #12
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    2860:	aa01      	add	r2, sp, #4
    2862:	4b09      	ldr	r3, [pc, #36]	; (2888 <set_color_red_indication+0x2c>)
    2864:	889b      	ldrh	r3, [r3, #4]
    2866:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_red;
    2868:	4b08      	ldr	r3, [pc, #32]	; (288c <set_color_red_indication+0x30>)
    286a:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    286c:	2231      	movs	r2, #49	; 0x31
    286e:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2870:	3a2f      	subs	r2, #47	; 0x2f
    2872:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2874:	001d      	movs	r5, r3
    2876:	4c06      	ldr	r4, [pc, #24]	; (2890 <set_color_red_indication+0x34>)
    2878:	0029      	movs	r1, r5
    287a:	0020      	movs	r0, r4
    287c:	f7fe fe26 	bl	14cc <i2c_master_write_packet_wait>
    2880:	2800      	cmp	r0, #0
    2882:	d1f9      	bne.n	2878 <set_color_red_indication+0x1c>
         STATUS_OK) {
  }
}
    2884:	b003      	add	sp, #12
    2886:	bd30      	pop	{r4, r5, pc}
    2888:	00002f64 	.word	0x00002f64
    288c:	20000014 	.word	0x20000014
    2890:	20000220 	.word	0x20000220

00002894 <reset_chip>:
	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
	STATUS_OK) {
	}
}

void reset_chip(void) {
    2894:	b530      	push	{r4, r5, lr}
    2896:	b083      	sub	sp, #12

  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] = BUFFER_TURN_OFF_MAIN_DIGITAL;
    2898:	aa01      	add	r2, sp, #4
    289a:	2304      	movs	r3, #4
    289c:	7013      	strb	r3, [r2, #0]
    289e:	2300      	movs	r3, #0
    28a0:	7053      	strb	r3, [r2, #1]
  packet.data = buffer_reset_green_red_channel;
    28a2:	4b08      	ldr	r3, [pc, #32]	; (28c4 <reset_chip+0x30>)
    28a4:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    28a6:	2231      	movs	r2, #49	; 0x31
    28a8:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    28aa:	3a2f      	subs	r2, #47	; 0x2f
    28ac:	805a      	strh	r2, [r3, #2]

  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    28ae:	001d      	movs	r5, r3
    28b0:	4c05      	ldr	r4, [pc, #20]	; (28c8 <reset_chip+0x34>)
    28b2:	0029      	movs	r1, r5
    28b4:	0020      	movs	r0, r4
    28b6:	f7fe fe09 	bl	14cc <i2c_master_write_packet_wait>
    28ba:	2800      	cmp	r0, #0
    28bc:	d1f9      	bne.n	28b2 <reset_chip+0x1e>
                                       &packet)) != STATUS_OK) {
  }
}
    28be:	b003      	add	sp, #12
    28c0:	bd30      	pop	{r4, r5, pc}
    28c2:	46c0      	nop			; (mov r8, r8)
    28c4:	20000014 	.word	0x20000014
    28c8:	20000220 	.word	0x20000220

000028cc <set_battery_charge_routine>:

void set_battery_charge_routine(void) {
    28cc:	b530      	push	{r4, r5, lr}
    28ce:	b085      	sub	sp, #20

  uint8_t buffer_set_color_green_PWM[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN_PWM;
    28d0:	aa03      	add	r2, sp, #12
    28d2:	4b1e      	ldr	r3, [pc, #120]	; (294c <set_battery_charge_routine+0x80>)
    28d4:	8b19      	ldrh	r1, [r3, #24]
    28d6:	8011      	strh	r1, [r2, #0]
  uint8_t buffer_set_charge_routine_flash_period[DATA_LENGTH_PRIMARY] = BUFFER_SET_CHARGE_ROUTINE_FLASH_PERIOD;
    28d8:	8b98      	ldrh	r0, [r3, #28]
    28da:	a902      	add	r1, sp, #8
    28dc:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_charge_routine_trise_tfall[DATA_LENGTH_PRIMARY] = BUFFER_SET_CHARGE_ROUTINE_TRISE_TFALL;
    28de:	8c18      	ldrh	r0, [r3, #32]
    28e0:	a901      	add	r1, sp, #4
    28e2:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_charge_routine_PWM1_timer[DATA_LENGTH_PRIMARY] = BUFFER_SET_CHARGE_ROUTINE_PWM1_TIMER;
    28e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    28e6:	4669      	mov	r1, sp
    28e8:	800b      	strh	r3, [r1, #0]

  packet.address = KTD2026_DEVICE_ADDRESS;
    28ea:	4b19      	ldr	r3, [pc, #100]	; (2950 <set_battery_charge_routine+0x84>)
    28ec:	2131      	movs	r1, #49	; 0x31
    28ee:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    28f0:	392f      	subs	r1, #47	; 0x2f
    28f2:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_green_PWM;
    28f4:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    28f6:	001d      	movs	r5, r3
    28f8:	4c16      	ldr	r4, [pc, #88]	; (2954 <set_battery_charge_routine+0x88>)
    28fa:	0029      	movs	r1, r5
    28fc:	0020      	movs	r0, r4
    28fe:	f7fe fde5 	bl	14cc <i2c_master_write_packet_wait>
    2902:	2800      	cmp	r0, #0
    2904:	d1f9      	bne.n	28fa <set_battery_charge_routine+0x2e>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_flash_period;
    2906:	aa02      	add	r2, sp, #8
    2908:	4b11      	ldr	r3, [pc, #68]	; (2950 <set_battery_charge_routine+0x84>)
    290a:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    290c:	001d      	movs	r5, r3
    290e:	4c11      	ldr	r4, [pc, #68]	; (2954 <set_battery_charge_routine+0x88>)
    2910:	0029      	movs	r1, r5
    2912:	0020      	movs	r0, r4
    2914:	f7fe fdda 	bl	14cc <i2c_master_write_packet_wait>
    2918:	2800      	cmp	r0, #0
    291a:	d1f9      	bne.n	2910 <set_battery_charge_routine+0x44>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_trise_tfall;
    291c:	aa01      	add	r2, sp, #4
    291e:	4b0c      	ldr	r3, [pc, #48]	; (2950 <set_battery_charge_routine+0x84>)
    2920:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2922:	001d      	movs	r5, r3
    2924:	4c0b      	ldr	r4, [pc, #44]	; (2954 <set_battery_charge_routine+0x88>)
    2926:	0029      	movs	r1, r5
    2928:	0020      	movs	r0, r4
    292a:	f7fe fdcf 	bl	14cc <i2c_master_write_packet_wait>
    292e:	2800      	cmp	r0, #0
    2930:	d1f9      	bne.n	2926 <set_battery_charge_routine+0x5a>
                                       &packet)) != STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_PWM1_timer;
    2932:	4b07      	ldr	r3, [pc, #28]	; (2950 <set_battery_charge_routine+0x84>)
    2934:	466a      	mov	r2, sp
    2936:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2938:	001d      	movs	r5, r3
    293a:	4c06      	ldr	r4, [pc, #24]	; (2954 <set_battery_charge_routine+0x88>)
    293c:	0029      	movs	r1, r5
    293e:	0020      	movs	r0, r4
    2940:	f7fe fdc4 	bl	14cc <i2c_master_write_packet_wait>
    2944:	2800      	cmp	r0, #0
    2946:	d1f9      	bne.n	293c <set_battery_charge_routine+0x70>
                                       &packet)) != STATUS_OK) {
  }
}
    2948:	b005      	add	sp, #20
    294a:	bd30      	pop	{r4, r5, pc}
    294c:	00002f64 	.word	0x00002f64
    2950:	20000014 	.word	0x20000014
    2954:	20000220 	.word	0x20000220

00002958 <set_battery_low_routine>:

void set_battery_low_routine(void) {
    2958:	b530      	push	{r4, r5, lr}
    295a:	b085      	sub	sp, #20

  uint8_t buffer_set_color_red_PWM[DATA_LENGTH_PRIMARY]				= BUFFER_SET_COLOR_RED_PWM;
    295c:	aa03      	add	r2, sp, #12
    295e:	4b1e      	ldr	r3, [pc, #120]	; (29d8 <set_battery_low_routine+0x80>)
    2960:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2962:	8011      	strh	r1, [r2, #0]
  uint8_t buffer_set_low_routine_flash_period[DATA_LENGTH_PRIMARY]	= BUFFER_SET_LOW_ROUTINE_FLASH_PERIOD;
    2964:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
    2966:	a902      	add	r1, sp, #8
    2968:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY]	= BUFFER_SET_LOW_ROUTINE_TRISE_TFALL;
    296a:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    296c:	a901      	add	r1, sp, #4
    296e:	8008      	strh	r0, [r1, #0]
  uint8_t buffer_set_low_routine_brightness[DATA_LENGTH_PRIMARY]	= BUFFER_SET_COLOR_RED_BRIGHTNESS;
    2970:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2972:	4669      	mov	r1, sp
    2974:	800b      	strh	r3, [r1, #0]

  packet.address = KTD2026_DEVICE_ADDRESS;
    2976:	4b19      	ldr	r3, [pc, #100]	; (29dc <set_battery_low_routine+0x84>)
    2978:	2131      	movs	r1, #49	; 0x31
    297a:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    297c:	392f      	subs	r1, #47	; 0x2f
    297e:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_red_PWM;
    2980:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2982:	001d      	movs	r5, r3
    2984:	4c16      	ldr	r4, [pc, #88]	; (29e0 <set_battery_low_routine+0x88>)
    2986:	0029      	movs	r1, r5
    2988:	0020      	movs	r0, r4
    298a:	f7fe fd9f 	bl	14cc <i2c_master_write_packet_wait>
    298e:	2800      	cmp	r0, #0
    2990:	d1f9      	bne.n	2986 <set_battery_low_routine+0x2e>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_flash_period;
    2992:	aa02      	add	r2, sp, #8
    2994:	4b11      	ldr	r3, [pc, #68]	; (29dc <set_battery_low_routine+0x84>)
    2996:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2998:	001d      	movs	r5, r3
    299a:	4c11      	ldr	r4, [pc, #68]	; (29e0 <set_battery_low_routine+0x88>)
    299c:	0029      	movs	r1, r5
    299e:	0020      	movs	r0, r4
    29a0:	f7fe fd94 	bl	14cc <i2c_master_write_packet_wait>
    29a4:	2800      	cmp	r0, #0
    29a6:	d1f9      	bne.n	299c <set_battery_low_routine+0x44>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_brightness;
    29a8:	4b0c      	ldr	r3, [pc, #48]	; (29dc <set_battery_low_routine+0x84>)
    29aa:	466a      	mov	r2, sp
    29ac:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    29ae:	001d      	movs	r5, r3
    29b0:	4c0b      	ldr	r4, [pc, #44]	; (29e0 <set_battery_low_routine+0x88>)
    29b2:	0029      	movs	r1, r5
    29b4:	0020      	movs	r0, r4
    29b6:	f7fe fd89 	bl	14cc <i2c_master_write_packet_wait>
    29ba:	2800      	cmp	r0, #0
    29bc:	d1f9      	bne.n	29b2 <set_battery_low_routine+0x5a>
                                       &packet)) != STATUS_OK) {
  }

	packet.data = buffer_set_low_routine_trise_tfall;
    29be:	aa01      	add	r2, sp, #4
    29c0:	4b06      	ldr	r3, [pc, #24]	; (29dc <set_battery_low_routine+0x84>)
    29c2:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    29c4:	001d      	movs	r5, r3
    29c6:	4c06      	ldr	r4, [pc, #24]	; (29e0 <set_battery_low_routine+0x88>)
    29c8:	0029      	movs	r1, r5
    29ca:	0020      	movs	r0, r4
    29cc:	f7fe fd7e 	bl	14cc <i2c_master_write_packet_wait>
    29d0:	2800      	cmp	r0, #0
    29d2:	d1f9      	bne.n	29c8 <set_battery_low_routine+0x70>
	&packet)) != STATUS_OK) {
	}
}
    29d4:	b005      	add	sp, #20
    29d6:	bd30      	pop	{r4, r5, pc}
    29d8:	00002f64 	.word	0x00002f64
    29dc:	20000014 	.word	0x20000014
    29e0:	20000220 	.word	0x20000220

000029e4 <set_motor_speed_1_indication>:





void set_motor_speed_1_indication(void){
    29e4:	b530      	push	{r4, r5, lr}
    29e6:	b083      	sub	sp, #12

  uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    29e8:	aa01      	add	r2, sp, #4
    29ea:	4b10      	ldr	r3, [pc, #64]	; (2a2c <set_motor_speed_1_indication+0x48>)
    29ec:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    29ee:	8011      	strh	r1, [r2, #0]
  uint8_t buffer_set_blue_lowest_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_LOWEST_BRIGTHNESS;
    29f0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    29f2:	4669      	mov	r1, sp
    29f4:	800b      	strh	r3, [r1, #0]

  packet.address = KTD2026_DEVICE_ADDRESS;
    29f6:	4b0e      	ldr	r3, [pc, #56]	; (2a30 <set_motor_speed_1_indication+0x4c>)
    29f8:	2131      	movs	r1, #49	; 0x31
    29fa:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    29fc:	392f      	subs	r1, #47	; 0x2f
    29fe:	8059      	strh	r1, [r3, #2]
  
  packet.data = buffer_set_blue;
    2a00:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2a02:	001d      	movs	r5, r3
    2a04:	4c0b      	ldr	r4, [pc, #44]	; (2a34 <set_motor_speed_1_indication+0x50>)
    2a06:	0029      	movs	r1, r5
    2a08:	0020      	movs	r0, r4
    2a0a:	f7fe fd5f 	bl	14cc <i2c_master_write_packet_wait>
    2a0e:	2800      	cmp	r0, #0
    2a10:	d1f9      	bne.n	2a06 <set_motor_speed_1_indication+0x22>
  &packet)) != STATUS_OK) {
  }

  packet.data = buffer_set_blue_lowest_brightness;
    2a12:	4b07      	ldr	r3, [pc, #28]	; (2a30 <set_motor_speed_1_indication+0x4c>)
    2a14:	466a      	mov	r2, sp
    2a16:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2a18:	001d      	movs	r5, r3
    2a1a:	4c06      	ldr	r4, [pc, #24]	; (2a34 <set_motor_speed_1_indication+0x50>)
    2a1c:	0029      	movs	r1, r5
    2a1e:	0020      	movs	r0, r4
    2a20:	f7fe fd54 	bl	14cc <i2c_master_write_packet_wait>
    2a24:	2800      	cmp	r0, #0
    2a26:	d1f9      	bne.n	2a1c <set_motor_speed_1_indication+0x38>
  &packet)) != STATUS_OK) {
  }

}
    2a28:	b003      	add	sp, #12
    2a2a:	bd30      	pop	{r4, r5, pc}
    2a2c:	00002f64 	.word	0x00002f64
    2a30:	20000014 	.word	0x20000014
    2a34:	20000220 	.word	0x20000220

00002a38 <set_motor_speed_2_indication>:

void set_motor_speed_2_indication(void){
    2a38:	b530      	push	{r4, r5, lr}
    2a3a:	b083      	sub	sp, #12

	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2a3c:	aa01      	add	r2, sp, #4
    2a3e:	4b11      	ldr	r3, [pc, #68]	; (2a84 <set_motor_speed_2_indication+0x4c>)
    2a40:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2a42:	8011      	strh	r1, [r2, #0]
	uint8_t buffer_set_blue_low_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_LOW_BRIGTHNESS;
    2a44:	2140      	movs	r1, #64	; 0x40
    2a46:	5a5b      	ldrh	r3, [r3, r1]
    2a48:	4669      	mov	r1, sp
    2a4a:	800b      	strh	r3, [r1, #0]

	packet.address = KTD2026_DEVICE_ADDRESS;
    2a4c:	4b0e      	ldr	r3, [pc, #56]	; (2a88 <set_motor_speed_2_indication+0x50>)
    2a4e:	2131      	movs	r1, #49	; 0x31
    2a50:	8019      	strh	r1, [r3, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    2a52:	392f      	subs	r1, #47	; 0x2f
    2a54:	8059      	strh	r1, [r3, #2]

	packet.data = buffer_set_blue;
    2a56:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2a58:	001d      	movs	r5, r3
    2a5a:	4c0c      	ldr	r4, [pc, #48]	; (2a8c <set_motor_speed_2_indication+0x54>)
    2a5c:	0029      	movs	r1, r5
    2a5e:	0020      	movs	r0, r4
    2a60:	f7fe fd34 	bl	14cc <i2c_master_write_packet_wait>
    2a64:	2800      	cmp	r0, #0
    2a66:	d1f9      	bne.n	2a5c <set_motor_speed_2_indication+0x24>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_low_brightness;
    2a68:	4b07      	ldr	r3, [pc, #28]	; (2a88 <set_motor_speed_2_indication+0x50>)
    2a6a:	466a      	mov	r2, sp
    2a6c:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2a6e:	001d      	movs	r5, r3
    2a70:	4c06      	ldr	r4, [pc, #24]	; (2a8c <set_motor_speed_2_indication+0x54>)
    2a72:	0029      	movs	r1, r5
    2a74:	0020      	movs	r0, r4
    2a76:	f7fe fd29 	bl	14cc <i2c_master_write_packet_wait>
    2a7a:	2800      	cmp	r0, #0
    2a7c:	d1f9      	bne.n	2a72 <set_motor_speed_2_indication+0x3a>
	&packet)) != STATUS_OK) {
	}

}
    2a7e:	b003      	add	sp, #12
    2a80:	bd30      	pop	{r4, r5, pc}
    2a82:	46c0      	nop			; (mov r8, r8)
    2a84:	00002f64 	.word	0x00002f64
    2a88:	20000014 	.word	0x20000014
    2a8c:	20000220 	.word	0x20000220

00002a90 <set_motor_speed_3_indication>:

void set_motor_speed_3_indication(void){
    2a90:	b530      	push	{r4, r5, lr}
    2a92:	b083      	sub	sp, #12
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2a94:	aa01      	add	r2, sp, #4
    2a96:	4b11      	ldr	r3, [pc, #68]	; (2adc <set_motor_speed_3_indication+0x4c>)
    2a98:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2a9a:	8011      	strh	r1, [r2, #0]
	uint8_t buffer_set_blue_high_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_HIGH_BRIGTHNESS;
    2a9c:	2144      	movs	r1, #68	; 0x44
    2a9e:	5a5b      	ldrh	r3, [r3, r1]
    2aa0:	4669      	mov	r1, sp
    2aa2:	800b      	strh	r3, [r1, #0]

	packet.address = KTD2026_DEVICE_ADDRESS;
    2aa4:	4b0e      	ldr	r3, [pc, #56]	; (2ae0 <set_motor_speed_3_indication+0x50>)
    2aa6:	2131      	movs	r1, #49	; 0x31
    2aa8:	8019      	strh	r1, [r3, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    2aaa:	392f      	subs	r1, #47	; 0x2f
    2aac:	8059      	strh	r1, [r3, #2]

	packet.data = buffer_set_blue;
    2aae:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2ab0:	001d      	movs	r5, r3
    2ab2:	4c0c      	ldr	r4, [pc, #48]	; (2ae4 <set_motor_speed_3_indication+0x54>)
    2ab4:	0029      	movs	r1, r5
    2ab6:	0020      	movs	r0, r4
    2ab8:	f7fe fd08 	bl	14cc <i2c_master_write_packet_wait>
    2abc:	2800      	cmp	r0, #0
    2abe:	d1f9      	bne.n	2ab4 <set_motor_speed_3_indication+0x24>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_high_brightness;
    2ac0:	4b07      	ldr	r3, [pc, #28]	; (2ae0 <set_motor_speed_3_indication+0x50>)
    2ac2:	466a      	mov	r2, sp
    2ac4:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2ac6:	001d      	movs	r5, r3
    2ac8:	4c06      	ldr	r4, [pc, #24]	; (2ae4 <set_motor_speed_3_indication+0x54>)
    2aca:	0029      	movs	r1, r5
    2acc:	0020      	movs	r0, r4
    2ace:	f7fe fcfd 	bl	14cc <i2c_master_write_packet_wait>
    2ad2:	2800      	cmp	r0, #0
    2ad4:	d1f9      	bne.n	2aca <set_motor_speed_3_indication+0x3a>
	&packet)) != STATUS_OK) {
	}
}
    2ad6:	b003      	add	sp, #12
    2ad8:	bd30      	pop	{r4, r5, pc}
    2ada:	46c0      	nop			; (mov r8, r8)
    2adc:	00002f64 	.word	0x00002f64
    2ae0:	20000014 	.word	0x20000014
    2ae4:	20000220 	.word	0x20000220

00002ae8 <set_motor_pulsating_indication>:

void set_motor_pulsating_indication(void){
    2ae8:	b530      	push	{r4, r5, lr}
    2aea:	b085      	sub	sp, #20
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2aec:	aa03      	add	r2, sp, #12
    2aee:	4b1f      	ldr	r3, [pc, #124]	; (2b6c <set_motor_pulsating_indication+0x84>)
    2af0:	8f19      	ldrh	r1, [r3, #56]	; 0x38
    2af2:	8011      	strh	r1, [r2, #0]
	uint8_t buffer_set_blue_high_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_HIGH_BRIGTHNESS;
    2af4:	2144      	movs	r1, #68	; 0x44
    2af6:	5a58      	ldrh	r0, [r3, r1]
    2af8:	a902      	add	r1, sp, #8
    2afa:	8008      	strh	r0, [r1, #0]
	uint8_t buffer_set_blue_pwm_timer[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM_TIMER;
    2afc:	2148      	movs	r1, #72	; 0x48
    2afe:	5a58      	ldrh	r0, [r3, r1]
    2b00:	a901      	add	r1, sp, #4
    2b02:	8008      	strh	r0, [r1, #0]
	uint8_t buffer_set_blue_pwm_flash[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM_FLASH;
    2b04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    2b06:	4669      	mov	r1, sp
    2b08:	800b      	strh	r3, [r1, #0]


	packet.address = KTD2026_DEVICE_ADDRESS;
    2b0a:	4b19      	ldr	r3, [pc, #100]	; (2b70 <set_motor_pulsating_indication+0x88>)
    2b0c:	2131      	movs	r1, #49	; 0x31
    2b0e:	8019      	strh	r1, [r3, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    2b10:	392f      	subs	r1, #47	; 0x2f
    2b12:	8059      	strh	r1, [r3, #2]

	packet.data = buffer_set_blue;
    2b14:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b16:	001d      	movs	r5, r3
    2b18:	4c16      	ldr	r4, [pc, #88]	; (2b74 <set_motor_pulsating_indication+0x8c>)
    2b1a:	0029      	movs	r1, r5
    2b1c:	0020      	movs	r0, r4
    2b1e:	f7fe fcd5 	bl	14cc <i2c_master_write_packet_wait>
    2b22:	2800      	cmp	r0, #0
    2b24:	d1f9      	bne.n	2b1a <set_motor_pulsating_indication+0x32>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_high_brightness;
    2b26:	aa02      	add	r2, sp, #8
    2b28:	4b11      	ldr	r3, [pc, #68]	; (2b70 <set_motor_pulsating_indication+0x88>)
    2b2a:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b2c:	001d      	movs	r5, r3
    2b2e:	4c11      	ldr	r4, [pc, #68]	; (2b74 <set_motor_pulsating_indication+0x8c>)
    2b30:	0029      	movs	r1, r5
    2b32:	0020      	movs	r0, r4
    2b34:	f7fe fcca 	bl	14cc <i2c_master_write_packet_wait>
    2b38:	2800      	cmp	r0, #0
    2b3a:	d1f9      	bne.n	2b30 <set_motor_pulsating_indication+0x48>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_pwm_timer;
    2b3c:	aa01      	add	r2, sp, #4
    2b3e:	4b0c      	ldr	r3, [pc, #48]	; (2b70 <set_motor_pulsating_indication+0x88>)
    2b40:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b42:	001d      	movs	r5, r3
    2b44:	4c0b      	ldr	r4, [pc, #44]	; (2b74 <set_motor_pulsating_indication+0x8c>)
    2b46:	0029      	movs	r1, r5
    2b48:	0020      	movs	r0, r4
    2b4a:	f7fe fcbf 	bl	14cc <i2c_master_write_packet_wait>
    2b4e:	2800      	cmp	r0, #0
    2b50:	d1f9      	bne.n	2b46 <set_motor_pulsating_indication+0x5e>
	&packet)) != STATUS_OK) {
	}
	
	packet.data = buffer_set_blue_pwm_flash;
    2b52:	4b07      	ldr	r3, [pc, #28]	; (2b70 <set_motor_pulsating_indication+0x88>)
    2b54:	466a      	mov	r2, sp
    2b56:	605a      	str	r2, [r3, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2b58:	001d      	movs	r5, r3
    2b5a:	4c06      	ldr	r4, [pc, #24]	; (2b74 <set_motor_pulsating_indication+0x8c>)
    2b5c:	0029      	movs	r1, r5
    2b5e:	0020      	movs	r0, r4
    2b60:	f7fe fcb4 	bl	14cc <i2c_master_write_packet_wait>
    2b64:	2800      	cmp	r0, #0
    2b66:	d1f9      	bne.n	2b5c <set_motor_pulsating_indication+0x74>
	&packet)) != STATUS_OK) {
	}

}
    2b68:	b005      	add	sp, #20
    2b6a:	bd30      	pop	{r4, r5, pc}
    2b6c:	00002f64 	.word	0x00002f64
    2b70:	20000014 	.word	0x20000014
    2b74:	20000220 	.word	0x20000220

00002b78 <i2c_master_setup>:


void i2c_master_setup(void) {
    2b78:	b530      	push	{r4, r5, lr}
    2b7a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2b7c:	aa01      	add	r2, sp, #4
    2b7e:	2364      	movs	r3, #100	; 0x64
    2b80:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2b82:	4b20      	ldr	r3, [pc, #128]	; (2c04 <i2c_master_setup+0x8c>)
    2b84:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2b86:	2300      	movs	r3, #0
    2b88:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2b8a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2b8c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2b8e:	2180      	movs	r1, #128	; 0x80
    2b90:	0389      	lsls	r1, r1, #14
    2b92:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2b94:	2101      	movs	r1, #1
    2b96:	4249      	negs	r1, r1
    2b98:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2b9a:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2b9c:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    2b9e:	3125      	adds	r1, #37	; 0x25
    2ba0:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2ba2:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2ba4:	3108      	adds	r1, #8
    2ba6:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2ba8:	3101      	adds	r1, #1
    2baa:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2bac:	3101      	adds	r1, #1
    2bae:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2bb0:	33d7      	adds	r3, #215	; 0xd7
    2bb2:	8613      	strh	r3, [r2, #48]	; 0x30
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
    2bb4:	4b14      	ldr	r3, [pc, #80]	; (2c08 <i2c_master_setup+0x90>)
    2bb6:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    2bb8:	4c14      	ldr	r4, [pc, #80]	; (2c0c <i2c_master_setup+0x94>)
    2bba:	4915      	ldr	r1, [pc, #84]	; (2c10 <i2c_master_setup+0x98>)
    2bbc:	0020      	movs	r0, r4
    2bbe:	f7fe fb0f 	bl	11e0 <i2c_master_init>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2bc2:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2bc4:	2207      	movs	r2, #7
    2bc6:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    2bc8:	421a      	tst	r2, r3
    2bca:	d1fc      	bne.n	2bc6 <i2c_master_setup+0x4e>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2bcc:	6823      	ldr	r3, [r4, #0]
    2bce:	2202      	movs	r2, #2
    2bd0:	4313      	orrs	r3, r2
    2bd2:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2bd4:	4d0d      	ldr	r5, [pc, #52]	; (2c0c <i2c_master_setup+0x94>)
    2bd6:	6828      	ldr	r0, [r5, #0]
    2bd8:	f7fe fe98 	bl	190c <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2bdc:	231f      	movs	r3, #31
    2bde:	4018      	ands	r0, r3
    2be0:	3b1e      	subs	r3, #30
    2be2:	4083      	lsls	r3, r0
    2be4:	4a0b      	ldr	r2, [pc, #44]	; (2c14 <i2c_master_setup+0x9c>)
    2be6:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2be8:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    2bea:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2bec:	2110      	movs	r1, #16
    2bee:	8b62      	ldrh	r2, [r4, #26]
    2bf0:	420a      	tst	r2, r1
    2bf2:	d104      	bne.n	2bfe <i2c_master_setup+0x86>
		timeout_counter++;
    2bf4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2bf6:	4283      	cmp	r3, r0
    2bf8:	d3f9      	bcc.n	2bee <i2c_master_setup+0x76>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2bfa:	2310      	movs	r3, #16
    2bfc:	8363      	strh	r3, [r4, #26]
  i2c_master_enable(&i2c_master_instance);
}
    2bfe:	b00f      	add	sp, #60	; 0x3c
    2c00:	bd30      	pop	{r4, r5, pc}
    2c02:	46c0      	nop			; (mov r8, r8)
    2c04:	00000d48 	.word	0x00000d48
    2c08:	00002710 	.word	0x00002710
    2c0c:	20000220 	.word	0x20000220
    2c10:	42001000 	.word	0x42001000
    2c14:	e000e100 	.word	0xe000e100

00002c18 <main>:
#include "system_logic.h"

#include "adc_sample.h"


int main(void) {
    2c18:	b510      	push	{r4, lr}
  startup_sys_configs();
    2c1a:	f7fe fa1b 	bl	1054 <startup_sys_configs>
  while (true) {
    system_state();										// Get latest system_state
    2c1e:	f7fe fa8b 	bl	1138 <system_state>
    system_logic();										// Invoke System Logic
    2c22:	f7fe f887 	bl	d34 <system_logic>
    2c26:	e7fa      	b.n	2c1e <main+0x6>

00002c28 <__udivsi3>:
    2c28:	2200      	movs	r2, #0
    2c2a:	0843      	lsrs	r3, r0, #1
    2c2c:	428b      	cmp	r3, r1
    2c2e:	d374      	bcc.n	2d1a <__udivsi3+0xf2>
    2c30:	0903      	lsrs	r3, r0, #4
    2c32:	428b      	cmp	r3, r1
    2c34:	d35f      	bcc.n	2cf6 <__udivsi3+0xce>
    2c36:	0a03      	lsrs	r3, r0, #8
    2c38:	428b      	cmp	r3, r1
    2c3a:	d344      	bcc.n	2cc6 <__udivsi3+0x9e>
    2c3c:	0b03      	lsrs	r3, r0, #12
    2c3e:	428b      	cmp	r3, r1
    2c40:	d328      	bcc.n	2c94 <__udivsi3+0x6c>
    2c42:	0c03      	lsrs	r3, r0, #16
    2c44:	428b      	cmp	r3, r1
    2c46:	d30d      	bcc.n	2c64 <__udivsi3+0x3c>
    2c48:	22ff      	movs	r2, #255	; 0xff
    2c4a:	0209      	lsls	r1, r1, #8
    2c4c:	ba12      	rev	r2, r2
    2c4e:	0c03      	lsrs	r3, r0, #16
    2c50:	428b      	cmp	r3, r1
    2c52:	d302      	bcc.n	2c5a <__udivsi3+0x32>
    2c54:	1212      	asrs	r2, r2, #8
    2c56:	0209      	lsls	r1, r1, #8
    2c58:	d065      	beq.n	2d26 <__udivsi3+0xfe>
    2c5a:	0b03      	lsrs	r3, r0, #12
    2c5c:	428b      	cmp	r3, r1
    2c5e:	d319      	bcc.n	2c94 <__udivsi3+0x6c>
    2c60:	e000      	b.n	2c64 <__udivsi3+0x3c>
    2c62:	0a09      	lsrs	r1, r1, #8
    2c64:	0bc3      	lsrs	r3, r0, #15
    2c66:	428b      	cmp	r3, r1
    2c68:	d301      	bcc.n	2c6e <__udivsi3+0x46>
    2c6a:	03cb      	lsls	r3, r1, #15
    2c6c:	1ac0      	subs	r0, r0, r3
    2c6e:	4152      	adcs	r2, r2
    2c70:	0b83      	lsrs	r3, r0, #14
    2c72:	428b      	cmp	r3, r1
    2c74:	d301      	bcc.n	2c7a <__udivsi3+0x52>
    2c76:	038b      	lsls	r3, r1, #14
    2c78:	1ac0      	subs	r0, r0, r3
    2c7a:	4152      	adcs	r2, r2
    2c7c:	0b43      	lsrs	r3, r0, #13
    2c7e:	428b      	cmp	r3, r1
    2c80:	d301      	bcc.n	2c86 <__udivsi3+0x5e>
    2c82:	034b      	lsls	r3, r1, #13
    2c84:	1ac0      	subs	r0, r0, r3
    2c86:	4152      	adcs	r2, r2
    2c88:	0b03      	lsrs	r3, r0, #12
    2c8a:	428b      	cmp	r3, r1
    2c8c:	d301      	bcc.n	2c92 <__udivsi3+0x6a>
    2c8e:	030b      	lsls	r3, r1, #12
    2c90:	1ac0      	subs	r0, r0, r3
    2c92:	4152      	adcs	r2, r2
    2c94:	0ac3      	lsrs	r3, r0, #11
    2c96:	428b      	cmp	r3, r1
    2c98:	d301      	bcc.n	2c9e <__udivsi3+0x76>
    2c9a:	02cb      	lsls	r3, r1, #11
    2c9c:	1ac0      	subs	r0, r0, r3
    2c9e:	4152      	adcs	r2, r2
    2ca0:	0a83      	lsrs	r3, r0, #10
    2ca2:	428b      	cmp	r3, r1
    2ca4:	d301      	bcc.n	2caa <__udivsi3+0x82>
    2ca6:	028b      	lsls	r3, r1, #10
    2ca8:	1ac0      	subs	r0, r0, r3
    2caa:	4152      	adcs	r2, r2
    2cac:	0a43      	lsrs	r3, r0, #9
    2cae:	428b      	cmp	r3, r1
    2cb0:	d301      	bcc.n	2cb6 <__udivsi3+0x8e>
    2cb2:	024b      	lsls	r3, r1, #9
    2cb4:	1ac0      	subs	r0, r0, r3
    2cb6:	4152      	adcs	r2, r2
    2cb8:	0a03      	lsrs	r3, r0, #8
    2cba:	428b      	cmp	r3, r1
    2cbc:	d301      	bcc.n	2cc2 <__udivsi3+0x9a>
    2cbe:	020b      	lsls	r3, r1, #8
    2cc0:	1ac0      	subs	r0, r0, r3
    2cc2:	4152      	adcs	r2, r2
    2cc4:	d2cd      	bcs.n	2c62 <__udivsi3+0x3a>
    2cc6:	09c3      	lsrs	r3, r0, #7
    2cc8:	428b      	cmp	r3, r1
    2cca:	d301      	bcc.n	2cd0 <__udivsi3+0xa8>
    2ccc:	01cb      	lsls	r3, r1, #7
    2cce:	1ac0      	subs	r0, r0, r3
    2cd0:	4152      	adcs	r2, r2
    2cd2:	0983      	lsrs	r3, r0, #6
    2cd4:	428b      	cmp	r3, r1
    2cd6:	d301      	bcc.n	2cdc <__udivsi3+0xb4>
    2cd8:	018b      	lsls	r3, r1, #6
    2cda:	1ac0      	subs	r0, r0, r3
    2cdc:	4152      	adcs	r2, r2
    2cde:	0943      	lsrs	r3, r0, #5
    2ce0:	428b      	cmp	r3, r1
    2ce2:	d301      	bcc.n	2ce8 <__udivsi3+0xc0>
    2ce4:	014b      	lsls	r3, r1, #5
    2ce6:	1ac0      	subs	r0, r0, r3
    2ce8:	4152      	adcs	r2, r2
    2cea:	0903      	lsrs	r3, r0, #4
    2cec:	428b      	cmp	r3, r1
    2cee:	d301      	bcc.n	2cf4 <__udivsi3+0xcc>
    2cf0:	010b      	lsls	r3, r1, #4
    2cf2:	1ac0      	subs	r0, r0, r3
    2cf4:	4152      	adcs	r2, r2
    2cf6:	08c3      	lsrs	r3, r0, #3
    2cf8:	428b      	cmp	r3, r1
    2cfa:	d301      	bcc.n	2d00 <__udivsi3+0xd8>
    2cfc:	00cb      	lsls	r3, r1, #3
    2cfe:	1ac0      	subs	r0, r0, r3
    2d00:	4152      	adcs	r2, r2
    2d02:	0883      	lsrs	r3, r0, #2
    2d04:	428b      	cmp	r3, r1
    2d06:	d301      	bcc.n	2d0c <__udivsi3+0xe4>
    2d08:	008b      	lsls	r3, r1, #2
    2d0a:	1ac0      	subs	r0, r0, r3
    2d0c:	4152      	adcs	r2, r2
    2d0e:	0843      	lsrs	r3, r0, #1
    2d10:	428b      	cmp	r3, r1
    2d12:	d301      	bcc.n	2d18 <__udivsi3+0xf0>
    2d14:	004b      	lsls	r3, r1, #1
    2d16:	1ac0      	subs	r0, r0, r3
    2d18:	4152      	adcs	r2, r2
    2d1a:	1a41      	subs	r1, r0, r1
    2d1c:	d200      	bcs.n	2d20 <__udivsi3+0xf8>
    2d1e:	4601      	mov	r1, r0
    2d20:	4152      	adcs	r2, r2
    2d22:	4610      	mov	r0, r2
    2d24:	4770      	bx	lr
    2d26:	e7ff      	b.n	2d28 <__udivsi3+0x100>
    2d28:	b501      	push	{r0, lr}
    2d2a:	2000      	movs	r0, #0
    2d2c:	f000 f806 	bl	2d3c <__aeabi_idiv0>
    2d30:	bd02      	pop	{r1, pc}
    2d32:	46c0      	nop			; (mov r8, r8)

00002d34 <__aeabi_uidivmod>:
    2d34:	2900      	cmp	r1, #0
    2d36:	d0f7      	beq.n	2d28 <__udivsi3+0x100>
    2d38:	e776      	b.n	2c28 <__udivsi3>
    2d3a:	4770      	bx	lr

00002d3c <__aeabi_idiv0>:
    2d3c:	4770      	bx	lr
    2d3e:	46c0      	nop			; (mov r8, r8)

00002d40 <__libc_init_array>:
    2d40:	b570      	push	{r4, r5, r6, lr}
    2d42:	2600      	movs	r6, #0
    2d44:	4d0c      	ldr	r5, [pc, #48]	; (2d78 <__libc_init_array+0x38>)
    2d46:	4c0d      	ldr	r4, [pc, #52]	; (2d7c <__libc_init_array+0x3c>)
    2d48:	1b64      	subs	r4, r4, r5
    2d4a:	10a4      	asrs	r4, r4, #2
    2d4c:	42a6      	cmp	r6, r4
    2d4e:	d109      	bne.n	2d64 <__libc_init_array+0x24>
    2d50:	2600      	movs	r6, #0
    2d52:	f000 f92d 	bl	2fb0 <_init>
    2d56:	4d0a      	ldr	r5, [pc, #40]	; (2d80 <__libc_init_array+0x40>)
    2d58:	4c0a      	ldr	r4, [pc, #40]	; (2d84 <__libc_init_array+0x44>)
    2d5a:	1b64      	subs	r4, r4, r5
    2d5c:	10a4      	asrs	r4, r4, #2
    2d5e:	42a6      	cmp	r6, r4
    2d60:	d105      	bne.n	2d6e <__libc_init_array+0x2e>
    2d62:	bd70      	pop	{r4, r5, r6, pc}
    2d64:	00b3      	lsls	r3, r6, #2
    2d66:	58eb      	ldr	r3, [r5, r3]
    2d68:	4798      	blx	r3
    2d6a:	3601      	adds	r6, #1
    2d6c:	e7ee      	b.n	2d4c <__libc_init_array+0xc>
    2d6e:	00b3      	lsls	r3, r6, #2
    2d70:	58eb      	ldr	r3, [r5, r3]
    2d72:	4798      	blx	r3
    2d74:	3601      	adds	r6, #1
    2d76:	e7f2      	b.n	2d5e <__libc_init_array+0x1e>
    2d78:	00002fbc 	.word	0x00002fbc
    2d7c:	00002fbc 	.word	0x00002fbc
    2d80:	00002fbc 	.word	0x00002fbc
    2d84:	00002fc0 	.word	0x00002fc0

00002d88 <memcpy>:
    2d88:	2300      	movs	r3, #0
    2d8a:	b510      	push	{r4, lr}
    2d8c:	429a      	cmp	r2, r3
    2d8e:	d100      	bne.n	2d92 <memcpy+0xa>
    2d90:	bd10      	pop	{r4, pc}
    2d92:	5ccc      	ldrb	r4, [r1, r3]
    2d94:	54c4      	strb	r4, [r0, r3]
    2d96:	3301      	adds	r3, #1
    2d98:	e7f8      	b.n	2d8c <memcpy+0x4>
    2d9a:	0000      	movs	r0, r0
    2d9c:	0000039c 	.word	0x0000039c
    2da0:	000005d4 	.word	0x000005d4
    2da4:	000005d4 	.word	0x000005d4
    2da8:	000005d4 	.word	0x000005d4
    2dac:	000005d4 	.word	0x000005d4
    2db0:	000005d4 	.word	0x000005d4
    2db4:	000005d4 	.word	0x000005d4
    2db8:	000005d4 	.word	0x000005d4
    2dbc:	000005d4 	.word	0x000005d4
    2dc0:	000005d4 	.word	0x000005d4
    2dc4:	000005d4 	.word	0x000005d4
    2dc8:	000005d4 	.word	0x000005d4
    2dcc:	000005d4 	.word	0x000005d4
    2dd0:	000005d4 	.word	0x000005d4
    2dd4:	000005d4 	.word	0x000005d4
    2dd8:	000005d4 	.word	0x000005d4
    2ddc:	00000384 	.word	0x00000384
    2de0:	000005d4 	.word	0x000005d4
    2de4:	000005d4 	.word	0x000005d4
    2de8:	000005d4 	.word	0x000005d4
    2dec:	000005d4 	.word	0x000005d4
    2df0:	000005d4 	.word	0x000005d4
    2df4:	000005d4 	.word	0x000005d4
    2df8:	000005d4 	.word	0x000005d4
    2dfc:	000005d4 	.word	0x000005d4
    2e00:	000005d4 	.word	0x000005d4
    2e04:	000005d4 	.word	0x000005d4
    2e08:	000005d4 	.word	0x000005d4
    2e0c:	000005d4 	.word	0x000005d4
    2e10:	000005d4 	.word	0x000005d4
    2e14:	000005d4 	.word	0x000005d4
    2e18:	000005d4 	.word	0x000005d4
    2e1c:	00000394 	.word	0x00000394
    2e20:	000005d4 	.word	0x000005d4
    2e24:	000005d4 	.word	0x000005d4
    2e28:	000005d4 	.word	0x000005d4
    2e2c:	000005d4 	.word	0x000005d4
    2e30:	000005d4 	.word	0x000005d4
    2e34:	000005d4 	.word	0x000005d4
    2e38:	000005d4 	.word	0x000005d4
    2e3c:	000005d4 	.word	0x000005d4
    2e40:	000005d4 	.word	0x000005d4
    2e44:	000005d4 	.word	0x000005d4
    2e48:	000005d4 	.word	0x000005d4
    2e4c:	000005d4 	.word	0x000005d4
    2e50:	000005d4 	.word	0x000005d4
    2e54:	000005d4 	.word	0x000005d4
    2e58:	000005d4 	.word	0x000005d4
    2e5c:	0000038c 	.word	0x0000038c
    2e60:	000003a4 	.word	0x000003a4
    2e64:	0000036c 	.word	0x0000036c
    2e68:	0000037c 	.word	0x0000037c
    2e6c:	00000374 	.word	0x00000374
    2e70:	00000002 	.word	0x00000002
    2e74:	00000003 	.word	0x00000003
    2e78:	00000004 	.word	0x00000004
    2e7c:	00000005 	.word	0x00000005
    2e80:	00000006 	.word	0x00000006
    2e84:	00000007 	.word	0x00000007
    2e88:	0000000e 	.word	0x0000000e
    2e8c:	0000000f 	.word	0x0000000f
    2e90:	0000000a 	.word	0x0000000a
    2e94:	0000000b 	.word	0x0000000b
    2e98:	0000ffff 	.word	0x0000ffff
    2e9c:	0000ffff 	.word	0x0000ffff
    2ea0:	0000ffff 	.word	0x0000ffff
    2ea4:	0000ffff 	.word	0x0000ffff
    2ea8:	0000ffff 	.word	0x0000ffff
    2eac:	0000ffff 	.word	0x0000ffff
    2eb0:	0000ffff 	.word	0x0000ffff
    2eb4:	0000ffff 	.word	0x0000ffff
    2eb8:	0000ffff 	.word	0x0000ffff
    2ebc:	0000ffff 	.word	0x0000ffff
    2ec0:	00000876 	.word	0x00000876
    2ec4:	00000880 	.word	0x00000880
    2ec8:	0000088a 	.word	0x0000088a
    2ecc:	00000894 	.word	0x00000894
    2ed0:	0000089e 	.word	0x0000089e
    2ed4:	000008b0 	.word	0x000008b0
    2ed8:	000008c2 	.word	0x000008c2

00002edc <tc_interrupt_vectors.12581>:
    2edc:	00000e0d 42000800 42000c00 42001000     .......B...B...B
    2eec:	0000196a 00001966 00001966 000019cc     j...f...f.......
    2efc:	000019cc 0000197e 00001970 00001984     ....~...p.......
    2f0c:	000019ba 00001a50 00001a30 00001a30     ....P...0...0...
    2f1c:	00001abc 00001a42 00001a5e 00001a34     ....B...^...4...
    2f2c:	00001a6c 00001aac                       l.......

00002f34 <_tcc_intflag>:
    2f34:	00000001 00000002 00000004 00000008     ................
    2f44:	00001000 00002000 00004000 00008000     ..... ...@......
    2f54:	00010000 00020000 00040000 00080000     ................
    2f64:	00000404 00000104 00001004 00000504     ................
    2f74:	00001404 00001504 00000804 00002501     .............%..
    2f84:	0000ef05 00001c02 00000204 00008201     ................
    2f94:	00003202 00000506 00002004 00000308     .2....... ......
    2fa4:	00000908 00001508 00001902              ............

00002fb0 <_init>:
    2fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fb6:	bc08      	pop	{r3}
    2fb8:	469e      	mov	lr, r3
    2fba:	4770      	bx	lr

00002fbc <__init_array_start>:
    2fbc:	000000b5 	.word	0x000000b5

00002fc0 <_fini>:
    2fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fc6:	bc08      	pop	{r3}
    2fc8:	469e      	mov	lr, r3
    2fca:	4770      	bx	lr

00002fcc <__fini_array_start>:
    2fcc:	0000008d 	.word	0x0000008d
