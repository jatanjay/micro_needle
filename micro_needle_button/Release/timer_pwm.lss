
timer_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e90  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00003e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000224  20000020  00003eb0  00020020  2**2
                  ALLOC
  3 .stack        00000404  20000244  000040d4  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00055f65  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f03  00000000  00000000  00076008  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c07  00000000  00000000  0007bf0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000840  00000000  00000000  00082b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000d70  00000000  00000000  00083352  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b3f7  00000000  00000000  000840c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000153cd  00000000  00000000  0009f4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007cfcd  00000000  00000000  000b4886  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000014fc  00000000  00000000  00131854  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	48 06 00 20 55 1f 00 00 53 1f 00 00 53 1f 00 00     H.. U...S...S...
	...
      2c:	53 1f 00 00 00 00 00 00 00 00 00 00 53 1f 00 00     S...........S...
      3c:	53 1f 00 00 53 1f 00 00 53 1f 00 00 53 1f 00 00     S...S...S...S...
      4c:	53 1f 00 00 f1 04 00 00 53 1f 00 00 53 1f 00 00     S.......S...S...
      5c:	53 1f 00 00 53 1f 00 00 c9 14 00 00 d9 14 00 00     S...S...........
      6c:	e9 14 00 00 1d 1c 00 00 a9 1c 00 00 b3 1c 00 00     ................
      7c:	53 1f 00 00 53 1f 00 00 53 1f 00 00 53 1f 00 00     S...S...S...S...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00003e90 	.word	0x00003e90

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00003e90 	.word	0x00003e90
      e4:	00003e90 	.word	0x00003e90
      e8:	00000000 	.word	0x00000000

000000ec <adc_get_status.isra.1>:
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
      ec:	7e03      	ldrb	r3, [r0, #24]
      ee:	2001      	movs	r0, #1
      f0:	b2db      	uxtb	r3, r3
      f2:	4018      	ands	r0, r3
      f4:	2202      	movs	r2, #2
	if (int_flags & ADC_INTFLAG_RESRDY) {
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
      f6:	0759      	lsls	r1, r3, #29
      f8:	d500      	bpl.n	fc <adc_get_status.isra.1+0x10>
		status_flags |= ADC_STATUS_WINDOW;
      fa:	4310      	orrs	r0, r2
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
      fc:	4213      	tst	r3, r2
      fe:	d001      	beq.n	104 <adc_get_status.isra.1+0x18>
		status_flags |= ADC_STATUS_OVERRUN;
     100:	2304      	movs	r3, #4
     102:	4318      	orrs	r0, r3
	}

	return status_flags;
}
     104:	4770      	bx	lr
	...

00000108 <configure_adc>:
#include <adc_sample.h>

uint16_t adc_result;

void configure_adc(void)
{
     108:	b510      	push	{r4, lr}
     10a:	b08c      	sub	sp, #48	; 0x30
	struct adc_config config_adc;
	adc_get_config_defaults(&config_adc);
     10c:	4668      	mov	r0, sp
     10e:	f000 f865 	bl	1dc <adc_get_config_defaults>
	adc_init(&adc_instance, ADC, &config_adc);
     112:	4c0c      	ldr	r4, [pc, #48]	; (144 <configure_adc+0x3c>)
     114:	466a      	mov	r2, sp
     116:	490c      	ldr	r1, [pc, #48]	; (148 <configure_adc+0x40>)
     118:	0020      	movs	r0, r4
     11a:	f000 f881 	bl	220 <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     11e:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     120:	7e5a      	ldrb	r2, [r3, #25]
     122:	b252      	sxtb	r2, r2
     124:	2a00      	cmp	r2, #0
     126:	dbfb      	blt.n	120 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     128:	220f      	movs	r2, #15
     12a:	759a      	strb	r2, [r3, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     12c:	761a      	strb	r2, [r3, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     12e:	7819      	ldrb	r1, [r3, #0]
     130:	3a0d      	subs	r2, #13
     132:	430a      	orrs	r2, r1
     134:	701a      	strb	r2, [r3, #0]
     136:	6822      	ldr	r2, [r4, #0]
     138:	7e53      	ldrb	r3, [r2, #25]
     13a:	b25b      	sxtb	r3, r3
     13c:	2b00      	cmp	r3, #0
     13e:	dbfb      	blt.n	138 <configure_adc+0x30>
	adc_enable(&adc_instance);
}
     140:	b00c      	add	sp, #48	; 0x30
     142:	bd10      	pop	{r4, pc}
     144:	20000098 	.word	0x20000098
     148:	42002000 	.word	0x42002000

0000014c <sample_adc>:


void sample_adc(void){
     14c:	b570      	push	{r4, r5, r6, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14e:	4c13      	ldr	r4, [pc, #76]	; (19c <sample_adc+0x50>)
     150:	6823      	ldr	r3, [r4, #0]
     152:	7e5a      	ldrb	r2, [r3, #25]
     154:	b252      	sxtb	r2, r2
     156:	2a00      	cmp	r2, #0
     158:	dbfb      	blt.n	152 <sample_adc+0x6>

	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     15a:	2202      	movs	r2, #2
     15c:	7b19      	ldrb	r1, [r3, #12]
     15e:	430a      	orrs	r2, r1
     160:	731a      	strb	r2, [r3, #12]
     162:	7e5a      	ldrb	r2, [r3, #25]
     164:	b252      	sxtb	r2, r2
     166:	2a00      	cmp	r2, #0
     168:	dbfb      	blt.n	162 <sample_adc+0x16>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     16a:	2501      	movs	r5, #1
     16c:	6820      	ldr	r0, [r4, #0]
     16e:	f7ff ffbd 	bl	ec <adc_get_status.isra.1>
     172:	4228      	tst	r0, r5
     174:	d0fa      	beq.n	16c <sample_adc+0x20>
		/* Result not ready */
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;
     176:	6820      	ldr	r0, [r4, #0]
     178:	7e43      	ldrb	r3, [r0, #25]
     17a:	b25b      	sxtb	r3, r3
     17c:	2b00      	cmp	r3, #0
     17e:	dbfb      	blt.n	178 <sample_adc+0x2c>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     180:	8b42      	ldrh	r2, [r0, #26]
     182:	4b07      	ldr	r3, [pc, #28]	; (1a0 <sample_adc+0x54>)
     184:	801a      	strh	r2, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     186:	2301      	movs	r3, #1
     188:	7603      	strb	r3, [r0, #24]

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     18a:	f7ff ffaf 	bl	ec <adc_get_status.isra.1>
     18e:	0743      	lsls	r3, r0, #29
     190:	d502      	bpl.n	198 <sample_adc+0x4c>
	adc_module->INTFLAG.reg = int_flags;
     192:	2202      	movs	r2, #2
     194:	6823      	ldr	r3, [r4, #0]
     196:	761a      	strb	r2, [r3, #24]
	adc_start_conversion(&adc_instance);
	do {
	} while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     198:	bd70      	pop	{r4, r5, r6, pc}
     19a:	46c0      	nop			; (mov r8, r8)
     19c:	20000098 	.word	0x20000098
     1a0:	20000094 	.word	0x20000094

000001a4 <_adc_configure_ain_pin>:
* the ADC access to the analog signal
*
* \param [in] pin AINxx pin to configure
*/
static inline void _adc_configure_ain_pin(uint32_t pin)
{
     1a4:	b530      	push	{r4, r5, lr}
     1a6:	b097      	sub	sp, #92	; 0x5c
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     1a8:	ad02      	add	r5, sp, #8
{
     1aa:	0004      	movs	r4, r0
	const uint32_t pinmapping[] = {
     1ac:	2250      	movs	r2, #80	; 0x50
     1ae:	490a      	ldr	r1, [pc, #40]	; (1d8 <_adc_configure_ain_pin+0x34>)
     1b0:	0028      	movs	r0, r5
     1b2:	f003 fdbf 	bl	3d34 <memcpy>
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     1b6:	2c09      	cmp	r4, #9
     1b8:	d80b      	bhi.n	1d2 <_adc_configure_ain_pin+0x2e>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1ba:	2300      	movs	r3, #0
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     1bc:	00a4      	lsls	r4, r4, #2
     1be:	5960      	ldr	r0, [r4, r5]
     1c0:	a901      	add	r1, sp, #4
     1c2:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1c4:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     1c6:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
     1c8:	b2c0      	uxtb	r0, r0
		config.mux_position = 1;
     1ca:	3301      	adds	r3, #1
     1cc:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     1ce:	f001 fcb7 	bl	1b40 <system_pinmux_pin_set_config>
	}
}
     1d2:	b017      	add	sp, #92	; 0x5c
     1d4:	bd30      	pop	{r4, r5, pc}
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	00003d48 	.word	0x00003d48

000001dc <adc_get_config_defaults>:
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     1dc:	22c0      	movs	r2, #192	; 0xc0
     1de:	0152      	lsls	r2, r2, #5
     1e0:	81c2      	strh	r2, [r0, #14]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e2:	0002      	movs	r2, r0
	config->clock_source                  = GCLK_GENERATOR_0;
     1e4:	2300      	movs	r3, #0
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     1e6:	322a      	adds	r2, #42	; 0x2a
	config->clock_source                  = GCLK_GENERATOR_0;
     1e8:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     1ea:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     1ec:	8043      	strh	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     1ee:	7103      	strb	r3, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     1f0:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     1f2:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     1f4:	61c3      	str	r3, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     1f6:	6083      	str	r3, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     1f8:	7303      	strb	r3, [r0, #12]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     1fa:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     1fc:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     1fe:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     200:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     202:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     204:	7013      	strb	r3, [r2, #0]
	config->correction.correction_enable  = false;
     206:	1d42      	adds	r2, r0, #5
	config->run_in_standby                = false;
     208:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     20a:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     20c:	77d3      	strb	r3, [r2, #31]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     20e:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     210:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     212:	75c3      	strb	r3, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     214:	3226      	adds	r2, #38	; 0x26
	config->pin_scan.inputs_to_scan       = 0;
     216:	302c      	adds	r0, #44	; 0x2c
	config->pin_scan.offset_start_scan    = 0;
     218:	7013      	strb	r3, [r2, #0]
	config->pin_scan.inputs_to_scan       = 0;
     21a:	7003      	strb	r3, [r0, #0]
}
     21c:	4770      	bx	lr
	...

00000220 <adc_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     220:	2380      	movs	r3, #128	; 0x80
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     222:	b5f0      	push	{r4, r5, r6, r7, lr}
     224:	0014      	movs	r4, r2
     226:	4aab      	ldr	r2, [pc, #684]	; (4d4 <STACK_SIZE+0xd4>)
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     228:	6001      	str	r1, [r0, #0]
{
     22a:	0007      	movs	r7, r0
     22c:	6a10      	ldr	r0, [r2, #32]
     22e:	005b      	lsls	r3, r3, #1
     230:	4303      	orrs	r3, r0
     232:	6213      	str	r3, [r2, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     234:	780b      	ldrb	r3, [r1, #0]
{
     236:	b087      	sub	sp, #28
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     238:	2005      	movs	r0, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     23a:	07db      	lsls	r3, r3, #31
     23c:	d500      	bpl.n	240 <adc_init+0x20>
     23e:	e0e5      	b.n	40c <STACK_SIZE+0xc>
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     240:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     242:	3017      	adds	r0, #23
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     244:	079b      	lsls	r3, r3, #30
     246:	d500      	bpl.n	24a <adc_init+0x2a>
     248:	e0e0      	b.n	40c <STACK_SIZE+0xc>
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     24a:	7863      	ldrb	r3, [r4, #1]
     24c:	713b      	strb	r3, [r7, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     24e:	2b00      	cmp	r3, #0
     250:	d104      	bne.n	25c <adc_init+0x3c>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     252:	4aa1      	ldr	r2, [pc, #644]	; (4d8 <STACK_SIZE+0xd8>)
     254:	3304      	adds	r3, #4
     256:	6c11      	ldr	r1, [r2, #64]	; 0x40
     258:	430b      	orrs	r3, r1
     25a:	6413      	str	r3, [r2, #64]	; 0x40
	gclk_chan_conf.source_generator = config->clock_source;
     25c:	7823      	ldrb	r3, [r4, #0]
     25e:	a905      	add	r1, sp, #20
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     260:	2013      	movs	r0, #19
	gclk_chan_conf.source_generator = config->clock_source;
     262:	700b      	strb	r3, [r1, #0]
	Adc *const adc_module = module_inst->hw;
     264:	683d      	ldr	r5, [r7, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     266:	f001 fc09 	bl	1a7c <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     26a:	2013      	movs	r0, #19
     26c:	f001 fbca 	bl	1a04 <system_gclk_chan_enable>
	if (config->pin_scan.inputs_to_scan != 0) {
     270:	0023      	movs	r3, r4
     272:	332c      	adds	r3, #44	; 0x2c
     274:	9302      	str	r3, [sp, #8]
     276:	781b      	ldrb	r3, [r3, #0]
     278:	7b22      	ldrb	r2, [r4, #12]
     27a:	9201      	str	r2, [sp, #4]
     27c:	2b00      	cmp	r3, #0
     27e:	d033      	beq.n	2e8 <adc_init+0xc8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     280:	0022      	movs	r2, r4
     282:	322b      	adds	r2, #43	; 0x2b
		uint8_t start_pin =
     284:	7816      	ldrb	r6, [r2, #0]
     286:	9a01      	ldr	r2, [sp, #4]
     288:	1996      	adds	r6, r2, r6
     28a:	b2f6      	uxtb	r6, r6
		uint8_t end_pin =
     28c:	199b      	adds	r3, r3, r6
     28e:	b2db      	uxtb	r3, r3
     290:	9303      	str	r3, [sp, #12]
     292:	9b01      	ldr	r3, [sp, #4]
     294:	1af0      	subs	r0, r6, r3
		while (start_pin < end_pin) {
     296:	9b03      	ldr	r3, [sp, #12]
     298:	b2c0      	uxtb	r0, r0
     29a:	42b3      	cmp	r3, r6
     29c:	d81b      	bhi.n	2d6 <adc_init+0xb6>
		_adc_configure_ain_pin(config->negative_input);
     29e:	89e0      	ldrh	r0, [r4, #14]
     2a0:	f7ff ff80 	bl	1a4 <_adc_configure_ain_pin>
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2a4:	7d63      	ldrb	r3, [r4, #21]
     2a6:	009b      	lsls	r3, r3, #2
     2a8:	b2db      	uxtb	r3, r3
     2aa:	702b      	strb	r3, [r5, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2ac:	7da3      	ldrb	r3, [r4, #22]
     2ae:	7862      	ldrb	r2, [r4, #1]
     2b0:	01db      	lsls	r3, r3, #7
     2b2:	4313      	orrs	r3, r2
     2b4:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2b6:	706b      	strb	r3, [r5, #1]
	switch (config->resolution) {
     2b8:	7923      	ldrb	r3, [r4, #4]
     2ba:	2b30      	cmp	r3, #48	; 0x30
     2bc:	d100      	bne.n	2c0 <adc_init+0xa0>
     2be:	e0b2      	b.n	426 <STACK_SIZE+0x26>
     2c0:	d816      	bhi.n	2f0 <adc_init+0xd0>
     2c2:	2b10      	cmp	r3, #16
     2c4:	d100      	bne.n	2c8 <adc_init+0xa8>
     2c6:	e0ab      	b.n	420 <STACK_SIZE+0x20>
     2c8:	2b20      	cmp	r3, #32
     2ca:	d100      	bne.n	2ce <adc_init+0xae>
     2cc:	e0ab      	b.n	426 <STACK_SIZE+0x26>
     2ce:	2b00      	cmp	r3, #0
     2d0:	d118      	bne.n	304 <adc_init+0xe4>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     2d2:	001a      	movs	r2, r3
     2d4:	e0a5      	b.n	422 <STACK_SIZE+0x22>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2d6:	230f      	movs	r3, #15
     2d8:	4018      	ands	r0, r3
     2da:	7b23      	ldrb	r3, [r4, #12]
			start_pin++;
     2dc:	3601      	adds	r6, #1
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     2de:	18c0      	adds	r0, r0, r3
     2e0:	f7ff ff60 	bl	1a4 <_adc_configure_ain_pin>
			start_pin++;
     2e4:	b2f6      	uxtb	r6, r6
     2e6:	e7d4      	b.n	292 <adc_init+0x72>
		_adc_configure_ain_pin(config->positive_input);
     2e8:	9801      	ldr	r0, [sp, #4]
     2ea:	f7ff ff5b 	bl	1a4 <_adc_configure_ain_pin>
     2ee:	e7d6      	b.n	29e <adc_init+0x7e>
	switch (config->resolution) {
     2f0:	2b32      	cmp	r3, #50	; 0x32
     2f2:	d009      	beq.n	308 <adc_init+0xe8>
     2f4:	d200      	bcs.n	2f8 <adc_init+0xd8>
     2f6:	e098      	b.n	42a <STACK_SIZE+0x2a>
     2f8:	2b33      	cmp	r3, #51	; 0x33
     2fa:	d100      	bne.n	2fe <adc_init+0xde>
     2fc:	e08c      	b.n	418 <STACK_SIZE+0x18>
     2fe:	2b34      	cmp	r3, #52	; 0x34
     300:	d100      	bne.n	304 <adc_init+0xe4>
     302:	e085      	b.n	410 <STACK_SIZE+0x10>
		return STATUS_ERR_INVALID_ARG;
     304:	2017      	movs	r0, #23
		module_inst->software_trigger = false;
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
     306:	e081      	b.n	40c <STACK_SIZE+0xc>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     308:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     30a:	2310      	movs	r3, #16
		adjres = ADC_DIVIDE_RESULT_4;
     30c:	2102      	movs	r1, #2
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     30e:	2070      	movs	r0, #112	; 0x70
     310:	0109      	lsls	r1, r1, #4
     312:	4001      	ands	r1, r0
     314:	430a      	orrs	r2, r1
     316:	70aa      	strb	r2, [r5, #2]
	if (config->sample_length > 63) {
     318:	7de2      	ldrb	r2, [r4, #23]
     31a:	2a3f      	cmp	r2, #63	; 0x3f
     31c:	d8f2      	bhi.n	304 <adc_init+0xe4>
		adc_module->SAMPCTRL.reg =
     31e:	70ea      	strb	r2, [r5, #3]
     320:	6839      	ldr	r1, [r7, #0]
     322:	7e4a      	ldrb	r2, [r1, #25]
     324:	b252      	sxtb	r2, r2
     326:	2a00      	cmp	r2, #0
     328:	dbfb      	blt.n	322 <adc_init+0x102>
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32a:	8861      	ldrh	r1, [r4, #2]
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     32c:	7ce2      	ldrb	r2, [r4, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     32e:	430a      	orrs	r2, r1
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     330:	1d61      	adds	r1, r4, #5
     332:	7fc8      	ldrb	r0, [r1, #31]
     334:	00c0      	lsls	r0, r0, #3
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     336:	4302      	orrs	r2, r0
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     338:	7d20      	ldrb	r0, [r4, #20]
     33a:	0080      	lsls	r0, r0, #2
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     33c:	4302      	orrs	r2, r0
     33e:	7ca0      	ldrb	r0, [r4, #18]
     340:	0040      	lsls	r0, r0, #1
     342:	4302      	orrs	r2, r0
     344:	431a      	orrs	r2, r3
	adc_module->CTRLB.reg =
     346:	80aa      	strh	r2, [r5, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     348:	7e22      	ldrb	r2, [r4, #24]
     34a:	4694      	mov	ip, r2
     34c:	2a00      	cmp	r2, #0
     34e:	d007      	beq.n	360 <adc_init+0x140>
		switch (resolution) {
     350:	2b10      	cmp	r3, #16
     352:	d100      	bne.n	356 <adc_init+0x136>
     354:	e0af      	b.n	4b6 <STACK_SIZE+0xb6>
     356:	d900      	bls.n	35a <adc_init+0x13a>
     358:	e069      	b.n	42e <STACK_SIZE+0x2e>
     35a:	2b00      	cmp	r3, #0
     35c:	d100      	bne.n	360 <adc_init+0x140>
     35e:	e09b      	b.n	498 <STACK_SIZE+0x98>
     360:	6838      	ldr	r0, [r7, #0]
     362:	7e43      	ldrb	r3, [r0, #25]
     364:	b25b      	sxtb	r3, r3
     366:	2b00      	cmp	r3, #0
     368:	dbfb      	blt.n	362 <adc_init+0x142>
	adc_module->WINCTRL.reg = config->window.window_mode;
     36a:	4663      	mov	r3, ip
     36c:	722b      	strb	r3, [r5, #8]
     36e:	683a      	ldr	r2, [r7, #0]
     370:	7e53      	ldrb	r3, [r2, #25]
     372:	b25b      	sxtb	r3, r3
     374:	2b00      	cmp	r3, #0
     376:	dbfb      	blt.n	370 <adc_init+0x150>
	adc_module->WINLT.reg =
     378:	8ba3      	ldrh	r3, [r4, #28]
     37a:	83ab      	strh	r3, [r5, #28]
     37c:	683a      	ldr	r2, [r7, #0]
     37e:	7e53      	ldrb	r3, [r2, #25]
     380:	b25b      	sxtb	r3, r3
     382:	2b00      	cmp	r3, #0
     384:	dbfb      	blt.n	37e <adc_init+0x15e>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     386:	8c23      	ldrh	r3, [r4, #32]
     388:	842b      	strh	r3, [r5, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     38a:	9b02      	ldr	r3, [sp, #8]
     38c:	781a      	ldrb	r2, [r3, #0]
	if (inputs_to_scan > 0) {
     38e:	2a00      	cmp	r2, #0
     390:	d003      	beq.n	39a <adc_init+0x17a>
		inputs_to_scan--;
     392:	3a01      	subs	r2, #1
     394:	b2d2      	uxtb	r2, r2
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     396:	2a0f      	cmp	r2, #15
     398:	d8b4      	bhi.n	304 <adc_init+0xe4>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     39a:	0023      	movs	r3, r4
     39c:	332b      	adds	r3, #43	; 0x2b
     39e:	7818      	ldrb	r0, [r3, #0]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     3a0:	280f      	cmp	r0, #15
     3a2:	d8af      	bhi.n	304 <adc_init+0xe4>
     3a4:	683e      	ldr	r6, [r7, #0]
     3a6:	7e73      	ldrb	r3, [r6, #25]
     3a8:	b25b      	sxtb	r3, r3
     3aa:	2b00      	cmp	r3, #0
     3ac:	dbfb      	blt.n	3a6 <adc_init+0x186>
			config->positive_input;
     3ae:	7b26      	ldrb	r6, [r4, #12]
			config->negative_input |
     3b0:	89e3      	ldrh	r3, [r4, #14]
			(config->pin_scan.offset_start_scan <<
     3b2:	0500      	lsls	r0, r0, #20
			config->negative_input |
     3b4:	4333      	orrs	r3, r6
     3b6:	68a6      	ldr	r6, [r4, #8]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     3b8:	0412      	lsls	r2, r2, #16
			config->negative_input |
     3ba:	4333      	orrs	r3, r6
     3bc:	4303      	orrs	r3, r0
     3be:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     3c0:	612b      	str	r3, [r5, #16]
	adc_module->EVCTRL.reg = config->event_action;
     3c2:	0023      	movs	r3, r4
     3c4:	332a      	adds	r3, #42	; 0x2a
     3c6:	781b      	ldrb	r3, [r3, #0]
     3c8:	752b      	strb	r3, [r5, #20]
	adc_module->INTENCLR.reg =
     3ca:	230f      	movs	r3, #15
     3cc:	75ab      	strb	r3, [r5, #22]
	if (config->correction.correction_enable){
     3ce:	7fcb      	ldrb	r3, [r1, #31]
     3d0:	2b00      	cmp	r3, #0
     3d2:	d00c      	beq.n	3ee <adc_init+0x1ce>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     3d4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     3d6:	4941      	ldr	r1, [pc, #260]	; (4dc <STACK_SIZE+0xdc>)
     3d8:	428b      	cmp	r3, r1
     3da:	d893      	bhi.n	304 <adc_init+0xe4>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     3dc:	84ab      	strh	r3, [r5, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     3de:	2380      	movs	r3, #128	; 0x80
     3e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     3e2:	011b      	lsls	r3, r3, #4
     3e4:	18d3      	adds	r3, r2, r3
     3e6:	b29b      	uxth	r3, r3
     3e8:	428b      	cmp	r3, r1
     3ea:	d88b      	bhi.n	304 <adc_init+0xe4>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     3ec:	84ea      	strh	r2, [r5, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     3ee:	22e0      	movs	r2, #224	; 0xe0
     3f0:	4b3b      	ldr	r3, [pc, #236]	; (4e0 <STACK_SIZE+0xe0>)
	return STATUS_OK;
     3f2:	2000      	movs	r0, #0
			ADC_CALIB_BIAS_CAL(
     3f4:	6819      	ldr	r1, [r3, #0]
     3f6:	00d2      	lsls	r2, r2, #3
     3f8:	014b      	lsls	r3, r1, #5
			ADC_CALIB_LINEARITY_CAL(
     3fa:	0019      	movs	r1, r3
			ADC_CALIB_BIAS_CAL(
     3fc:	401a      	ands	r2, r3
			ADC_CALIB_LINEARITY_CAL(
     3fe:	4b39      	ldr	r3, [pc, #228]	; (4e4 <STACK_SIZE+0xe4>)
     400:	681b      	ldr	r3, [r3, #0]
     402:	0edb      	lsrs	r3, r3, #27
     404:	430b      	orrs	r3, r1
     406:	b2db      	uxtb	r3, r3
			) |
     408:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     40a:	852b      	strh	r3, [r5, #40]	; 0x28
}
     40c:	b007      	add	sp, #28
     40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adjres = config->divide_result;
     410:	7c61      	ldrb	r1, [r4, #17]
		accumulate = config->accumulate_samples;
     412:	7c22      	ldrb	r2, [r4, #16]
		resolution = ADC_RESOLUTION_16BIT;
     414:	2310      	movs	r3, #16
     416:	e77a      	b.n	30e <adc_init+0xee>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     418:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     41a:	2310      	movs	r3, #16
		adjres = ADC_DIVIDE_RESULT_2;
     41c:	2101      	movs	r1, #1
     41e:	e776      	b.n	30e <adc_init+0xee>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     420:	2208      	movs	r2, #8
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     422:	2100      	movs	r1, #0
     424:	e773      	b.n	30e <adc_init+0xee>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     426:	2200      	movs	r2, #0
     428:	e7fb      	b.n	422 <STACK_SIZE+0x22>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     42a:	2202      	movs	r2, #2
     42c:	e7f5      	b.n	41a <STACK_SIZE+0x1a>
		switch (resolution) {
     42e:	2b20      	cmp	r3, #32
     430:	d018      	beq.n	464 <STACK_SIZE+0x64>
     432:	2b30      	cmp	r3, #48	; 0x30
     434:	d000      	beq.n	438 <STACK_SIZE+0x38>
     436:	e793      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     438:	7ce3      	ldrb	r3, [r4, #19]
     43a:	69e0      	ldr	r0, [r4, #28]
     43c:	2b00      	cmp	r3, #0
     43e:	d009      	beq.n	454 <STACK_SIZE+0x54>
					(config->window.window_lower_value > 127 ||
     440:	0003      	movs	r3, r0
     442:	3380      	adds	r3, #128	; 0x80
			if (config->differential_mode &&
     444:	2bff      	cmp	r3, #255	; 0xff
     446:	d900      	bls.n	44a <STACK_SIZE+0x4a>
     448:	e75c      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -128 ||
     44a:	6a23      	ldr	r3, [r4, #32]
     44c:	3380      	adds	r3, #128	; 0x80
     44e:	2bff      	cmp	r3, #255	; 0xff
     450:	d900      	bls.n	454 <STACK_SIZE+0x54>
     452:	e757      	b.n	304 <adc_init+0xe4>
			} else if (config->window.window_lower_value > 255 ||
     454:	28ff      	cmp	r0, #255	; 0xff
     456:	dd00      	ble.n	45a <STACK_SIZE+0x5a>
     458:	e754      	b.n	304 <adc_init+0xe4>
     45a:	6a23      	ldr	r3, [r4, #32]
     45c:	2bff      	cmp	r3, #255	; 0xff
     45e:	dd00      	ble.n	462 <STACK_SIZE+0x62>
     460:	e750      	b.n	304 <adc_init+0xe4>
     462:	e77d      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     464:	7ce0      	ldrb	r0, [r4, #19]
     466:	69e6      	ldr	r6, [r4, #28]
     468:	4b1f      	ldr	r3, [pc, #124]	; (4e8 <STACK_SIZE+0xe8>)
     46a:	2800      	cmp	r0, #0
     46c:	d00c      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 511 ||
     46e:	2080      	movs	r0, #128	; 0x80
     470:	0080      	lsls	r0, r0, #2
     472:	1830      	adds	r0, r6, r0
			if (config->differential_mode &&
     474:	4298      	cmp	r0, r3
     476:	d900      	bls.n	47a <STACK_SIZE+0x7a>
     478:	e744      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -512 ||
     47a:	2280      	movs	r2, #128	; 0x80
     47c:	6a20      	ldr	r0, [r4, #32]
     47e:	0092      	lsls	r2, r2, #2
					config->window.window_lower_value < -2048 ||
     480:	1810      	adds	r0, r2, r0
     482:	4298      	cmp	r0, r3
     484:	d900      	bls.n	488 <STACK_SIZE+0x88>
     486:	e73d      	b.n	304 <adc_init+0xe4>
			} else if (config->window.window_lower_value > 65535 ||
     488:	429e      	cmp	r6, r3
     48a:	dd00      	ble.n	48e <STACK_SIZE+0x8e>
     48c:	e73a      	b.n	304 <adc_init+0xe4>
     48e:	6a22      	ldr	r2, [r4, #32]
     490:	429a      	cmp	r2, r3
     492:	dd00      	ble.n	496 <STACK_SIZE+0x96>
     494:	e736      	b.n	304 <adc_init+0xe4>
     496:	e763      	b.n	360 <adc_init+0x140>
			if (config->differential_mode &&
     498:	7ce0      	ldrb	r0, [r4, #19]
     49a:	69e6      	ldr	r6, [r4, #28]
     49c:	4b0f      	ldr	r3, [pc, #60]	; (4dc <STACK_SIZE+0xdc>)
     49e:	2800      	cmp	r0, #0
     4a0:	d0f2      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 2047 ||
     4a2:	2280      	movs	r2, #128	; 0x80
     4a4:	0112      	lsls	r2, r2, #4
     4a6:	18b0      	adds	r0, r6, r2
			if (config->differential_mode &&
     4a8:	4298      	cmp	r0, r3
     4aa:	d900      	bls.n	4ae <STACK_SIZE+0xae>
     4ac:	e72a      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -2048 ||
     4ae:	2080      	movs	r0, #128	; 0x80
     4b0:	6a22      	ldr	r2, [r4, #32]
     4b2:	0100      	lsls	r0, r0, #4
     4b4:	e7e4      	b.n	480 <STACK_SIZE+0x80>
			if (config->differential_mode &&
     4b6:	7ce0      	ldrb	r0, [r4, #19]
     4b8:	69e6      	ldr	r6, [r4, #28]
     4ba:	4b0c      	ldr	r3, [pc, #48]	; (4ec <STACK_SIZE+0xec>)
     4bc:	2800      	cmp	r0, #0
     4be:	d0e3      	beq.n	488 <STACK_SIZE+0x88>
					(config->window.window_lower_value > 32767 ||
     4c0:	2280      	movs	r2, #128	; 0x80
     4c2:	0212      	lsls	r2, r2, #8
     4c4:	18b0      	adds	r0, r6, r2
			if (config->differential_mode &&
     4c6:	4298      	cmp	r0, r3
     4c8:	d900      	bls.n	4cc <STACK_SIZE+0xcc>
     4ca:	e71b      	b.n	304 <adc_init+0xe4>
					config->window.window_lower_value < -32768 ||
     4cc:	2080      	movs	r0, #128	; 0x80
     4ce:	6a22      	ldr	r2, [r4, #32]
     4d0:	0200      	lsls	r0, r0, #8
     4d2:	e7d5      	b.n	480 <STACK_SIZE+0x80>
     4d4:	40000400 	.word	0x40000400
     4d8:	40000800 	.word	0x40000800
     4dc:	00000fff 	.word	0x00000fff
     4e0:	00806024 	.word	0x00806024
     4e4:	00806020 	.word	0x00806020
     4e8:	000003ff 	.word	0x000003ff
     4ec:	0000ffff 	.word	0x0000ffff

000004f0 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4f0:	2300      	movs	r3, #0
{
     4f2:	b570      	push	{r4, r5, r6, lr}
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     4f4:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     4f6:	4c0b      	ldr	r4, [pc, #44]	; (524 <EIC_Handler+0x34>)
     4f8:	7023      	strb	r3, [r4, #0]
     4fa:	7823      	ldrb	r3, [r4, #0]
     4fc:	2b0f      	cmp	r3, #15
     4fe:	d900      	bls.n	502 <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
     500:	bd70      	pop	{r4, r5, r6, pc}
     502:	0029      	movs	r1, r5
     504:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
     506:	4a08      	ldr	r2, [pc, #32]	; (528 <EIC_Handler+0x38>)
     508:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
     50a:	4208      	tst	r0, r1
     50c:	d006      	beq.n	51c <EIC_Handler+0x2c>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     50e:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     510:	4a06      	ldr	r2, [pc, #24]	; (52c <EIC_Handler+0x3c>)
     512:	009b      	lsls	r3, r3, #2
     514:	589b      	ldr	r3, [r3, r2]
     516:	2b00      	cmp	r3, #0
     518:	d000      	beq.n	51c <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
     51a:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     51c:	7823      	ldrb	r3, [r4, #0]
     51e:	3301      	adds	r3, #1
     520:	7023      	strb	r3, [r4, #0]
     522:	e7ea      	b.n	4fa <EIC_Handler+0xa>
     524:	200000a0 	.word	0x200000a0
     528:	40001800 	.word	0x40001800
     52c:	200000a4 	.word	0x200000a4

00000530 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     530:	4b01      	ldr	r3, [pc, #4]	; (538 <extint_is_syncing+0x8>)
     532:	7858      	ldrb	r0, [r3, #1]
     534:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
     536:	4770      	bx	lr
     538:	40001800 	.word	0x40001800

0000053c <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     53c:	2302      	movs	r3, #2
{
     53e:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     540:	4a04      	ldr	r2, [pc, #16]	; (554 <_extint_enable+0x18>)
     542:	7811      	ldrb	r1, [r2, #0]
     544:	430b      	orrs	r3, r1
     546:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
     548:	f7ff fff2 	bl	530 <extint_is_syncing>
     54c:	2800      	cmp	r0, #0
     54e:	d1fb      	bne.n	548 <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     550:	bd10      	pop	{r4, pc}
     552:	46c0      	nop			; (mov r8, r8)
     554:	40001800 	.word	0x40001800

00000558 <_system_extint_init>:
			PM->APBAMASK.reg |= mask;
     558:	2340      	movs	r3, #64	; 0x40
{
     55a:	b507      	push	{r0, r1, r2, lr}
     55c:	4a10      	ldr	r2, [pc, #64]	; (5a0 <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     55e:	2005      	movs	r0, #5
     560:	6991      	ldr	r1, [r2, #24]
     562:	430b      	orrs	r3, r1
     564:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     566:	2300      	movs	r3, #0
     568:	a901      	add	r1, sp, #4
     56a:	700b      	strb	r3, [r1, #0]
     56c:	f001 fa86 	bl	1a7c <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     570:	2005      	movs	r0, #5
     572:	f001 fa47 	bl	1a04 <system_gclk_chan_enable>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     576:	2301      	movs	r3, #1
     578:	4a0a      	ldr	r2, [pc, #40]	; (5a4 <_system_extint_init+0x4c>)
     57a:	7811      	ldrb	r1, [r2, #0]
     57c:	430b      	orrs	r3, r1
     57e:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
     580:	f7ff ffd6 	bl	530 <extint_is_syncing>
     584:	2800      	cmp	r0, #0
     586:	d1fb      	bne.n	580 <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
     588:	0002      	movs	r2, r0
     58a:	4b07      	ldr	r3, [pc, #28]	; (5a8 <_system_extint_init+0x50>)
     58c:	501a      	str	r2, [r3, r0]
     58e:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     590:	2840      	cmp	r0, #64	; 0x40
     592:	d1fb      	bne.n	58c <_system_extint_init+0x34>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     594:	2210      	movs	r2, #16
     596:	4b05      	ldr	r3, [pc, #20]	; (5ac <_system_extint_init+0x54>)
     598:	601a      	str	r2, [r3, #0]
	_extint_enable();
     59a:	f7ff ffcf 	bl	53c <_extint_enable>
}
     59e:	bd07      	pop	{r0, r1, r2, pc}
     5a0:	40000400 	.word	0x40000400
     5a4:	40001800 	.word	0x40001800
     5a8:	200000a4 	.word	0x200000a4
     5ac:	e000e100 	.word	0xe000e100

000005b0 <is_button_one_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     5b0:	4b14      	ldr	r3, [pc, #80]	; (604 <is_button_one_pressed+0x54>)
     5b2:	4915      	ldr	r1, [pc, #84]	; (608 <is_button_one_pressed+0x58>)
     5b4:	6a18      	ldr	r0, [r3, #32]
     5b6:	4a15      	ldr	r2, [pc, #84]	; (60c <is_button_one_pressed+0x5c>)
     5b8:	4b15      	ldr	r3, [pc, #84]	; (610 <is_button_one_pressed+0x60>)
/************************************************************************/
/* Button 1 function													*/
/************************************************************************/
bool is_button_one_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_1)) {
     5ba:	0440      	lsls	r0, r0, #17
     5bc:	d418      	bmi.n	5f0 <is_button_one_pressed+0x40>
    BUTTON_ONE_PRESS_STATUS = true;
     5be:	2001      	movs	r0, #1
     5c0:	7008      	strb	r0, [r1, #0]
    press_B1_delay_count--;
     5c2:	6819      	ldr	r1, [r3, #0]
     5c4:	3901      	subs	r1, #1
     5c6:	6019      	str	r1, [r3, #0]
    long_press_B1_delay_count--;
     5c8:	6811      	ldr	r1, [r2, #0]
     5ca:	3901      	subs	r1, #1

  } else {
    BUTTON_ONE_PRESS_STATUS = false;
    press_B1_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B1_delay_count = DELAY_PRESS_CN;
     5cc:	6011      	str	r1, [r2, #0]

  }

  // long press delay logic
  if (long_press_B1_delay_count <= 0) {
     5ce:	6811      	ldr	r1, [r2, #0]
     5d0:	2900      	cmp	r1, #0
     5d2:	dc04      	bgt.n	5de <is_button_one_pressed+0x2e>
    LongPressB1Flag = true;
     5d4:	2001      	movs	r0, #1
     5d6:	490f      	ldr	r1, [pc, #60]	; (614 <is_button_one_pressed+0x64>)
     5d8:	7008      	strb	r0, [r1, #0]
    long_press_B1_delay_count = 0;
     5da:	2100      	movs	r1, #0
     5dc:	6011      	str	r1, [r2, #0]
     5de:	2000      	movs	r0, #0
  }

  // debounce logic
  if (press_B1_delay_count <= 0) {
     5e0:	6819      	ldr	r1, [r3, #0]
     5e2:	4a0d      	ldr	r2, [pc, #52]	; (618 <is_button_one_pressed+0x68>)
     5e4:	4281      	cmp	r1, r0
     5e6:	dc0a      	bgt.n	5fe <is_button_one_pressed+0x4e>
    BUTTON_ONE_RELEASE_STATUS = false;
     5e8:	7010      	strb	r0, [r2, #0]
    press_B1_delay_count = 0;
     5ea:	6018      	str	r0, [r3, #0]
    return true;
     5ec:	3001      	adds	r0, #1

  } else {
    BUTTON_ONE_RELEASE_STATUS = true;
    return false;
  }
}
     5ee:	4770      	bx	lr
    BUTTON_ONE_PRESS_STATUS = false;
     5f0:	2000      	movs	r0, #0
     5f2:	7008      	strb	r0, [r1, #0]
    press_B1_delay_count = DELAY_DEBOUNCE_CN;
     5f4:	2102      	movs	r1, #2
     5f6:	6019      	str	r1, [r3, #0]
    long_press_B1_delay_count = DELAY_PRESS_CN;
     5f8:	318f      	adds	r1, #143	; 0x8f
     5fa:	31ff      	adds	r1, #255	; 0xff
     5fc:	e7e6      	b.n	5cc <is_button_one_pressed+0x1c>
    BUTTON_ONE_RELEASE_STATUS = true;
     5fe:	2301      	movs	r3, #1
     600:	7013      	strb	r3, [r2, #0]
    return false;
     602:	e7f4      	b.n	5ee <is_button_one_pressed+0x3e>
     604:	41004400 	.word	0x41004400
     608:	2000003c 	.word	0x2000003c
     60c:	20000000 	.word	0x20000000
     610:	20000008 	.word	0x20000008
     614:	20000040 	.word	0x20000040
     618:	2000003d 	.word	0x2000003d

0000061c <is_button_two_pressed>:
     61c:	4b14      	ldr	r3, [pc, #80]	; (670 <is_button_two_pressed+0x54>)
     61e:	4915      	ldr	r1, [pc, #84]	; (674 <is_button_two_pressed+0x58>)
     620:	6a18      	ldr	r0, [r3, #32]
     622:	4a15      	ldr	r2, [pc, #84]	; (678 <is_button_two_pressed+0x5c>)
     624:	4b15      	ldr	r3, [pc, #84]	; (67c <is_button_two_pressed+0x60>)
/************************************************************************/
/* Button 2 function														*/
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     626:	0400      	lsls	r0, r0, #16
     628:	d418      	bmi.n	65c <is_button_two_pressed+0x40>
    BUTTON_TWO_PRESS_STATUS = true;
     62a:	2001      	movs	r0, #1
     62c:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count--;
     62e:	6819      	ldr	r1, [r3, #0]
     630:	3901      	subs	r1, #1
     632:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count--;
     634:	6811      	ldr	r1, [r2, #0]
     636:	3901      	subs	r1, #1

  } else {
    BUTTON_TWO_PRESS_STATUS = false;
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B2_delay_count = DELAY_PRESS_CN;
     638:	6011      	str	r1, [r2, #0]

  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     63a:	6811      	ldr	r1, [r2, #0]
     63c:	2900      	cmp	r1, #0
     63e:	dc04      	bgt.n	64a <is_button_two_pressed+0x2e>
    LongPressB2Flag = true;
     640:	2001      	movs	r0, #1
     642:	490f      	ldr	r1, [pc, #60]	; (680 <is_button_two_pressed+0x64>)
     644:	7008      	strb	r0, [r1, #0]
    long_press_B2_delay_count = 0;
     646:	2100      	movs	r1, #0
     648:	6011      	str	r1, [r2, #0]
     64a:	2000      	movs	r0, #0
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     64c:	6819      	ldr	r1, [r3, #0]
     64e:	4a0d      	ldr	r2, [pc, #52]	; (684 <is_button_two_pressed+0x68>)
     650:	4281      	cmp	r1, r0
     652:	dc0a      	bgt.n	66a <is_button_two_pressed+0x4e>
    BUTTON_TWO_RELEASE_STATUS = false;
     654:	7010      	strb	r0, [r2, #0]
    press_B2_delay_count = 0;
     656:	6018      	str	r0, [r3, #0]
    return true;
     658:	3001      	adds	r0, #1

  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
    return false;
  }
     65a:	4770      	bx	lr
    BUTTON_TWO_PRESS_STATUS = false;
     65c:	2000      	movs	r0, #0
     65e:	7008      	strb	r0, [r1, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     660:	2102      	movs	r1, #2
     662:	6019      	str	r1, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     664:	318f      	adds	r1, #143	; 0x8f
     666:	31ff      	adds	r1, #255	; 0xff
     668:	e7e6      	b.n	638 <is_button_two_pressed+0x1c>
    BUTTON_TWO_RELEASE_STATUS = true;
     66a:	2301      	movs	r3, #1
     66c:	7013      	strb	r3, [r2, #0]
    return false;
     66e:	e7f4      	b.n	65a <is_button_two_pressed+0x3e>
     670:	41004400 	.word	0x41004400
     674:	2000003e 	.word	0x2000003e
     678:	20000004 	.word	0x20000004
     67c:	2000000c 	.word	0x2000000c
     680:	20000041 	.word	0x20000041
     684:	2000003f 	.word	0x2000003f

00000688 <set_pwm_color_channel>:
#include "pwm_led.h"

uint8_t pwm_led_toggle_count = 0;


void set_pwm_color_channel(uint8_t channel, bool enable) {
     688:	b510      	push	{r4, lr}
     68a:	1e0a      	subs	r2, r1, #0
     68c:	4c0a      	ldr	r4, [pc, #40]	; (6b8 <set_pwm_color_channel+0x30>)
	
	
	if (enable){
     68e:	d000      	beq.n	692 <set_pwm_color_channel+0xa>
		tcc_set_compare_value(&tcc_instance,
     690:	4a0a      	ldr	r2, [pc, #40]	; (6bc <set_pwm_color_channel+0x34>)
		channel,
		INDICATION_LED_DUTY_CYCLE);
	}else{
		tcc_set_compare_value(&tcc_instance,
     692:	0001      	movs	r1, r0
     694:	0020      	movs	r0, r4
     696:	f001 fa9b 	bl	1bd0 <tcc_set_compare_value>
	Tcc *const tcc_module = module_inst->hw;
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     69a:	2104      	movs	r1, #4
     69c:	201f      	movs	r0, #31
     69e:	6822      	ldr	r2, [r4, #0]
     6a0:	6893      	ldr	r3, [r2, #8]
     6a2:	420b      	tst	r3, r1
     6a4:	d1fc      	bne.n	6a0 <set_pwm_color_channel+0x18>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     6a6:	7953      	ldrb	r3, [r2, #5]
     6a8:	4383      	bics	r3, r0
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     6aa:	d002      	beq.n	6b2 <set_pwm_color_channel+0x2a>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     6ac:	2b60      	cmp	r3, #96	; 0x60
     6ae:	d1f7      	bne.n	6a0 <set_pwm_color_channel+0x18>
		channel,
		ZERO_DUTY_CYCLE);
	}
	
	tcc_force_double_buffer_update(&tcc_instance);
}
     6b0:	bd10      	pop	{r4, pc}
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     6b2:	2360      	movs	r3, #96	; 0x60
     6b4:	7153      	strb	r3, [r2, #5]
     6b6:	e7fb      	b.n	6b0 <set_pwm_color_channel+0x28>
     6b8:	200000e4 	.word	0x200000e4
     6bc:	000003ff 	.word	0x000003ff

000006c0 <pwm_led_system_cleanup>:



void pwm_led_system_cleanup(void) {
	set_pwm_color_channel(RED_CHANNEL, false);
     6c0:	2100      	movs	r1, #0
void pwm_led_system_cleanup(void) {
     6c2:	b510      	push	{r4, lr}
	set_pwm_color_channel(RED_CHANNEL, false);
     6c4:	0008      	movs	r0, r1
     6c6:	f7ff ffdf 	bl	688 <set_pwm_color_channel>
	set_pwm_color_channel(BLUE_CHANNEL, false);
     6ca:	2100      	movs	r1, #0
     6cc:	2002      	movs	r0, #2
     6ce:	f7ff ffdb 	bl	688 <set_pwm_color_channel>
	set_pwm_color_channel(GREEN_CHANNEL, false);
     6d2:	2100      	movs	r1, #0
     6d4:	2001      	movs	r0, #1
     6d6:	f7ff ffd7 	bl	688 <set_pwm_color_channel>
	set_pwm_color_channel(WHITE_CHANNEL, false);
     6da:	2100      	movs	r1, #0
     6dc:	2003      	movs	r0, #3
     6de:	f7ff ffd3 	bl	688 <set_pwm_color_channel>
}
     6e2:	bd10      	pop	{r4, pc}

000006e4 <set_pwm_color>:



void set_pwm_color(int color) {
     6e4:	b510      	push	{r4, lr}
     6e6:	0004      	movs	r4, r0
	
	pwm_led_system_cleanup();
     6e8:	f7ff ffea 	bl	6c0 <pwm_led_system_cleanup>
	
	switch (color) {
     6ec:	2c06      	cmp	r4, #6
     6ee:	d80a      	bhi.n	706 <set_pwm_color+0x22>
     6f0:	0020      	movs	r0, r4
		case 5:  // Purple (Red + Blue)
		set_pwm_color_channel(RED_CHANNEL, true);
		set_pwm_color_channel(BLUE_CHANNEL, true);
		break;
		case 6:  // Cyan (Blue + Green)
		set_pwm_color_channel(BLUE_CHANNEL, true);
     6f2:	2101      	movs	r1, #1
	switch (color) {
     6f4:	f001 fe00 	bl	22f8 <__gnu_thumb1_case_uqi>
     6f8:	08140e04 	.word	0x08140e04
     6fc:	100a      	.short	0x100a
     6fe:	16          	.byte	0x16
     6ff:	00          	.byte	0x00
		set_pwm_color_channel(RED_CHANNEL, true);
     700:	2000      	movs	r0, #0
		set_pwm_color_channel(GREEN_CHANNEL, true);
     702:	f7ff ffc1 	bl	688 <set_pwm_color_channel>
		break;
		default:
		break;
	}
}
     706:	bd10      	pop	{r4, pc}
		set_pwm_color_channel(WHITE_CHANNEL, true);
     708:	2003      	movs	r0, #3
     70a:	e7fa      	b.n	702 <set_pwm_color+0x1e>
		set_pwm_color_channel(RED_CHANNEL, true);
     70c:	2000      	movs	r0, #0
		set_pwm_color_channel(BLUE_CHANNEL, true);
     70e:	f7ff ffbb 	bl	688 <set_pwm_color_channel>
		set_pwm_color_channel(GREEN_CHANNEL, true);
     712:	2101      	movs	r1, #1
     714:	0008      	movs	r0, r1
     716:	e7f4      	b.n	702 <set_pwm_color+0x1e>
		set_pwm_color_channel(RED_CHANNEL, true);
     718:	2000      	movs	r0, #0
     71a:	f7ff ffb5 	bl	688 <set_pwm_color_channel>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     71e:	2101      	movs	r1, #1
     720:	2002      	movs	r0, #2
     722:	e7ee      	b.n	702 <set_pwm_color+0x1e>
		set_pwm_color_channel(BLUE_CHANNEL, true);
     724:	2002      	movs	r0, #2
     726:	e7f2      	b.n	70e <set_pwm_color+0x2a>

00000728 <cycle_pwm_led>:
	tcc_enable(&tcc_instance);
	
}


void cycle_pwm_led(void) {
     728:	b510      	push	{r4, lr}
	switch (pwm_led_toggle_count) {
     72a:	4c13      	ldr	r4, [pc, #76]	; (778 <cycle_pwm_led+0x50>)
     72c:	7820      	ldrb	r0, [r4, #0]
     72e:	3801      	subs	r0, #1
     730:	2806      	cmp	r0, #6
     732:	d81b      	bhi.n	76c <cycle_pwm_led+0x44>
     734:	f001 fde0 	bl	22f8 <__gnu_thumb1_case_uqi>
     738:	12100a04 	.word	0x12100a04
     73c:	1614      	.short	0x1614
     73e:	18          	.byte	0x18
     73f:	00          	.byte	0x00
		case 1:
		SET_RED;
     740:	2000      	movs	r0, #0
     742:	f7ff ffcf 	bl	6e4 <set_pwm_color>
		set_color_red_indication();
     746:	f001 fc79 	bl	203c <set_color_red_indication>
		case 8:
		pwm_led_system_cleanup();							// Reset to 1 for red
		pwm_led_toggle_count = 0;
		break;
	}
}
     74a:	bd10      	pop	{r4, pc}
		set_color_blue_indication();
     74c:	f001 fc92 	bl	2074 <set_color_blue_indication>
		SET_GRN;
     750:	2001      	movs	r0, #1
		SET_WHT;
     752:	f7ff ffc7 	bl	6e4 <set_pwm_color>
		break;
     756:	e7f8      	b.n	74a <cycle_pwm_led+0x22>
		SET_BLU;
     758:	2002      	movs	r0, #2
     75a:	e7fa      	b.n	752 <cycle_pwm_led+0x2a>
		SET_YLW;
     75c:	2004      	movs	r0, #4
     75e:	e7f8      	b.n	752 <cycle_pwm_led+0x2a>
		SET_PLE;
     760:	2005      	movs	r0, #5
     762:	e7f6      	b.n	752 <cycle_pwm_led+0x2a>
		SET_CYN;
     764:	2006      	movs	r0, #6
     766:	e7f4      	b.n	752 <cycle_pwm_led+0x2a>
		SET_WHT;
     768:	2003      	movs	r0, #3
     76a:	e7f2      	b.n	752 <cycle_pwm_led+0x2a>
		pwm_led_system_cleanup();							// Reset to 1 for red
     76c:	f7ff ffa8 	bl	6c0 <pwm_led_system_cleanup>
		pwm_led_toggle_count = 0;
     770:	2300      	movs	r3, #0
     772:	7023      	strb	r3, [r4, #0]
}
     774:	e7e9      	b.n	74a <cycle_pwm_led+0x22>
     776:	46c0      	nop			; (mov r8, r8)
     778:	20000042 	.word	0x20000042

0000077c <configure_pwm_generator>:
	struct tc_config config_tc;
	tc_get_config_defaults (&config_tc);

	config_tc.clock_source = TC_CLOCK_SOURCE;
	config_tc.counter_size = TC_COUNTER_SIZE;
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     77c:	21a0      	movs	r1, #160	; 0xa0
{
     77e:	b500      	push	{lr}
     780:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     782:	aa01      	add	r2, sp, #4
	config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     784:	00c9      	lsls	r1, r1, #3
     786:	8091      	strh	r1, [r2, #4]

	config_tc.counter_8_bit.value = 0;
	config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     788:	212d      	movs	r1, #45	; 0x2d
     78a:	2300      	movs	r3, #0
     78c:	2055      	movs	r0, #85	; 0x55
     78e:	4469      	add	r1, sp

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;

	config->counter_16_bit.value                   = 0x0000;
     790:	8513      	strh	r3, [r2, #40]	; 0x28
     792:	7008      	strb	r0, [r1, #0]

	config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     794:	212e      	movs	r1, #46	; 0x2e
     796:	3840      	subs	r0, #64	; 0x40
     798:	4469      	add	r1, sp
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     79a:	8553      	strh	r3, [r2, #42]	; 0x2a
     79c:	7008      	strb	r0, [r1, #0]

	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     79e:	2140      	movs	r1, #64	; 0x40
	config->clock_source               = GCLK_GENERATOR_0;
     7a0:	7013      	strb	r3, [r2, #0]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     7a2:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     7a4:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     7a6:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     7a8:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     7aa:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     7ac:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     7ae:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     7b0:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     7b2:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     7b4:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     7b6:	8593      	strh	r3, [r2, #44]	; 0x2c
	config_tc.counter_size = TC_COUNTER_SIZE;
     7b8:	3304      	adds	r3, #4
     7ba:	7093      	strb	r3, [r2, #2]
	config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     7bc:	7191      	strb	r1, [r2, #6]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
	config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     7be:	6193      	str	r3, [r2, #24]
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     7c0:	3936      	subs	r1, #54	; 0x36

	config_tc.pwm_channel[0].enabled = true;
     7c2:	3b03      	subs	r3, #3
	config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     7c4:	6151      	str	r1, [r2, #20]
	config_tc.pwm_channel[0].enabled = true;
     7c6:	7413      	strb	r3, [r2, #16]
	
	tc_init (&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     7c8:	4902      	ldr	r1, [pc, #8]	; (7d4 <configure_pwm_generator+0x58>)
     7ca:	4803      	ldr	r0, [pc, #12]	; (7d8 <configure_pwm_generator+0x5c>)
     7cc:	f001 fa88 	bl	1ce0 <tc_init>
}
     7d0:	b00f      	add	sp, #60	; 0x3c
     7d2:	bd00      	pop	{pc}
     7d4:	42001c00 	.word	0x42001c00
     7d8:	200001e4 	.word	0x200001e4

000007dc <motor_enable>:



void motor_enable(void){
     7dc:	b510      	push	{r4, lr}
     7de:	4b09      	ldr	r3, [pc, #36]	; (804 <motor_enable+0x28>)
     7e0:	681b      	ldr	r3, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     7e2:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     7e4:	b252      	sxtb	r2, r2
     7e6:	2a00      	cmp	r2, #0
     7e8:	dbfb      	blt.n	7e2 <motor_enable+0x6>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     7ea:	2202      	movs	r2, #2
     7ec:	8819      	ldrh	r1, [r3, #0]
     7ee:	430a      	orrs	r2, r1
     7f0:	801a      	strh	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     7f2:	2240      	movs	r2, #64	; 0x40
     7f4:	4b04      	ldr	r3, [pc, #16]	; (808 <motor_enable+0x2c>)
     7f6:	619a      	str	r2, [r3, #24]
	tc_enable(&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
	motor_running = true;
     7f8:	4b04      	ldr	r3, [pc, #16]	; (80c <motor_enable+0x30>)
     7fa:	3a3f      	subs	r2, #63	; 0x3f
     7fc:	701a      	strb	r2, [r3, #0]
	set_motor_speed_1_indication();
     7fe:	f001 fc73 	bl	20e8 <set_motor_speed_1_indication>

}
     802:	bd10      	pop	{r4, pc}
     804:	200001e4 	.word	0x200001e4
     808:	41004400 	.word	0x41004400
     80c:	20000044 	.word	0x20000044

00000810 <motor_disable>:


void motor_disable(void){
	pulsating_motor_routine = false;
     810:	2100      	movs	r1, #0
     812:	4b0e      	ldr	r3, [pc, #56]	; (84c <motor_disable+0x3c>)
void motor_disable(void){
     814:	b510      	push	{r4, lr}
	pulsating_motor_routine = false;
     816:	7019      	strb	r1, [r3, #0]
	motor_toggle_count = 0;
     818:	4b0d      	ldr	r3, [pc, #52]	; (850 <motor_disable+0x40>)
	motor_running = false;

	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     81a:	4c0e      	ldr	r4, [pc, #56]	; (854 <motor_disable+0x44>)
	motor_toggle_count = 0;
     81c:	7019      	strb	r1, [r3, #0]
	motor_running = false;
     81e:	4b0e      	ldr	r3, [pc, #56]	; (858 <motor_disable+0x48>)
	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     820:	2215      	movs	r2, #21
     822:	0020      	movs	r0, r4
	motor_running = false;
     824:	7019      	strb	r1, [r3, #0]
	tc_set_compare_value (&pwm_generator_instance,TC_COMPARE_CAPTURE_CHANNEL_0,INITIAL_DUTY_CYCLE);
     826:	f001 fb6f 	bl	1f08 <tc_set_compare_value>
     82a:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     82c:	7bda      	ldrb	r2, [r3, #15]
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);

	while (tc_is_syncing(module_inst)) {
     82e:	b252      	sxtb	r2, r2
     830:	2a00      	cmp	r2, #0
     832:	dbfb      	blt.n	82c <motor_disable+0x1c>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     834:	223b      	movs	r2, #59	; 0x3b
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     836:	2102      	movs	r1, #2
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     838:	731a      	strb	r2, [r3, #12]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     83a:	739a      	strb	r2, [r3, #14]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     83c:	881a      	ldrh	r2, [r3, #0]
     83e:	438a      	bics	r2, r1
     840:	801a      	strh	r2, [r3, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     842:	2240      	movs	r2, #64	; 0x40
     844:	4b05      	ldr	r3, [pc, #20]	; (85c <motor_disable+0x4c>)
     846:	615a      	str	r2, [r3, #20]
	tc_disable (&pwm_generator_instance);
	port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);

}
     848:	bd10      	pop	{r4, pc}
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	20000046 	.word	0x20000046
     850:	20000045 	.word	0x20000045
     854:	200001e4 	.word	0x200001e4
     858:	20000044 	.word	0x20000044
     85c:	41004400 	.word	0x41004400

00000860 <cycle_pwm_motor>:



void cycle_pwm_motor (void)
{
     860:	b510      	push	{r4, lr}
	{
		if (motor_running)
     862:	4b16      	ldr	r3, [pc, #88]	; (8bc <cycle_pwm_motor+0x5c>)
     864:	781b      	ldrb	r3, [r3, #0]
     866:	2b00      	cmp	r3, #0
     868:	d00a      	beq.n	880 <cycle_pwm_motor+0x20>
		{
			
			if (motor_toggle_count == 2)
     86a:	4b15      	ldr	r3, [pc, #84]	; (8c0 <cycle_pwm_motor+0x60>)
     86c:	781b      	ldrb	r3, [r3, #0]
     86e:	2b02      	cmp	r3, #2
     870:	d107      	bne.n	882 <cycle_pwm_motor+0x22>
			{
				tc_set_compare_value (&pwm_generator_instance,
     872:	2222      	movs	r2, #34	; 0x22
     874:	2100      	movs	r1, #0
     876:	4813      	ldr	r0, [pc, #76]	; (8c4 <cycle_pwm_motor+0x64>)
     878:	f001 fb46 	bl	1f08 <tc_set_compare_value>
				TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
				set_motor_speed_2_indication();
     87c:	f001 fc60 	bl	2140 <set_motor_speed_2_indication>
				
			}
		}
	}

}
     880:	bd10      	pop	{r4, pc}
			else if (motor_toggle_count == 3)
     882:	2b03      	cmp	r3, #3
     884:	d107      	bne.n	896 <cycle_pwm_motor+0x36>
				tc_set_compare_value (&pwm_generator_instance,
     886:	224d      	movs	r2, #77	; 0x4d
     888:	2100      	movs	r1, #0
     88a:	480e      	ldr	r0, [pc, #56]	; (8c4 <cycle_pwm_motor+0x64>)
     88c:	f001 fb3c 	bl	1f08 <tc_set_compare_value>
				set_motor_speed_3_indication();
     890:	f001 fc82 	bl	2198 <set_motor_speed_3_indication>
     894:	e7f4      	b.n	880 <cycle_pwm_motor+0x20>
			else if (motor_toggle_count == 4)
     896:	2b04      	cmp	r3, #4
     898:	d10a      	bne.n	8b0 <cycle_pwm_motor+0x50>
				pulsating_motor_routine = true;
     89a:	2201      	movs	r2, #1
     89c:	4b0a      	ldr	r3, [pc, #40]	; (8c8 <cycle_pwm_motor+0x68>)
				tc_set_compare_value (&pwm_generator_instance,
     89e:	2100      	movs	r1, #0
				pulsating_motor_routine = true;
     8a0:	701a      	strb	r2, [r3, #0]
				tc_set_compare_value (&pwm_generator_instance,
     8a2:	4808      	ldr	r0, [pc, #32]	; (8c4 <cycle_pwm_motor+0x64>)
     8a4:	324c      	adds	r2, #76	; 0x4c
     8a6:	f001 fb2f 	bl	1f08 <tc_set_compare_value>
				set_motor_pulsating_indication();
     8aa:	f001 fca1 	bl	21f0 <set_motor_pulsating_indication>
     8ae:	e7e7      	b.n	880 <cycle_pwm_motor+0x20>
			else if (motor_toggle_count > 4)
     8b0:	2b04      	cmp	r3, #4
     8b2:	d9e5      	bls.n	880 <cycle_pwm_motor+0x20>
					motor_disable();
     8b4:	f7ff ffac 	bl	810 <motor_disable>
}
     8b8:	e7e2      	b.n	880 <cycle_pwm_motor+0x20>
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	20000044 	.word	0x20000044
     8c0:	20000045 	.word	0x20000045
     8c4:	200001e4 	.word	0x200001e4
     8c8:	20000046 	.word	0x20000046

000008cc <toggle_nsleep>:



 void toggle_nsleep(void){
	 static bool PULSATING_MOTOR = false;
	 if (pulsating_motor_routine){
     8cc:	4b08      	ldr	r3, [pc, #32]	; (8f0 <toggle_nsleep+0x24>)
     8ce:	781b      	ldrb	r3, [r3, #0]
     8d0:	2b00      	cmp	r3, #0
     8d2:	d008      	beq.n	8e6 <toggle_nsleep+0x1a>
		 if (PULSATING_MOTOR){
     8d4:	4b07      	ldr	r3, [pc, #28]	; (8f4 <toggle_nsleep+0x28>)
     8d6:	4a08      	ldr	r2, [pc, #32]	; (8f8 <toggle_nsleep+0x2c>)
     8d8:	7818      	ldrb	r0, [r3, #0]
     8da:	2140      	movs	r1, #64	; 0x40
     8dc:	2800      	cmp	r0, #0
     8de:	d003      	beq.n	8e8 <toggle_nsleep+0x1c>
     8e0:	6151      	str	r1, [r2, #20]
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,LOW);
			 PULSATING_MOTOR = false;
     8e2:	2200      	movs	r2, #0
     8e4:	701a      	strb	r2, [r3, #0]
			 }else{
			 PULSATING_MOTOR = true;
			 port_pin_set_output_level(MOTOR_NSLEEP_PIN,HIGH);
		 }
	 }
 }
     8e6:	4770      	bx	lr
			 PULSATING_MOTOR = true;
     8e8:	2001      	movs	r0, #1
     8ea:	7018      	strb	r0, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     8ec:	6191      	str	r1, [r2, #24]
 }
     8ee:	e7fa      	b.n	8e6 <toggle_nsleep+0x1a>
     8f0:	20000046 	.word	0x20000046
     8f4:	20000043 	.word	0x20000043
     8f8:	41004400 	.word	0x41004400

000008fc <regular_routine>:

 }



 void regular_routine(void) {
     8fc:	b510      	push	{r4, lr}
	 static bool motor_status_changed = false;
	 static bool led_button_status_changed = false;

	 //-------------------------------------------------------------

	 if (is_button_one_pressed()) {
     8fe:	f7ff fe57 	bl	5b0 <is_button_one_pressed>
     902:	2800      	cmp	r0, #0
     904:	d007      	beq.n	916 <regular_routine+0x1a>
		if (LongPressB1Flag) {
     906:	4c2b      	ldr	r4, [pc, #172]	; (9b4 <regular_routine+0xb8>)
     908:	7823      	ldrb	r3, [r4, #0]
     90a:	2b00      	cmp	r3, #0
     90c:	d02f      	beq.n	96e <regular_routine+0x72>
	 motor_disable();						// shutdown pwm motor
     90e:	f7ff ff7f 	bl	810 <motor_disable>
			system_inactive();
			LongPressB1Flag = false;								// ALLOW IT TO CYCLE AGAIN
     912:	2300      	movs	r3, #0
     914:	7023      	strb	r3, [r4, #0]
				}
		}
		 }
	 }

	 if (BUTTON_ONE_RELEASE_STATUS) {
     916:	4b28      	ldr	r3, [pc, #160]	; (9b8 <regular_routine+0xbc>)
     918:	781b      	ldrb	r3, [r3, #0]
     91a:	2b00      	cmp	r3, #0
     91c:	d002      	beq.n	924 <regular_routine+0x28>
		 motor_status_changed = false;
     91e:	2200      	movs	r2, #0
     920:	4b26      	ldr	r3, [pc, #152]	; (9bc <regular_routine+0xc0>)
     922:	701a      	strb	r2, [r3, #0]
	 }

	 //-------------------------------------------------------------

	 if (is_button_two_pressed()) {
     924:	f7ff fe7a 	bl	61c <is_button_two_pressed>
     928:	2800      	cmp	r0, #0
     92a:	d007      	beq.n	93c <regular_routine+0x40>
		 if (LongPressB2Flag) {
     92c:	4c24      	ldr	r4, [pc, #144]	; (9c0 <regular_routine+0xc4>)
     92e:	7823      	ldrb	r3, [r4, #0]
     930:	2b00      	cmp	r3, #0
     932:	d030      	beq.n	996 <regular_routine+0x9a>
	 motor_disable();						// shutdown pwm motor
     934:	f7ff ff6c 	bl	810 <motor_disable>
			 system_inactive();
			 LongPressB2Flag = false;															// ALLOW IT TO CYCLE AGAIN
     938:	2300      	movs	r3, #0
     93a:	7023      	strb	r3, [r4, #0]
				 led_button_status_changed = true;
				 cycle_pwm_led();
			 }
		 }
	 }
	 if (BUTTON_TWO_RELEASE_STATUS) {
     93c:	4b21      	ldr	r3, [pc, #132]	; (9c4 <regular_routine+0xc8>)
     93e:	781b      	ldrb	r3, [r3, #0]
     940:	2b00      	cmp	r3, #0
     942:	d002      	beq.n	94a <regular_routine+0x4e>
		 led_button_status_changed = false;
     944:	2200      	movs	r2, #0
     946:	4b20      	ldr	r3, [pc, #128]	; (9c8 <regular_routine+0xcc>)
     948:	701a      	strb	r2, [r3, #0]
	 }

	 if (Vbus_State == false) {
     94a:	4b20      	ldr	r3, [pc, #128]	; (9cc <regular_routine+0xd0>)
     94c:	781b      	ldrb	r3, [r3, #0]
     94e:	2b00      	cmp	r3, #0
     950:	d00c      	beq.n	96c <regular_routine+0x70>
		;																						// Enable Motor PWM
	 } else {
	
		if (motor_running){
     952:	4b1f      	ldr	r3, [pc, #124]	; (9d0 <regular_routine+0xd4>)
     954:	781b      	ldrb	r3, [r3, #0]
     956:	2b00      	cmp	r3, #0
     958:	d001      	beq.n	95e <regular_routine+0x62>
	 motor_disable();						// shutdown pwm motor
     95a:	f7ff ff59 	bl	810 <motor_disable>
			system_inactive();
		}
																								// ITS PLUGGED IN
		if (Chargn_On_State == false) {															// battery charging (plugged in)
     95e:	4b1d      	ldr	r3, [pc, #116]	; (9d4 <regular_routine+0xd8>)
     960:	781a      	ldrb	r2, [r3, #0]
     962:	4b1d      	ldr	r3, [pc, #116]	; (9d8 <regular_routine+0xdc>)
     964:	2a00      	cmp	r2, #0
     966:	d123      	bne.n	9b0 <regular_routine+0xb4>
			BATTERY_CHARGING = true;															// show battery charge routine
     968:	3201      	adds	r2, #1
		} else {
			BATTERY_CHARGING = false;
     96a:	701a      	strb	r2, [r3, #0]
		}
		
	}
 }
     96c:	bd10      	pop	{r4, pc}
			if (!motor_status_changed) {
     96e:	4a13      	ldr	r2, [pc, #76]	; (9bc <regular_routine+0xc0>)
     970:	7813      	ldrb	r3, [r2, #0]
     972:	2b00      	cmp	r3, #0
     974:	d1cf      	bne.n	916 <regular_routine+0x1a>
				motor_toggle_count++;
     976:	4919      	ldr	r1, [pc, #100]	; (9dc <regular_routine+0xe0>)
     978:	780b      	ldrb	r3, [r1, #0]
     97a:	3301      	adds	r3, #1
     97c:	700b      	strb	r3, [r1, #0]
				motor_status_changed = true;
     97e:	2301      	movs	r3, #1
     980:	7013      	strb	r3, [r2, #0]
				if (!motor_running) {
     982:	4b13      	ldr	r3, [pc, #76]	; (9d0 <regular_routine+0xd4>)
     984:	781b      	ldrb	r3, [r3, #0]
     986:	2b00      	cmp	r3, #0
     988:	d102      	bne.n	990 <regular_routine+0x94>
					motor_enable();
     98a:	f7ff ff27 	bl	7dc <motor_enable>
     98e:	e7c2      	b.n	916 <regular_routine+0x1a>
					cycle_pwm_motor();
     990:	f7ff ff66 	bl	860 <cycle_pwm_motor>
     994:	e7bf      	b.n	916 <regular_routine+0x1a>
			 if (!led_button_status_changed) {
     996:	4a0c      	ldr	r2, [pc, #48]	; (9c8 <regular_routine+0xcc>)
     998:	7813      	ldrb	r3, [r2, #0]
     99a:	2b00      	cmp	r3, #0
     99c:	d1ce      	bne.n	93c <regular_routine+0x40>
				 pwm_led_toggle_count++;
     99e:	4910      	ldr	r1, [pc, #64]	; (9e0 <regular_routine+0xe4>)
     9a0:	780b      	ldrb	r3, [r1, #0]
     9a2:	3301      	adds	r3, #1
     9a4:	700b      	strb	r3, [r1, #0]
				 led_button_status_changed = true;
     9a6:	2301      	movs	r3, #1
     9a8:	7013      	strb	r3, [r2, #0]
				 cycle_pwm_led();
     9aa:	f7ff febd 	bl	728 <cycle_pwm_led>
     9ae:	e7c5      	b.n	93c <regular_routine+0x40>
			BATTERY_CHARGING = false;
     9b0:	2200      	movs	r2, #0
     9b2:	e7da      	b.n	96a <regular_routine+0x6e>
     9b4:	20000040 	.word	0x20000040
     9b8:	2000003d 	.word	0x2000003d
     9bc:	2000004c 	.word	0x2000004c
     9c0:	20000041 	.word	0x20000041
     9c4:	2000003f 	.word	0x2000003f
     9c8:	2000004b 	.word	0x2000004b
     9cc:	20000201 	.word	0x20000201
     9d0:	20000044 	.word	0x20000044
     9d4:	20000202 	.word	0x20000202
     9d8:	20000048 	.word	0x20000048
     9dc:	20000045 	.word	0x20000045
     9e0:	20000042 	.word	0x20000042

000009e4 <system_logic>:
 /************************************************************************/
 /* LOGIC MACHINE		                                                */
 /************************************************************************/


 void system_logic(void) {
     9e4:	b510      	push	{r4, lr}
	 if (SYS_TICK_10MS) {
     9e6:	4b0a      	ldr	r3, [pc, #40]	; (a10 <system_logic+0x2c>)
     9e8:	781a      	ldrb	r2, [r3, #0]
     9ea:	2a00      	cmp	r2, #0
     9ec:	d005      	beq.n	9fa <system_logic+0x16>
		 SYS_TICK_10MS = false;
     9ee:	2200      	movs	r2, #0
     9f0:	701a      	strb	r2, [r3, #0]
		 system_state();						// Get latest system_state
     9f2:	f000 f95d 	bl	cb0 <system_state>
		 regular_routine();
     9f6:	f7ff ff81 	bl	8fc <regular_routine>
	 }

	 if (SYS_TICK_200MS) {
     9fa:	4b06      	ldr	r3, [pc, #24]	; (a14 <system_logic+0x30>)
     9fc:	781a      	ldrb	r2, [r3, #0]
     9fe:	2a00      	cmp	r2, #0
     a00:	d005      	beq.n	a0e <system_logic+0x2a>
		 SYS_TICK_200MS = false;
     a02:	2200      	movs	r2, #0
     a04:	701a      	strb	r2, [r3, #0]
		 toggle_nsleep();
     a06:	f7ff ff61 	bl	8cc <toggle_nsleep>
		 sample_adc();
     a0a:	f7ff fb9f 	bl	14c <sample_adc>
		 get_battery_level();
	 }

     a0e:	bd10      	pop	{r4, pc}
     a10:	2000004e 	.word	0x2000004e
     a14:	2000004f 	.word	0x2000004f

00000a18 <sys_tc_callback>:
	static int tick_count_100ms;
	static int tick_count_200ms;
	//static int tick_count_500ms;
	//static int tick_count_1000ms;

	tick_count_1ms++;
     a18:	4919      	ldr	r1, [pc, #100]	; (a80 <sys_tc_callback+0x68>)
     a1a:	680b      	ldr	r3, [r1, #0]
     a1c:	1c5a      	adds	r2, r3, #1
     a1e:	600a      	str	r2, [r1, #0]
     a20:	4b18      	ldr	r3, [pc, #96]	; (a84 <sys_tc_callback+0x6c>)
	
	
	//port_pin_toggle_output_level (LED0_PIN);					// visually check sys clock on PA16
	
	// Check for 10ms interval
	if (tick_count_1ms >= 10)
     a22:	2a09      	cmp	r2, #9
     a24:	dd07      	ble.n	a36 <sys_tc_callback+0x1e>
	{
		tick_count_10ms++;
     a26:	681a      	ldr	r2, [r3, #0]
     a28:	3201      	adds	r2, #1
     a2a:	601a      	str	r2, [r3, #0]
		tick_count_1ms = 0;
     a2c:	2200      	movs	r2, #0
     a2e:	600a      	str	r2, [r1, #0]
		SYS_TICK_10MS = true;									// Flag for 10ms interval
     a30:	2101      	movs	r1, #1
     a32:	4a15      	ldr	r2, [pc, #84]	; (a88 <sys_tc_callback+0x70>)
     a34:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 50ms interval
	if (tick_count_10ms >= 5)
     a36:	6819      	ldr	r1, [r3, #0]
     a38:	4a14      	ldr	r2, [pc, #80]	; (a8c <sys_tc_callback+0x74>)
     a3a:	2904      	cmp	r1, #4
     a3c:	dd07      	ble.n	a4e <sys_tc_callback+0x36>
	{
		tick_count_50ms++;
     a3e:	6811      	ldr	r1, [r2, #0]
     a40:	3101      	adds	r1, #1
     a42:	6011      	str	r1, [r2, #0]
		tick_count_10ms = 0;
     a44:	2100      	movs	r1, #0
     a46:	6019      	str	r1, [r3, #0]
		SYS_TICK_50MS = true;									// Flag for 50ms interval
     a48:	4b11      	ldr	r3, [pc, #68]	; (a90 <sys_tc_callback+0x78>)
     a4a:	3101      	adds	r1, #1
     a4c:	7019      	strb	r1, [r3, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	// Check for 100ms interval
	if (tick_count_50ms >= 2)
     a4e:	6811      	ldr	r1, [r2, #0]
     a50:	4b10      	ldr	r3, [pc, #64]	; (a94 <sys_tc_callback+0x7c>)
     a52:	2901      	cmp	r1, #1
     a54:	dd07      	ble.n	a66 <sys_tc_callback+0x4e>
	{
		tick_count_100ms++;
     a56:	6819      	ldr	r1, [r3, #0]
     a58:	3101      	adds	r1, #1
     a5a:	6019      	str	r1, [r3, #0]
		tick_count_50ms = 0;
     a5c:	2100      	movs	r1, #0
     a5e:	6011      	str	r1, [r2, #0]
		SYS_TICK_100MS = true;									// Flag for 100ms interval
     a60:	4a0d      	ldr	r2, [pc, #52]	; (a98 <sys_tc_callback+0x80>)
     a62:	3101      	adds	r1, #1
     a64:	7011      	strb	r1, [r2, #0]
		//port_pin_toggle_output_level (LED0_PIN);				// visually check sys clock on PA16
	}
	
	
	// Check for 200ms interval
	if (tick_count_100ms >= 2)
     a66:	681a      	ldr	r2, [r3, #0]
     a68:	2a01      	cmp	r2, #1
     a6a:	dd08      	ble.n	a7e <sys_tc_callback+0x66>
	{
		tick_count_200ms++;
     a6c:	490b      	ldr	r1, [pc, #44]	; (a9c <sys_tc_callback+0x84>)
     a6e:	680a      	ldr	r2, [r1, #0]
     a70:	3201      	adds	r2, #1
     a72:	600a      	str	r2, [r1, #0]
		tick_count_100ms = 0;
     a74:	2200      	movs	r2, #0
     a76:	601a      	str	r2, [r3, #0]
		SYS_TICK_200MS = true;									// Flag for 200ms interval
     a78:	4b09      	ldr	r3, [pc, #36]	; (aa0 <sys_tc_callback+0x88>)
     a7a:	3201      	adds	r2, #1
     a7c:	701a      	strb	r2, [r3, #0]
		//tick_count_500ms = 0;
		//SYS_TICK_1000MS = true;                                 // Flag for 1000ms interval
		////port_pin_toggle_output_level (LED0_PIN);               // visually check sys clock on PA16
	//}
	
}
     a7e:	4770      	bx	lr
     a80:	2000005c 	.word	0x2000005c
     a84:	20000058 	.word	0x20000058
     a88:	2000004e 	.word	0x2000004e
     a8c:	20000064 	.word	0x20000064
     a90:	20000050 	.word	0x20000050
     a94:	20000054 	.word	0x20000054
     a98:	2000004d 	.word	0x2000004d
     a9c:	20000060 	.word	0x20000060
     aa0:	2000004f 	.word	0x2000004f

00000aa4 <configure_port_pins>:
{
     aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     aa6:	2502      	movs	r5, #2
	config->direction  = PORT_PIN_DIR_INPUT;
     aa8:	2700      	movs	r7, #0
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     aaa:	2601      	movs	r6, #1
     aac:	ac01      	add	r4, sp, #4
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     aae:	0021      	movs	r1, r4
     ab0:	201b      	movs	r0, #27
     ab2:	7027      	strb	r7, [r4, #0]
	config->powersave  = false;
     ab4:	70a7      	strb	r7, [r4, #2]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     ab6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(VBUS_PIN, &config_port_pin);
     ab8:	f000 f932 	bl	d20 <port_pin_set_config>
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     abc:	0021      	movs	r1, r4
     abe:	2006      	movs	r0, #6
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     ac0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     ac2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     ac4:	f000 f92c 	bl	d20 <port_pin_set_config>
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     ac8:	0021      	movs	r1, r4
     aca:	2007      	movs	r0, #7
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     acc:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;								// START AT PULL UP.
     ace:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     ad0:	f000 f926 	bl	d20 <port_pin_set_config>
	port_pin_set_config(BUTTON_2, &config_port_pin);
     ad4:	0021      	movs	r1, r4
     ad6:	200f      	movs	r0, #15
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     ad8:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     ada:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_2, &config_port_pin);
     adc:	f000 f920 	bl	d20 <port_pin_set_config>
	port_pin_set_config(CHARGING_PIN, &config_port_pin);
     ae0:	0021      	movs	r1, r4
     ae2:	200b      	movs	r0, #11
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     ae4:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     ae6:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGING_PIN, &config_port_pin);
     ae8:	f000 f91a 	bl	d20 <port_pin_set_config>
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     aec:	0021      	movs	r1, r4
     aee:	2003      	movs	r0, #3
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     af0:	7026      	strb	r6, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     af2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     af4:	f000 f914 	bl	d20 <port_pin_set_config>
	port_pin_set_config(SAMPLE_ADC_PIN, &config_port_pin);
     af8:	0028      	movs	r0, r5
     afa:	0021      	movs	r1, r4
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     afc:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_DOWN;							// START AT PULL DOWN.
     afe:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(SAMPLE_ADC_PIN, &config_port_pin);
     b00:	f000 f90e 	bl	d20 <port_pin_set_config>
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     b04:	0021      	movs	r1, r4
     b06:	2010      	movs	r0, #16
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
     b08:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(XPLAINED_LED, &config_port_pin);
     b0a:	f000 f909 	bl	d20 <port_pin_set_config>
	port_pin_set_config(BUTTON_1, &config_port_pin);
     b0e:	0021      	movs	r1, r4
     b10:	200e      	movs	r0, #14
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
     b12:	7027      	strb	r7, [r4, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
     b14:	7066      	strb	r6, [r4, #1]
	port_pin_set_config(BUTTON_1, &config_port_pin);
     b16:	f000 f903 	bl	d20 <port_pin_set_config>
}
     b1a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

00000b1c <configure_system_tc>:
	config->clock_source               = GCLK_GENERATOR_0;
     b1c:	2300      	movs	r3, #0
 {
     b1e:	b510      	push	{r4, lr}
     b20:	b08e      	sub	sp, #56	; 0x38
     b22:	aa01      	add	r2, sp, #4
	config->counter_16_bit.value                   = 0x0000;
     b24:	8513      	strh	r3, [r2, #40]	; 0x28
	config->clock_source               = GCLK_GENERATOR_0;
     b26:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     b28:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     b2a:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     b2c:	7053      	strb	r3, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     b2e:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     b30:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     b32:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
     b34:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
     b36:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     b38:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     b3a:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     b3c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     b3e:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     b40:	6253      	str	r3, [r2, #36]	; 0x24
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     b42:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     b44:	8593      	strh	r3, [r2, #44]	; 0x2c
	 config_tc.counter_size = TC_COUNTER_SIZE;
     b46:	3304      	adds	r3, #4
     b48:	7093      	strb	r3, [r2, #2]
	 config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     b4a:	23a0      	movs	r3, #160	; 0xa0
     b4c:	00db      	lsls	r3, r3, #3
     b4e:	8093      	strh	r3, [r2, #4]
	 config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
     b50:	232d      	movs	r3, #45	; 0x2d
     b52:	216f      	movs	r1, #111	; 0x6f
     b54:	446b      	add	r3, sp
     b56:	7019      	strb	r1, [r3, #0]
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     b58:	2301      	movs	r3, #1
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     b5a:	4c08      	ldr	r4, [pc, #32]	; (b7c <configure_system_tc+0x60>)
	 config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
     b5c:	7413      	strb	r3, [r2, #16]
	 tc_init (&system_timer_instance, SYSTEM_TC, &config_tc);
     b5e:	4908      	ldr	r1, [pc, #32]	; (b80 <configure_system_tc+0x64>)
     b60:	0020      	movs	r0, r4
     b62:	f001 f8bd 	bl	1ce0 <tc_init>
     b66:	6823      	ldr	r3, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b68:	7bda      	ldrb	r2, [r3, #15]
	while (tc_is_syncing(module_inst)) {
     b6a:	b252      	sxtb	r2, r2
     b6c:	2a00      	cmp	r2, #0
     b6e:	dbfb      	blt.n	b68 <configure_system_tc+0x4c>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     b70:	2202      	movs	r2, #2
     b72:	8819      	ldrh	r1, [r3, #0]
     b74:	430a      	orrs	r2, r1
     b76:	801a      	strh	r2, [r3, #0]
 }
     b78:	b00e      	add	sp, #56	; 0x38
     b7a:	bd10      	pop	{r4, pc}
     b7c:	20000124 	.word	0x20000124
     b80:	42001800 	.word	0x42001800

00000b84 <system_tc_callbacks>:
{
     b84:	b510      	push	{r4, lr}
	tc_register_callback (&system_timer_instance, sys_tc_callback,
     b86:	4c0c      	ldr	r4, [pc, #48]	; (bb8 <system_tc_callbacks+0x34>)
     b88:	2200      	movs	r2, #0
     b8a:	490c      	ldr	r1, [pc, #48]	; (bbc <system_tc_callbacks+0x38>)
     b8c:	0020      	movs	r0, r4
     b8e:	f001 f84a 	bl	1c26 <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     b92:	6820      	ldr	r0, [r4, #0]
     b94:	f001 f892 	bl	1cbc <_tc_get_inst_index>
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <system_tc_callbacks+0x3c>)
     b9a:	5c1a      	ldrb	r2, [r3, r0]
     b9c:	231f      	movs	r3, #31
     b9e:	401a      	ands	r2, r3
     ba0:	3b1e      	subs	r3, #30
     ba2:	0019      	movs	r1, r3
     ba4:	4091      	lsls	r1, r2
     ba6:	4a07      	ldr	r2, [pc, #28]	; (bc4 <system_tc_callbacks+0x40>)
     ba8:	6011      	str	r1, [r2, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
     baa:	7e62      	ldrb	r2, [r4, #25]
     bac:	431a      	orrs	r2, r3
     bae:	7662      	strb	r2, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     bb0:	6822      	ldr	r2, [r4, #0]
     bb2:	7353      	strb	r3, [r2, #13]
}
     bb4:	bd10      	pop	{r4, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	20000124 	.word	0x20000124
     bbc:	00000a19 	.word	0x00000a19
     bc0:	00003d98 	.word	0x00003d98
     bc4:	e000e100 	.word	0xe000e100

00000bc8 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
     bc8:	2240      	movs	r2, #64	; 0x40
     bca:	4b07      	ldr	r3, [pc, #28]	; (be8 <startup_default_pin_state+0x20>)
     bcc:	615a      	str	r2, [r3, #20]
     bce:	1892      	adds	r2, r2, r2
     bd0:	615a      	str	r2, [r3, #20]
     bd2:	2280      	movs	r2, #128	; 0x80
     bd4:	0212      	lsls	r2, r2, #8
     bd6:	615a      	str	r2, [r3, #20]
     bd8:	2280      	movs	r2, #128	; 0x80
     bda:	0112      	lsls	r2, r2, #4
     bdc:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
     bde:	2208      	movs	r2, #8
     be0:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
     be2:	3a04      	subs	r2, #4
     be4:	615a      	str	r2, [r3, #20]
	 port_pin_set_output_level(SWITCH_OFF_PIN,LOW);
	 port_pin_set_output_level(BUTTON_2,LOW);
	 port_pin_set_output_level(CHARGING_PIN,LOW);
	 port_pin_set_output_level(CHARGN_OFF_PIN,HIGH);
	 port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
 }
     be6:	4770      	bx	lr
     be8:	41004400 	.word	0x41004400

00000bec <startup_sys_configs>:


/************************************************************************/
/* SYSTEM startup function call (config functions)						*/
/************************************************************************/
void startup_sys_configs(void){
     bec:	b510      	push	{r4, lr}
	system_init();									// System Initialize
     bee:	f000 ffbc 	bl	1b6a <system_init>
	cpu_irq_enable();
     bf2:	2201      	movs	r2, #1
     bf4:	4b09      	ldr	r3, [pc, #36]	; (c1c <startup_sys_configs+0x30>)
     bf6:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     bf8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     bfc:	b662      	cpsie	i
	system_interrupt_enable_global();				// System Interrupts
	configure_port_pins();							// System PORTs
     bfe:	f7ff ff51 	bl	aa4 <configure_port_pins>
	startup_default_pin_state();
     c02:	f7ff ffe1 	bl	bc8 <startup_default_pin_state>
	configure_system_tc();							// System Clock
     c06:	f7ff ff89 	bl	b1c <configure_system_tc>
	system_tc_callbacks();							// System Clock Callback
     c0a:	f7ff ffbb 	bl	b84 <system_tc_callbacks>
	i2c_master_setup();								// Startup I2C
     c0e:	f001 fb39 	bl	2284 <i2c_master_setup>
	//configure_pwm_tcc();							// Startup PWM
	configure_adc();
     c12:	f7ff fa79 	bl	108 <configure_adc>
	configure_pwm_generator();
     c16:	f7ff fdb1 	bl	77c <configure_pwm_generator>
     c1a:	bd10      	pop	{r4, pc}
     c1c:	20000010 	.word	0x20000010

00000c20 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
     c20:	2101      	movs	r1, #1
     c22:	4b06      	ldr	r3, [pc, #24]	; (c3c <update_battery_states+0x1c>)
#define CHARGED_STATE port_pin_get_input_level(CHARGING_PIN)
//#define CHARGN_OFF_STATE port_pin_get_input_level(CHARGN_OFF_PIN)


void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
     c24:	4806      	ldr	r0, [pc, #24]	; (c40 <update_battery_states+0x20>)
     c26:	6a1a      	ldr	r2, [r3, #32]
     c28:	0ed2      	lsrs	r2, r2, #27
     c2a:	400a      	ands	r2, r1
     c2c:	7002      	strb	r2, [r0, #0]
     c2e:	6a1b      	ldr	r3, [r3, #32]
  Charged_State = CHARGED_STATE;
     c30:	4a04      	ldr	r2, [pc, #16]	; (c44 <update_battery_states+0x24>)
     c32:	0adb      	lsrs	r3, r3, #11
     c34:	400b      	ands	r3, r1
     c36:	7013      	strb	r3, [r2, #0]
}
     c38:	4770      	bx	lr
     c3a:	46c0      	nop			; (mov r8, r8)
     c3c:	41004400 	.word	0x41004400
     c40:	20000201 	.word	0x20000201
     c44:	20000203 	.word	0x20000203

00000c48 <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
     c48:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

  if (Vbus_State) {
     c4a:	4b13      	ldr	r3, [pc, #76]	; (c98 <display_battery_state+0x50>)
     c4c:	781b      	ldrb	r3, [r3, #0]
     c4e:	2b00      	cmp	r3, #0
     c50:	d009      	beq.n	c66 <display_battery_state+0x1e>
	  if (BATTERY_CHARGING) {
     c52:	4b12      	ldr	r3, [pc, #72]	; (c9c <display_battery_state+0x54>)
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	2b00      	cmp	r3, #0
     c58:	d002      	beq.n	c60 <display_battery_state+0x18>
		  set_battery_charge_routine();				//  blink
     c5a:	f001 fa43 	bl	20e4 <set_battery_charge_routine>
				  set_color_yellow_indication();			// ideal situation
				  }	
	  }else{
	  }
  }
}
     c5e:	bd10      	pop	{r4, pc}
		  set_color_green_indication();
     c60:	f001 f9d2 	bl	2008 <set_color_green_indication>
     c64:	e7fb      	b.n	c5e <display_battery_state+0x16>
	  if (!motor_running){
     c66:	4b0e      	ldr	r3, [pc, #56]	; (ca0 <display_battery_state+0x58>)
     c68:	781b      	ldrb	r3, [r3, #0]
     c6a:	2b00      	cmp	r3, #0
     c6c:	d1f7      	bne.n	c5e <display_battery_state+0x16>
			  if (BATTERY_LOWEST) {
     c6e:	4b0d      	ldr	r3, [pc, #52]	; (ca4 <display_battery_state+0x5c>)
     c70:	781b      	ldrb	r3, [r3, #0]
     c72:	2b00      	cmp	r3, #0
     c74:	d002      	beq.n	c7c <display_battery_state+0x34>
				  set_battery_low_routine();				//  blink
     c76:	f001 fa36 	bl	20e6 <set_battery_low_routine>
     c7a:	e7f0      	b.n	c5e <display_battery_state+0x16>
				  } else if (BATTERY_LOW) {
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <display_battery_state+0x60>)
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	2b00      	cmp	r3, #0
     c82:	d002      	beq.n	c8a <display_battery_state+0x42>
				  set_color_red_indication();
     c84:	f001 f9da 	bl	203c <set_color_red_indication>
     c88:	e7e9      	b.n	c5e <display_battery_state+0x16>
				  } else if (BATTERY_CHARGED) {
     c8a:	4b08      	ldr	r3, [pc, #32]	; (cac <display_battery_state+0x64>)
     c8c:	781b      	ldrb	r3, [r3, #0]
     c8e:	2b00      	cmp	r3, #0
     c90:	d1e6      	bne.n	c60 <display_battery_state+0x18>
				  set_color_yellow_indication();			// ideal situation
     c92:	f001 fa0b 	bl	20ac <set_color_yellow_indication>
}
     c96:	e7e2      	b.n	c5e <display_battery_state+0x16>
     c98:	20000201 	.word	0x20000201
     c9c:	20000048 	.word	0x20000048
     ca0:	20000044 	.word	0x20000044
     ca4:	2000004a 	.word	0x2000004a
     ca8:	20000049 	.word	0x20000049
     cac:	20000047 	.word	0x20000047

00000cb0 <system_state>:

/************************************************************************/
/* STATE MACHINE		                                                */
/************************************************************************/

void system_state(void) {
     cb0:	b510      	push	{r4, lr}
  update_battery_states();
     cb2:	f7ff ffb5 	bl	c20 <update_battery_states>
  display_battery_state();
     cb6:	f7ff ffc7 	bl	c48 <display_battery_state>
     cba:	bd10      	pop	{r4, pc}

00000cbc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     cbc:	4b09      	ldr	r3, [pc, #36]	; (ce4 <cpu_irq_enter_critical+0x28>)
     cbe:	6819      	ldr	r1, [r3, #0]
     cc0:	2900      	cmp	r1, #0
     cc2:	d10b      	bne.n	cdc <cpu_irq_enter_critical+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     cc4:	f3ef 8010 	mrs	r0, PRIMASK
     cc8:	4a07      	ldr	r2, [pc, #28]	; (ce8 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
     cca:	2800      	cmp	r0, #0
     ccc:	d105      	bne.n	cda <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
     cce:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
     cd0:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     cd4:	4905      	ldr	r1, [pc, #20]	; (cec <cpu_irq_enter_critical+0x30>)
     cd6:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
     cd8:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     cda:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     cdc:	681a      	ldr	r2, [r3, #0]
     cde:	3201      	adds	r2, #1
     ce0:	601a      	str	r2, [r3, #0]
}
     ce2:	4770      	bx	lr
     ce4:	20000068 	.word	0x20000068
     ce8:	2000006c 	.word	0x2000006c
     cec:	20000010 	.word	0x20000010

00000cf0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     cf0:	4b08      	ldr	r3, [pc, #32]	; (d14 <cpu_irq_leave_critical+0x24>)
     cf2:	681a      	ldr	r2, [r3, #0]
     cf4:	3a01      	subs	r2, #1
     cf6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     cf8:	681b      	ldr	r3, [r3, #0]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d109      	bne.n	d12 <cpu_irq_leave_critical+0x22>
     cfe:	4b06      	ldr	r3, [pc, #24]	; (d18 <cpu_irq_leave_critical+0x28>)
     d00:	781b      	ldrb	r3, [r3, #0]
     d02:	2b00      	cmp	r3, #0
     d04:	d005      	beq.n	d12 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     d06:	2201      	movs	r2, #1
     d08:	4b04      	ldr	r3, [pc, #16]	; (d1c <cpu_irq_leave_critical+0x2c>)
     d0a:	701a      	strb	r2, [r3, #0]
     d0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     d10:	b662      	cpsie	i
	}
}
     d12:	4770      	bx	lr
     d14:	20000068 	.word	0x20000068
     d18:	2000006c 	.word	0x2000006c
     d1c:	20000010 	.word	0x20000010

00000d20 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     d20:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
     d22:	2280      	movs	r2, #128	; 0x80
     d24:	ab01      	add	r3, sp, #4
     d26:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     d28:	780a      	ldrb	r2, [r1, #0]
     d2a:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     d2c:	784a      	ldrb	r2, [r1, #1]
     d2e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     d30:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d32:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
     d34:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     d36:	f000 ff03 	bl	1b40 <system_pinmux_pin_set_config>
}
     d3a:	bd07      	pop	{r0, r1, r2, pc}

00000d3c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d3c:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
     d3e:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     d40:	69ca      	ldr	r2, [r1, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
     d42:	421a      	tst	r2, r3
     d44:	d1fc      	bne.n	d40 <_i2c_master_wait_for_sync+0x4>
		/* Wait for I2C module to sync. */
	}
}
     d46:	4770      	bx	lr

00000d48 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
     d48:	b5f0      	push	{r4, r5, r6, r7, lr}
     d4a:	0007      	movs	r7, r0
     d4c:	b08b      	sub	sp, #44	; 0x2c
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
     d4e:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d50:	0008      	movs	r0, r1
{
     d52:	0014      	movs	r4, r2
     d54:	000e      	movs	r6, r1
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d56:	f000 fb7d 	bl	1454 <_sercom_get_sercom_inst_index>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d5a:	2501      	movs	r5, #1
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d5c:	1c83      	adds	r3, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d5e:	409d      	lsls	r5, r3
     d60:	002b      	movs	r3, r5
			PM->APBCMASK.reg |= mask;
     d62:	4a9a      	ldr	r2, [pc, #616]	; (fcc <i2c_master_init+0x284>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d64:	300e      	adds	r0, #14
     d66:	6a11      	ldr	r1, [r2, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d68:	b2c5      	uxtb	r5, r0
     d6a:	430b      	orrs	r3, r1
     d6c:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d6e:	7b23      	ldrb	r3, [r4, #12]
     d70:	aa08      	add	r2, sp, #32
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d72:	0011      	movs	r1, r2
     d74:	0028      	movs	r0, r5
	gclk_chan_conf.source_generator = config->generator_source;
     d76:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d78:	f000 fe80 	bl	1a7c <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
     d7c:	0028      	movs	r0, r5
     d7e:	f000 fe41 	bl	1a04 <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
     d82:	7b20      	ldrb	r0, [r4, #12]
     d84:	2100      	movs	r1, #0
     d86:	f000 faed 	bl	1364 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     d8a:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
     d8c:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
     d8e:	079b      	lsls	r3, r3, #30
     d90:	d500      	bpl.n	d94 <i2c_master_init+0x4c>
     d92:	e10d      	b.n	fb0 <i2c_master_init+0x268>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     d94:	2301      	movs	r3, #1
     d96:	6835      	ldr	r5, [r6, #0]
		return STATUS_BUSY;
     d98:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
     d9a:	401d      	ands	r5, r3
     d9c:	d000      	beq.n	da0 <i2c_master_init+0x58>
     d9e:	e107      	b.n	fb0 <i2c_master_init+0x268>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     da0:	6838      	ldr	r0, [r7, #0]
     da2:	f000 fb57 	bl	1454 <_sercom_get_sercom_inst_index>
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     da6:	498a      	ldr	r1, [pc, #552]	; (fd0 <i2c_master_init+0x288>)
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     da8:	9001      	str	r0, [sp, #4]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
     daa:	f000 fb71 	bl	1490 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
     dae:	9b01      	ldr	r3, [sp, #4]

	/* Initialize values in module. */
	module->registered_callback = 0;
     db0:	763d      	strb	r5, [r7, #24]
	_sercom_instances[instance_index] = module;
     db2:	009a      	lsls	r2, r3, #2
     db4:	4b87      	ldr	r3, [pc, #540]	; (fd4 <i2c_master_init+0x28c>)
	module->enabled_callback = 0;
     db6:	767d      	strb	r5, [r7, #25]
	_sercom_instances[instance_index] = module;
     db8:	50d7      	str	r7, [r2, r3]
	module->buffer_length = 0;
	module->buffer_remaining = 0;

	module->status = STATUS_OK;
     dba:	1dbb      	adds	r3, r7, #6
	module->buffer_length = 0;
     dbc:	837d      	strh	r5, [r7, #26]
	module->buffer_remaining = 0;
     dbe:	83bd      	strh	r5, [r7, #28]
	module->status = STATUS_OK;
     dc0:	77dd      	strb	r5, [r3, #31]
	module->buffer = NULL;
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     dc2:	2314      	movs	r3, #20
	module->buffer = NULL;
     dc4:	623d      	str	r5, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
     dc6:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dc8:	683b      	ldr	r3, [r7, #0]
     dca:	ae09      	add	r6, sp, #36	; 0x24
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     dcc:	0018      	movs	r0, r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     dce:	9301      	str	r3, [sp, #4]
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
     dd0:	f000 fb40 	bl	1454 <_sercom_get_sercom_inst_index>
     dd4:	2380      	movs	r3, #128	; 0x80
     dd6:	9004      	str	r0, [sp, #16]
	uint32_t pad0 = config->pinmux_pad0;
     dd8:	69e0      	ldr	r0, [r4, #28]
     dda:	7033      	strb	r3, [r6, #0]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     ddc:	3b7f      	subs	r3, #127	; 0x7f
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     dde:	7075      	strb	r5, [r6, #1]
	config->powersave    = false;
     de0:	70f5      	strb	r5, [r6, #3]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     de2:	70b3      	strb	r3, [r6, #2]
	uint32_t pad1 = config->pinmux_pad1;
     de4:	6a25      	ldr	r5, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
     de6:	2800      	cmp	r0, #0
     de8:	d103      	bne.n	df2 <i2c_master_init+0xaa>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     dea:	0001      	movs	r1, r0
     dec:	9801      	ldr	r0, [sp, #4]
     dee:	f000 fad7 	bl	13a0 <_sercom_get_default_pad>
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     df2:	2302      	movs	r3, #2
	pin_conf.mux_position = pad0 & 0xFFFF;
     df4:	7030      	strb	r0, [r6, #0]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     df6:	0c00      	lsrs	r0, r0, #16
     df8:	b2c0      	uxtb	r0, r0
     dfa:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     dfc:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     dfe:	f000 fe9f 	bl	1b40 <system_pinmux_pin_set_config>
	if (pad1 == PINMUX_DEFAULT) {
     e02:	2d00      	cmp	r5, #0
     e04:	d104      	bne.n	e10 <i2c_master_init+0xc8>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     e06:	2101      	movs	r1, #1
     e08:	9801      	ldr	r0, [sp, #4]
     e0a:	f000 fac9 	bl	13a0 <_sercom_get_default_pad>
     e0e:	0005      	movs	r5, r0
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e10:	2302      	movs	r3, #2
	pin_conf.mux_position = pad1 & 0xFFFF;
     e12:	7035      	strb	r5, [r6, #0]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     e14:	0c2d      	lsrs	r5, r5, #16
     e16:	b2e8      	uxtb	r0, r5
     e18:	0031      	movs	r1, r6
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     e1a:	7073      	strb	r3, [r6, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     e1c:	f000 fe90 	bl	1b40 <system_pinmux_pin_set_config>
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
     e20:	8aa3      	ldrh	r3, [r4, #20]
     e22:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
     e24:	8ae3      	ldrh	r3, [r4, #22]
     e26:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
     e28:	7e22      	ldrb	r2, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
     e2a:	2380      	movs	r3, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     e2c:	2a00      	cmp	r2, #0
     e2e:	d106      	bne.n	e3e <i2c_master_init+0xf6>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     e30:	4b69      	ldr	r3, [pc, #420]	; (fd8 <i2c_master_init+0x290>)
     e32:	3202      	adds	r2, #2
     e34:	789b      	ldrb	r3, [r3, #2]
     e36:	4013      	ands	r3, r2
		tmp_ctrla = 0;
     e38:	1e5f      	subs	r7, r3, #1
     e3a:	41bb      	sbcs	r3, r7
     e3c:	01db      	lsls	r3, r3, #7
	tmp_ctrla |= config->transfer_speed;
     e3e:	68a2      	ldr	r2, [r4, #8]
     e40:	6927      	ldr	r7, [r4, #16]
     e42:	4317      	orrs	r7, r2
     e44:	431f      	orrs	r7, r3
	if (config->scl_low_timeout) {
     e46:	1d63      	adds	r3, r4, #5
     e48:	7fdb      	ldrb	r3, [r3, #31]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d002      	beq.n	e54 <i2c_master_init+0x10c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
     e4e:	2380      	movs	r3, #128	; 0x80
     e50:	05db      	lsls	r3, r3, #23
     e52:	431f      	orrs	r7, r3
		tmp_ctrla |= config->inactive_timeout;
     e54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     e56:	431f      	orrs	r7, r3
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
     e58:	0023      	movs	r3, r4
     e5a:	332c      	adds	r3, #44	; 0x2c
     e5c:	781b      	ldrb	r3, [r3, #0]
     e5e:	2b00      	cmp	r3, #0
     e60:	d103      	bne.n	e6a <i2c_master_init+0x122>
     e62:	2380      	movs	r3, #128	; 0x80
     e64:	049b      	lsls	r3, r3, #18
     e66:	429a      	cmp	r2, r3
     e68:	d102      	bne.n	e70 <i2c_master_init+0x128>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
     e6a:	2380      	movs	r3, #128	; 0x80
     e6c:	051b      	lsls	r3, r3, #20
     e6e:	431f      	orrs	r7, r3
	if (config->slave_scl_low_extend_timeout) {
     e70:	0023      	movs	r3, r4
     e72:	332d      	adds	r3, #45	; 0x2d
     e74:	781b      	ldrb	r3, [r3, #0]
     e76:	2b00      	cmp	r3, #0
     e78:	d002      	beq.n	e80 <i2c_master_init+0x138>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
     e7a:	2380      	movs	r3, #128	; 0x80
     e7c:	041b      	lsls	r3, r3, #16
     e7e:	431f      	orrs	r7, r3
	if (config->master_scl_low_extend_timeout) {
     e80:	0023      	movs	r3, r4
     e82:	332e      	adds	r3, #46	; 0x2e
     e84:	781b      	ldrb	r3, [r3, #0]
     e86:	2b00      	cmp	r3, #0
     e88:	d002      	beq.n	e90 <i2c_master_init+0x148>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
     e8a:	2380      	movs	r3, #128	; 0x80
     e8c:	03db      	lsls	r3, r3, #15
     e8e:	431f      	orrs	r7, r3
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e90:	9b01      	ldr	r3, [sp, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     e92:	9804      	ldr	r0, [sp, #16]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e94:	681b      	ldr	r3, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     e96:	9a01      	ldr	r2, [sp, #4]
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e98:	431f      	orrs	r7, r3
     e9a:	9b01      	ldr	r3, [sp, #4]
	uint32_t fscl        = 1000 * config->baud_rate;
     e9c:	25fa      	movs	r5, #250	; 0xfa
	i2c_module->CTRLA.reg |= tmp_ctrla;
     e9e:	601f      	str	r7, [r3, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     ea0:	2380      	movs	r3, #128	; 0x80
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     ea2:	300e      	adds	r0, #14
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
     ea4:	005b      	lsls	r3, r3, #1
     ea6:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     ea8:	b2c0      	uxtb	r0, r0
     eaa:	f000 fdf3 	bl	1a94 <system_gclk_chan_get_hz>
	uint32_t fscl        = 1000 * config->baud_rate;
     eae:	6823      	ldr	r3, [r4, #0]
     eb0:	00ad      	lsls	r5, r5, #2
     eb2:	435d      	muls	r5, r3
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     eb4:	6863      	ldr	r3, [r4, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
     eb6:	9004      	str	r0, [sp, #16]
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     eb8:	9305      	str	r3, [sp, #20]
	tmp_baud = (int32_t)(div_ceil(
     eba:	f002 fec1 	bl	3c40 <__aeabi_ui2d>
     ebe:	0006      	movs	r6, r0
     ec0:	0068      	lsls	r0, r5, #1
     ec2:	000f      	movs	r7, r1
     ec4:	f002 febc 	bl	3c40 <__aeabi_ui2d>
     ec8:	9002      	str	r0, [sp, #8]
     eca:	9103      	str	r1, [sp, #12]
     ecc:	8e20      	ldrh	r0, [r4, #48]	; 0x30
     ece:	f002 feb7 	bl	3c40 <__aeabi_ui2d>
     ed2:	4a42      	ldr	r2, [pc, #264]	; (fdc <i2c_master_init+0x294>)
     ed4:	9006      	str	r0, [sp, #24]
     ed6:	9107      	str	r1, [sp, #28]
     ed8:	4b41      	ldr	r3, [pc, #260]	; (fe0 <i2c_master_init+0x298>)
     eda:	0030      	movs	r0, r6
     edc:	0039      	movs	r1, r7
     ede:	f002 f8e5 	bl	30ac <__aeabi_dmul>
     ee2:	0002      	movs	r2, r0
     ee4:	000b      	movs	r3, r1
     ee6:	9806      	ldr	r0, [sp, #24]
     ee8:	9907      	ldr	r1, [sp, #28]
     eea:	f002 f8df 	bl	30ac <__aeabi_dmul>
     eee:	2200      	movs	r2, #0
     ef0:	4b3c      	ldr	r3, [pc, #240]	; (fe4 <i2c_master_init+0x29c>)
     ef2:	f001 fa97 	bl	2424 <__aeabi_dadd>
     ef6:	9006      	str	r0, [sp, #24]
     ef8:	9107      	str	r1, [sp, #28]
     efa:	0028      	movs	r0, r5
     efc:	f002 fea0 	bl	3c40 <__aeabi_ui2d>
     f00:	0002      	movs	r2, r0
     f02:	000b      	movs	r3, r1
     f04:	9806      	ldr	r0, [sp, #24]
     f06:	9907      	ldr	r1, [sp, #28]
     f08:	f002 f8d0 	bl	30ac <__aeabi_dmul>
     f0c:	0002      	movs	r2, r0
     f0e:	000b      	movs	r3, r1
     f10:	0030      	movs	r0, r6
     f12:	0039      	movs	r1, r7
     f14:	f002 fb4a 	bl	35ac <__aeabi_dsub>
     f18:	9a02      	ldr	r2, [sp, #8]
     f1a:	9b03      	ldr	r3, [sp, #12]
     f1c:	f001 fa82 	bl	2424 <__aeabi_dadd>
     f20:	2200      	movs	r2, #0
     f22:	4b31      	ldr	r3, [pc, #196]	; (fe8 <i2c_master_init+0x2a0>)
     f24:	f002 fb42 	bl	35ac <__aeabi_dsub>
     f28:	9a02      	ldr	r2, [sp, #8]
     f2a:	9b03      	ldr	r3, [sp, #12]
     f2c:	f001 fd8a 	bl	2a44 <__aeabi_ddiv>
     f30:	f002 fe52 	bl	3bd8 <__aeabi_d2iz>
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     f34:	2380      	movs	r3, #128	; 0x80
     f36:	68a2      	ldr	r2, [r4, #8]
	tmp_baud = (int32_t)(div_ceil(
     f38:	9002      	str	r0, [sp, #8]
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
     f3a:	049b      	lsls	r3, r3, #18
     f3c:	429a      	cmp	r2, r3
     f3e:	d141      	bne.n	fc4 <i2c_master_init+0x27c>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     f40:	23fa      	movs	r3, #250	; 0xfa
     f42:	9d05      	ldr	r5, [sp, #20]
     f44:	009b      	lsls	r3, r3, #2
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     f46:	0032      	movs	r2, r6
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
     f48:	435d      	muls	r5, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
     f4a:	0030      	movs	r0, r6
     f4c:	003b      	movs	r3, r7
     f4e:	0039      	movs	r1, r7
     f50:	f001 fa68 	bl	2424 <__aeabi_dadd>
     f54:	0006      	movs	r6, r0
     f56:	0028      	movs	r0, r5
     f58:	000f      	movs	r7, r1
     f5a:	f002 fe71 	bl	3c40 <__aeabi_ui2d>
     f5e:	2200      	movs	r2, #0
     f60:	4b22      	ldr	r3, [pc, #136]	; (fec <i2c_master_init+0x2a4>)
     f62:	f002 f8a3 	bl	30ac <__aeabi_dmul>
     f66:	0002      	movs	r2, r0
     f68:	000b      	movs	r3, r1
     f6a:	0030      	movs	r0, r6
     f6c:	0039      	movs	r1, r7
     f6e:	f001 fd69 	bl	2a44 <__aeabi_ddiv>
     f72:	2200      	movs	r2, #0
     f74:	4b1c      	ldr	r3, [pc, #112]	; (fe8 <i2c_master_init+0x2a0>)
     f76:	f002 fb19 	bl	35ac <__aeabi_dsub>
     f7a:	f002 fe2d 	bl	3bd8 <__aeabi_d2iz>
     f7e:	1e06      	subs	r6, r0, #0
		if (tmp_baudlow_hs) {
     f80:	d018      	beq.n	fb4 <i2c_master_init+0x26c>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
     f82:	0029      	movs	r1, r5
     f84:	9804      	ldr	r0, [sp, #16]
     f86:	f001 f9c1 	bl	230c <__udivsi3>
     f8a:	3802      	subs	r0, #2
     f8c:	1b83      	subs	r3, r0, r6
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
     f8e:	9a02      	ldr	r2, [sp, #8]
     f90:	2040      	movs	r0, #64	; 0x40
     f92:	2aff      	cmp	r2, #255	; 0xff
     f94:	d80c      	bhi.n	fb0 <i2c_master_init+0x268>
     f96:	2bff      	cmp	r3, #255	; 0xff
     f98:	d80a      	bhi.n	fb0 <i2c_master_init+0x268>
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     f9a:	20ff      	movs	r0, #255	; 0xff
     f9c:	0014      	movs	r4, r2
     f9e:	0400      	lsls	r0, r0, #16
     fa0:	041b      	lsls	r3, r3, #16
     fa2:	4003      	ands	r3, r0
	enum status_code tmp_status_code = STATUS_OK;
     fa4:	2000      	movs	r0, #0
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     fa6:	0636      	lsls	r6, r6, #24
     fa8:	4334      	orrs	r4, r6
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     faa:	9a01      	ldr	r2, [sp, #4]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
     fac:	4323      	orrs	r3, r4
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
     fae:	60d3      	str	r3, [r2, #12]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
     fb0:	b00b      	add	sp, #44	; 0x2c
     fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
     fb4:	9b04      	ldr	r3, [sp, #16]
     fb6:	0069      	lsls	r1, r5, #1
     fb8:	1e48      	subs	r0, r1, #1
     fba:	18c0      	adds	r0, r0, r3
     fbc:	f001 f9a6 	bl	230c <__udivsi3>
     fc0:	1e43      	subs	r3, r0, #1
     fc2:	e7e4      	b.n	f8e <i2c_master_init+0x246>
	int32_t tmp_baudlow_hs = 0;
     fc4:	2600      	movs	r6, #0
	int32_t tmp_baud_hs = 0;
     fc6:	0033      	movs	r3, r6
     fc8:	e7e1      	b.n	f8e <i2c_master_init+0x246>
     fca:	46c0      	nop			; (mov r8, r8)
     fcc:	40000400 	.word	0x40000400
     fd0:	000011e5 	.word	0x000011e5
     fd4:	20000204 	.word	0x20000204
     fd8:	41002000 	.word	0x41002000
     fdc:	e826d695 	.word	0xe826d695
     fe0:	3e112e0b 	.word	0x3e112e0b
     fe4:	40240000 	.word	0x40240000
     fe8:	3ff00000 	.word	0x3ff00000
     fec:	40080000 	.word	0x40080000

00000ff0 <_i2c_master_address_response>:

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     ff0:	2202      	movs	r2, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     ff2:	6803      	ldr	r3, [r0, #0]
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
     ff4:	7e19      	ldrb	r1, [r3, #24]
     ff6:	4211      	tst	r1, r2
     ff8:	d006      	beq.n	1008 <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     ffa:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
     ffc:	8b5b      	ldrh	r3, [r3, #26]
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
     ffe:	2041      	movs	r0, #65	; 0x41
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1000:	4213      	tst	r3, r2
    1002:	d10a      	bne.n	101a <_i2c_master_address_response+0x2a>

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1004:	2000      	movs	r0, #0
    1006:	e008      	b.n	101a <_i2c_master_address_response+0x2a>
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1008:	8b5a      	ldrh	r2, [r3, #26]
    100a:	0752      	lsls	r2, r2, #29
    100c:	d5fa      	bpl.n	1004 <_i2c_master_address_response+0x14>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    100e:	22c0      	movs	r2, #192	; 0xc0
		return STATUS_ERR_BAD_ADDRESS;
    1010:	2018      	movs	r0, #24
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1012:	6859      	ldr	r1, [r3, #4]
    1014:	0292      	lsls	r2, r2, #10
    1016:	430a      	orrs	r2, r1
    1018:	605a      	str	r2, [r3, #4]
}
    101a:	4770      	bx	lr

0000101c <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    101c:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    101e:	2200      	movs	r2, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1020:	2601      	movs	r6, #1
    1022:	2402      	movs	r4, #2
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1024:	6801      	ldr	r1, [r0, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    1026:	7e0b      	ldrb	r3, [r1, #24]
    1028:	4033      	ands	r3, r6
    102a:	d102      	bne.n	1032 <_i2c_master_wait_for_bus+0x16>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    102c:	7e0d      	ldrb	r5, [r1, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    102e:	4225      	tst	r5, r4
    1030:	d001      	beq.n	1036 <_i2c_master_wait_for_bus+0x1a>
		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
			return STATUS_ERR_TIMEOUT;
		}
	}
	return STATUS_OK;
    1032:	2000      	movs	r0, #0
    1034:	e005      	b.n	1042 <_i2c_master_wait_for_bus+0x26>
		if (++timeout_counter >= module->buffer_timeout) {
    1036:	3201      	adds	r2, #1
    1038:	8903      	ldrh	r3, [r0, #8]
    103a:	b292      	uxth	r2, r2
    103c:	4293      	cmp	r3, r2
    103e:	d8f2      	bhi.n	1026 <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    1040:	2012      	movs	r0, #18
}
    1042:	bd70      	pop	{r4, r5, r6, pc}

00001044 <_i2c_master_send_hs_master_code>:
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1044:	2380      	movs	r3, #128	; 0x80
{
    1046:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1048:	6804      	ldr	r4, [r0, #0]
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    104a:	02db      	lsls	r3, r3, #11
    104c:	6862      	ldr	r2, [r4, #4]
    104e:	4313      	orrs	r3, r2
    1050:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    1052:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1054:	f7ff ffe2 	bl	101c <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1058:	2301      	movs	r3, #1
    105a:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    105c:	bd10      	pop	{r4, pc}
	...

00001060 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1062:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1064:	884b      	ldrh	r3, [r1, #2]
{
    1066:	0005      	movs	r5, r0
	uint16_t tmp_data_length = packet->data_length;
    1068:	9301      	str	r3, [sp, #4]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    106a:	6804      	ldr	r4, [r0, #0]

	_i2c_master_wait_for_sync(module);
    106c:	f7ff fe66 	bl	d3c <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1070:	7a7b      	ldrb	r3, [r7, #9]
    1072:	2b00      	cmp	r3, #0
    1074:	d003      	beq.n	107e <_i2c_master_write_packet+0x1e>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    1076:	7ab9      	ldrb	r1, [r7, #10]
    1078:	0028      	movs	r0, r5
    107a:	f7ff ffe3 	bl	1044 <_i2c_master_send_hs_master_code>
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    107e:	6863      	ldr	r3, [r4, #4]
    1080:	4a24      	ldr	r2, [pc, #144]	; (1114 <_i2c_master_write_packet+0xb4>)
    1082:	4013      	ands	r3, r2
    1084:	6063      	str	r3, [r4, #4]
    1086:	7a7a      	ldrb	r2, [r7, #9]
    1088:	883b      	ldrh	r3, [r7, #0]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    108a:	7a39      	ldrb	r1, [r7, #8]
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    108c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    108e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1090:	4313      	orrs	r3, r2
	if (packet->ten_bit_address) {
    1092:	2900      	cmp	r1, #0
    1094:	d002      	beq.n	109c <_i2c_master_write_packet+0x3c>
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1096:	2280      	movs	r2, #128	; 0x80
    1098:	0212      	lsls	r2, r2, #8
    109a:	4313      	orrs	r3, r2
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    109c:	6263      	str	r3, [r4, #36]	; 0x24
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    109e:	0028      	movs	r0, r5
    10a0:	f7ff ffbc 	bl	101c <_i2c_master_wait_for_bus>
    10a4:	1e06      	subs	r6, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    10a6:	d115      	bne.n	10d4 <_i2c_master_write_packet+0x74>
		tmp_status = _i2c_master_address_response(module);
    10a8:	0028      	movs	r0, r5
    10aa:	f7ff ffa1 	bl	ff0 <_i2c_master_address_response>
    10ae:	1e06      	subs	r6, r0, #0
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    10b0:	d110      	bne.n	10d4 <_i2c_master_write_packet+0x74>
    10b2:	9000      	str	r0, [sp, #0]
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    10b4:	9b00      	ldr	r3, [sp, #0]
    10b6:	9a01      	ldr	r2, [sp, #4]
    10b8:	4293      	cmp	r3, r2
    10ba:	d10d      	bne.n	10d8 <_i2c_master_write_packet+0x78>
    10bc:	2600      	movs	r6, #0
				tmp_status = STATUS_ERR_OVERFLOW;
				break;
			}
		}

		if (module->send_stop) {
    10be:	7aab      	ldrb	r3, [r5, #10]
    10c0:	2b00      	cmp	r3, #0
    10c2:	d007      	beq.n	10d4 <_i2c_master_write_packet+0x74>
			/* Stop command */
			_i2c_master_wait_for_sync(module);
    10c4:	0028      	movs	r0, r5
    10c6:	f7ff fe39 	bl	d3c <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    10ca:	23c0      	movs	r3, #192	; 0xc0
    10cc:	6862      	ldr	r2, [r4, #4]
    10ce:	029b      	lsls	r3, r3, #10
    10d0:	4313      	orrs	r3, r2
    10d2:	6063      	str	r3, [r4, #4]
		}
	}

	return tmp_status;
}
    10d4:	0030      	movs	r0, r6
    10d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    10d8:	2220      	movs	r2, #32
    10da:	8b63      	ldrh	r3, [r4, #26]
    10dc:	4213      	tst	r3, r2
    10de:	d016      	beq.n	110e <_i2c_master_write_packet+0xae>
			_i2c_master_wait_for_sync(module);
    10e0:	0028      	movs	r0, r5
    10e2:	f7ff fe2b 	bl	d3c <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    10e6:	687b      	ldr	r3, [r7, #4]
    10e8:	9a00      	ldr	r2, [sp, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
    10ea:	0028      	movs	r0, r5
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    10ec:	5c9a      	ldrb	r2, [r3, r2]
    10ee:	0023      	movs	r3, r4
    10f0:	3328      	adds	r3, #40	; 0x28
    10f2:	701a      	strb	r2, [r3, #0]
			tmp_status = _i2c_master_wait_for_bus(module);
    10f4:	f7ff ff92 	bl	101c <_i2c_master_wait_for_bus>
    10f8:	1e06      	subs	r6, r0, #0
			if (tmp_status != STATUS_OK) {
    10fa:	d1e0      	bne.n	10be <_i2c_master_write_packet+0x5e>
    10fc:	9a00      	ldr	r2, [sp, #0]
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    10fe:	8b63      	ldrh	r3, [r4, #26]
    1100:	3201      	adds	r2, #1
    1102:	9200      	str	r2, [sp, #0]
    1104:	2204      	movs	r2, #4
    1106:	4213      	tst	r3, r2
    1108:	d0d4      	beq.n	10b4 <_i2c_master_write_packet+0x54>
				tmp_status = STATUS_ERR_OVERFLOW;
    110a:	261e      	movs	r6, #30
    110c:	e7d7      	b.n	10be <_i2c_master_write_packet+0x5e>
				return STATUS_ERR_PACKET_COLLISION;
    110e:	2641      	movs	r6, #65	; 0x41
    1110:	e7e0      	b.n	10d4 <_i2c_master_write_packet+0x74>
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	fffbffff 	.word	0xfffbffff

00001118 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1118:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    111a:	8b82      	ldrh	r2, [r0, #28]
{
    111c:	0003      	movs	r3, r0
		return STATUS_BUSY;
    111e:	2005      	movs	r0, #5
	if (module->buffer_remaining > 0) {
    1120:	2a00      	cmp	r2, #0
    1122:	d105      	bne.n	1130 <i2c_master_write_packet_wait+0x18>
	}
#endif

	module->send_stop = true;
    1124:	3201      	adds	r2, #1
    1126:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
    1128:	72da      	strb	r2, [r3, #11]

	return _i2c_master_write_packet(module, packet);
    112a:	0018      	movs	r0, r3
    112c:	f7ff ff98 	bl	1060 <_i2c_master_write_packet>
}
    1130:	bd10      	pop	{r4, pc}

00001132 <_i2c_master_wait_for_sync>:
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1132:	2307      	movs	r3, #7
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1134:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1136:	69ca      	ldr	r2, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1138:	421a      	tst	r2, r3
    113a:	d1fc      	bne.n	1136 <_i2c_master_wait_for_sync+0x4>
}
    113c:	4770      	bx	lr

0000113e <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    113e:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1140:	6805      	ldr	r5, [r0, #0]
{
    1142:	0004      	movs	r4, r0
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1144:	682a      	ldr	r2, [r5, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1146:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1148:	8b83      	ldrh	r3, [r0, #28]
    114a:	1af6      	subs	r6, r6, r3

	module->buffer_remaining--;
    114c:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    114e:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1150:	3b01      	subs	r3, #1
    1152:	b29b      	uxth	r3, r3
    1154:	8383      	strh	r3, [r0, #28]
    1156:	7ac3      	ldrb	r3, [r0, #11]

	if (sclsm_flag) {
    1158:	0112      	lsls	r2, r2, #4
    115a:	d50a      	bpl.n	1172 <_i2c_master_read+0x34>
		if (module->send_nack && module->buffer_remaining == 1) {
    115c:	2b00      	cmp	r3, #0
    115e:	d00d      	beq.n	117c <_i2c_master_read+0x3e>
    1160:	8b83      	ldrh	r3, [r0, #28]
    1162:	2b01      	cmp	r3, #1
    1164:	d10a      	bne.n	117c <_i2c_master_read+0x3e>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1166:	2380      	movs	r3, #128	; 0x80
    1168:	686a      	ldr	r2, [r5, #4]
    116a:	02db      	lsls	r3, r3, #11
    116c:	4313      	orrs	r3, r2
    116e:	606b      	str	r3, [r5, #4]
    1170:	e004      	b.n	117c <_i2c_master_read+0x3e>
		if (module->send_nack && module->buffer_remaining == 0) {
    1172:	2b00      	cmp	r3, #0
    1174:	d002      	beq.n	117c <_i2c_master_read+0x3e>
    1176:	8b83      	ldrh	r3, [r0, #28]
    1178:	2b00      	cmp	r3, #0
    117a:	d0f4      	beq.n	1166 <_i2c_master_read+0x28>
		}
	}

	if (module->buffer_remaining == 0) {
    117c:	8ba3      	ldrh	r3, [r4, #28]
    117e:	2b00      	cmp	r3, #0
    1180:	d10a      	bne.n	1198 <_i2c_master_read+0x5a>
		if (module->send_stop) {
    1182:	7aa3      	ldrb	r3, [r4, #10]
    1184:	2b00      	cmp	r3, #0
    1186:	d007      	beq.n	1198 <_i2c_master_read+0x5a>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
    1188:	0020      	movs	r0, r4
    118a:	f7ff ffd2 	bl	1132 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    118e:	23c0      	movs	r3, #192	; 0xc0
    1190:	686a      	ldr	r2, [r5, #4]
    1192:	029b      	lsls	r3, r3, #10
    1194:	4313      	orrs	r3, r2
    1196:	606b      	str	r3, [r5, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1198:	0020      	movs	r0, r4
    119a:	f7ff ffca 	bl	1132 <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    119e:	6a23      	ldr	r3, [r4, #32]
    11a0:	3528      	adds	r5, #40	; 0x28
    11a2:	199e      	adds	r6, r3, r6
    11a4:	782b      	ldrb	r3, [r5, #0]
    11a6:	b2db      	uxtb	r3, r3
    11a8:	7033      	strb	r3, [r6, #0]
}
    11aa:	bd70      	pop	{r4, r5, r6, pc}

000011ac <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    11ac:	b570      	push	{r4, r5, r6, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11ae:	6806      	ldr	r6, [r0, #0]
{
    11b0:	0004      	movs	r4, r0

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    11b2:	8b73      	ldrh	r3, [r6, #26]
    11b4:	075b      	lsls	r3, r3, #29
    11b6:	d503      	bpl.n	11c0 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    11b8:	231e      	movs	r3, #30
    11ba:	3406      	adds	r4, #6
    11bc:	77e3      	strb	r3, [r4, #31]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    11be:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    11c0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    11c2:	8b83      	ldrh	r3, [r0, #28]
	i2c_module->DATA.reg = module->buffer[buffer_index];
    11c4:	3628      	adds	r6, #40	; 0x28
	buffer_index -= module->buffer_remaining;
    11c6:	1aed      	subs	r5, r5, r3
	module->buffer_remaining--;
    11c8:	8b83      	ldrh	r3, [r0, #28]
	buffer_index -= module->buffer_remaining;
    11ca:	b2ad      	uxth	r5, r5
	module->buffer_remaining--;
    11cc:	3b01      	subs	r3, #1
    11ce:	b29b      	uxth	r3, r3
    11d0:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    11d2:	f7ff ffae 	bl	1132 <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    11d6:	6a23      	ldr	r3, [r4, #32]
    11d8:	195d      	adds	r5, r3, r5
    11da:	782b      	ldrb	r3, [r5, #0]
    11dc:	b2db      	uxtb	r3, r3
    11de:	7033      	strb	r3, [r6, #0]
    11e0:	e7ed      	b.n	11be <_i2c_master_write+0x12>
	...

000011e4 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    11e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    11e6:	4b5e      	ldr	r3, [pc, #376]	; (1360 <_i2c_master_interrupt_handler+0x17c>)
    11e8:	0080      	lsls	r0, r0, #2
    11ea:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    11ec:	6825      	ldr	r5, [r4, #0]
    11ee:	1da6      	adds	r6, r4, #6
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    11f0:	682b      	ldr	r3, [r5, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    11f2:	7e62      	ldrb	r2, [r4, #25]
	callback_mask &= module->registered_callback;
    11f4:	7e27      	ldrb	r7, [r4, #24]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    11f6:	011b      	lsls	r3, r3, #4
	callback_mask &= module->registered_callback;
    11f8:	4017      	ands	r7, r2

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    11fa:	8b62      	ldrh	r2, [r4, #26]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    11fc:	0fdb      	lsrs	r3, r3, #31
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    11fe:	2a00      	cmp	r2, #0
    1200:	d12e      	bne.n	1260 <_i2c_master_interrupt_handler+0x7c>
    1202:	8ba2      	ldrh	r2, [r4, #28]
    1204:	2a00      	cmp	r2, #0
    1206:	d02b      	beq.n	1260 <_i2c_master_interrupt_handler+0x7c>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1208:	2301      	movs	r3, #1
    120a:	7e2a      	ldrb	r2, [r5, #24]
    120c:	421a      	tst	r2, r3
    120e:	d006      	beq.n	121e <_i2c_master_interrupt_handler+0x3a>
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1210:	2202      	movs	r2, #2
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1212:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1214:	8b6b      	ldrh	r3, [r5, #26]
    1216:	4013      	ands	r3, r2
    1218:	d010      	beq.n	123c <_i2c_master_interrupt_handler+0x58>
			module->status = STATUS_ERR_PACKET_COLLISION;
    121a:	2341      	movs	r3, #65	; 0x41
    121c:	77f3      	strb	r3, [r6, #31]
	module->buffer_length = module->buffer_remaining;
    121e:	8ba3      	ldrh	r3, [r4, #28]
    1220:	b29b      	uxth	r3, r3
    1222:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1224:	7ff3      	ldrb	r3, [r6, #31]
    1226:	2b05      	cmp	r3, #5
    1228:	d13c      	bne.n	12a4 <_i2c_master_interrupt_handler+0xc0>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
			module->status = STATUS_ERR_PACKET_COLLISION;
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    122a:	1d63      	adds	r3, r4, #5
    122c:	7fdb      	ldrb	r3, [r3, #31]
			_i2c_master_write(module);
    122e:	0020      	movs	r0, r4
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1230:	2b00      	cmp	r3, #0
    1232:	d000      	beq.n	1236 <_i2c_master_interrupt_handler+0x52>
    1234:	e08a      	b.n	134c <_i2c_master_interrupt_handler+0x168>
			_i2c_master_write(module);
    1236:	f7ff ffb9 	bl	11ac <_i2c_master_write>
    123a:	e033      	b.n	12a4 <_i2c_master_interrupt_handler+0xc0>
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    123c:	8b6a      	ldrh	r2, [r5, #26]
    123e:	0752      	lsls	r2, r2, #29
    1240:	d5ed      	bpl.n	121e <_i2c_master_interrupt_handler+0x3a>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1242:	2218      	movs	r2, #24
    1244:	77f2      	strb	r2, [r6, #31]
			module->buffer_remaining = 0;
    1246:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1248:	7aa3      	ldrb	r3, [r4, #10]
    124a:	2b00      	cmp	r3, #0
    124c:	d0e7      	beq.n	121e <_i2c_master_interrupt_handler+0x3a>
				_i2c_master_wait_for_sync(module);
    124e:	0020      	movs	r0, r4
    1250:	f7ff ff6f 	bl	1132 <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1254:	23c0      	movs	r3, #192	; 0xc0
    1256:	686a      	ldr	r2, [r5, #4]
    1258:	029b      	lsls	r3, r3, #10
    125a:	4313      	orrs	r3, r2
    125c:	606b      	str	r3, [r5, #4]
    125e:	e7de      	b.n	121e <_i2c_master_interrupt_handler+0x3a>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1260:	8b62      	ldrh	r2, [r4, #26]
    1262:	2a00      	cmp	r2, #0
    1264:	d05f      	beq.n	1326 <_i2c_master_interrupt_handler+0x142>
    1266:	8ba2      	ldrh	r2, [r4, #28]
    1268:	2a00      	cmp	r2, #0
    126a:	d15c      	bne.n	1326 <_i2c_master_interrupt_handler+0x142>
			(module->status == STATUS_BUSY) &&
    126c:	7ff2      	ldrb	r2, [r6, #31]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    126e:	2a05      	cmp	r2, #5
    1270:	d159      	bne.n	1326 <_i2c_master_interrupt_handler+0x142>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1272:	1d62      	adds	r2, r4, #5
    1274:	7fd2      	ldrb	r2, [r2, #31]
    1276:	b2d2      	uxtb	r2, r2
			(module->status == STATUS_BUSY) &&
    1278:	2a00      	cmp	r2, #0
    127a:	d154      	bne.n	1326 <_i2c_master_interrupt_handler+0x142>
		i2c_module->INTENCLR.reg =
    127c:	2303      	movs	r3, #3
    127e:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1280:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
    1282:	77f2      	strb	r2, [r6, #31]
		if (module->send_stop) {
    1284:	7aa3      	ldrb	r3, [r4, #10]
    1286:	2b00      	cmp	r3, #0
    1288:	d04a      	beq.n	1320 <_i2c_master_interrupt_handler+0x13c>
			_i2c_master_wait_for_sync(module);
    128a:	0020      	movs	r0, r4
    128c:	f7ff ff51 	bl	1132 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1290:	23c0      	movs	r3, #192	; 0xc0
    1292:	686a      	ldr	r2, [r5, #4]
    1294:	029b      	lsls	r3, r3, #10
    1296:	4313      	orrs	r3, r2
    1298:	606b      	str	r3, [r5, #4]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    129a:	07fb      	lsls	r3, r7, #31
    129c:	d502      	bpl.n	12a4 <_i2c_master_interrupt_handler+0xc0>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    129e:	68e3      	ldr	r3, [r4, #12]
    12a0:	0020      	movs	r0, r4
    12a2:	4798      	blx	r3
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    12a4:	8b63      	ldrh	r3, [r4, #26]
    12a6:	2b00      	cmp	r3, #0
    12a8:	d01b      	beq.n	12e2 <_i2c_master_interrupt_handler+0xfe>
    12aa:	8ba3      	ldrh	r3, [r4, #28]
    12ac:	2b00      	cmp	r3, #0
    12ae:	d118      	bne.n	12e2 <_i2c_master_interrupt_handler+0xfe>
			(module->status == STATUS_BUSY) &&
    12b0:	7ff3      	ldrb	r3, [r6, #31]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    12b2:	2b05      	cmp	r3, #5
    12b4:	d115      	bne.n	12e2 <_i2c_master_interrupt_handler+0xfe>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    12b6:	1d63      	adds	r3, r4, #5
    12b8:	7fda      	ldrb	r2, [r3, #31]
			(module->status == STATUS_BUSY) &&
    12ba:	2a01      	cmp	r2, #1
    12bc:	d111      	bne.n	12e2 <_i2c_master_interrupt_handler+0xfe>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    12be:	7e29      	ldrb	r1, [r5, #24]
    12c0:	3201      	adds	r2, #1
    12c2:	4211      	tst	r1, r2
    12c4:	d000      	beq.n	12c8 <_i2c_master_interrupt_handler+0xe4>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    12c6:	762a      	strb	r2, [r5, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
    12c8:	2203      	movs	r2, #3
    12ca:	752a      	strb	r2, [r5, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
    12cc:	2200      	movs	r2, #0
    12ce:	8362      	strh	r2, [r4, #26]
		module->status        = STATUS_OK;
    12d0:	77f2      	strb	r2, [r6, #31]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    12d2:	07ba      	lsls	r2, r7, #30
    12d4:	d53d      	bpl.n	1352 <_i2c_master_interrupt_handler+0x16e>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    12d6:	7fda      	ldrb	r2, [r3, #31]
    12d8:	2a01      	cmp	r2, #1
    12da:	d13a      	bne.n	1352 <_i2c_master_interrupt_handler+0x16e>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    12dc:	6923      	ldr	r3, [r4, #16]
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    12de:	0020      	movs	r0, r4
    12e0:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    12e2:	7ff3      	ldrb	r3, [r6, #31]
    12e4:	2b05      	cmp	r3, #5
    12e6:	d01a      	beq.n	131e <_i2c_master_interrupt_handler+0x13a>
    12e8:	7ff3      	ldrb	r3, [r6, #31]
    12ea:	2b00      	cmp	r3, #0
    12ec:	d017      	beq.n	131e <_i2c_master_interrupt_handler+0x13a>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    12ee:	2303      	movs	r3, #3
    12f0:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    12f2:	2300      	movs	r3, #0
    12f4:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    12f6:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    12f8:	7ff3      	ldrb	r3, [r6, #31]
    12fa:	2b41      	cmp	r3, #65	; 0x41
    12fc:	d00a      	beq.n	1314 <_i2c_master_interrupt_handler+0x130>
    12fe:	7aa3      	ldrb	r3, [r4, #10]
    1300:	2b00      	cmp	r3, #0
    1302:	d007      	beq.n	1314 <_i2c_master_interrupt_handler+0x130>
				module->send_stop) {
			_i2c_master_wait_for_sync(module);
    1304:	0020      	movs	r0, r4
    1306:	f7ff ff14 	bl	1132 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    130a:	23e0      	movs	r3, #224	; 0xe0
    130c:	686a      	ldr	r2, [r5, #4]
    130e:	02db      	lsls	r3, r3, #11
    1310:	4313      	orrs	r3, r2
    1312:	606b      	str	r3, [r5, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1314:	077b      	lsls	r3, r7, #29
    1316:	d502      	bpl.n	131e <_i2c_master_interrupt_handler+0x13a>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1318:	6963      	ldr	r3, [r4, #20]
    131a:	0020      	movs	r0, r4
    131c:	4798      	blx	r3
		}
	}
}
    131e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1320:	2301      	movs	r3, #1
    1322:	762b      	strb	r3, [r5, #24]
    1324:	e7b9      	b.n	129a <_i2c_master_interrupt_handler+0xb6>
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1326:	8b62      	ldrh	r2, [r4, #26]
    1328:	2a00      	cmp	r2, #0
    132a:	d0bb      	beq.n	12a4 <_i2c_master_interrupt_handler+0xc0>
    132c:	8ba2      	ldrh	r2, [r4, #28]
    132e:	2a00      	cmp	r2, #0
    1330:	d0b8      	beq.n	12a4 <_i2c_master_interrupt_handler+0xc0>
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1332:	8b6a      	ldrh	r2, [r5, #26]
    1334:	0692      	lsls	r2, r2, #26
    1336:	d500      	bpl.n	133a <_i2c_master_interrupt_handler+0x156>
    1338:	e777      	b.n	122a <_i2c_master_interrupt_handler+0x46>
    133a:	2b00      	cmp	r3, #0
    133c:	d003      	beq.n	1346 <_i2c_master_interrupt_handler+0x162>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    133e:	8ba3      	ldrh	r3, [r4, #28]
    1340:	2b01      	cmp	r3, #1
    1342:	d100      	bne.n	1346 <_i2c_master_interrupt_handler+0x162>
    1344:	e771      	b.n	122a <_i2c_master_interrupt_handler+0x46>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1346:	2341      	movs	r3, #65	; 0x41
    1348:	77f3      	strb	r3, [r6, #31]
    134a:	e7ab      	b.n	12a4 <_i2c_master_interrupt_handler+0xc0>
			_i2c_master_read(module);
    134c:	f7ff fef7 	bl	113e <_i2c_master_read>
    1350:	e7a8      	b.n	12a4 <_i2c_master_interrupt_handler+0xc0>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1352:	07fa      	lsls	r2, r7, #31
    1354:	d5c5      	bpl.n	12e2 <_i2c_master_interrupt_handler+0xfe>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1356:	7fdb      	ldrb	r3, [r3, #31]
    1358:	2b00      	cmp	r3, #0
    135a:	d1c2      	bne.n	12e2 <_i2c_master_interrupt_handler+0xfe>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    135c:	68e3      	ldr	r3, [r4, #12]
    135e:	e7be      	b.n	12de <_i2c_master_interrupt_handler+0xfa>
    1360:	20000204 	.word	0x20000204

00001364 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1364:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1366:	4c0d      	ldr	r4, [pc, #52]	; (139c <sercom_set_gclk_generator+0x38>)
{
    1368:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    136a:	7823      	ldrb	r3, [r4, #0]
    136c:	2b00      	cmp	r3, #0
    136e:	d001      	beq.n	1374 <sercom_set_gclk_generator+0x10>
    1370:	2900      	cmp	r1, #0
    1372:	d00c      	beq.n	138e <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    1374:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1376:	200d      	movs	r0, #13
		gclk_chan_conf.source_generator = generator_source;
    1378:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    137a:	f000 fb7f 	bl	1a7c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    137e:	200d      	movs	r0, #13
    1380:	f000 fb40 	bl	1a04 <system_gclk_chan_enable>

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    1384:	2301      	movs	r3, #1

		return STATUS_OK;
    1386:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    1388:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    138a:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    138c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    138e:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    1390:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    1392:	42ab      	cmp	r3, r5
    1394:	d0fa      	beq.n	138c <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    1396:	201d      	movs	r0, #29
    1398:	e7f8      	b.n	138c <sercom_set_gclk_generator+0x28>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	2000006d 	.word	0x2000006d

000013a0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    13a0:	4a1d      	ldr	r2, [pc, #116]	; (1418 <_sercom_get_default_pad+0x78>)
{
    13a2:	0003      	movs	r3, r0
    13a4:	b500      	push	{lr}
    13a6:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    13a8:	4293      	cmp	r3, r2
    13aa:	d013      	beq.n	13d4 <_sercom_get_default_pad+0x34>
    13ac:	4a1b      	ldr	r2, [pc, #108]	; (141c <_sercom_get_default_pad+0x7c>)
    13ae:	4293      	cmp	r3, r2
    13b0:	d01d      	beq.n	13ee <_sercom_get_default_pad+0x4e>
    13b2:	4a1b      	ldr	r2, [pc, #108]	; (1420 <_sercom_get_default_pad+0x80>)
    13b4:	4293      	cmp	r3, r2
    13b6:	d127      	bne.n	1408 <_sercom_get_default_pad+0x68>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    13b8:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13ba:	2903      	cmp	r1, #3
    13bc:	d804      	bhi.n	13c8 <_sercom_get_default_pad+0x28>
    13be:	f000 ff9b 	bl	22f8 <__gnu_thumb1_case_uqi>
    13c2:	0225      	.short	0x0225
    13c4:	0705      	.short	0x0705
    13c6:	4b17      	ldr	r3, [pc, #92]	; (1424 <_sercom_get_default_pad+0x84>)
}
    13c8:	0018      	movs	r0, r3
    13ca:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13cc:	4b16      	ldr	r3, [pc, #88]	; (1428 <_sercom_get_default_pad+0x88>)
    13ce:	e7fb      	b.n	13c8 <_sercom_get_default_pad+0x28>
    13d0:	4b16      	ldr	r3, [pc, #88]	; (142c <_sercom_get_default_pad+0x8c>)
    13d2:	e7f9      	b.n	13c8 <_sercom_get_default_pad+0x28>
	return 0;
    13d4:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13d6:	2903      	cmp	r1, #3
    13d8:	d8f6      	bhi.n	13c8 <_sercom_get_default_pad+0x28>
    13da:	f000 ff8d 	bl	22f8 <__gnu_thumb1_case_uqi>
    13de:	0219      	.short	0x0219
    13e0:	0604      	.short	0x0604
    13e2:	4b13      	ldr	r3, [pc, #76]	; (1430 <_sercom_get_default_pad+0x90>)
    13e4:	e7f0      	b.n	13c8 <_sercom_get_default_pad+0x28>
    13e6:	4b13      	ldr	r3, [pc, #76]	; (1434 <_sercom_get_default_pad+0x94>)
    13e8:	e7ee      	b.n	13c8 <_sercom_get_default_pad+0x28>
    13ea:	4b13      	ldr	r3, [pc, #76]	; (1438 <_sercom_get_default_pad+0x98>)
    13ec:	e7ec      	b.n	13c8 <_sercom_get_default_pad+0x28>
	return 0;
    13ee:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    13f0:	2903      	cmp	r1, #3
    13f2:	d8e9      	bhi.n	13c8 <_sercom_get_default_pad+0x28>
    13f4:	f000 ff80 	bl	22f8 <__gnu_thumb1_case_uqi>
    13f8:	0604020e 	.word	0x0604020e
    13fc:	4b0f      	ldr	r3, [pc, #60]	; (143c <_sercom_get_default_pad+0x9c>)
    13fe:	e7e3      	b.n	13c8 <_sercom_get_default_pad+0x28>
    1400:	4b0f      	ldr	r3, [pc, #60]	; (1440 <_sercom_get_default_pad+0xa0>)
    1402:	e7e1      	b.n	13c8 <_sercom_get_default_pad+0x28>
    1404:	4b0f      	ldr	r3, [pc, #60]	; (1444 <_sercom_get_default_pad+0xa4>)
    1406:	e7df      	b.n	13c8 <_sercom_get_default_pad+0x28>
	return 0;
    1408:	2300      	movs	r3, #0
    140a:	e7dd      	b.n	13c8 <_sercom_get_default_pad+0x28>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    140c:	4b0e      	ldr	r3, [pc, #56]	; (1448 <_sercom_get_default_pad+0xa8>)
    140e:	e7db      	b.n	13c8 <_sercom_get_default_pad+0x28>
    1410:	4b0e      	ldr	r3, [pc, #56]	; (144c <_sercom_get_default_pad+0xac>)
    1412:	e7d9      	b.n	13c8 <_sercom_get_default_pad+0x28>
    1414:	4b0e      	ldr	r3, [pc, #56]	; (1450 <_sercom_get_default_pad+0xb0>)
    1416:	e7d7      	b.n	13c8 <_sercom_get_default_pad+0x28>
    1418:	42000c00 	.word	0x42000c00
    141c:	42001000 	.word	0x42001000
    1420:	42000800 	.word	0x42000800
    1424:	00050003 	.word	0x00050003
    1428:	00060003 	.word	0x00060003
    142c:	00070003 	.word	0x00070003
    1430:	00170002 	.word	0x00170002
    1434:	001e0003 	.word	0x001e0003
    1438:	001f0003 	.word	0x001f0003
    143c:	00170003 	.word	0x00170003
    1440:	00100003 	.word	0x00100003
    1444:	00190003 	.word	0x00190003
    1448:	00040003 	.word	0x00040003
    144c:	00160002 	.word	0x00160002
    1450:	00160003 	.word	0x00160003

00001454 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1456:	4b0c      	ldr	r3, [pc, #48]	; (1488 <_sercom_get_sercom_inst_index+0x34>)
{
    1458:	0001      	movs	r1, r0
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    145a:	0018      	movs	r0, r3
    145c:	aa01      	add	r2, sp, #4
    145e:	c870      	ldmia	r0!, {r4, r5, r6}
    1460:	c270      	stmia	r2!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1462:	9a01      	ldr	r2, [sp, #4]
    1464:	428a      	cmp	r2, r1
    1466:	d00a      	beq.n	147e <_sercom_get_sercom_inst_index+0x2a>
    1468:	685a      	ldr	r2, [r3, #4]
    146a:	428a      	cmp	r2, r1
    146c:	d009      	beq.n	1482 <_sercom_get_sercom_inst_index+0x2e>
    146e:	689b      	ldr	r3, [r3, #8]
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    1470:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1472:	428b      	cmp	r3, r1
    1474:	d101      	bne.n	147a <_sercom_get_sercom_inst_index+0x26>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1476:	3002      	adds	r0, #2
			return i;
    1478:	b2c0      	uxtb	r0, r0
}
    147a:	b004      	add	sp, #16
    147c:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    147e:	2000      	movs	r0, #0
    1480:	e7fa      	b.n	1478 <_sercom_get_sercom_inst_index+0x24>
    1482:	2001      	movs	r0, #1
    1484:	e7f8      	b.n	1478 <_sercom_get_sercom_inst_index+0x24>
    1486:	46c0      	nop			; (mov r8, r8)
    1488:	00003d9c 	.word	0x00003d9c

0000148c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    148c:	4770      	bx	lr
	...

00001490 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1490:	b570      	push	{r4, r5, r6, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    1492:	4e09      	ldr	r6, [pc, #36]	; (14b8 <_sercom_set_handler+0x28>)
    1494:	4b09      	ldr	r3, [pc, #36]	; (14bc <_sercom_set_handler+0x2c>)
    1496:	7832      	ldrb	r2, [r6, #0]
    1498:	2a00      	cmp	r2, #0
    149a:	d109      	bne.n	14b0 <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    149c:	4c08      	ldr	r4, [pc, #32]	; (14c0 <_sercom_set_handler+0x30>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    149e:	4d09      	ldr	r5, [pc, #36]	; (14c4 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    14a0:	6022      	str	r2, [r4, #0]
    14a2:	6062      	str	r2, [r4, #4]
    14a4:	60a2      	str	r2, [r4, #8]
		}

		_handler_table_initialized = true;
    14a6:	3201      	adds	r2, #1
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    14a8:	601d      	str	r5, [r3, #0]
    14aa:	605d      	str	r5, [r3, #4]
    14ac:	609d      	str	r5, [r3, #8]
		_handler_table_initialized = true;
    14ae:	7032      	strb	r2, [r6, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    14b0:	0080      	lsls	r0, r0, #2
    14b2:	5019      	str	r1, [r3, r0]
}
    14b4:	bd70      	pop	{r4, r5, r6, pc}
    14b6:	46c0      	nop			; (mov r8, r8)
    14b8:	2000006f 	.word	0x2000006f
    14bc:	20000070 	.word	0x20000070
    14c0:	20000204 	.word	0x20000204
    14c4:	0000148d 	.word	0x0000148d

000014c8 <SERCOM0_Handler>:
	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
}

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    14c8:	b510      	push	{r4, lr}
    14ca:	4b02      	ldr	r3, [pc, #8]	; (14d4 <SERCOM0_Handler+0xc>)
    14cc:	2000      	movs	r0, #0
    14ce:	681b      	ldr	r3, [r3, #0]
    14d0:	4798      	blx	r3
    14d2:	bd10      	pop	{r4, pc}
    14d4:	20000070 	.word	0x20000070

000014d8 <SERCOM1_Handler>:
    14d8:	b510      	push	{r4, lr}
    14da:	4b02      	ldr	r3, [pc, #8]	; (14e4 <SERCOM1_Handler+0xc>)
    14dc:	2001      	movs	r0, #1
    14de:	685b      	ldr	r3, [r3, #4]
    14e0:	4798      	blx	r3
    14e2:	bd10      	pop	{r4, pc}
    14e4:	20000070 	.word	0x20000070

000014e8 <SERCOM2_Handler>:
    14e8:	b510      	push	{r4, lr}
    14ea:	4b02      	ldr	r3, [pc, #8]	; (14f4 <SERCOM2_Handler+0xc>)
    14ec:	2002      	movs	r0, #2
    14ee:	689b      	ldr	r3, [r3, #8]
    14f0:	4798      	blx	r3
    14f2:	bd10      	pop	{r4, pc}
    14f4:	20000070 	.word	0x20000070

000014f8 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14f8:	2310      	movs	r3, #16
    14fa:	4902      	ldr	r1, [pc, #8]	; (1504 <_system_dfll_wait_for_sync+0xc>)
    14fc:	68ca      	ldr	r2, [r1, #12]
    14fe:	421a      	tst	r2, r3
    1500:	d0fc      	beq.n	14fc <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    1502:	4770      	bx	lr
    1504:	40000800 	.word	0x40000800

00001508 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1508:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    150a:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    150c:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    150e:	4d0a      	ldr	r5, [pc, #40]	; (1538 <system_clock_source_enable.part.0+0x30>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1510:	4c0a      	ldr	r4, [pc, #40]	; (153c <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1512:	682b      	ldr	r3, [r5, #0]
    1514:	4313      	orrs	r3, r2
    1516:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1518:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    151a:	f7ff ffed 	bl	14f8 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    151e:	68ab      	ldr	r3, [r5, #8]
    1520:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1522:	686b      	ldr	r3, [r5, #4]
    1524:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1526:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    1528:	f7ff ffe6 	bl	14f8 <_system_dfll_wait_for_sync>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    152c:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    152e:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1530:	b29b      	uxth	r3, r3
    1532:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    1534:	bd70      	pop	{r4, r5, r6, pc}
    1536:	46c0      	nop			; (mov r8, r8)
    1538:	2000007c 	.word	0x2000007c
    153c:	40000800 	.word	0x40000800

00001540 <system_clock_source_get_hz>:
{
    1540:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    1542:	2808      	cmp	r0, #8
    1544:	d806      	bhi.n	1554 <system_clock_source_get_hz+0x14>
    1546:	f000 fed7 	bl	22f8 <__gnu_thumb1_case_uqi>
    154a:	0508      	.short	0x0508
    154c:	12303005 	.word	0x12303005
    1550:	150b      	.short	0x150b
    1552:	28          	.byte	0x28
    1553:	00          	.byte	0x00
		return 0;
    1554:	2400      	movs	r4, #0
}
    1556:	0020      	movs	r0, r4
    1558:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    155a:	4b16      	ldr	r3, [pc, #88]	; (15b4 <system_clock_source_get_hz+0x74>)
    155c:	691c      	ldr	r4, [r3, #16]
    155e:	e7fa      	b.n	1556 <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1560:	4b15      	ldr	r3, [pc, #84]	; (15b8 <system_clock_source_get_hz+0x78>)
    1562:	4c16      	ldr	r4, [pc, #88]	; (15bc <system_clock_source_get_hz+0x7c>)
    1564:	6a1b      	ldr	r3, [r3, #32]
    1566:	059b      	lsls	r3, r3, #22
    1568:	0f9b      	lsrs	r3, r3, #30
    156a:	40dc      	lsrs	r4, r3
    156c:	e7f3      	b.n	1556 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    156e:	4b11      	ldr	r3, [pc, #68]	; (15b4 <system_clock_source_get_hz+0x74>)
    1570:	695c      	ldr	r4, [r3, #20]
    1572:	e7f0      	b.n	1556 <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1574:	4d0f      	ldr	r5, [pc, #60]	; (15b4 <system_clock_source_get_hz+0x74>)
			return 0;
    1576:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1578:	682b      	ldr	r3, [r5, #0]
    157a:	079b      	lsls	r3, r3, #30
    157c:	d5eb      	bpl.n	1556 <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    157e:	f7ff ffbb 	bl	14f8 <_system_dfll_wait_for_sync>
		switch(_system_clock_inst.dfll.control &
    1582:	2224      	movs	r2, #36	; 0x24
    1584:	682b      	ldr	r3, [r5, #0]
    1586:	4013      	ands	r3, r2
    1588:	2b04      	cmp	r3, #4
    158a:	d111      	bne.n	15b0 <system_clock_source_get_hz+0x70>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    158c:	0020      	movs	r0, r4
    158e:	f000 fa81 	bl	1a94 <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    1592:	68ac      	ldr	r4, [r5, #8]
    1594:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1596:	4344      	muls	r4, r0
    1598:	e7dd      	b.n	1556 <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    159a:	4b09      	ldr	r3, [pc, #36]	; (15c0 <system_clock_source_get_hz+0x80>)
			return 0;
    159c:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    159e:	781b      	ldrb	r3, [r3, #0]
    15a0:	075b      	lsls	r3, r3, #29
    15a2:	d5d8      	bpl.n	1556 <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    15a4:	4b03      	ldr	r3, [pc, #12]	; (15b4 <system_clock_source_get_hz+0x74>)
    15a6:	68dc      	ldr	r4, [r3, #12]
    15a8:	e7d5      	b.n	1556 <system_clock_source_get_hz+0x16>
		return 32768UL;
    15aa:	2480      	movs	r4, #128	; 0x80
    15ac:	0224      	lsls	r4, r4, #8
    15ae:	e7d2      	b.n	1556 <system_clock_source_get_hz+0x16>
			return 48000000UL;
    15b0:	4c04      	ldr	r4, [pc, #16]	; (15c4 <system_clock_source_get_hz+0x84>)
    15b2:	e7d0      	b.n	1556 <system_clock_source_get_hz+0x16>
    15b4:	2000007c 	.word	0x2000007c
    15b8:	40000800 	.word	0x40000800
    15bc:	007a1200 	.word	0x007a1200
    15c0:	40000850 	.word	0x40000850
    15c4:	02dc6c00 	.word	0x02dc6c00

000015c8 <system_clock_source_osc8m_set_config>:
{
    15c8:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    15ca:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    15cc:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    15ce:	7845      	ldrb	r5, [r0, #1]
    15d0:	2001      	movs	r0, #1
    15d2:	2640      	movs	r6, #64	; 0x40
    15d4:	4005      	ands	r5, r0
    15d6:	4020      	ands	r0, r4
    15d8:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    15da:	4908      	ldr	r1, [pc, #32]	; (15fc <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    15dc:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    15de:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    15e0:	01c0      	lsls	r0, r0, #7
    15e2:	43b3      	bics	r3, r6
    15e4:	432b      	orrs	r3, r5
    15e6:	43a3      	bics	r3, r4
    15e8:	4303      	orrs	r3, r0
    15ea:	2003      	movs	r0, #3
    15ec:	4002      	ands	r2, r0
    15ee:	4804      	ldr	r0, [pc, #16]	; (1600 <system_clock_source_osc8m_set_config+0x38>)
    15f0:	0212      	lsls	r2, r2, #8
    15f2:	4003      	ands	r3, r0
    15f4:	4313      	orrs	r3, r2
    15f6:	620b      	str	r3, [r1, #32]
}
    15f8:	bd70      	pop	{r4, r5, r6, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	40000800 	.word	0x40000800
    1600:	fffffcff 	.word	0xfffffcff

00001604 <system_clock_source_osc32k_set_config>:
{
    1604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    1606:	4f18      	ldr	r7, [pc, #96]	; (1668 <system_clock_source_osc32k_set_config+0x64>)
	temp.bit.EN1K     = config->enable_1khz_output;
    1608:	7846      	ldrb	r6, [r0, #1]
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
    160a:	69bb      	ldr	r3, [r7, #24]
    160c:	0019      	movs	r1, r3
	temp.bit.STARTUP  = config->startup_time;
    160e:	7803      	ldrb	r3, [r0, #0]
    1610:	9301      	str	r3, [sp, #4]
	SYSCTRL->OSC32K  = temp;
    1612:	2304      	movs	r3, #4
	temp.bit.WRTLOCK  = config->write_once;
    1614:	7942      	ldrb	r2, [r0, #5]
	temp.bit.ONDEMAND = config->on_demand;
    1616:	7904      	ldrb	r4, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1618:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
    161a:	9200      	str	r2, [sp, #0]
	SYSCTRL->OSC32K  = temp;
    161c:	2201      	movs	r2, #1
    161e:	4399      	bics	r1, r3
    1620:	2308      	movs	r3, #8
    1622:	7880      	ldrb	r0, [r0, #2]
    1624:	4016      	ands	r6, r2
    1626:	4010      	ands	r0, r2
    1628:	0080      	lsls	r0, r0, #2
    162a:	4308      	orrs	r0, r1
    162c:	4398      	bics	r0, r3
    162e:	00f6      	lsls	r6, r6, #3
    1630:	4306      	orrs	r6, r0
    1632:	4015      	ands	r5, r2
    1634:	01a8      	lsls	r0, r5, #6
    1636:	0035      	movs	r5, r6
    1638:	3338      	adds	r3, #56	; 0x38
    163a:	439d      	bics	r5, r3
    163c:	4305      	orrs	r5, r0
    163e:	4014      	ands	r4, r2
    1640:	01e3      	lsls	r3, r4, #7
    1642:	2080      	movs	r0, #128	; 0x80
    1644:	002c      	movs	r4, r5
    1646:	4384      	bics	r4, r0
    1648:	431c      	orrs	r4, r3
    164a:	2307      	movs	r3, #7
    164c:	9901      	ldr	r1, [sp, #4]
    164e:	400b      	ands	r3, r1
    1650:	4906      	ldr	r1, [pc, #24]	; (166c <system_clock_source_osc32k_set_config+0x68>)
    1652:	021b      	lsls	r3, r3, #8
    1654:	4021      	ands	r1, r4
    1656:	4319      	orrs	r1, r3
    1658:	9b00      	ldr	r3, [sp, #0]
    165a:	401a      	ands	r2, r3
    165c:	0313      	lsls	r3, r2, #12
    165e:	4a04      	ldr	r2, [pc, #16]	; (1670 <system_clock_source_osc32k_set_config+0x6c>)
    1660:	400a      	ands	r2, r1
    1662:	431a      	orrs	r2, r3
    1664:	61ba      	str	r2, [r7, #24]
}
    1666:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1668:	40000800 	.word	0x40000800
    166c:	fffff8ff 	.word	0xfffff8ff
    1670:	ffffefff 	.word	0xffffefff

00001674 <system_clock_source_dfll_set_config>:
{
    1674:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1676:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    1678:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    167a:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    167c:	059b      	lsls	r3, r3, #22
    167e:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1680:	0c12      	lsrs	r2, r2, #16
    1682:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    1684:	4b17      	ldr	r3, [pc, #92]	; (16e4 <system_clock_source_dfll_set_config+0x70>)
    1686:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    1688:	79c1      	ldrb	r1, [r0, #7]
    168a:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    168c:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    168e:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    1690:	8841      	ldrh	r1, [r0, #2]
    1692:	4321      	orrs	r1, r4
    1694:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1696:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    1698:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    169a:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    169c:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    169e:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    16a0:	2c04      	cmp	r4, #4
    16a2:	d10d      	bne.n	16c0 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16a4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    16a6:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16a8:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    16aa:	430a      	orrs	r2, r1
    16ac:	89c1      	ldrh	r1, [r0, #14]
    16ae:	480e      	ldr	r0, [pc, #56]	; (16e8 <system_clock_source_dfll_set_config+0x74>)
    16b0:	0409      	lsls	r1, r1, #16
    16b2:	4001      	ands	r1, r0
    16b4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    16b6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    16b8:	681a      	ldr	r2, [r3, #0]
    16ba:	4314      	orrs	r4, r2
    16bc:	601c      	str	r4, [r3, #0]
}
    16be:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    16c0:	2c20      	cmp	r4, #32
    16c2:	d1fc      	bne.n	16be <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16c4:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    16c6:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    16c8:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    16ca:	430a      	orrs	r2, r1
    16cc:	89c1      	ldrh	r1, [r0, #14]
    16ce:	4806      	ldr	r0, [pc, #24]	; (16e8 <system_clock_source_dfll_set_config+0x74>)
    16d0:	0409      	lsls	r1, r1, #16
    16d2:	4001      	ands	r1, r0
    16d4:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    16d6:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    16d8:	6819      	ldr	r1, [r3, #0]
    16da:	4a04      	ldr	r2, [pc, #16]	; (16ec <system_clock_source_dfll_set_config+0x78>)
    16dc:	430a      	orrs	r2, r1
    16de:	601a      	str	r2, [r3, #0]
}
    16e0:	e7ed      	b.n	16be <system_clock_source_dfll_set_config+0x4a>
    16e2:	46c0      	nop			; (mov r8, r8)
    16e4:	2000007c 	.word	0x2000007c
    16e8:	03ff0000 	.word	0x03ff0000
    16ec:	00000424 	.word	0x00000424

000016f0 <system_clock_source_enable>:
{
    16f0:	b510      	push	{r4, lr}
	switch (clock_source) {
    16f2:	2808      	cmp	r0, #8
    16f4:	d806      	bhi.n	1704 <system_clock_source_enable+0x14>
    16f6:	f000 fdff 	bl	22f8 <__gnu_thumb1_case_uqi>
    16fa:	0514      	.short	0x0514
    16fc:	1a0e0c05 	.word	0x1a0e0c05
    1700:	2007      	.short	0x2007
    1702:	23          	.byte	0x23
    1703:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    1704:	2017      	movs	r0, #23
}
    1706:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1708:	2302      	movs	r3, #2
    170a:	4a10      	ldr	r2, [pc, #64]	; (174c <system_clock_source_enable+0x5c>)
    170c:	6a11      	ldr	r1, [r2, #32]
    170e:	430b      	orrs	r3, r1
    1710:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1712:	2000      	movs	r0, #0
    1714:	e7f7      	b.n	1706 <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1716:	2302      	movs	r3, #2
    1718:	4a0c      	ldr	r2, [pc, #48]	; (174c <system_clock_source_enable+0x5c>)
    171a:	6991      	ldr	r1, [r2, #24]
    171c:	430b      	orrs	r3, r1
    171e:	6193      	str	r3, [r2, #24]
    1720:	e7f7      	b.n	1712 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1722:	2302      	movs	r3, #2
    1724:	4a09      	ldr	r2, [pc, #36]	; (174c <system_clock_source_enable+0x5c>)
    1726:	8a11      	ldrh	r1, [r2, #16]
    1728:	430b      	orrs	r3, r1
    172a:	8213      	strh	r3, [r2, #16]
    172c:	e7f1      	b.n	1712 <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    172e:	2302      	movs	r3, #2
    1730:	4a06      	ldr	r2, [pc, #24]	; (174c <system_clock_source_enable+0x5c>)
    1732:	8a91      	ldrh	r1, [r2, #20]
    1734:	430b      	orrs	r3, r1
    1736:	8293      	strh	r3, [r2, #20]
    1738:	e7eb      	b.n	1712 <system_clock_source_enable+0x22>
    173a:	f7ff fee5 	bl	1508 <system_clock_source_enable.part.0>
    173e:	e7e2      	b.n	1706 <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1740:	2302      	movs	r3, #2
    1742:	4a03      	ldr	r2, [pc, #12]	; (1750 <system_clock_source_enable+0x60>)
    1744:	7811      	ldrb	r1, [r2, #0]
    1746:	430b      	orrs	r3, r1
    1748:	7013      	strb	r3, [r2, #0]
    174a:	e7e2      	b.n	1712 <system_clock_source_enable+0x22>
    174c:	40000800 	.word	0x40000800
    1750:	40000844 	.word	0x40000844

00001754 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1754:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1756:	221e      	movs	r2, #30
{
    1758:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    175a:	2500      	movs	r5, #0
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    175c:	4e48      	ldr	r6, [pc, #288]	; (1880 <system_clock_init+0x12c>)
    175e:	00db      	lsls	r3, r3, #3
    1760:	4948      	ldr	r1, [pc, #288]	; (1884 <system_clock_init+0x130>)
    1762:	60b3      	str	r3, [r6, #8]
    1764:	684b      	ldr	r3, [r1, #4]
{
    1766:	b08d      	sub	sp, #52	; 0x34
    1768:	4393      	bics	r3, r2
    176a:	3a1c      	subs	r2, #28
    176c:	4313      	orrs	r3, r2
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    176e:	ac07      	add	r4, sp, #28
    1770:	604b      	str	r3, [r1, #4]
    1772:	7022      	strb	r2, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1774:	b2e8      	uxtb	r0, r5
    1776:	0021      	movs	r1, r4
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1778:	3501      	adds	r5, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    177a:	f000 f97f 	bl	1a7c <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    177e:	2d18      	cmp	r5, #24
    1780:	d1f8      	bne.n	1774 <system_clock_init+0x20>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    1782:	4f41      	ldr	r7, [pc, #260]	; (1888 <system_clock_init+0x134>)
	SYSCTRL->OSC32K.bit.CALIB =
    1784:	69b2      	ldr	r2, [r6, #24]
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    1786:	683b      	ldr	r3, [r7, #0]
	SYSCTRL->OSC32K.bit.CALIB =
    1788:	4940      	ldr	r1, [pc, #256]	; (188c <system_clock_init+0x138>)
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    178a:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    178c:	0e5b      	lsrs	r3, r3, #25
    178e:	400a      	ands	r2, r1
    1790:	041b      	lsls	r3, r3, #16
    1792:	4313      	orrs	r3, r2
    1794:	61b3      	str	r3, [r6, #24]
	config->enable_1khz_output  = true;
    1796:	2301      	movs	r3, #1
	config->run_in_standby      = false;
    1798:	2500      	movs	r5, #0
	config->enable_1khz_output  = true;
    179a:	a802      	add	r0, sp, #8
    179c:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    179e:	7083      	strb	r3, [r0, #2]
	config->on_demand           = true;
    17a0:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    17a2:	3306      	adds	r3, #6
    17a4:	7003      	strb	r3, [r0, #0]
	config->run_in_standby      = false;
    17a6:	70c5      	strb	r5, [r0, #3]
	config->write_once          = false;
    17a8:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    17aa:	f7ff ff2b 	bl	1604 <system_clock_source_osc32k_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    17ae:	2004      	movs	r0, #4
    17b0:	f7ff ff9e 	bl	16f0 <system_clock_source_enable>
	config->fine_value      = 0xff / 4; /* Midpoint */
    17b4:	233f      	movs	r3, #63	; 0x3f
    17b6:	8163      	strh	r3, [r4, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    17b8:	3b3b      	subs	r3, #59	; 0x3b
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    17ba:	8065      	strh	r5, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    17bc:	80a5      	strh	r5, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    17be:	71a5      	strb	r5, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    17c0:	71e5      	strb	r5, [r4, #7]
    17c2:	7023      	strb	r3, [r4, #0]
	dfll_conf.on_demand      = false;
    17c4:	7065      	strb	r5, [r4, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    17c6:	683b      	ldr	r3, [r7, #0]
    17c8:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    17ca:	2b3f      	cmp	r3, #63	; 0x3f
    17cc:	d100      	bne.n	17d0 <system_clock_init+0x7c>
		coarse = 0x1f;
    17ce:	3b20      	subs	r3, #32
	}

	dfll_conf.coarse_value = coarse;
    17d0:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    17d2:	23b7      	movs	r3, #183	; 0xb7
    17d4:	00db      	lsls	r3, r3, #3
    17d6:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    17d8:	2307      	movs	r3, #7
    17da:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17dc:	233f      	movs	r3, #63	; 0x3f
	config->run_in_standby  = false;
    17de:	2500      	movs	r5, #0
	config->on_demand       = true;
    17e0:	2701      	movs	r7, #1
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    17e2:	0020      	movs	r0, r4
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    17e4:	81e3      	strh	r3, [r4, #14]
	system_clock_source_dfll_set_config(&dfll_conf);
    17e6:	f7ff ff45 	bl	1674 <system_clock_source_dfll_set_config>
	config->run_in_standby  = false;
    17ea:	a801      	add	r0, sp, #4
    17ec:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    17ee:	7087      	strb	r7, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    17f0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    17f2:	f7ff fee9 	bl	15c8 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    17f6:	2006      	movs	r0, #6
    17f8:	f7ff ff7a 	bl	16f0 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    17fc:	f000 f850 	bl	18a0 <system_gclk_init>

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1800:	2304      	movs	r3, #4
	config->division_factor    = 1;
    1802:	ac04      	add	r4, sp, #16
    1804:	0021      	movs	r1, r4
    1806:	0038      	movs	r0, r7
    1808:	7023      	strb	r3, [r4, #0]
    180a:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    180c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    180e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1810:	7265      	strb	r5, [r4, #9]
    1812:	f000 f855 	bl	18c0 <system_gclk_gen_set_config>
    1816:	0038      	movs	r0, r7
    1818:	f000 f8a0 	bl	195c <system_gclk_gen_enable>
    181c:	2307      	movs	r3, #7
    181e:	0021      	movs	r1, r4
    1820:	2003      	movs	r0, #3
    1822:	7023      	strb	r3, [r4, #0]
	config->division_factor    = 1;
    1824:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    1826:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    1828:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    182a:	7265      	strb	r5, [r4, #9]
    182c:	f000 f848 	bl	18c0 <system_gclk_gen_set_config>
    1830:	2003      	movs	r0, #3
    1832:	f000 f893 	bl	195c <system_gclk_gen_enable>
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    1836:	0021      	movs	r1, r4
    1838:	0028      	movs	r0, r5
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    183a:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    183c:	f000 f91e 	bl	1a7c <system_gclk_chan_set_config>
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1840:	0028      	movs	r0, r5
    1842:	f000 f8df 	bl	1a04 <system_gclk_chan_enable>
    1846:	f7ff fe5f 	bl	1508 <system_clock_source_enable.part.0>
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    184a:	22d0      	movs	r2, #208	; 0xd0
    184c:	68f3      	ldr	r3, [r6, #12]
    184e:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1850:	2bd0      	cmp	r3, #208	; 0xd0
    1852:	d1fb      	bne.n	184c <system_clock_init+0xf8>
	PM->CPUSEL.reg = (uint32_t)divider;
    1854:	2500      	movs	r5, #0
    1856:	4b0e      	ldr	r3, [pc, #56]	; (1890 <system_clock_init+0x13c>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1858:	0021      	movs	r1, r4
    185a:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    185c:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    185e:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1860:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    1862:	2301      	movs	r3, #1
    1864:	0028      	movs	r0, r5
    1866:	6063      	str	r3, [r4, #4]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1868:	3305      	adds	r3, #5
    186a:	7023      	strb	r3, [r4, #0]
	config->high_when_disabled = false;
    186c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    186e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1870:	7265      	strb	r5, [r4, #9]
    1872:	f000 f825 	bl	18c0 <system_gclk_gen_set_config>
    1876:	0028      	movs	r0, r5
    1878:	f000 f870 	bl	195c <system_gclk_gen_enable>
#endif
}
    187c:	b00d      	add	sp, #52	; 0x34
    187e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1880:	40000800 	.word	0x40000800
    1884:	41004000 	.word	0x41004000
    1888:	00806024 	.word	0x00806024
    188c:	ff80ffff 	.word	0xff80ffff
    1890:	40000400 	.word	0x40000400

00001894 <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1894:	4b01      	ldr	r3, [pc, #4]	; (189c <system_gclk_is_syncing+0x8>)
    1896:	7858      	ldrb	r0, [r3, #1]
    1898:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    189a:	4770      	bx	lr
    189c:	40000c00 	.word	0x40000c00

000018a0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    18a0:	2308      	movs	r3, #8
    18a2:	4a05      	ldr	r2, [pc, #20]	; (18b8 <system_gclk_init+0x18>)
    18a4:	6991      	ldr	r1, [r2, #24]
    18a6:	430b      	orrs	r3, r1
    18a8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    18aa:	2301      	movs	r3, #1
    18ac:	4a03      	ldr	r2, [pc, #12]	; (18bc <system_gclk_init+0x1c>)
    18ae:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    18b0:	7811      	ldrb	r1, [r2, #0]
    18b2:	4219      	tst	r1, r3
    18b4:	d1fc      	bne.n	18b0 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    18b6:	4770      	bx	lr
    18b8:	40000400 	.word	0x40000400
    18bc:	40000c00 	.word	0x40000c00

000018c0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    18c0:	b570      	push	{r4, r5, r6, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18c2:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    18c4:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18c6:	0224      	lsls	r4, r4, #8
{
    18c8:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    18ca:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    18cc:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    18ce:	2b00      	cmp	r3, #0
    18d0:	d002      	beq.n	18d8 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    18d2:	2380      	movs	r3, #128	; 0x80
    18d4:	02db      	lsls	r3, r3, #11
    18d6:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    18d8:	7a4b      	ldrb	r3, [r1, #9]
    18da:	2b00      	cmp	r3, #0
    18dc:	d002      	beq.n	18e4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    18de:	2380      	movs	r3, #128	; 0x80
    18e0:	031b      	lsls	r3, r3, #12
    18e2:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    18e4:	684b      	ldr	r3, [r1, #4]
    18e6:	2b01      	cmp	r3, #1
    18e8:	d912      	bls.n	1910 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    18ea:	1e5d      	subs	r5, r3, #1
    18ec:	401d      	ands	r5, r3
    18ee:	2202      	movs	r2, #2
    18f0:	2d00      	cmp	r5, #0
    18f2:	d006      	beq.n	1902 <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    18f4:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18f6:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    18f8:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    18fa:	029b      	lsls	r3, r3, #10
    18fc:	e007      	b.n	190e <system_gclk_gen_set_config+0x4e>
				div2_count++;
    18fe:	3501      	adds	r5, #1
						mask <<= 1) {
    1900:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1902:	429a      	cmp	r2, r3
    1904:	d3fb      	bcc.n	18fe <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1906:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1908:	022d      	lsls	r5, r5, #8
    190a:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    190c:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    190e:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1910:	7a0b      	ldrb	r3, [r1, #8]
    1912:	2b00      	cmp	r3, #0
    1914:	d002      	beq.n	191c <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1916:	2380      	movs	r3, #128	; 0x80
    1918:	039b      	lsls	r3, r3, #14
    191a:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    191c:	f7ff ffba 	bl	1894 <system_gclk_is_syncing>
    1920:	2800      	cmp	r0, #0
    1922:	d1fb      	bne.n	191c <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1924:	f7ff f9ca 	bl	cbc <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1928:	4b0a      	ldr	r3, [pc, #40]	; (1954 <system_gclk_gen_set_config+0x94>)
    192a:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    192c:	f7ff ffb2 	bl	1894 <system_gclk_is_syncing>
    1930:	2800      	cmp	r0, #0
    1932:	d1fb      	bne.n	192c <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1934:	4b08      	ldr	r3, [pc, #32]	; (1958 <system_gclk_gen_set_config+0x98>)
    1936:	609d      	str	r5, [r3, #8]
    1938:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    193a:	f7ff ffab 	bl	1894 <system_gclk_is_syncing>
    193e:	2800      	cmp	r0, #0
    1940:	d1fb      	bne.n	193a <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1942:	2280      	movs	r2, #128	; 0x80
    1944:	686b      	ldr	r3, [r5, #4]
    1946:	0252      	lsls	r2, r2, #9
    1948:	4013      	ands	r3, r2
    194a:	431c      	orrs	r4, r3
    194c:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    194e:	f7ff f9cf 	bl	cf0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1952:	bd70      	pop	{r4, r5, r6, pc}
    1954:	40000c08 	.word	0x40000c08
    1958:	40000c00 	.word	0x40000c00

0000195c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    195c:	b510      	push	{r4, lr}
    195e:	0004      	movs	r4, r0
	while (system_gclk_is_syncing()) {
    1960:	f7ff ff98 	bl	1894 <system_gclk_is_syncing>
    1964:	2800      	cmp	r0, #0
    1966:	d1fb      	bne.n	1960 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1968:	f7ff f9a8 	bl	cbc <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    196c:	4b07      	ldr	r3, [pc, #28]	; (198c <system_gclk_gen_enable+0x30>)
    196e:	701c      	strb	r4, [r3, #0]
	while (system_gclk_is_syncing()) {
    1970:	f7ff ff90 	bl	1894 <system_gclk_is_syncing>
    1974:	2800      	cmp	r0, #0
    1976:	d1fb      	bne.n	1970 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1978:	2380      	movs	r3, #128	; 0x80
    197a:	4a05      	ldr	r2, [pc, #20]	; (1990 <system_gclk_gen_enable+0x34>)
    197c:	025b      	lsls	r3, r3, #9
    197e:	6851      	ldr	r1, [r2, #4]
    1980:	430b      	orrs	r3, r1
    1982:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1984:	f7ff f9b4 	bl	cf0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1988:	bd10      	pop	{r4, pc}
    198a:	46c0      	nop			; (mov r8, r8)
    198c:	40000c04 	.word	0x40000c04
    1990:	40000c00 	.word	0x40000c00

00001994 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1996:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    1998:	f7ff ff7c 	bl	1894 <system_gclk_is_syncing>
    199c:	2800      	cmp	r0, #0
    199e:	d1fb      	bne.n	1998 <system_gclk_gen_get_hz+0x4>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19a0:	4e15      	ldr	r6, [pc, #84]	; (19f8 <system_gclk_gen_get_hz+0x64>)
	cpu_irq_enter_critical();
    19a2:	f7ff f98b 	bl	cbc <cpu_irq_enter_critical>
    19a6:	7037      	strb	r7, [r6, #0]
	while (system_gclk_is_syncing()) {
    19a8:	f7ff ff74 	bl	1894 <system_gclk_is_syncing>
    19ac:	2800      	cmp	r0, #0
    19ae:	d1fb      	bne.n	19a8 <system_gclk_gen_get_hz+0x14>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    19b0:	4c12      	ldr	r4, [pc, #72]	; (19fc <system_gclk_gen_get_hz+0x68>)
    19b2:	6860      	ldr	r0, [r4, #4]
    19b4:	04c0      	lsls	r0, r0, #19
    19b6:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    19b8:	f7ff fdc2 	bl	1540 <system_clock_source_get_hz>
    19bc:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    19be:	7037      	strb	r7, [r6, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19c0:	6866      	ldr	r6, [r4, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19c2:	4b0f      	ldr	r3, [pc, #60]	; (1a00 <system_gclk_gen_get_hz+0x6c>)
	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    19c4:	02f6      	lsls	r6, r6, #11
    19c6:	0ff6      	lsrs	r6, r6, #31
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    19c8:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    19ca:	f7ff ff63 	bl	1894 <system_gclk_is_syncing>
    19ce:	2800      	cmp	r0, #0
    19d0:	d1fb      	bne.n	19ca <system_gclk_gen_get_hz+0x36>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    19d2:	68a4      	ldr	r4, [r4, #8]
    19d4:	0224      	lsls	r4, r4, #8
    19d6:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    19d8:	f7ff f98a 	bl	cf0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    19dc:	2e00      	cmp	r6, #0
    19de:	d108      	bne.n	19f2 <system_gclk_gen_get_hz+0x5e>
    19e0:	2c01      	cmp	r4, #1
    19e2:	d904      	bls.n	19ee <system_gclk_gen_get_hz+0x5a>
		gen_input_hz /= divider;
    19e4:	0028      	movs	r0, r5
    19e6:	0021      	movs	r1, r4
    19e8:	f000 fc90 	bl	230c <__udivsi3>
    19ec:	0005      	movs	r5, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    19ee:	0028      	movs	r0, r5
    19f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    19f2:	3401      	adds	r4, #1
    19f4:	40e5      	lsrs	r5, r4
	return gen_input_hz;
    19f6:	e7fa      	b.n	19ee <system_gclk_gen_get_hz+0x5a>
    19f8:	40000c04 	.word	0x40000c04
    19fc:	40000c00 	.word	0x40000c00
    1a00:	40000c08 	.word	0x40000c08

00001a04 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1a04:	b510      	push	{r4, lr}
    1a06:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a08:	f7ff f958 	bl	cbc <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a0c:	4b05      	ldr	r3, [pc, #20]	; (1a24 <system_gclk_chan_enable+0x20>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a0e:	4a06      	ldr	r2, [pc, #24]	; (1a28 <system_gclk_chan_enable+0x24>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a10:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1a12:	2380      	movs	r3, #128	; 0x80
    1a14:	8851      	ldrh	r1, [r2, #2]
    1a16:	01db      	lsls	r3, r3, #7
    1a18:	430b      	orrs	r3, r1
    1a1a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1a1c:	f7ff f968 	bl	cf0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1a20:	bd10      	pop	{r4, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	40000c02 	.word	0x40000c02
    1a28:	40000c00 	.word	0x40000c00

00001a2c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1a2c:	b510      	push	{r4, lr}
    1a2e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a30:	f7ff f944 	bl	cbc <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a34:	4b0d      	ldr	r3, [pc, #52]	; (1a6c <system_gclk_chan_disable+0x40>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    1a36:	4a0e      	ldr	r2, [pc, #56]	; (1a70 <system_gclk_chan_disable+0x44>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a38:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a3a:	4b0e      	ldr	r3, [pc, #56]	; (1a74 <system_gclk_chan_disable+0x48>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a3c:	4c0e      	ldr	r4, [pc, #56]	; (1a78 <system_gclk_chan_disable+0x4c>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a3e:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    1a40:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a42:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    1a44:	4011      	ands	r1, r2
    1a46:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a48:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1a4a:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1a4c:	4021      	ands	r1, r4
    1a4e:	8059      	strh	r1, [r3, #2]
    1a50:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1a52:	2280      	movs	r2, #128	; 0x80
    1a54:	01d2      	lsls	r2, r2, #7
    1a56:	885c      	ldrh	r4, [r3, #2]
    1a58:	4214      	tst	r4, r2
    1a5a:	d1fc      	bne.n	1a56 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1a5c:	885a      	ldrh	r2, [r3, #2]
    1a5e:	0200      	lsls	r0, r0, #8
    1a60:	400a      	ands	r2, r1
    1a62:	4302      	orrs	r2, r0
    1a64:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    1a66:	f7ff f943 	bl	cf0 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1a6a:	bd10      	pop	{r4, pc}
    1a6c:	40000c02 	.word	0x40000c02
    1a70:	fffff0ff 	.word	0xfffff0ff
    1a74:	40000c00 	.word	0x40000c00
    1a78:	ffffbfff 	.word	0xffffbfff

00001a7c <system_gclk_chan_set_config>:
{
    1a7c:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1a7e:	780c      	ldrb	r4, [r1, #0]
    1a80:	0224      	lsls	r4, r4, #8
    1a82:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1a84:	f7ff ffd2 	bl	1a2c <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1a88:	4b01      	ldr	r3, [pc, #4]	; (1a90 <system_gclk_chan_set_config+0x14>)
    1a8a:	b2a4      	uxth	r4, r4
    1a8c:	805c      	strh	r4, [r3, #2]
}
    1a8e:	bd10      	pop	{r4, pc}
    1a90:	40000c00 	.word	0x40000c00

00001a94 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1a94:	b510      	push	{r4, lr}
    1a96:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1a98:	f7ff f910 	bl	cbc <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1a9c:	4b05      	ldr	r3, [pc, #20]	; (1ab4 <system_gclk_chan_get_hz+0x20>)
    1a9e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1aa0:	4b05      	ldr	r3, [pc, #20]	; (1ab8 <system_gclk_chan_get_hz+0x24>)
    1aa2:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    1aa4:	f7ff f924 	bl	cf0 <cpu_irq_leave_critical>
    1aa8:	0524      	lsls	r4, r4, #20
    1aaa:	0f24      	lsrs	r4, r4, #28

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1aac:	0020      	movs	r0, r4
    1aae:	f7ff ff71 	bl	1994 <system_gclk_gen_get_hz>
}
    1ab2:	bd10      	pop	{r4, pc}
    1ab4:	40000c02 	.word	0x40000c02
    1ab8:	40000c00 	.word	0x40000c00

00001abc <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1abc:	78d3      	ldrb	r3, [r2, #3]
{
    1abe:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	d135      	bne.n	1b30 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1ac4:	7814      	ldrb	r4, [r2, #0]
    1ac6:	2c80      	cmp	r4, #128	; 0x80
    1ac8:	d003      	beq.n	1ad2 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1aca:	2380      	movs	r3, #128	; 0x80
    1acc:	0624      	lsls	r4, r4, #24
    1ace:	025b      	lsls	r3, r3, #9
    1ad0:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1ad2:	2502      	movs	r5, #2
    1ad4:	7854      	ldrb	r4, [r2, #1]
    1ad6:	43ac      	bics	r4, r5
    1ad8:	d106      	bne.n	1ae8 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1ada:	7894      	ldrb	r4, [r2, #2]
    1adc:	2c00      	cmp	r4, #0
    1ade:	d124      	bne.n	1b2a <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1ae0:	2480      	movs	r4, #128	; 0x80
    1ae2:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1ae4:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1ae6:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ae8:	7854      	ldrb	r4, [r2, #1]
    1aea:	3c01      	subs	r4, #1
    1aec:	2c01      	cmp	r4, #1
    1aee:	d801      	bhi.n	1af4 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1af0:	4c12      	ldr	r4, [pc, #72]	; (1b3c <_system_pinmux_config+0x80>)
    1af2:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1af4:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1af6:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1af8:	05e4      	lsls	r4, r4, #23
    1afa:	432c      	orrs	r4, r5
    1afc:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1afe:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b00:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1b02:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1b04:	0624      	lsls	r4, r4, #24
    1b06:	432c      	orrs	r4, r5
    1b08:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1b0a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1b0c:	78d4      	ldrb	r4, [r2, #3]
    1b0e:	2c00      	cmp	r4, #0
    1b10:	d10a      	bne.n	1b28 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1b12:	035b      	lsls	r3, r3, #13
    1b14:	d503      	bpl.n	1b1e <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1b16:	7893      	ldrb	r3, [r2, #2]
    1b18:	2b01      	cmp	r3, #1
    1b1a:	d10c      	bne.n	1b36 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    1b1c:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1b1e:	7853      	ldrb	r3, [r2, #1]
    1b20:	3b01      	subs	r3, #1
    1b22:	2b01      	cmp	r3, #1
    1b24:	d800      	bhi.n	1b28 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1b26:	6081      	str	r1, [r0, #8]
		}
	}
}
    1b28:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1b2a:	24c0      	movs	r4, #192	; 0xc0
    1b2c:	02e4      	lsls	r4, r4, #11
    1b2e:	e7d9      	b.n	1ae4 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    1b30:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1b32:	2300      	movs	r3, #0
    1b34:	e7de      	b.n	1af4 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    1b36:	6141      	str	r1, [r0, #20]
    1b38:	e7f1      	b.n	1b1e <_system_pinmux_config+0x62>
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	fffbffff 	.word	0xfffbffff

00001b40 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1b40:	b510      	push	{r4, lr}
    1b42:	0003      	movs	r3, r0
    1b44:	000a      	movs	r2, r1
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
	uint8_t group_index = (gpio_pin / 32);
    1b46:	0944      	lsrs	r4, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1b48:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1b4a:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    1b4c:	4281      	cmp	r1, r0
    1b4e:	d102      	bne.n	1b56 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1b50:	4904      	ldr	r1, [pc, #16]	; (1b64 <system_pinmux_pin_set_config+0x24>)
    1b52:	01e0      	lsls	r0, r4, #7
    1b54:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1b56:	211f      	movs	r1, #31
    1b58:	400b      	ands	r3, r1
    1b5a:	391e      	subs	r1, #30
    1b5c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1b5e:	f7ff ffad 	bl	1abc <_system_pinmux_config>
}
    1b62:	bd10      	pop	{r4, pc}
    1b64:	41004400 	.word	0x41004400

00001b68 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1b68:	4770      	bx	lr

00001b6a <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1b6a:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1b6c:	f7ff fdf2 	bl	1754 <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1b70:	f7ff fffa 	bl	1b68 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1b74:	f7fe fcf0 	bl	558 <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1b78:	f7ff fff6 	bl	1b68 <_system_dummy_init>
}
    1b7c:	bd10      	pop	{r4, pc}
	...

00001b80 <_tcc_set_compare_value.isra.5>:
 *
 * \retval  STATUS_OK               The compare value was updated successfully
 * \retval  STATUS_ERR_INVALID_ARG  An invalid channel index was supplied or
 *                                  compare value exceed resolution
 */
static enum status_code _tcc_set_compare_value(
    1b80:	b530      	push	{r4, r5, lr}
    1b82:	0004      	movs	r4, r0
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
		return STATUS_ERR_INVALID_ARG;
    1b84:	2017      	movs	r0, #23
	if (channel_index >= _tcc_cc_nums[module_index]) {
    1b86:	2903      	cmp	r1, #3
    1b88:	d813      	bhi.n	1bb2 <_tcc_set_compare_value.isra.5+0x32>
	}

	uint32_t max_count = _tcc_maxs[module_index];

	/* Check compare value */
	if (compare > max_count) {
    1b8a:	4d10      	ldr	r5, [pc, #64]	; (1bcc <_tcc_set_compare_value.isra.5+0x4c>)
    1b8c:	42aa      	cmp	r2, r5
    1b8e:	d810      	bhi.n	1bb2 <_tcc_set_compare_value.isra.5+0x32>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
    1b90:	2b00      	cmp	r3, #0
    1b92:	d00f      	beq.n	1bb4 <_tcc_set_compare_value.isra.5+0x34>
#if (SAML21) || (SAMC20) || (SAMC21) || (SAML22) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->STATUS.reg  &
				(TCC_STATUS_CCBV0 << channel_index)) {
    1b94:	2380      	movs	r3, #128	; 0x80
    1b96:	025b      	lsls	r3, r3, #9
    1b98:	408b      	lsls	r3, r1
		while(tcc_module->STATUS.reg  &
    1b9a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1b9c:	4203      	tst	r3, r0
    1b9e:	d1fc      	bne.n	1b9a <_tcc_set_compare_value.isra.5+0x1a>
			/* Valid check */
		}
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    1ba0:	2580      	movs	r5, #128	; 0x80
    1ba2:	032d      	lsls	r5, r5, #12
    1ba4:	408d      	lsls	r5, r1
		while(tcc_module->SYNCBUSY.reg  &
    1ba6:	68a0      	ldr	r0, [r4, #8]
    1ba8:	4028      	ands	r0, r5
    1baa:	d1fc      	bne.n	1ba6 <_tcc_set_compare_value.isra.5+0x26>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
    1bac:	311c      	adds	r1, #28
    1bae:	0089      	lsls	r1, r1, #2
    1bb0:	510a      	str	r2, [r1, r4]
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    1bb2:	bd30      	pop	{r4, r5, pc}
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    1bb4:	2080      	movs	r0, #128	; 0x80
    1bb6:	0040      	lsls	r0, r0, #1
    1bb8:	4088      	lsls	r0, r1
    1bba:	68a3      	ldr	r3, [r4, #8]
    1bbc:	4003      	ands	r3, r0
    1bbe:	d1fc      	bne.n	1bba <_tcc_set_compare_value.isra.5+0x3a>
		tcc_module->CC[channel_index].reg = compare;
    1bc0:	3110      	adds	r1, #16
    1bc2:	0089      	lsls	r1, r1, #2
    1bc4:	1861      	adds	r1, r4, r1
    1bc6:	604a      	str	r2, [r1, #4]
	return STATUS_OK;
    1bc8:	0018      	movs	r0, r3
    1bca:	e7f2      	b.n	1bb2 <_tcc_set_compare_value.isra.5+0x32>
    1bcc:	00ffffff 	.word	0x00ffffff

00001bd0 <tcc_set_compare_value>:
		const uint32_t compare)
{
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1bd0:	0003      	movs	r3, r0
{
    1bd2:	b510      	push	{r4, lr}
	return _tcc_set_compare_value(module_inst, channel_index, compare,
    1bd4:	333c      	adds	r3, #60	; 0x3c
    1bd6:	781b      	ldrb	r3, [r3, #0]
    1bd8:	6800      	ldr	r0, [r0, #0]
    1bda:	f7ff ffd1 	bl	1b80 <_tcc_set_compare_value.isra.5>
			module_inst->double_buffering_enabled);
}
    1bde:	bd10      	pop	{r4, pc}

00001be0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    1be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1be2:	2500      	movs	r5, #0
	struct tcc_module *module =
    1be4:	4b0b      	ldr	r3, [pc, #44]	; (1c14 <_tcc_interrupt_handler+0x34>)
    1be6:	0080      	lsls	r0, r0, #2
    1be8:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    1bea:	6823      	ldr	r3, [r4, #0]
    1bec:	6b62      	ldr	r2, [r4, #52]	; 0x34
    1bee:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    1bf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    1bf2:	4013      	ands	r3, r2
    1bf4:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    1bf6:	4b08      	ldr	r3, [pc, #32]	; (1c18 <_tcc_interrupt_handler+0x38>)
    1bf8:	58ef      	ldr	r7, [r5, r3]
    1bfa:	4237      	tst	r7, r6
    1bfc:	d005      	beq.n	1c0a <_tcc_interrupt_handler+0x2a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    1bfe:	1963      	adds	r3, r4, r5
    1c00:	685b      	ldr	r3, [r3, #4]
    1c02:	0020      	movs	r0, r4
    1c04:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    1c06:	6823      	ldr	r3, [r4, #0]
    1c08:	62df      	str	r7, [r3, #44]	; 0x2c
    1c0a:	3504      	adds	r5, #4
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    1c0c:	2d30      	cmp	r5, #48	; 0x30
    1c0e:	d1f2      	bne.n	1bf6 <_tcc_interrupt_handler+0x16>
		}
	}
}
    1c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1c12:	46c0      	nop			; (mov r8, r8)
    1c14:	20000210 	.word	0x20000210
    1c18:	00003da8 	.word	0x00003da8

00001c1c <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1c1c:	b510      	push	{r4, lr}
    1c1e:	2000      	movs	r0, #0
    1c20:	f7ff ffde 	bl	1be0 <_tcc_interrupt_handler>
    1c24:	bd10      	pop	{r4, pc}

00001c26 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1c26:	1c93      	adds	r3, r2, #2
    1c28:	009b      	lsls	r3, r3, #2
    1c2a:	5019      	str	r1, [r3, r0]
    1c2c:	7e03      	ldrb	r3, [r0, #24]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    1c2e:	2a02      	cmp	r2, #2
    1c30:	d104      	bne.n	1c3c <tc_register_callback+0x16>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    1c32:	320e      	adds	r2, #14
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c34:	4313      	orrs	r3, r2
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    1c36:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    1c38:	2000      	movs	r0, #0
    1c3a:	4770      	bx	lr
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    1c3c:	2a03      	cmp	r2, #3
    1c3e:	d101      	bne.n	1c44 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    1c40:	321d      	adds	r2, #29
    1c42:	e7f7      	b.n	1c34 <tc_register_callback+0xe>
		module->register_callback_mask |= (1 << callback_type);
    1c44:	2101      	movs	r1, #1
    1c46:	4091      	lsls	r1, r2
    1c48:	430b      	orrs	r3, r1
    1c4a:	e7f4      	b.n	1c36 <tc_register_callback+0x10>

00001c4c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    1c4c:	b570      	push	{r4, r5, r6, lr}
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c4e:	2601      	movs	r6, #1
	struct tc_module *module
    1c50:	4b14      	ldr	r3, [pc, #80]	; (1ca4 <_tc_interrupt_handler+0x58>)
    1c52:	0080      	lsls	r0, r0, #2
    1c54:	58c4      	ldr	r4, [r0, r3]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    1c56:	6823      	ldr	r3, [r4, #0]
    1c58:	7e22      	ldrb	r2, [r4, #24]
    1c5a:	7e65      	ldrb	r5, [r4, #25]
    1c5c:	7b9b      	ldrb	r3, [r3, #14]
    1c5e:	4015      	ands	r5, r2
    1c60:	401d      	ands	r5, r3
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    1c62:	4235      	tst	r5, r6
    1c64:	d004      	beq.n	1c70 <_tc_interrupt_handler+0x24>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    1c66:	68a3      	ldr	r3, [r4, #8]
    1c68:	0020      	movs	r0, r4
    1c6a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    1c6c:	6823      	ldr	r3, [r4, #0]
    1c6e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    1c70:	2602      	movs	r6, #2
    1c72:	4235      	tst	r5, r6
    1c74:	d004      	beq.n	1c80 <_tc_interrupt_handler+0x34>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    1c76:	68e3      	ldr	r3, [r4, #12]
    1c78:	0020      	movs	r0, r4
    1c7a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    1c7c:	6823      	ldr	r3, [r4, #0]
    1c7e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    1c80:	2610      	movs	r6, #16
    1c82:	4235      	tst	r5, r6
    1c84:	d004      	beq.n	1c90 <_tc_interrupt_handler+0x44>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    1c86:	6923      	ldr	r3, [r4, #16]
    1c88:	0020      	movs	r0, r4
    1c8a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    1c8c:	6823      	ldr	r3, [r4, #0]
    1c8e:	739e      	strb	r6, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    1c90:	2620      	movs	r6, #32
    1c92:	4235      	tst	r5, r6
    1c94:	d004      	beq.n	1ca0 <_tc_interrupt_handler+0x54>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    1c96:	6963      	ldr	r3, [r4, #20]
    1c98:	0020      	movs	r0, r4
    1c9a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    1c9c:	6823      	ldr	r3, [r4, #0]
    1c9e:	739e      	strb	r6, [r3, #14]
	}
}
    1ca0:	bd70      	pop	{r4, r5, r6, pc}
    1ca2:	46c0      	nop			; (mov r8, r8)
    1ca4:	20000214 	.word	0x20000214

00001ca8 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    1ca8:	b510      	push	{r4, lr}
    1caa:	2000      	movs	r0, #0
    1cac:	f7ff ffce 	bl	1c4c <_tc_interrupt_handler>
    1cb0:	bd10      	pop	{r4, pc}

00001cb2 <TC2_Handler>:
    1cb2:	b510      	push	{r4, lr}
    1cb4:	2001      	movs	r0, #1
    1cb6:	f7ff ffc9 	bl	1c4c <_tc_interrupt_handler>
    1cba:	bd10      	pop	{r4, pc}

00001cbc <_tc_get_inst_index>:
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    1cbc:	4b06      	ldr	r3, [pc, #24]	; (1cd8 <_tc_get_inst_index+0x1c>)
    1cbe:	4298      	cmp	r0, r3
    1cc0:	d007      	beq.n	1cd2 <_tc_get_inst_index+0x16>
    1cc2:	4a06      	ldr	r2, [pc, #24]	; (1cdc <_tc_get_inst_index+0x20>)
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1cc4:	2300      	movs	r3, #0
		if (hw == tc_modules[i]) {
    1cc6:	4290      	cmp	r0, r2
    1cc8:	d101      	bne.n	1cce <_tc_get_inst_index+0x12>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1cca:	3301      	adds	r3, #1
			return i;
    1ccc:	b2db      	uxtb	r3, r3
}
    1cce:	0018      	movs	r0, r3
    1cd0:	4770      	bx	lr
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    1cd2:	2300      	movs	r3, #0
    1cd4:	e7fa      	b.n	1ccc <_tc_get_inst_index+0x10>
    1cd6:	46c0      	nop			; (mov r8, r8)
    1cd8:	42001800 	.word	0x42001800
    1cdc:	42001c00 	.word	0x42001c00

00001ce0 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    1ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1ce2:	0005      	movs	r5, r0
    1ce4:	b085      	sub	sp, #20
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    1ce6:	0008      	movs	r0, r1
{
    1ce8:	0014      	movs	r4, r2
    1cea:	000e      	movs	r6, r1
	uint8_t instance = _tc_get_inst_index(hw);
    1cec:	f7ff ffe6 	bl	1cbc <_tc_get_inst_index>

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    1cf0:	466a      	mov	r2, sp
    1cf2:	2312      	movs	r3, #18
    1cf4:	7113      	strb	r3, [r2, #4]
    1cf6:	7153      	strb	r3, [r2, #5]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    1cf8:	332e      	adds	r3, #46	; 0x2e
    1cfa:	8113      	strh	r3, [r2, #8]
    1cfc:	3340      	adds	r3, #64	; 0x40
    1cfe:	8153      	strh	r3, [r2, #10]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    1d00:	2300      	movs	r3, #0
    1d02:	60ab      	str	r3, [r5, #8]
    1d04:	60eb      	str	r3, [r5, #12]
    1d06:	612b      	str	r3, [r5, #16]
    1d08:	616b      	str	r3, [r5, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    1d0a:	762b      	strb	r3, [r5, #24]
	module_inst->enable_callback_mask       = 0x00;
    1d0c:	766b      	strb	r3, [r5, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    1d0e:	4b7c      	ldr	r3, [pc, #496]	; (1f00 <tc_init+0x220>)
    1d10:	0082      	lsls	r2, r0, #2
    1d12:	50d5      	str	r5, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    1d14:	602e      	str	r6, [r5, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d16:	78a3      	ldrb	r3, [r4, #2]
	uint8_t instance = _tc_get_inst_index(hw);
    1d18:	0007      	movs	r7, r0
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d1a:	2b08      	cmp	r3, #8
    1d1c:	d103      	bne.n	1d26 <tc_init+0x46>
			!((instance + TC_INSTANCE_OFFSET) & 0x01)) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1d1e:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    1d20:	07fa      	lsls	r2, r7, #31
    1d22:	d500      	bpl.n	1d26 <tc_init+0x46>
    1d24:	e0d5      	b.n	1ed2 <tc_init+0x1f2>
	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d26:	2201      	movs	r2, #1
	module_inst->counter_size = config->counter_size;
    1d28:	712b      	strb	r3, [r5, #4]
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d2a:	8833      	ldrh	r3, [r6, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    1d2c:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    1d2e:	4213      	tst	r3, r2
    1d30:	d000      	beq.n	1d34 <tc_init+0x54>
    1d32:	e0ce      	b.n	1ed2 <tc_init+0x1f2>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d34:	7bf3      	ldrb	r3, [r6, #15]
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    1d36:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    1d38:	06db      	lsls	r3, r3, #27
    1d3a:	d500      	bpl.n	1d3e <tc_init+0x5e>
    1d3c:	e0c9      	b.n	1ed2 <tc_init+0x1f2>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    1d3e:	2102      	movs	r1, #2
    1d40:	8833      	ldrh	r3, [r6, #0]
    1d42:	400b      	ands	r3, r1
    1d44:	d000      	beq.n	1d48 <tc_init+0x68>
    1d46:	e0c4      	b.n	1ed2 <tc_init+0x1f2>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    1d48:	7c21      	ldrb	r1, [r4, #16]
    1d4a:	2900      	cmp	r1, #0
    1d4c:	d008      	beq.n	1d60 <tc_init+0x80>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d4e:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1d50:	70cb      	strb	r3, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d52:	7e23      	ldrb	r3, [r4, #24]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
		system_pinmux_pin_set_config(
    1d54:	7d20      	ldrb	r0, [r4, #20]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d56:	708a      	strb	r2, [r1, #2]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    1d58:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d5a:	704a      	strb	r2, [r1, #1]
		system_pinmux_pin_set_config(
    1d5c:	f7ff fef0 	bl	1b40 <system_pinmux_pin_set_config>
				config->pwm_channel[0].pin_out, &pin_config);
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    1d60:	7f23      	ldrb	r3, [r4, #28]
    1d62:	2b00      	cmp	r3, #0
    1d64:	d00e      	beq.n	1d84 <tc_init+0xa4>
	config->powersave    = false;
    1d66:	2200      	movs	r2, #0
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d68:	2301      	movs	r3, #1
    1d6a:	a903      	add	r1, sp, #12
	config->powersave    = false;
    1d6c:	70ca      	strb	r2, [r1, #3]
		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d6e:	3224      	adds	r2, #36	; 0x24
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    1d70:	708b      	strb	r3, [r1, #2]
    1d72:	18a2      	adds	r2, r4, r2
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    1d74:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    1d76:	331f      	adds	r3, #31
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d78:	7812      	ldrb	r2, [r2, #0]
		system_pinmux_pin_set_config(
    1d7a:	18e3      	adds	r3, r4, r3
    1d7c:	7818      	ldrb	r0, [r3, #0]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    1d7e:	700a      	strb	r2, [r1, #0]
		system_pinmux_pin_set_config(
    1d80:	f7ff fede 	bl	1b40 <system_pinmux_pin_set_config>
				config->pwm_channel[1].pin_out, &pin_config);
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    1d84:	007a      	lsls	r2, r7, #1
    1d86:	4694      	mov	ip, r2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1d88:	4668      	mov	r0, sp
    1d8a:	2208      	movs	r2, #8
    1d8c:	1880      	adds	r0, r0, r2
    1d8e:	4662      	mov	r2, ip
			PM->APBCMASK.reg |= mask;
    1d90:	4b5c      	ldr	r3, [pc, #368]	; (1f04 <tc_init+0x224>)
    1d92:	5a82      	ldrh	r2, [r0, r2]
    1d94:	6a19      	ldr	r1, [r3, #32]
    1d96:	430a      	orrs	r2, r1
    1d98:	621a      	str	r2, [r3, #32]

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    1d9a:	78a2      	ldrb	r2, [r4, #2]
    1d9c:	2a08      	cmp	r2, #8
    1d9e:	d10a      	bne.n	1db6 <tc_init+0xd6>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    1da0:	1c79      	adds	r1, r7, #1
    1da2:	004a      	lsls	r2, r1, #1
    1da4:	4694      	mov	ip, r2
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    1da6:	2108      	movs	r1, #8
    1da8:	466a      	mov	r2, sp
    1daa:	1852      	adds	r2, r2, r1
    1dac:	4661      	mov	r1, ip
    1dae:	6a18      	ldr	r0, [r3, #32]
    1db0:	5a52      	ldrh	r2, [r2, r1]
    1db2:	4302      	orrs	r2, r0
    1db4:	621a      	str	r2, [r3, #32]
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->clock_source;
    1db6:	466a      	mov	r2, sp
    1db8:	7823      	ldrb	r3, [r4, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1dba:	4669      	mov	r1, sp
	gclk_chan_config.source_generator = config->clock_source;
    1dbc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    1dbe:	466b      	mov	r3, sp
    1dc0:	3304      	adds	r3, #4
    1dc2:	5ddf      	ldrb	r7, [r3, r7]
    1dc4:	0038      	movs	r0, r7
    1dc6:	f7ff fe59 	bl	1a7c <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    1dca:	0038      	movs	r0, r7
    1dcc:	f7ff fe1a 	bl	1a04 <system_gclk_chan_enable>

	/* Set ctrla register */
	ctrla_tmp =
    1dd0:	8923      	ldrh	r3, [r4, #8]
    1dd2:	88a2      	ldrh	r2, [r4, #4]
			(uint32_t)config->counter_size |
			(uint32_t)config->wave_generation |
    1dd4:	79a1      	ldrb	r1, [r4, #6]
	ctrla_tmp =
    1dd6:	431a      	orrs	r2, r3
			(uint32_t)config->wave_generation |
    1dd8:	78a3      	ldrb	r3, [r4, #2]
    1dda:	430b      	orrs	r3, r1
	ctrla_tmp =
    1ddc:	4313      	orrs	r3, r2
			(uint32_t)config->reload_action |
			(uint32_t)config->clock_prescaler;

	if (config->run_in_standby) {
    1dde:	7862      	ldrb	r2, [r4, #1]
    1de0:	2a00      	cmp	r2, #0
    1de2:	d002      	beq.n	1dea <tc_init+0x10a>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    1de4:	2280      	movs	r2, #128	; 0x80
    1de6:	0112      	lsls	r2, r2, #4
    1de8:	4313      	orrs	r3, r2
    1dea:	6829      	ldr	r1, [r5, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    1dec:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1dee:	b252      	sxtb	r2, r2
    1df0:	2a00      	cmp	r2, #0
    1df2:	dbfb      	blt.n	1dec <tc_init+0x10c>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    1df4:	8033      	strh	r3, [r6, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    1df6:	7b63      	ldrb	r3, [r4, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1df8:	1e5a      	subs	r2, r3, #1
    1dfa:	4193      	sbcs	r3, r2
	}

	if (config->count_direction) {
    1dfc:	7ba2      	ldrb	r2, [r4, #14]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    1dfe:	009b      	lsls	r3, r3, #2
	if (config->count_direction) {
    1e00:	2a00      	cmp	r2, #0
    1e02:	d001      	beq.n	1e08 <tc_init+0x128>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    1e04:	2201      	movs	r2, #1
    1e06:	4313      	orrs	r3, r2
    1e08:	6829      	ldr	r1, [r5, #0]
    1e0a:	7bca      	ldrb	r2, [r1, #15]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    1e0c:	b252      	sxtb	r2, r2
    1e0e:	2a00      	cmp	r2, #0
    1e10:	dbfb      	blt.n	1e0a <tc_init+0x12a>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    1e12:	22ff      	movs	r2, #255	; 0xff
    1e14:	7132      	strb	r2, [r6, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    1e16:	2b00      	cmp	r3, #0
    1e18:	d005      	beq.n	1e26 <tc_init+0x146>
    1e1a:	6829      	ldr	r1, [r5, #0]
    1e1c:	7bca      	ldrb	r2, [r1, #15]
		while (tc_is_syncing(module_inst)) {
    1e1e:	b252      	sxtb	r2, r2
    1e20:	2a00      	cmp	r2, #0
    1e22:	dbfb      	blt.n	1e1c <tc_init+0x13c>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    1e24:	7173      	strb	r3, [r6, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
		if (config->enable_capture_on_channel[i] == true) {
    1e26:	7ae3      	ldrb	r3, [r4, #11]
	ctrlc_tmp = config->waveform_invert_output;
    1e28:	7aa2      	ldrb	r2, [r4, #10]
		if (config->enable_capture_on_channel[i] == true) {
    1e2a:	2b00      	cmp	r3, #0
    1e2c:	d001      	beq.n	1e32 <tc_init+0x152>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e2e:	2310      	movs	r3, #16
    1e30:	431a      	orrs	r2, r3
		if (config->enable_capture_on_channel[i] == true) {
    1e32:	7b23      	ldrb	r3, [r4, #12]
    1e34:	2b00      	cmp	r3, #0
    1e36:	d001      	beq.n	1e3c <tc_init+0x15c>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    1e38:	2320      	movs	r3, #32
    1e3a:	431a      	orrs	r2, r3
    1e3c:	6829      	ldr	r1, [r5, #0]
    1e3e:	7bcb      	ldrb	r3, [r1, #15]
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e40:	b25b      	sxtb	r3, r3
    1e42:	2b00      	cmp	r3, #0
    1e44:	dbfb      	blt.n	1e3e <tc_init+0x15e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    1e46:	71b2      	strb	r2, [r6, #6]
    1e48:	682b      	ldr	r3, [r5, #0]
    1e4a:	7bda      	ldrb	r2, [r3, #15]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    1e4c:	b252      	sxtb	r2, r2
    1e4e:	2a00      	cmp	r2, #0
    1e50:	dbfb      	blt.n	1e4a <tc_init+0x16a>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    1e52:	792a      	ldrb	r2, [r5, #4]
    1e54:	2a04      	cmp	r2, #4
    1e56:	d019      	beq.n	1e8c <tc_init+0x1ac>
    1e58:	2a08      	cmp	r2, #8
    1e5a:	d03c      	beq.n	1ed6 <tc_init+0x1f6>

			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    1e5c:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1e5e:	2a00      	cmp	r2, #0
    1e60:	d137      	bne.n	1ed2 <tc_init+0x1f2>
    1e62:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1e64:	b252      	sxtb	r2, r2
    1e66:	2a00      	cmp	r2, #0
    1e68:	dbfb      	blt.n	1e62 <tc_init+0x182>
				= config->counter_16_bit.value;
    1e6a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    1e6c:	8233      	strh	r3, [r6, #16]
    1e6e:	682a      	ldr	r2, [r5, #0]
    1e70:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e72:	b25b      	sxtb	r3, r3
    1e74:	2b00      	cmp	r3, #0
    1e76:	dbfb      	blt.n	1e70 <tc_init+0x190>
					config->counter_16_bit.compare_capture_channel[0];
    1e78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    1e7a:	8333      	strh	r3, [r6, #24]
    1e7c:	682a      	ldr	r2, [r5, #0]
    1e7e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1e80:	b25b      	sxtb	r3, r3
    1e82:	2b00      	cmp	r3, #0
    1e84:	dbfb      	blt.n	1e7e <tc_init+0x19e>
					config->counter_16_bit.compare_capture_channel[1];
    1e86:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    1e88:	8373      	strh	r3, [r6, #26]
    1e8a:	e021      	b.n	1ed0 <tc_init+0x1f0>
    1e8c:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1e8e:	b252      	sxtb	r2, r2
    1e90:	2a00      	cmp	r2, #0
    1e92:	dbfb      	blt.n	1e8c <tc_init+0x1ac>
					config->counter_8_bit.value;
    1e94:	0023      	movs	r3, r4
    1e96:	3328      	adds	r3, #40	; 0x28
    1e98:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.COUNT.reg =
    1e9a:	7433      	strb	r3, [r6, #16]
    1e9c:	682a      	ldr	r2, [r5, #0]
    1e9e:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ea0:	b25b      	sxtb	r3, r3
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	dbfb      	blt.n	1e9e <tc_init+0x1be>
					config->counter_8_bit.period;
    1ea6:	0023      	movs	r3, r4
    1ea8:	3329      	adds	r3, #41	; 0x29
    1eaa:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.PER.reg =
    1eac:	7533      	strb	r3, [r6, #20]
    1eae:	682a      	ldr	r2, [r5, #0]
    1eb0:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1eb2:	b25b      	sxtb	r3, r3
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	dbfb      	blt.n	1eb0 <tc_init+0x1d0>
					config->counter_8_bit.compare_capture_channel[0];
    1eb8:	0023      	movs	r3, r4
    1eba:	332a      	adds	r3, #42	; 0x2a
    1ebc:	781b      	ldrb	r3, [r3, #0]
			hw->COUNT8.CC[0].reg =
    1ebe:	7633      	strb	r3, [r6, #24]
    1ec0:	682a      	ldr	r2, [r5, #0]
    1ec2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ec4:	b25b      	sxtb	r3, r3
    1ec6:	2b00      	cmp	r3, #0
    1ec8:	dbfb      	blt.n	1ec2 <tc_init+0x1e2>
					config->counter_8_bit.compare_capture_channel[1];
    1eca:	342b      	adds	r4, #43	; 0x2b
    1ecc:	7823      	ldrb	r3, [r4, #0]
			hw->COUNT8.CC[1].reg =
    1ece:	7673      	strb	r3, [r6, #25]
			return STATUS_OK;
    1ed0:	2000      	movs	r0, #0
}
    1ed2:	b005      	add	sp, #20
    1ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ed6:	7bda      	ldrb	r2, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    1ed8:	b252      	sxtb	r2, r2
    1eda:	2a00      	cmp	r2, #0
    1edc:	dbfb      	blt.n	1ed6 <tc_init+0x1f6>
				= config->counter_32_bit.value;
    1ede:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    1ee0:	6133      	str	r3, [r6, #16]
    1ee2:	682a      	ldr	r2, [r5, #0]
    1ee4:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ee6:	b25b      	sxtb	r3, r3
    1ee8:	2b00      	cmp	r3, #0
    1eea:	dbfb      	blt.n	1ee4 <tc_init+0x204>
			hw->COUNT32.CC[0].reg =
    1eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    1eee:	61b3      	str	r3, [r6, #24]
    1ef0:	682a      	ldr	r2, [r5, #0]
    1ef2:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    1ef4:	b25b      	sxtb	r3, r3
    1ef6:	2b00      	cmp	r3, #0
    1ef8:	dbfb      	blt.n	1ef2 <tc_init+0x212>
					config->counter_32_bit.compare_capture_channel[1];
    1efa:	6b23      	ldr	r3, [r4, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    1efc:	61f3      	str	r3, [r6, #28]
    1efe:	e7e7      	b.n	1ed0 <tc_init+0x1f0>
    1f00:	20000214 	.word	0x20000214
    1f04:	40000400 	.word	0x40000400

00001f08 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    1f08:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    1f0a:	6804      	ldr	r4, [r0, #0]
    1f0c:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    1f0e:	b25b      	sxtb	r3, r3
    1f10:	2b00      	cmp	r3, #0
    1f12:	dbfb      	blt.n	1f0c <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    1f14:	7903      	ldrb	r3, [r0, #4]
    1f16:	2b04      	cmp	r3, #4
    1f18:	d00c      	beq.n	1f34 <tc_set_compare_value+0x2c>
    1f1a:	2b08      	cmp	r3, #8
    1f1c:	d012      	beq.n	1f44 <tc_set_compare_value+0x3c>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    1f1e:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    1f20:	2b00      	cmp	r3, #0
    1f22:	d10e      	bne.n	1f42 <tc_set_compare_value+0x3a>
	return STATUS_ERR_INVALID_ARG;
    1f24:	2017      	movs	r0, #23
			if (channel_index <
    1f26:	2901      	cmp	r1, #1
    1f28:	d80b      	bhi.n	1f42 <tc_set_compare_value+0x3a>
				tc_module->COUNT16.CC[channel_index].reg =
    1f2a:	310c      	adds	r1, #12
						(uint16_t)compare;
    1f2c:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    1f2e:	0049      	lsls	r1, r1, #1
    1f30:	530a      	strh	r2, [r1, r4]
    1f32:	e005      	b.n	1f40 <tc_set_compare_value+0x38>
	return STATUS_ERR_INVALID_ARG;
    1f34:	2017      	movs	r0, #23
			if (channel_index <
    1f36:	2901      	cmp	r1, #1
    1f38:	d803      	bhi.n	1f42 <tc_set_compare_value+0x3a>
						(uint8_t)compare;
    1f3a:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    1f3c:	1861      	adds	r1, r4, r1
    1f3e:	760a      	strb	r2, [r1, #24]
				return STATUS_OK;
    1f40:	2000      	movs	r0, #0
}
    1f42:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    1f44:	2017      	movs	r0, #23
			if (channel_index <
    1f46:	2901      	cmp	r1, #1
    1f48:	d8fb      	bhi.n	1f42 <tc_set_compare_value+0x3a>
				tc_module->COUNT32.CC[channel_index].reg =
    1f4a:	3106      	adds	r1, #6
    1f4c:	0089      	lsls	r1, r1, #2
    1f4e:	510a      	str	r2, [r1, r4]
    1f50:	e7f6      	b.n	1f40 <tc_set_compare_value+0x38>

00001f52 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f52:	e7fe      	b.n	1f52 <Dummy_Handler>

00001f54 <Reset_Handler>:
        if (pSrc != pDest) {
    1f54:	4821      	ldr	r0, [pc, #132]	; (1fdc <Reset_Handler+0x88>)
    1f56:	4922      	ldr	r1, [pc, #136]	; (1fe0 <Reset_Handler+0x8c>)
{
    1f58:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    1f5a:	4288      	cmp	r0, r1
    1f5c:	d004      	beq.n	1f68 <Reset_Handler+0x14>
    1f5e:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    1f60:	4c20      	ldr	r4, [pc, #128]	; (1fe4 <Reset_Handler+0x90>)
    1f62:	18ca      	adds	r2, r1, r3
    1f64:	42a2      	cmp	r2, r4
    1f66:	d332      	bcc.n	1fce <Reset_Handler+0x7a>
                *pDest++ = 0;
    1f68:	2100      	movs	r1, #0
    1f6a:	4b1f      	ldr	r3, [pc, #124]	; (1fe8 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    1f6c:	4a1f      	ldr	r2, [pc, #124]	; (1fec <Reset_Handler+0x98>)
    1f6e:	4293      	cmp	r3, r2
    1f70:	d331      	bcc.n	1fd6 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1f72:	21ff      	movs	r1, #255	; 0xff
    1f74:	4b1e      	ldr	r3, [pc, #120]	; (1ff0 <Reset_Handler+0x9c>)
    1f76:	4a1f      	ldr	r2, [pc, #124]	; (1ff4 <Reset_Handler+0xa0>)
    1f78:	438b      	bics	r3, r1
    1f7a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f7c:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f7e:	250c      	movs	r5, #12
    1f80:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f82:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f84:	4b1c      	ldr	r3, [pc, #112]	; (1ff8 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f86:	481d      	ldr	r0, [pc, #116]	; (1ffc <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f88:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f8a:	78c3      	ldrb	r3, [r0, #3]
    1f8c:	39fc      	subs	r1, #252	; 0xfc
    1f8e:	438b      	bics	r3, r1
    1f90:	4313      	orrs	r3, r2
    1f92:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f94:	78c3      	ldrb	r3, [r0, #3]
    1f96:	43ab      	bics	r3, r5
    1f98:	4323      	orrs	r3, r4
    1f9a:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f9c:	4b18      	ldr	r3, [pc, #96]	; (2000 <Reset_Handler+0xac>)
    1f9e:	7b98      	ldrb	r0, [r3, #14]
    1fa0:	43b0      	bics	r0, r6
    1fa2:	0006      	movs	r6, r0
    1fa4:	2020      	movs	r0, #32
    1fa6:	4330      	orrs	r0, r6
    1fa8:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1faa:	7b98      	ldrb	r0, [r3, #14]
    1fac:	43a8      	bics	r0, r5
    1fae:	4304      	orrs	r4, r0
    1fb0:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1fb2:	7b98      	ldrb	r0, [r3, #14]
    1fb4:	4388      	bics	r0, r1
    1fb6:	4302      	orrs	r2, r0
    1fb8:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1fba:	2380      	movs	r3, #128	; 0x80
    1fbc:	4a11      	ldr	r2, [pc, #68]	; (2004 <Reset_Handler+0xb0>)
    1fbe:	6851      	ldr	r1, [r2, #4]
    1fc0:	430b      	orrs	r3, r1
    1fc2:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1fc4:	f001 fe92 	bl	3cec <__libc_init_array>
        main();
    1fc8:	f000 f98e 	bl	22e8 <main>
    1fcc:	e7fe      	b.n	1fcc <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    1fce:	58c5      	ldr	r5, [r0, r3]
    1fd0:	3304      	adds	r3, #4
    1fd2:	6015      	str	r5, [r2, #0]
    1fd4:	e7c5      	b.n	1f62 <Reset_Handler+0xe>
                *pDest++ = 0;
    1fd6:	c302      	stmia	r3!, {r1}
    1fd8:	e7c9      	b.n	1f6e <Reset_Handler+0x1a>
    1fda:	46c0      	nop			; (mov r8, r8)
    1fdc:	00003e90 	.word	0x00003e90
    1fe0:	20000000 	.word	0x20000000
    1fe4:	20000020 	.word	0x20000020
    1fe8:	20000020 	.word	0x20000020
    1fec:	20000244 	.word	0x20000244
    1ff0:	00000000 	.word	0x00000000
    1ff4:	e000ed00 	.word	0xe000ed00
    1ff8:	410070fc 	.word	0x410070fc
    1ffc:	41005000 	.word	0x41005000
    2000:	41004800 	.word	0x41004800
    2004:	41004000 	.word	0x41004000

00002008 <set_color_green_indication>:
#define BUFFER_SET_COLOR_BLUE_PWM						{0x04, 0x20}
#define BUFFER_SET_COLOR_BLUE_PWM_TIMER					{0x02, 0x19}
#define BUFFER_SET_COLOR_BLUE_PWM_FLASH					{0x01, 0x82}


void set_color_green_indication(void) {
    2008:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    200a:	2502      	movs	r5, #2
    200c:	ae01      	add	r6, sp, #4
    200e:	002a      	movs	r2, r5
    2010:	4907      	ldr	r1, [pc, #28]	; (2030 <set_color_green_indication+0x28>)
    2012:	0030      	movs	r0, r6
    2014:	f001 fe8e 	bl	3d34 <memcpy>
  packet.data = buffer_set_color_green;
  packet.address = KTD2026_DEVICE_ADDRESS;
    2018:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_green;
    201a:	4c06      	ldr	r4, [pc, #24]	; (2034 <set_color_green_indication+0x2c>)
    201c:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    201e:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2020:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2022:	0021      	movs	r1, r4
    2024:	4804      	ldr	r0, [pc, #16]	; (2038 <set_color_green_indication+0x30>)
    2026:	f7ff f877 	bl	1118 <i2c_master_write_packet_wait>
    202a:	2800      	cmp	r0, #0
    202c:	d1f9      	bne.n	2022 <set_color_green_indication+0x1a>
         STATUS_OK) {
  }
}
    202e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2030:	00003dd8 	.word	0x00003dd8
    2034:	20000014 	.word	0x20000014
    2038:	2000021c 	.word	0x2000021c

0000203c <set_color_red_indication>:

void set_color_red_indication(void) {
    203c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    203e:	2502      	movs	r5, #2
    2040:	4909      	ldr	r1, [pc, #36]	; (2068 <set_color_red_indication+0x2c>)
    2042:	ae01      	add	r6, sp, #4
    2044:	002a      	movs	r2, r5
    2046:	1949      	adds	r1, r1, r5
    2048:	0030      	movs	r0, r6
    204a:	f001 fe73 	bl	3d34 <memcpy>
  packet.data = buffer_set_color_red;
  packet.address = KTD2026_DEVICE_ADDRESS;
    204e:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_red;
    2050:	4c06      	ldr	r4, [pc, #24]	; (206c <set_color_red_indication+0x30>)
    2052:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2054:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2056:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2058:	0021      	movs	r1, r4
    205a:	4805      	ldr	r0, [pc, #20]	; (2070 <set_color_red_indication+0x34>)
    205c:	f7ff f85c 	bl	1118 <i2c_master_write_packet_wait>
    2060:	2800      	cmp	r0, #0
    2062:	d1f9      	bne.n	2058 <set_color_red_indication+0x1c>
         STATUS_OK) {
  }
}
    2064:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2066:	46c0      	nop			; (mov r8, r8)
    2068:	00003dd8 	.word	0x00003dd8
    206c:	20000014 	.word	0x20000014
    2070:	2000021c 	.word	0x2000021c

00002074 <set_color_blue_indication>:

void set_color_blue_indication(void) {
    2074:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t buffer_set_color_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE;
    2076:	2502      	movs	r5, #2
    2078:	4909      	ldr	r1, [pc, #36]	; (20a0 <set_color_blue_indication+0x2c>)
    207a:	ae01      	add	r6, sp, #4
    207c:	002a      	movs	r2, r5
    207e:	3104      	adds	r1, #4
    2080:	0030      	movs	r0, r6
    2082:	f001 fe57 	bl	3d34 <memcpy>
  packet.data = buffer_set_color_blue;
  packet.address = KTD2026_DEVICE_ADDRESS;
    2086:	2331      	movs	r3, #49	; 0x31
  packet.data = buffer_set_color_blue;
    2088:	4c06      	ldr	r4, [pc, #24]	; (20a4 <set_color_blue_indication+0x30>)
    208a:	6066      	str	r6, [r4, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    208c:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    208e:	8065      	strh	r5, [r4, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2090:	0021      	movs	r1, r4
    2092:	4805      	ldr	r0, [pc, #20]	; (20a8 <set_color_blue_indication+0x34>)
    2094:	f7ff f840 	bl	1118 <i2c_master_write_packet_wait>
    2098:	2800      	cmp	r0, #0
    209a:	d1f9      	bne.n	2090 <set_color_blue_indication+0x1c>
         STATUS_OK) {
  }
}
    209c:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    209e:	46c0      	nop			; (mov r8, r8)
    20a0:	00003dd8 	.word	0x00003dd8
    20a4:	20000014 	.word	0x20000014
    20a8:	2000021c 	.word	0x2000021c

000020ac <set_color_yellow_indication>:

void set_color_yellow_indication(void) {
    20ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t buffer_set_color_yellow[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_YELLOW;
    20ae:	2502      	movs	r5, #2
    20b0:	4909      	ldr	r1, [pc, #36]	; (20d8 <set_color_yellow_indication+0x2c>)
    20b2:	ae01      	add	r6, sp, #4
    20b4:	002a      	movs	r2, r5
    20b6:	3106      	adds	r1, #6
    20b8:	0030      	movs	r0, r6
    20ba:	f001 fe3b 	bl	3d34 <memcpy>
	packet.data = buffer_set_color_yellow;
	packet.address = KTD2026_DEVICE_ADDRESS;
    20be:	2331      	movs	r3, #49	; 0x31
	packet.data = buffer_set_color_yellow;
    20c0:	4c06      	ldr	r4, [pc, #24]	; (20dc <set_color_yellow_indication+0x30>)
    20c2:	6066      	str	r6, [r4, #4]
	packet.address = KTD2026_DEVICE_ADDRESS;
    20c4:	8023      	strh	r3, [r4, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;
    20c6:	8065      	strh	r5, [r4, #2]

	while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    20c8:	0021      	movs	r1, r4
    20ca:	4805      	ldr	r0, [pc, #20]	; (20e0 <set_color_yellow_indication+0x34>)
    20cc:	f7ff f824 	bl	1118 <i2c_master_write_packet_wait>
    20d0:	2800      	cmp	r0, #0
    20d2:	d1f9      	bne.n	20c8 <set_color_yellow_indication+0x1c>
	STATUS_OK) {
	}
}
    20d4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	00003dd8 	.word	0x00003dd8
    20dc:	20000014 	.word	0x20000014
    20e0:	2000021c 	.word	0x2000021c

000020e4 <set_battery_charge_routine>:
    20e4:	4770      	bx	lr

000020e6 <set_battery_low_routine>:
//
	//packet.data = buffer_set_low_routine_trise_tfall;
	//while ((i2c_master_write_packet_wait(&i2c_master_instance,
	//&packet)) != STATUS_OK) {
	//}
}
    20e6:	4770      	bx	lr

000020e8 <set_motor_speed_1_indication>:





void set_motor_speed_1_indication(void){
    20e8:	b573      	push	{r0, r1, r4, r5, r6, lr}

  uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    20ea:	4c12      	ldr	r4, [pc, #72]	; (2134 <set_motor_speed_1_indication+0x4c>)
    20ec:	2502      	movs	r5, #2
    20ee:	0021      	movs	r1, r4
    20f0:	002a      	movs	r2, r5
    20f2:	310c      	adds	r1, #12
    20f4:	4668      	mov	r0, sp
    20f6:	f001 fe1d 	bl	3d34 <memcpy>
  uint8_t buffer_set_blue_lowest_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_LOWEST_BRIGTHNESS;
    20fa:	0021      	movs	r1, r4
    20fc:	ae01      	add	r6, sp, #4
    20fe:	310e      	adds	r1, #14
    2100:	002a      	movs	r2, r5
    2102:	0030      	movs	r0, r6
    2104:	f001 fe16 	bl	3d34 <memcpy>

  packet.address = KTD2026_DEVICE_ADDRESS;
    2108:	2331      	movs	r3, #49	; 0x31
    210a:	4c0b      	ldr	r4, [pc, #44]	; (2138 <set_motor_speed_1_indication+0x50>)
    210c:	8023      	strh	r3, [r4, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
  
  packet.data = buffer_set_blue;
    210e:	466b      	mov	r3, sp
  packet.data_length = DATA_LENGTH_PRIMARY;
    2110:	8065      	strh	r5, [r4, #2]
  packet.data = buffer_set_blue;
    2112:	6063      	str	r3, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2114:	4d09      	ldr	r5, [pc, #36]	; (213c <set_motor_speed_1_indication+0x54>)
    2116:	0021      	movs	r1, r4
    2118:	0028      	movs	r0, r5
    211a:	f7fe fffd 	bl	1118 <i2c_master_write_packet_wait>
    211e:	2800      	cmp	r0, #0
    2120:	d1f8      	bne.n	2114 <set_motor_speed_1_indication+0x2c>
  &packet)) != STATUS_OK) {
  }

  packet.data = buffer_set_blue_lowest_brightness;
    2122:	6066      	str	r6, [r4, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2124:	0021      	movs	r1, r4
    2126:	0028      	movs	r0, r5
    2128:	f7fe fff6 	bl	1118 <i2c_master_write_packet_wait>
    212c:	2800      	cmp	r0, #0
    212e:	d1f9      	bne.n	2124 <set_motor_speed_1_indication+0x3c>
  &packet)) != STATUS_OK) {
  }

}
    2130:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    2132:	46c0      	nop			; (mov r8, r8)
    2134:	00003dd8 	.word	0x00003dd8
    2138:	20000014 	.word	0x20000014
    213c:	2000021c 	.word	0x2000021c

00002140 <set_motor_speed_2_indication>:

void set_motor_speed_2_indication(void){
    2140:	b573      	push	{r0, r1, r4, r5, r6, lr}

	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    2142:	4c12      	ldr	r4, [pc, #72]	; (218c <set_motor_speed_2_indication+0x4c>)
    2144:	2502      	movs	r5, #2
    2146:	0021      	movs	r1, r4
    2148:	002a      	movs	r2, r5
    214a:	310c      	adds	r1, #12
    214c:	4668      	mov	r0, sp
    214e:	f001 fdf1 	bl	3d34 <memcpy>
	uint8_t buffer_set_blue_low_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_LOW_BRIGTHNESS;
    2152:	0021      	movs	r1, r4
    2154:	ae01      	add	r6, sp, #4
    2156:	3110      	adds	r1, #16
    2158:	002a      	movs	r2, r5
    215a:	0030      	movs	r0, r6
    215c:	f001 fdea 	bl	3d34 <memcpy>

	packet.address = KTD2026_DEVICE_ADDRESS;
    2160:	2331      	movs	r3, #49	; 0x31
    2162:	4c0b      	ldr	r4, [pc, #44]	; (2190 <set_motor_speed_2_indication+0x50>)
    2164:	8023      	strh	r3, [r4, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;

	packet.data = buffer_set_blue;
    2166:	466b      	mov	r3, sp
	packet.data_length = DATA_LENGTH_PRIMARY;
    2168:	8065      	strh	r5, [r4, #2]
	packet.data = buffer_set_blue;
    216a:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    216c:	4d09      	ldr	r5, [pc, #36]	; (2194 <set_motor_speed_2_indication+0x54>)
    216e:	0021      	movs	r1, r4
    2170:	0028      	movs	r0, r5
    2172:	f7fe ffd1 	bl	1118 <i2c_master_write_packet_wait>
    2176:	2800      	cmp	r0, #0
    2178:	d1f8      	bne.n	216c <set_motor_speed_2_indication+0x2c>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_low_brightness;
    217a:	6066      	str	r6, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    217c:	0021      	movs	r1, r4
    217e:	0028      	movs	r0, r5
    2180:	f7fe ffca 	bl	1118 <i2c_master_write_packet_wait>
    2184:	2800      	cmp	r0, #0
    2186:	d1f9      	bne.n	217c <set_motor_speed_2_indication+0x3c>
	&packet)) != STATUS_OK) {
	}

}
    2188:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    218a:	46c0      	nop			; (mov r8, r8)
    218c:	00003dd8 	.word	0x00003dd8
    2190:	20000014 	.word	0x20000014
    2194:	2000021c 	.word	0x2000021c

00002198 <set_motor_speed_3_indication>:

void set_motor_speed_3_indication(void){
    2198:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    219a:	4c12      	ldr	r4, [pc, #72]	; (21e4 <set_motor_speed_3_indication+0x4c>)
    219c:	2502      	movs	r5, #2
    219e:	0021      	movs	r1, r4
    21a0:	002a      	movs	r2, r5
    21a2:	310c      	adds	r1, #12
    21a4:	4668      	mov	r0, sp
    21a6:	f001 fdc5 	bl	3d34 <memcpy>
	uint8_t buffer_set_blue_high_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_HIGH_BRIGTHNESS;
    21aa:	0021      	movs	r1, r4
    21ac:	ae01      	add	r6, sp, #4
    21ae:	3112      	adds	r1, #18
    21b0:	002a      	movs	r2, r5
    21b2:	0030      	movs	r0, r6
    21b4:	f001 fdbe 	bl	3d34 <memcpy>

	packet.address = KTD2026_DEVICE_ADDRESS;
    21b8:	2331      	movs	r3, #49	; 0x31
    21ba:	4c0b      	ldr	r4, [pc, #44]	; (21e8 <set_motor_speed_3_indication+0x50>)
    21bc:	8023      	strh	r3, [r4, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;

	packet.data = buffer_set_blue;
    21be:	466b      	mov	r3, sp
	packet.data_length = DATA_LENGTH_PRIMARY;
    21c0:	8065      	strh	r5, [r4, #2]
	packet.data = buffer_set_blue;
    21c2:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    21c4:	4d09      	ldr	r5, [pc, #36]	; (21ec <set_motor_speed_3_indication+0x54>)
    21c6:	0021      	movs	r1, r4
    21c8:	0028      	movs	r0, r5
    21ca:	f7fe ffa5 	bl	1118 <i2c_master_write_packet_wait>
    21ce:	2800      	cmp	r0, #0
    21d0:	d1f8      	bne.n	21c4 <set_motor_speed_3_indication+0x2c>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_high_brightness;
    21d2:	6066      	str	r6, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    21d4:	0021      	movs	r1, r4
    21d6:	0028      	movs	r0, r5
    21d8:	f7fe ff9e 	bl	1118 <i2c_master_write_packet_wait>
    21dc:	2800      	cmp	r0, #0
    21de:	d1f9      	bne.n	21d4 <set_motor_speed_3_indication+0x3c>
	&packet)) != STATUS_OK) {
	}
}
    21e0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	00003dd8 	.word	0x00003dd8
    21e8:	20000014 	.word	0x20000014
    21ec:	2000021c 	.word	0x2000021c

000021f0 <set_motor_pulsating_indication>:

void set_motor_pulsating_indication(void){
    21f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    21f2:	4c21      	ldr	r4, [pc, #132]	; (2278 <set_motor_pulsating_indication+0x88>)
    21f4:	2502      	movs	r5, #2
    21f6:	0021      	movs	r1, r4
void set_motor_pulsating_indication(void){
    21f8:	b085      	sub	sp, #20
	uint8_t buffer_set_blue[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM;
    21fa:	310c      	adds	r1, #12
    21fc:	002a      	movs	r2, r5
    21fe:	4668      	mov	r0, sp
    2200:	f001 fd98 	bl	3d34 <memcpy>
	uint8_t buffer_set_blue_high_brightness[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_HIGH_BRIGTHNESS;
    2204:	0021      	movs	r1, r4
    2206:	af01      	add	r7, sp, #4
    2208:	3112      	adds	r1, #18
    220a:	002a      	movs	r2, r5
    220c:	0038      	movs	r0, r7
    220e:	f001 fd91 	bl	3d34 <memcpy>
	uint8_t buffer_set_blue_pwm_timer[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM_TIMER;
    2212:	0021      	movs	r1, r4
    2214:	ae02      	add	r6, sp, #8
    2216:	3114      	adds	r1, #20
    2218:	002a      	movs	r2, r5
    221a:	0030      	movs	r0, r6
    221c:	f001 fd8a 	bl	3d34 <memcpy>
	uint8_t buffer_set_blue_pwm_flash[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_BLUE_PWM_FLASH;
    2220:	0021      	movs	r1, r4
    2222:	002a      	movs	r2, r5
    2224:	3116      	adds	r1, #22
    2226:	a803      	add	r0, sp, #12
    2228:	f001 fd84 	bl	3d34 <memcpy>


	packet.address = KTD2026_DEVICE_ADDRESS;
    222c:	2331      	movs	r3, #49	; 0x31
    222e:	4c13      	ldr	r4, [pc, #76]	; (227c <set_motor_pulsating_indication+0x8c>)
    2230:	8023      	strh	r3, [r4, #0]
	packet.data_length = DATA_LENGTH_PRIMARY;

	packet.data = buffer_set_blue;
    2232:	466b      	mov	r3, sp
	packet.data_length = DATA_LENGTH_PRIMARY;
    2234:	8065      	strh	r5, [r4, #2]
	packet.data = buffer_set_blue;
    2236:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2238:	4d11      	ldr	r5, [pc, #68]	; (2280 <set_motor_pulsating_indication+0x90>)
    223a:	0021      	movs	r1, r4
    223c:	0028      	movs	r0, r5
    223e:	f7fe ff6b 	bl	1118 <i2c_master_write_packet_wait>
    2242:	2800      	cmp	r0, #0
    2244:	d1f8      	bne.n	2238 <set_motor_pulsating_indication+0x48>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_high_brightness;
    2246:	6067      	str	r7, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2248:	0021      	movs	r1, r4
    224a:	0028      	movs	r0, r5
    224c:	f7fe ff64 	bl	1118 <i2c_master_write_packet_wait>
    2250:	2800      	cmp	r0, #0
    2252:	d1f9      	bne.n	2248 <set_motor_pulsating_indication+0x58>
	&packet)) != STATUS_OK) {
	}

	packet.data = buffer_set_blue_pwm_timer;
    2254:	6066      	str	r6, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2256:	0021      	movs	r1, r4
    2258:	0028      	movs	r0, r5
    225a:	f7fe ff5d 	bl	1118 <i2c_master_write_packet_wait>
    225e:	2800      	cmp	r0, #0
    2260:	d1f9      	bne.n	2256 <set_motor_pulsating_indication+0x66>
	&packet)) != STATUS_OK) {
	}
	
	packet.data = buffer_set_blue_pwm_flash;
    2262:	ab03      	add	r3, sp, #12
    2264:	6063      	str	r3, [r4, #4]
	while ((i2c_master_write_packet_wait(&i2c_master_instance,
    2266:	0021      	movs	r1, r4
    2268:	0028      	movs	r0, r5
    226a:	f7fe ff55 	bl	1118 <i2c_master_write_packet_wait>
    226e:	2800      	cmp	r0, #0
    2270:	d1f9      	bne.n	2266 <set_motor_pulsating_indication+0x76>
	&packet)) != STATUS_OK) {
	}

}
    2272:	b005      	add	sp, #20
    2274:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2276:	46c0      	nop			; (mov r8, r8)
    2278:	00003dd8 	.word	0x00003dd8
    227c:	20000014 	.word	0x20000014
    2280:	2000021c 	.word	0x2000021c

00002284 <i2c_master_setup>:
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
#endif
	config->generator_source = GCLK_GENERATOR_0;
	config->run_in_standby   = false;
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2284:	2180      	movs	r1, #128	; 0x80
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2286:	2364      	movs	r3, #100	; 0x64


void i2c_master_setup(void) {
    2288:	b500      	push	{lr}
    228a:	b08f      	sub	sp, #60	; 0x3c
    228c:	aa01      	add	r2, sp, #4
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    228e:	0389      	lsls	r1, r1, #14
    2290:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2292:	2101      	movs	r1, #1
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2294:	9301      	str	r3, [sp, #4]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2296:	4b10      	ldr	r3, [pc, #64]	; (22d8 <i2c_master_setup+0x54>)
	config->unknown_bus_state_timeout = 65535;
    2298:	4249      	negs	r1, r1
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    229a:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    229c:	2300      	movs	r3, #0
	config->unknown_bus_state_timeout = 65535;
    229e:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
    22a0:	310a      	adds	r1, #10
    22a2:	4469      	add	r1, sp
    22a4:	77cb      	strb	r3, [r1, #31]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    22a6:	a90c      	add	r1, sp, #48	; 0x30
    22a8:	700b      	strb	r3, [r1, #0]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    22aa:	2131      	movs	r1, #49	; 0x31
    22ac:	4469      	add	r1, sp
    22ae:	700b      	strb	r3, [r1, #0]
	config->master_scl_low_extend_timeout  = false;
    22b0:	2132      	movs	r1, #50	; 0x32
    22b2:	4469      	add	r1, sp
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    22b4:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    22b6:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    22b8:	7613      	strb	r3, [r2, #24]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    22ba:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    22bc:	6213      	str	r3, [r2, #32]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    22be:	6293      	str	r3, [r2, #40]	; 0x28
	config->master_scl_low_extend_timeout  = false;
    22c0:	700b      	strb	r3, [r1, #0]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    22c2:	33d7      	adds	r3, #215	; 0xd7
    22c4:	8613      	strh	r3, [r2, #48]	; 0x30
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
    22c6:	4b05      	ldr	r3, [pc, #20]	; (22dc <i2c_master_setup+0x58>)
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    22c8:	4905      	ldr	r1, [pc, #20]	; (22e0 <i2c_master_setup+0x5c>)
    22ca:	4806      	ldr	r0, [pc, #24]	; (22e4 <i2c_master_setup+0x60>)
  config_i2c_master.buffer_timeout = 10000;
    22cc:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    22ce:	f7fe fd3b 	bl	d48 <i2c_master_init>
  //i2c_master_enable(&i2c_master_instance);
}
    22d2:	b00f      	add	sp, #60	; 0x3c
    22d4:	bd00      	pop	{pc}
    22d6:	46c0      	nop			; (mov r8, r8)
    22d8:	00000d48 	.word	0x00000d48
    22dc:	00002710 	.word	0x00002710
    22e0:	42001000 	.word	0x42001000
    22e4:	2000021c 	.word	0x2000021c

000022e8 <main>:
#include "system_logic.h"

#include "adc_sample.h"


int main(void) {
    22e8:	b510      	push	{r4, lr}
  startup_sys_configs();
    22ea:	f7fe fc7f 	bl	bec <startup_sys_configs>
  while (true) {
    system_state();						// Get latest system_state
    22ee:	f7fe fcdf 	bl	cb0 <system_state>
    system_logic();						// Invoke System Logic
    22f2:	f7fe fb77 	bl	9e4 <system_logic>
    22f6:	e7fa      	b.n	22ee <main+0x6>

000022f8 <__gnu_thumb1_case_uqi>:
    22f8:	b402      	push	{r1}
    22fa:	4671      	mov	r1, lr
    22fc:	0849      	lsrs	r1, r1, #1
    22fe:	0049      	lsls	r1, r1, #1
    2300:	5c09      	ldrb	r1, [r1, r0]
    2302:	0049      	lsls	r1, r1, #1
    2304:	448e      	add	lr, r1
    2306:	bc02      	pop	{r1}
    2308:	4770      	bx	lr
    230a:	46c0      	nop			; (mov r8, r8)

0000230c <__udivsi3>:
    230c:	2200      	movs	r2, #0
    230e:	0843      	lsrs	r3, r0, #1
    2310:	428b      	cmp	r3, r1
    2312:	d374      	bcc.n	23fe <__udivsi3+0xf2>
    2314:	0903      	lsrs	r3, r0, #4
    2316:	428b      	cmp	r3, r1
    2318:	d35f      	bcc.n	23da <__udivsi3+0xce>
    231a:	0a03      	lsrs	r3, r0, #8
    231c:	428b      	cmp	r3, r1
    231e:	d344      	bcc.n	23aa <__udivsi3+0x9e>
    2320:	0b03      	lsrs	r3, r0, #12
    2322:	428b      	cmp	r3, r1
    2324:	d328      	bcc.n	2378 <__udivsi3+0x6c>
    2326:	0c03      	lsrs	r3, r0, #16
    2328:	428b      	cmp	r3, r1
    232a:	d30d      	bcc.n	2348 <__udivsi3+0x3c>
    232c:	22ff      	movs	r2, #255	; 0xff
    232e:	0209      	lsls	r1, r1, #8
    2330:	ba12      	rev	r2, r2
    2332:	0c03      	lsrs	r3, r0, #16
    2334:	428b      	cmp	r3, r1
    2336:	d302      	bcc.n	233e <__udivsi3+0x32>
    2338:	1212      	asrs	r2, r2, #8
    233a:	0209      	lsls	r1, r1, #8
    233c:	d065      	beq.n	240a <__udivsi3+0xfe>
    233e:	0b03      	lsrs	r3, r0, #12
    2340:	428b      	cmp	r3, r1
    2342:	d319      	bcc.n	2378 <__udivsi3+0x6c>
    2344:	e000      	b.n	2348 <__udivsi3+0x3c>
    2346:	0a09      	lsrs	r1, r1, #8
    2348:	0bc3      	lsrs	r3, r0, #15
    234a:	428b      	cmp	r3, r1
    234c:	d301      	bcc.n	2352 <__udivsi3+0x46>
    234e:	03cb      	lsls	r3, r1, #15
    2350:	1ac0      	subs	r0, r0, r3
    2352:	4152      	adcs	r2, r2
    2354:	0b83      	lsrs	r3, r0, #14
    2356:	428b      	cmp	r3, r1
    2358:	d301      	bcc.n	235e <__udivsi3+0x52>
    235a:	038b      	lsls	r3, r1, #14
    235c:	1ac0      	subs	r0, r0, r3
    235e:	4152      	adcs	r2, r2
    2360:	0b43      	lsrs	r3, r0, #13
    2362:	428b      	cmp	r3, r1
    2364:	d301      	bcc.n	236a <__udivsi3+0x5e>
    2366:	034b      	lsls	r3, r1, #13
    2368:	1ac0      	subs	r0, r0, r3
    236a:	4152      	adcs	r2, r2
    236c:	0b03      	lsrs	r3, r0, #12
    236e:	428b      	cmp	r3, r1
    2370:	d301      	bcc.n	2376 <__udivsi3+0x6a>
    2372:	030b      	lsls	r3, r1, #12
    2374:	1ac0      	subs	r0, r0, r3
    2376:	4152      	adcs	r2, r2
    2378:	0ac3      	lsrs	r3, r0, #11
    237a:	428b      	cmp	r3, r1
    237c:	d301      	bcc.n	2382 <__udivsi3+0x76>
    237e:	02cb      	lsls	r3, r1, #11
    2380:	1ac0      	subs	r0, r0, r3
    2382:	4152      	adcs	r2, r2
    2384:	0a83      	lsrs	r3, r0, #10
    2386:	428b      	cmp	r3, r1
    2388:	d301      	bcc.n	238e <__udivsi3+0x82>
    238a:	028b      	lsls	r3, r1, #10
    238c:	1ac0      	subs	r0, r0, r3
    238e:	4152      	adcs	r2, r2
    2390:	0a43      	lsrs	r3, r0, #9
    2392:	428b      	cmp	r3, r1
    2394:	d301      	bcc.n	239a <__udivsi3+0x8e>
    2396:	024b      	lsls	r3, r1, #9
    2398:	1ac0      	subs	r0, r0, r3
    239a:	4152      	adcs	r2, r2
    239c:	0a03      	lsrs	r3, r0, #8
    239e:	428b      	cmp	r3, r1
    23a0:	d301      	bcc.n	23a6 <__udivsi3+0x9a>
    23a2:	020b      	lsls	r3, r1, #8
    23a4:	1ac0      	subs	r0, r0, r3
    23a6:	4152      	adcs	r2, r2
    23a8:	d2cd      	bcs.n	2346 <__udivsi3+0x3a>
    23aa:	09c3      	lsrs	r3, r0, #7
    23ac:	428b      	cmp	r3, r1
    23ae:	d301      	bcc.n	23b4 <__udivsi3+0xa8>
    23b0:	01cb      	lsls	r3, r1, #7
    23b2:	1ac0      	subs	r0, r0, r3
    23b4:	4152      	adcs	r2, r2
    23b6:	0983      	lsrs	r3, r0, #6
    23b8:	428b      	cmp	r3, r1
    23ba:	d301      	bcc.n	23c0 <__udivsi3+0xb4>
    23bc:	018b      	lsls	r3, r1, #6
    23be:	1ac0      	subs	r0, r0, r3
    23c0:	4152      	adcs	r2, r2
    23c2:	0943      	lsrs	r3, r0, #5
    23c4:	428b      	cmp	r3, r1
    23c6:	d301      	bcc.n	23cc <__udivsi3+0xc0>
    23c8:	014b      	lsls	r3, r1, #5
    23ca:	1ac0      	subs	r0, r0, r3
    23cc:	4152      	adcs	r2, r2
    23ce:	0903      	lsrs	r3, r0, #4
    23d0:	428b      	cmp	r3, r1
    23d2:	d301      	bcc.n	23d8 <__udivsi3+0xcc>
    23d4:	010b      	lsls	r3, r1, #4
    23d6:	1ac0      	subs	r0, r0, r3
    23d8:	4152      	adcs	r2, r2
    23da:	08c3      	lsrs	r3, r0, #3
    23dc:	428b      	cmp	r3, r1
    23de:	d301      	bcc.n	23e4 <__udivsi3+0xd8>
    23e0:	00cb      	lsls	r3, r1, #3
    23e2:	1ac0      	subs	r0, r0, r3
    23e4:	4152      	adcs	r2, r2
    23e6:	0883      	lsrs	r3, r0, #2
    23e8:	428b      	cmp	r3, r1
    23ea:	d301      	bcc.n	23f0 <__udivsi3+0xe4>
    23ec:	008b      	lsls	r3, r1, #2
    23ee:	1ac0      	subs	r0, r0, r3
    23f0:	4152      	adcs	r2, r2
    23f2:	0843      	lsrs	r3, r0, #1
    23f4:	428b      	cmp	r3, r1
    23f6:	d301      	bcc.n	23fc <__udivsi3+0xf0>
    23f8:	004b      	lsls	r3, r1, #1
    23fa:	1ac0      	subs	r0, r0, r3
    23fc:	4152      	adcs	r2, r2
    23fe:	1a41      	subs	r1, r0, r1
    2400:	d200      	bcs.n	2404 <__udivsi3+0xf8>
    2402:	4601      	mov	r1, r0
    2404:	4152      	adcs	r2, r2
    2406:	4610      	mov	r0, r2
    2408:	4770      	bx	lr
    240a:	e7ff      	b.n	240c <__udivsi3+0x100>
    240c:	b501      	push	{r0, lr}
    240e:	2000      	movs	r0, #0
    2410:	f000 f806 	bl	2420 <__aeabi_idiv0>
    2414:	bd02      	pop	{r1, pc}
    2416:	46c0      	nop			; (mov r8, r8)

00002418 <__aeabi_uidivmod>:
    2418:	2900      	cmp	r1, #0
    241a:	d0f7      	beq.n	240c <__udivsi3+0x100>
    241c:	e776      	b.n	230c <__udivsi3>
    241e:	4770      	bx	lr

00002420 <__aeabi_idiv0>:
    2420:	4770      	bx	lr
    2422:	46c0      	nop			; (mov r8, r8)

00002424 <__aeabi_dadd>:
    2424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2426:	4645      	mov	r5, r8
    2428:	46de      	mov	lr, fp
    242a:	4657      	mov	r7, sl
    242c:	464e      	mov	r6, r9
    242e:	030c      	lsls	r4, r1, #12
    2430:	b5e0      	push	{r5, r6, r7, lr}
    2432:	004e      	lsls	r6, r1, #1
    2434:	0fc9      	lsrs	r1, r1, #31
    2436:	4688      	mov	r8, r1
    2438:	000d      	movs	r5, r1
    243a:	0a61      	lsrs	r1, r4, #9
    243c:	0f44      	lsrs	r4, r0, #29
    243e:	430c      	orrs	r4, r1
    2440:	00c7      	lsls	r7, r0, #3
    2442:	0319      	lsls	r1, r3, #12
    2444:	0058      	lsls	r0, r3, #1
    2446:	0fdb      	lsrs	r3, r3, #31
    2448:	469b      	mov	fp, r3
    244a:	0a4b      	lsrs	r3, r1, #9
    244c:	0f51      	lsrs	r1, r2, #29
    244e:	430b      	orrs	r3, r1
    2450:	0d76      	lsrs	r6, r6, #21
    2452:	0d40      	lsrs	r0, r0, #21
    2454:	0019      	movs	r1, r3
    2456:	00d2      	lsls	r2, r2, #3
    2458:	45d8      	cmp	r8, fp
    245a:	d100      	bne.n	245e <__aeabi_dadd+0x3a>
    245c:	e0ae      	b.n	25bc <__aeabi_dadd+0x198>
    245e:	1a35      	subs	r5, r6, r0
    2460:	2d00      	cmp	r5, #0
    2462:	dc00      	bgt.n	2466 <__aeabi_dadd+0x42>
    2464:	e0f6      	b.n	2654 <__aeabi_dadd+0x230>
    2466:	2800      	cmp	r0, #0
    2468:	d10f      	bne.n	248a <__aeabi_dadd+0x66>
    246a:	4313      	orrs	r3, r2
    246c:	d100      	bne.n	2470 <__aeabi_dadd+0x4c>
    246e:	e0db      	b.n	2628 <__aeabi_dadd+0x204>
    2470:	1e6b      	subs	r3, r5, #1
    2472:	2b00      	cmp	r3, #0
    2474:	d000      	beq.n	2478 <__aeabi_dadd+0x54>
    2476:	e137      	b.n	26e8 <__aeabi_dadd+0x2c4>
    2478:	1aba      	subs	r2, r7, r2
    247a:	4297      	cmp	r7, r2
    247c:	41bf      	sbcs	r7, r7
    247e:	1a64      	subs	r4, r4, r1
    2480:	427f      	negs	r7, r7
    2482:	1be4      	subs	r4, r4, r7
    2484:	2601      	movs	r6, #1
    2486:	0017      	movs	r7, r2
    2488:	e024      	b.n	24d4 <__aeabi_dadd+0xb0>
    248a:	4bc6      	ldr	r3, [pc, #792]	; (27a4 <__aeabi_dadd+0x380>)
    248c:	429e      	cmp	r6, r3
    248e:	d04d      	beq.n	252c <__aeabi_dadd+0x108>
    2490:	2380      	movs	r3, #128	; 0x80
    2492:	041b      	lsls	r3, r3, #16
    2494:	4319      	orrs	r1, r3
    2496:	2d38      	cmp	r5, #56	; 0x38
    2498:	dd00      	ble.n	249c <__aeabi_dadd+0x78>
    249a:	e107      	b.n	26ac <__aeabi_dadd+0x288>
    249c:	2d1f      	cmp	r5, #31
    249e:	dd00      	ble.n	24a2 <__aeabi_dadd+0x7e>
    24a0:	e138      	b.n	2714 <__aeabi_dadd+0x2f0>
    24a2:	2020      	movs	r0, #32
    24a4:	1b43      	subs	r3, r0, r5
    24a6:	469a      	mov	sl, r3
    24a8:	000b      	movs	r3, r1
    24aa:	4650      	mov	r0, sl
    24ac:	4083      	lsls	r3, r0
    24ae:	4699      	mov	r9, r3
    24b0:	0013      	movs	r3, r2
    24b2:	4648      	mov	r0, r9
    24b4:	40eb      	lsrs	r3, r5
    24b6:	4318      	orrs	r0, r3
    24b8:	0003      	movs	r3, r0
    24ba:	4650      	mov	r0, sl
    24bc:	4082      	lsls	r2, r0
    24be:	1e50      	subs	r0, r2, #1
    24c0:	4182      	sbcs	r2, r0
    24c2:	40e9      	lsrs	r1, r5
    24c4:	431a      	orrs	r2, r3
    24c6:	1aba      	subs	r2, r7, r2
    24c8:	1a61      	subs	r1, r4, r1
    24ca:	4297      	cmp	r7, r2
    24cc:	41a4      	sbcs	r4, r4
    24ce:	0017      	movs	r7, r2
    24d0:	4264      	negs	r4, r4
    24d2:	1b0c      	subs	r4, r1, r4
    24d4:	0223      	lsls	r3, r4, #8
    24d6:	d562      	bpl.n	259e <__aeabi_dadd+0x17a>
    24d8:	0264      	lsls	r4, r4, #9
    24da:	0a65      	lsrs	r5, r4, #9
    24dc:	2d00      	cmp	r5, #0
    24de:	d100      	bne.n	24e2 <__aeabi_dadd+0xbe>
    24e0:	e0df      	b.n	26a2 <__aeabi_dadd+0x27e>
    24e2:	0028      	movs	r0, r5
    24e4:	f001 fbe4 	bl	3cb0 <__clzsi2>
    24e8:	0003      	movs	r3, r0
    24ea:	3b08      	subs	r3, #8
    24ec:	2b1f      	cmp	r3, #31
    24ee:	dd00      	ble.n	24f2 <__aeabi_dadd+0xce>
    24f0:	e0d2      	b.n	2698 <__aeabi_dadd+0x274>
    24f2:	2220      	movs	r2, #32
    24f4:	003c      	movs	r4, r7
    24f6:	1ad2      	subs	r2, r2, r3
    24f8:	409d      	lsls	r5, r3
    24fa:	40d4      	lsrs	r4, r2
    24fc:	409f      	lsls	r7, r3
    24fe:	4325      	orrs	r5, r4
    2500:	429e      	cmp	r6, r3
    2502:	dd00      	ble.n	2506 <__aeabi_dadd+0xe2>
    2504:	e0c4      	b.n	2690 <__aeabi_dadd+0x26c>
    2506:	1b9e      	subs	r6, r3, r6
    2508:	1c73      	adds	r3, r6, #1
    250a:	2b1f      	cmp	r3, #31
    250c:	dd00      	ble.n	2510 <__aeabi_dadd+0xec>
    250e:	e0f1      	b.n	26f4 <__aeabi_dadd+0x2d0>
    2510:	2220      	movs	r2, #32
    2512:	0038      	movs	r0, r7
    2514:	0029      	movs	r1, r5
    2516:	1ad2      	subs	r2, r2, r3
    2518:	40d8      	lsrs	r0, r3
    251a:	4091      	lsls	r1, r2
    251c:	4097      	lsls	r7, r2
    251e:	002c      	movs	r4, r5
    2520:	4301      	orrs	r1, r0
    2522:	1e78      	subs	r0, r7, #1
    2524:	4187      	sbcs	r7, r0
    2526:	40dc      	lsrs	r4, r3
    2528:	2600      	movs	r6, #0
    252a:	430f      	orrs	r7, r1
    252c:	077b      	lsls	r3, r7, #29
    252e:	d009      	beq.n	2544 <__aeabi_dadd+0x120>
    2530:	230f      	movs	r3, #15
    2532:	403b      	ands	r3, r7
    2534:	2b04      	cmp	r3, #4
    2536:	d005      	beq.n	2544 <__aeabi_dadd+0x120>
    2538:	1d3b      	adds	r3, r7, #4
    253a:	42bb      	cmp	r3, r7
    253c:	41bf      	sbcs	r7, r7
    253e:	427f      	negs	r7, r7
    2540:	19e4      	adds	r4, r4, r7
    2542:	001f      	movs	r7, r3
    2544:	0223      	lsls	r3, r4, #8
    2546:	d52c      	bpl.n	25a2 <__aeabi_dadd+0x17e>
    2548:	4b96      	ldr	r3, [pc, #600]	; (27a4 <__aeabi_dadd+0x380>)
    254a:	3601      	adds	r6, #1
    254c:	429e      	cmp	r6, r3
    254e:	d100      	bne.n	2552 <__aeabi_dadd+0x12e>
    2550:	e09a      	b.n	2688 <__aeabi_dadd+0x264>
    2552:	4645      	mov	r5, r8
    2554:	4b94      	ldr	r3, [pc, #592]	; (27a8 <__aeabi_dadd+0x384>)
    2556:	08ff      	lsrs	r7, r7, #3
    2558:	401c      	ands	r4, r3
    255a:	0760      	lsls	r0, r4, #29
    255c:	0576      	lsls	r6, r6, #21
    255e:	0264      	lsls	r4, r4, #9
    2560:	4307      	orrs	r7, r0
    2562:	0b24      	lsrs	r4, r4, #12
    2564:	0d76      	lsrs	r6, r6, #21
    2566:	2100      	movs	r1, #0
    2568:	0324      	lsls	r4, r4, #12
    256a:	0b23      	lsrs	r3, r4, #12
    256c:	0d0c      	lsrs	r4, r1, #20
    256e:	4a8f      	ldr	r2, [pc, #572]	; (27ac <__aeabi_dadd+0x388>)
    2570:	0524      	lsls	r4, r4, #20
    2572:	431c      	orrs	r4, r3
    2574:	4014      	ands	r4, r2
    2576:	0533      	lsls	r3, r6, #20
    2578:	4323      	orrs	r3, r4
    257a:	005b      	lsls	r3, r3, #1
    257c:	07ed      	lsls	r5, r5, #31
    257e:	085b      	lsrs	r3, r3, #1
    2580:	432b      	orrs	r3, r5
    2582:	0038      	movs	r0, r7
    2584:	0019      	movs	r1, r3
    2586:	bc3c      	pop	{r2, r3, r4, r5}
    2588:	4690      	mov	r8, r2
    258a:	4699      	mov	r9, r3
    258c:	46a2      	mov	sl, r4
    258e:	46ab      	mov	fp, r5
    2590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2592:	4664      	mov	r4, ip
    2594:	4304      	orrs	r4, r0
    2596:	d100      	bne.n	259a <__aeabi_dadd+0x176>
    2598:	e211      	b.n	29be <__aeabi_dadd+0x59a>
    259a:	0004      	movs	r4, r0
    259c:	4667      	mov	r7, ip
    259e:	077b      	lsls	r3, r7, #29
    25a0:	d1c6      	bne.n	2530 <__aeabi_dadd+0x10c>
    25a2:	4645      	mov	r5, r8
    25a4:	0760      	lsls	r0, r4, #29
    25a6:	08ff      	lsrs	r7, r7, #3
    25a8:	4307      	orrs	r7, r0
    25aa:	08e4      	lsrs	r4, r4, #3
    25ac:	4b7d      	ldr	r3, [pc, #500]	; (27a4 <__aeabi_dadd+0x380>)
    25ae:	429e      	cmp	r6, r3
    25b0:	d030      	beq.n	2614 <__aeabi_dadd+0x1f0>
    25b2:	0324      	lsls	r4, r4, #12
    25b4:	0576      	lsls	r6, r6, #21
    25b6:	0b24      	lsrs	r4, r4, #12
    25b8:	0d76      	lsrs	r6, r6, #21
    25ba:	e7d4      	b.n	2566 <__aeabi_dadd+0x142>
    25bc:	1a33      	subs	r3, r6, r0
    25be:	469a      	mov	sl, r3
    25c0:	2b00      	cmp	r3, #0
    25c2:	dd78      	ble.n	26b6 <__aeabi_dadd+0x292>
    25c4:	2800      	cmp	r0, #0
    25c6:	d031      	beq.n	262c <__aeabi_dadd+0x208>
    25c8:	4876      	ldr	r0, [pc, #472]	; (27a4 <__aeabi_dadd+0x380>)
    25ca:	4286      	cmp	r6, r0
    25cc:	d0ae      	beq.n	252c <__aeabi_dadd+0x108>
    25ce:	2080      	movs	r0, #128	; 0x80
    25d0:	0400      	lsls	r0, r0, #16
    25d2:	4301      	orrs	r1, r0
    25d4:	4653      	mov	r3, sl
    25d6:	2b38      	cmp	r3, #56	; 0x38
    25d8:	dc00      	bgt.n	25dc <__aeabi_dadd+0x1b8>
    25da:	e0e9      	b.n	27b0 <__aeabi_dadd+0x38c>
    25dc:	430a      	orrs	r2, r1
    25de:	1e51      	subs	r1, r2, #1
    25e0:	418a      	sbcs	r2, r1
    25e2:	2100      	movs	r1, #0
    25e4:	19d2      	adds	r2, r2, r7
    25e6:	42ba      	cmp	r2, r7
    25e8:	41bf      	sbcs	r7, r7
    25ea:	1909      	adds	r1, r1, r4
    25ec:	427c      	negs	r4, r7
    25ee:	0017      	movs	r7, r2
    25f0:	190c      	adds	r4, r1, r4
    25f2:	0223      	lsls	r3, r4, #8
    25f4:	d5d3      	bpl.n	259e <__aeabi_dadd+0x17a>
    25f6:	4b6b      	ldr	r3, [pc, #428]	; (27a4 <__aeabi_dadd+0x380>)
    25f8:	3601      	adds	r6, #1
    25fa:	429e      	cmp	r6, r3
    25fc:	d100      	bne.n	2600 <__aeabi_dadd+0x1dc>
    25fe:	e13a      	b.n	2876 <__aeabi_dadd+0x452>
    2600:	2001      	movs	r0, #1
    2602:	4b69      	ldr	r3, [pc, #420]	; (27a8 <__aeabi_dadd+0x384>)
    2604:	401c      	ands	r4, r3
    2606:	087b      	lsrs	r3, r7, #1
    2608:	4007      	ands	r7, r0
    260a:	431f      	orrs	r7, r3
    260c:	07e0      	lsls	r0, r4, #31
    260e:	4307      	orrs	r7, r0
    2610:	0864      	lsrs	r4, r4, #1
    2612:	e78b      	b.n	252c <__aeabi_dadd+0x108>
    2614:	0023      	movs	r3, r4
    2616:	433b      	orrs	r3, r7
    2618:	d100      	bne.n	261c <__aeabi_dadd+0x1f8>
    261a:	e1cb      	b.n	29b4 <__aeabi_dadd+0x590>
    261c:	2280      	movs	r2, #128	; 0x80
    261e:	0312      	lsls	r2, r2, #12
    2620:	4314      	orrs	r4, r2
    2622:	0324      	lsls	r4, r4, #12
    2624:	0b24      	lsrs	r4, r4, #12
    2626:	e79e      	b.n	2566 <__aeabi_dadd+0x142>
    2628:	002e      	movs	r6, r5
    262a:	e77f      	b.n	252c <__aeabi_dadd+0x108>
    262c:	0008      	movs	r0, r1
    262e:	4310      	orrs	r0, r2
    2630:	d100      	bne.n	2634 <__aeabi_dadd+0x210>
    2632:	e0b4      	b.n	279e <__aeabi_dadd+0x37a>
    2634:	1e58      	subs	r0, r3, #1
    2636:	2800      	cmp	r0, #0
    2638:	d000      	beq.n	263c <__aeabi_dadd+0x218>
    263a:	e0de      	b.n	27fa <__aeabi_dadd+0x3d6>
    263c:	18ba      	adds	r2, r7, r2
    263e:	42ba      	cmp	r2, r7
    2640:	419b      	sbcs	r3, r3
    2642:	1864      	adds	r4, r4, r1
    2644:	425b      	negs	r3, r3
    2646:	18e4      	adds	r4, r4, r3
    2648:	0017      	movs	r7, r2
    264a:	2601      	movs	r6, #1
    264c:	0223      	lsls	r3, r4, #8
    264e:	d5a6      	bpl.n	259e <__aeabi_dadd+0x17a>
    2650:	2602      	movs	r6, #2
    2652:	e7d5      	b.n	2600 <__aeabi_dadd+0x1dc>
    2654:	2d00      	cmp	r5, #0
    2656:	d16e      	bne.n	2736 <__aeabi_dadd+0x312>
    2658:	1c70      	adds	r0, r6, #1
    265a:	0540      	lsls	r0, r0, #21
    265c:	0d40      	lsrs	r0, r0, #21
    265e:	2801      	cmp	r0, #1
    2660:	dc00      	bgt.n	2664 <__aeabi_dadd+0x240>
    2662:	e0f9      	b.n	2858 <__aeabi_dadd+0x434>
    2664:	1ab8      	subs	r0, r7, r2
    2666:	4684      	mov	ip, r0
    2668:	4287      	cmp	r7, r0
    266a:	4180      	sbcs	r0, r0
    266c:	1ae5      	subs	r5, r4, r3
    266e:	4240      	negs	r0, r0
    2670:	1a2d      	subs	r5, r5, r0
    2672:	0228      	lsls	r0, r5, #8
    2674:	d400      	bmi.n	2678 <__aeabi_dadd+0x254>
    2676:	e089      	b.n	278c <__aeabi_dadd+0x368>
    2678:	1bd7      	subs	r7, r2, r7
    267a:	42ba      	cmp	r2, r7
    267c:	4192      	sbcs	r2, r2
    267e:	1b1c      	subs	r4, r3, r4
    2680:	4252      	negs	r2, r2
    2682:	1aa5      	subs	r5, r4, r2
    2684:	46d8      	mov	r8, fp
    2686:	e729      	b.n	24dc <__aeabi_dadd+0xb8>
    2688:	4645      	mov	r5, r8
    268a:	2400      	movs	r4, #0
    268c:	2700      	movs	r7, #0
    268e:	e76a      	b.n	2566 <__aeabi_dadd+0x142>
    2690:	4c45      	ldr	r4, [pc, #276]	; (27a8 <__aeabi_dadd+0x384>)
    2692:	1af6      	subs	r6, r6, r3
    2694:	402c      	ands	r4, r5
    2696:	e749      	b.n	252c <__aeabi_dadd+0x108>
    2698:	003d      	movs	r5, r7
    269a:	3828      	subs	r0, #40	; 0x28
    269c:	4085      	lsls	r5, r0
    269e:	2700      	movs	r7, #0
    26a0:	e72e      	b.n	2500 <__aeabi_dadd+0xdc>
    26a2:	0038      	movs	r0, r7
    26a4:	f001 fb04 	bl	3cb0 <__clzsi2>
    26a8:	3020      	adds	r0, #32
    26aa:	e71d      	b.n	24e8 <__aeabi_dadd+0xc4>
    26ac:	430a      	orrs	r2, r1
    26ae:	1e51      	subs	r1, r2, #1
    26b0:	418a      	sbcs	r2, r1
    26b2:	2100      	movs	r1, #0
    26b4:	e707      	b.n	24c6 <__aeabi_dadd+0xa2>
    26b6:	2b00      	cmp	r3, #0
    26b8:	d000      	beq.n	26bc <__aeabi_dadd+0x298>
    26ba:	e0f3      	b.n	28a4 <__aeabi_dadd+0x480>
    26bc:	1c70      	adds	r0, r6, #1
    26be:	0543      	lsls	r3, r0, #21
    26c0:	0d5b      	lsrs	r3, r3, #21
    26c2:	2b01      	cmp	r3, #1
    26c4:	dc00      	bgt.n	26c8 <__aeabi_dadd+0x2a4>
    26c6:	e0ad      	b.n	2824 <__aeabi_dadd+0x400>
    26c8:	4b36      	ldr	r3, [pc, #216]	; (27a4 <__aeabi_dadd+0x380>)
    26ca:	4298      	cmp	r0, r3
    26cc:	d100      	bne.n	26d0 <__aeabi_dadd+0x2ac>
    26ce:	e0d1      	b.n	2874 <__aeabi_dadd+0x450>
    26d0:	18ba      	adds	r2, r7, r2
    26d2:	42ba      	cmp	r2, r7
    26d4:	41bf      	sbcs	r7, r7
    26d6:	1864      	adds	r4, r4, r1
    26d8:	427f      	negs	r7, r7
    26da:	19e4      	adds	r4, r4, r7
    26dc:	07e7      	lsls	r7, r4, #31
    26de:	0852      	lsrs	r2, r2, #1
    26e0:	4317      	orrs	r7, r2
    26e2:	0864      	lsrs	r4, r4, #1
    26e4:	0006      	movs	r6, r0
    26e6:	e721      	b.n	252c <__aeabi_dadd+0x108>
    26e8:	482e      	ldr	r0, [pc, #184]	; (27a4 <__aeabi_dadd+0x380>)
    26ea:	4285      	cmp	r5, r0
    26ec:	d100      	bne.n	26f0 <__aeabi_dadd+0x2cc>
    26ee:	e093      	b.n	2818 <__aeabi_dadd+0x3f4>
    26f0:	001d      	movs	r5, r3
    26f2:	e6d0      	b.n	2496 <__aeabi_dadd+0x72>
    26f4:	0029      	movs	r1, r5
    26f6:	3e1f      	subs	r6, #31
    26f8:	40f1      	lsrs	r1, r6
    26fa:	2b20      	cmp	r3, #32
    26fc:	d100      	bne.n	2700 <__aeabi_dadd+0x2dc>
    26fe:	e08d      	b.n	281c <__aeabi_dadd+0x3f8>
    2700:	2240      	movs	r2, #64	; 0x40
    2702:	1ad3      	subs	r3, r2, r3
    2704:	409d      	lsls	r5, r3
    2706:	432f      	orrs	r7, r5
    2708:	1e7d      	subs	r5, r7, #1
    270a:	41af      	sbcs	r7, r5
    270c:	2400      	movs	r4, #0
    270e:	430f      	orrs	r7, r1
    2710:	2600      	movs	r6, #0
    2712:	e744      	b.n	259e <__aeabi_dadd+0x17a>
    2714:	002b      	movs	r3, r5
    2716:	0008      	movs	r0, r1
    2718:	3b20      	subs	r3, #32
    271a:	40d8      	lsrs	r0, r3
    271c:	0003      	movs	r3, r0
    271e:	2d20      	cmp	r5, #32
    2720:	d100      	bne.n	2724 <__aeabi_dadd+0x300>
    2722:	e07d      	b.n	2820 <__aeabi_dadd+0x3fc>
    2724:	2040      	movs	r0, #64	; 0x40
    2726:	1b45      	subs	r5, r0, r5
    2728:	40a9      	lsls	r1, r5
    272a:	430a      	orrs	r2, r1
    272c:	1e51      	subs	r1, r2, #1
    272e:	418a      	sbcs	r2, r1
    2730:	2100      	movs	r1, #0
    2732:	431a      	orrs	r2, r3
    2734:	e6c7      	b.n	24c6 <__aeabi_dadd+0xa2>
    2736:	2e00      	cmp	r6, #0
    2738:	d050      	beq.n	27dc <__aeabi_dadd+0x3b8>
    273a:	4e1a      	ldr	r6, [pc, #104]	; (27a4 <__aeabi_dadd+0x380>)
    273c:	42b0      	cmp	r0, r6
    273e:	d057      	beq.n	27f0 <__aeabi_dadd+0x3cc>
    2740:	2680      	movs	r6, #128	; 0x80
    2742:	426b      	negs	r3, r5
    2744:	4699      	mov	r9, r3
    2746:	0436      	lsls	r6, r6, #16
    2748:	4334      	orrs	r4, r6
    274a:	464b      	mov	r3, r9
    274c:	2b38      	cmp	r3, #56	; 0x38
    274e:	dd00      	ble.n	2752 <__aeabi_dadd+0x32e>
    2750:	e0d6      	b.n	2900 <__aeabi_dadd+0x4dc>
    2752:	2b1f      	cmp	r3, #31
    2754:	dd00      	ble.n	2758 <__aeabi_dadd+0x334>
    2756:	e135      	b.n	29c4 <__aeabi_dadd+0x5a0>
    2758:	2620      	movs	r6, #32
    275a:	1af5      	subs	r5, r6, r3
    275c:	0026      	movs	r6, r4
    275e:	40ae      	lsls	r6, r5
    2760:	46b2      	mov	sl, r6
    2762:	003e      	movs	r6, r7
    2764:	40de      	lsrs	r6, r3
    2766:	46ac      	mov	ip, r5
    2768:	0035      	movs	r5, r6
    276a:	4656      	mov	r6, sl
    276c:	432e      	orrs	r6, r5
    276e:	4665      	mov	r5, ip
    2770:	40af      	lsls	r7, r5
    2772:	1e7d      	subs	r5, r7, #1
    2774:	41af      	sbcs	r7, r5
    2776:	40dc      	lsrs	r4, r3
    2778:	4337      	orrs	r7, r6
    277a:	1bd7      	subs	r7, r2, r7
    277c:	42ba      	cmp	r2, r7
    277e:	4192      	sbcs	r2, r2
    2780:	1b0c      	subs	r4, r1, r4
    2782:	4252      	negs	r2, r2
    2784:	1aa4      	subs	r4, r4, r2
    2786:	0006      	movs	r6, r0
    2788:	46d8      	mov	r8, fp
    278a:	e6a3      	b.n	24d4 <__aeabi_dadd+0xb0>
    278c:	4664      	mov	r4, ip
    278e:	4667      	mov	r7, ip
    2790:	432c      	orrs	r4, r5
    2792:	d000      	beq.n	2796 <__aeabi_dadd+0x372>
    2794:	e6a2      	b.n	24dc <__aeabi_dadd+0xb8>
    2796:	2500      	movs	r5, #0
    2798:	2600      	movs	r6, #0
    279a:	2700      	movs	r7, #0
    279c:	e706      	b.n	25ac <__aeabi_dadd+0x188>
    279e:	001e      	movs	r6, r3
    27a0:	e6c4      	b.n	252c <__aeabi_dadd+0x108>
    27a2:	46c0      	nop			; (mov r8, r8)
    27a4:	000007ff 	.word	0x000007ff
    27a8:	ff7fffff 	.word	0xff7fffff
    27ac:	800fffff 	.word	0x800fffff
    27b0:	2b1f      	cmp	r3, #31
    27b2:	dc63      	bgt.n	287c <__aeabi_dadd+0x458>
    27b4:	2020      	movs	r0, #32
    27b6:	1ac3      	subs	r3, r0, r3
    27b8:	0008      	movs	r0, r1
    27ba:	4098      	lsls	r0, r3
    27bc:	469c      	mov	ip, r3
    27be:	4683      	mov	fp, r0
    27c0:	4653      	mov	r3, sl
    27c2:	0010      	movs	r0, r2
    27c4:	40d8      	lsrs	r0, r3
    27c6:	0003      	movs	r3, r0
    27c8:	4658      	mov	r0, fp
    27ca:	4318      	orrs	r0, r3
    27cc:	4663      	mov	r3, ip
    27ce:	409a      	lsls	r2, r3
    27d0:	1e53      	subs	r3, r2, #1
    27d2:	419a      	sbcs	r2, r3
    27d4:	4653      	mov	r3, sl
    27d6:	4302      	orrs	r2, r0
    27d8:	40d9      	lsrs	r1, r3
    27da:	e703      	b.n	25e4 <__aeabi_dadd+0x1c0>
    27dc:	0026      	movs	r6, r4
    27de:	433e      	orrs	r6, r7
    27e0:	d006      	beq.n	27f0 <__aeabi_dadd+0x3cc>
    27e2:	43eb      	mvns	r3, r5
    27e4:	4699      	mov	r9, r3
    27e6:	2b00      	cmp	r3, #0
    27e8:	d0c7      	beq.n	277a <__aeabi_dadd+0x356>
    27ea:	4e94      	ldr	r6, [pc, #592]	; (2a3c <__aeabi_dadd+0x618>)
    27ec:	42b0      	cmp	r0, r6
    27ee:	d1ac      	bne.n	274a <__aeabi_dadd+0x326>
    27f0:	000c      	movs	r4, r1
    27f2:	0017      	movs	r7, r2
    27f4:	0006      	movs	r6, r0
    27f6:	46d8      	mov	r8, fp
    27f8:	e698      	b.n	252c <__aeabi_dadd+0x108>
    27fa:	4b90      	ldr	r3, [pc, #576]	; (2a3c <__aeabi_dadd+0x618>)
    27fc:	459a      	cmp	sl, r3
    27fe:	d00b      	beq.n	2818 <__aeabi_dadd+0x3f4>
    2800:	4682      	mov	sl, r0
    2802:	e6e7      	b.n	25d4 <__aeabi_dadd+0x1b0>
    2804:	2800      	cmp	r0, #0
    2806:	d000      	beq.n	280a <__aeabi_dadd+0x3e6>
    2808:	e09e      	b.n	2948 <__aeabi_dadd+0x524>
    280a:	0018      	movs	r0, r3
    280c:	4310      	orrs	r0, r2
    280e:	d100      	bne.n	2812 <__aeabi_dadd+0x3ee>
    2810:	e0e9      	b.n	29e6 <__aeabi_dadd+0x5c2>
    2812:	001c      	movs	r4, r3
    2814:	0017      	movs	r7, r2
    2816:	46d8      	mov	r8, fp
    2818:	4e88      	ldr	r6, [pc, #544]	; (2a3c <__aeabi_dadd+0x618>)
    281a:	e687      	b.n	252c <__aeabi_dadd+0x108>
    281c:	2500      	movs	r5, #0
    281e:	e772      	b.n	2706 <__aeabi_dadd+0x2e2>
    2820:	2100      	movs	r1, #0
    2822:	e782      	b.n	272a <__aeabi_dadd+0x306>
    2824:	0023      	movs	r3, r4
    2826:	433b      	orrs	r3, r7
    2828:	2e00      	cmp	r6, #0
    282a:	d000      	beq.n	282e <__aeabi_dadd+0x40a>
    282c:	e0ab      	b.n	2986 <__aeabi_dadd+0x562>
    282e:	2b00      	cmp	r3, #0
    2830:	d100      	bne.n	2834 <__aeabi_dadd+0x410>
    2832:	e0e7      	b.n	2a04 <__aeabi_dadd+0x5e0>
    2834:	000b      	movs	r3, r1
    2836:	4313      	orrs	r3, r2
    2838:	d100      	bne.n	283c <__aeabi_dadd+0x418>
    283a:	e677      	b.n	252c <__aeabi_dadd+0x108>
    283c:	18ba      	adds	r2, r7, r2
    283e:	42ba      	cmp	r2, r7
    2840:	41bf      	sbcs	r7, r7
    2842:	1864      	adds	r4, r4, r1
    2844:	427f      	negs	r7, r7
    2846:	19e4      	adds	r4, r4, r7
    2848:	0223      	lsls	r3, r4, #8
    284a:	d400      	bmi.n	284e <__aeabi_dadd+0x42a>
    284c:	e0f2      	b.n	2a34 <__aeabi_dadd+0x610>
    284e:	4b7c      	ldr	r3, [pc, #496]	; (2a40 <__aeabi_dadd+0x61c>)
    2850:	0017      	movs	r7, r2
    2852:	401c      	ands	r4, r3
    2854:	0006      	movs	r6, r0
    2856:	e669      	b.n	252c <__aeabi_dadd+0x108>
    2858:	0020      	movs	r0, r4
    285a:	4338      	orrs	r0, r7
    285c:	2e00      	cmp	r6, #0
    285e:	d1d1      	bne.n	2804 <__aeabi_dadd+0x3e0>
    2860:	2800      	cmp	r0, #0
    2862:	d15b      	bne.n	291c <__aeabi_dadd+0x4f8>
    2864:	001c      	movs	r4, r3
    2866:	4314      	orrs	r4, r2
    2868:	d100      	bne.n	286c <__aeabi_dadd+0x448>
    286a:	e0a8      	b.n	29be <__aeabi_dadd+0x59a>
    286c:	001c      	movs	r4, r3
    286e:	0017      	movs	r7, r2
    2870:	46d8      	mov	r8, fp
    2872:	e65b      	b.n	252c <__aeabi_dadd+0x108>
    2874:	0006      	movs	r6, r0
    2876:	2400      	movs	r4, #0
    2878:	2700      	movs	r7, #0
    287a:	e697      	b.n	25ac <__aeabi_dadd+0x188>
    287c:	4650      	mov	r0, sl
    287e:	000b      	movs	r3, r1
    2880:	3820      	subs	r0, #32
    2882:	40c3      	lsrs	r3, r0
    2884:	4699      	mov	r9, r3
    2886:	4653      	mov	r3, sl
    2888:	2b20      	cmp	r3, #32
    288a:	d100      	bne.n	288e <__aeabi_dadd+0x46a>
    288c:	e095      	b.n	29ba <__aeabi_dadd+0x596>
    288e:	2340      	movs	r3, #64	; 0x40
    2890:	4650      	mov	r0, sl
    2892:	1a1b      	subs	r3, r3, r0
    2894:	4099      	lsls	r1, r3
    2896:	430a      	orrs	r2, r1
    2898:	1e51      	subs	r1, r2, #1
    289a:	418a      	sbcs	r2, r1
    289c:	464b      	mov	r3, r9
    289e:	2100      	movs	r1, #0
    28a0:	431a      	orrs	r2, r3
    28a2:	e69f      	b.n	25e4 <__aeabi_dadd+0x1c0>
    28a4:	2e00      	cmp	r6, #0
    28a6:	d130      	bne.n	290a <__aeabi_dadd+0x4e6>
    28a8:	0026      	movs	r6, r4
    28aa:	433e      	orrs	r6, r7
    28ac:	d067      	beq.n	297e <__aeabi_dadd+0x55a>
    28ae:	43db      	mvns	r3, r3
    28b0:	469a      	mov	sl, r3
    28b2:	2b00      	cmp	r3, #0
    28b4:	d01c      	beq.n	28f0 <__aeabi_dadd+0x4cc>
    28b6:	4e61      	ldr	r6, [pc, #388]	; (2a3c <__aeabi_dadd+0x618>)
    28b8:	42b0      	cmp	r0, r6
    28ba:	d060      	beq.n	297e <__aeabi_dadd+0x55a>
    28bc:	4653      	mov	r3, sl
    28be:	2b38      	cmp	r3, #56	; 0x38
    28c0:	dd00      	ble.n	28c4 <__aeabi_dadd+0x4a0>
    28c2:	e096      	b.n	29f2 <__aeabi_dadd+0x5ce>
    28c4:	2b1f      	cmp	r3, #31
    28c6:	dd00      	ble.n	28ca <__aeabi_dadd+0x4a6>
    28c8:	e09f      	b.n	2a0a <__aeabi_dadd+0x5e6>
    28ca:	2620      	movs	r6, #32
    28cc:	1af3      	subs	r3, r6, r3
    28ce:	0026      	movs	r6, r4
    28d0:	409e      	lsls	r6, r3
    28d2:	469c      	mov	ip, r3
    28d4:	46b3      	mov	fp, r6
    28d6:	4653      	mov	r3, sl
    28d8:	003e      	movs	r6, r7
    28da:	40de      	lsrs	r6, r3
    28dc:	0033      	movs	r3, r6
    28de:	465e      	mov	r6, fp
    28e0:	431e      	orrs	r6, r3
    28e2:	4663      	mov	r3, ip
    28e4:	409f      	lsls	r7, r3
    28e6:	1e7b      	subs	r3, r7, #1
    28e8:	419f      	sbcs	r7, r3
    28ea:	4653      	mov	r3, sl
    28ec:	40dc      	lsrs	r4, r3
    28ee:	4337      	orrs	r7, r6
    28f0:	18bf      	adds	r7, r7, r2
    28f2:	4297      	cmp	r7, r2
    28f4:	4192      	sbcs	r2, r2
    28f6:	1864      	adds	r4, r4, r1
    28f8:	4252      	negs	r2, r2
    28fa:	18a4      	adds	r4, r4, r2
    28fc:	0006      	movs	r6, r0
    28fe:	e678      	b.n	25f2 <__aeabi_dadd+0x1ce>
    2900:	4327      	orrs	r7, r4
    2902:	1e7c      	subs	r4, r7, #1
    2904:	41a7      	sbcs	r7, r4
    2906:	2400      	movs	r4, #0
    2908:	e737      	b.n	277a <__aeabi_dadd+0x356>
    290a:	4e4c      	ldr	r6, [pc, #304]	; (2a3c <__aeabi_dadd+0x618>)
    290c:	42b0      	cmp	r0, r6
    290e:	d036      	beq.n	297e <__aeabi_dadd+0x55a>
    2910:	2680      	movs	r6, #128	; 0x80
    2912:	425b      	negs	r3, r3
    2914:	0436      	lsls	r6, r6, #16
    2916:	469a      	mov	sl, r3
    2918:	4334      	orrs	r4, r6
    291a:	e7cf      	b.n	28bc <__aeabi_dadd+0x498>
    291c:	0018      	movs	r0, r3
    291e:	4310      	orrs	r0, r2
    2920:	d100      	bne.n	2924 <__aeabi_dadd+0x500>
    2922:	e603      	b.n	252c <__aeabi_dadd+0x108>
    2924:	1ab8      	subs	r0, r7, r2
    2926:	4684      	mov	ip, r0
    2928:	4567      	cmp	r7, ip
    292a:	41ad      	sbcs	r5, r5
    292c:	1ae0      	subs	r0, r4, r3
    292e:	426d      	negs	r5, r5
    2930:	1b40      	subs	r0, r0, r5
    2932:	0205      	lsls	r5, r0, #8
    2934:	d400      	bmi.n	2938 <__aeabi_dadd+0x514>
    2936:	e62c      	b.n	2592 <__aeabi_dadd+0x16e>
    2938:	1bd7      	subs	r7, r2, r7
    293a:	42ba      	cmp	r2, r7
    293c:	4192      	sbcs	r2, r2
    293e:	1b1c      	subs	r4, r3, r4
    2940:	4252      	negs	r2, r2
    2942:	1aa4      	subs	r4, r4, r2
    2944:	46d8      	mov	r8, fp
    2946:	e5f1      	b.n	252c <__aeabi_dadd+0x108>
    2948:	0018      	movs	r0, r3
    294a:	4310      	orrs	r0, r2
    294c:	d100      	bne.n	2950 <__aeabi_dadd+0x52c>
    294e:	e763      	b.n	2818 <__aeabi_dadd+0x3f4>
    2950:	08f8      	lsrs	r0, r7, #3
    2952:	0767      	lsls	r7, r4, #29
    2954:	4307      	orrs	r7, r0
    2956:	2080      	movs	r0, #128	; 0x80
    2958:	08e4      	lsrs	r4, r4, #3
    295a:	0300      	lsls	r0, r0, #12
    295c:	4204      	tst	r4, r0
    295e:	d008      	beq.n	2972 <__aeabi_dadd+0x54e>
    2960:	08dd      	lsrs	r5, r3, #3
    2962:	4205      	tst	r5, r0
    2964:	d105      	bne.n	2972 <__aeabi_dadd+0x54e>
    2966:	08d2      	lsrs	r2, r2, #3
    2968:	0759      	lsls	r1, r3, #29
    296a:	4311      	orrs	r1, r2
    296c:	000f      	movs	r7, r1
    296e:	002c      	movs	r4, r5
    2970:	46d8      	mov	r8, fp
    2972:	0f7b      	lsrs	r3, r7, #29
    2974:	00e4      	lsls	r4, r4, #3
    2976:	431c      	orrs	r4, r3
    2978:	00ff      	lsls	r7, r7, #3
    297a:	4e30      	ldr	r6, [pc, #192]	; (2a3c <__aeabi_dadd+0x618>)
    297c:	e5d6      	b.n	252c <__aeabi_dadd+0x108>
    297e:	000c      	movs	r4, r1
    2980:	0017      	movs	r7, r2
    2982:	0006      	movs	r6, r0
    2984:	e5d2      	b.n	252c <__aeabi_dadd+0x108>
    2986:	2b00      	cmp	r3, #0
    2988:	d038      	beq.n	29fc <__aeabi_dadd+0x5d8>
    298a:	000b      	movs	r3, r1
    298c:	4313      	orrs	r3, r2
    298e:	d100      	bne.n	2992 <__aeabi_dadd+0x56e>
    2990:	e742      	b.n	2818 <__aeabi_dadd+0x3f4>
    2992:	08f8      	lsrs	r0, r7, #3
    2994:	0767      	lsls	r7, r4, #29
    2996:	4307      	orrs	r7, r0
    2998:	2080      	movs	r0, #128	; 0x80
    299a:	08e4      	lsrs	r4, r4, #3
    299c:	0300      	lsls	r0, r0, #12
    299e:	4204      	tst	r4, r0
    29a0:	d0e7      	beq.n	2972 <__aeabi_dadd+0x54e>
    29a2:	08cb      	lsrs	r3, r1, #3
    29a4:	4203      	tst	r3, r0
    29a6:	d1e4      	bne.n	2972 <__aeabi_dadd+0x54e>
    29a8:	08d2      	lsrs	r2, r2, #3
    29aa:	0749      	lsls	r1, r1, #29
    29ac:	4311      	orrs	r1, r2
    29ae:	000f      	movs	r7, r1
    29b0:	001c      	movs	r4, r3
    29b2:	e7de      	b.n	2972 <__aeabi_dadd+0x54e>
    29b4:	2700      	movs	r7, #0
    29b6:	2400      	movs	r4, #0
    29b8:	e5d5      	b.n	2566 <__aeabi_dadd+0x142>
    29ba:	2100      	movs	r1, #0
    29bc:	e76b      	b.n	2896 <__aeabi_dadd+0x472>
    29be:	2500      	movs	r5, #0
    29c0:	2700      	movs	r7, #0
    29c2:	e5f3      	b.n	25ac <__aeabi_dadd+0x188>
    29c4:	464e      	mov	r6, r9
    29c6:	0025      	movs	r5, r4
    29c8:	3e20      	subs	r6, #32
    29ca:	40f5      	lsrs	r5, r6
    29cc:	464b      	mov	r3, r9
    29ce:	002e      	movs	r6, r5
    29d0:	2b20      	cmp	r3, #32
    29d2:	d02d      	beq.n	2a30 <__aeabi_dadd+0x60c>
    29d4:	2540      	movs	r5, #64	; 0x40
    29d6:	1aed      	subs	r5, r5, r3
    29d8:	40ac      	lsls	r4, r5
    29da:	4327      	orrs	r7, r4
    29dc:	1e7c      	subs	r4, r7, #1
    29de:	41a7      	sbcs	r7, r4
    29e0:	2400      	movs	r4, #0
    29e2:	4337      	orrs	r7, r6
    29e4:	e6c9      	b.n	277a <__aeabi_dadd+0x356>
    29e6:	2480      	movs	r4, #128	; 0x80
    29e8:	2500      	movs	r5, #0
    29ea:	0324      	lsls	r4, r4, #12
    29ec:	4e13      	ldr	r6, [pc, #76]	; (2a3c <__aeabi_dadd+0x618>)
    29ee:	2700      	movs	r7, #0
    29f0:	e5dc      	b.n	25ac <__aeabi_dadd+0x188>
    29f2:	4327      	orrs	r7, r4
    29f4:	1e7c      	subs	r4, r7, #1
    29f6:	41a7      	sbcs	r7, r4
    29f8:	2400      	movs	r4, #0
    29fa:	e779      	b.n	28f0 <__aeabi_dadd+0x4cc>
    29fc:	000c      	movs	r4, r1
    29fe:	0017      	movs	r7, r2
    2a00:	4e0e      	ldr	r6, [pc, #56]	; (2a3c <__aeabi_dadd+0x618>)
    2a02:	e593      	b.n	252c <__aeabi_dadd+0x108>
    2a04:	000c      	movs	r4, r1
    2a06:	0017      	movs	r7, r2
    2a08:	e590      	b.n	252c <__aeabi_dadd+0x108>
    2a0a:	4656      	mov	r6, sl
    2a0c:	0023      	movs	r3, r4
    2a0e:	3e20      	subs	r6, #32
    2a10:	40f3      	lsrs	r3, r6
    2a12:	4699      	mov	r9, r3
    2a14:	4653      	mov	r3, sl
    2a16:	2b20      	cmp	r3, #32
    2a18:	d00e      	beq.n	2a38 <__aeabi_dadd+0x614>
    2a1a:	2340      	movs	r3, #64	; 0x40
    2a1c:	4656      	mov	r6, sl
    2a1e:	1b9b      	subs	r3, r3, r6
    2a20:	409c      	lsls	r4, r3
    2a22:	4327      	orrs	r7, r4
    2a24:	1e7c      	subs	r4, r7, #1
    2a26:	41a7      	sbcs	r7, r4
    2a28:	464b      	mov	r3, r9
    2a2a:	2400      	movs	r4, #0
    2a2c:	431f      	orrs	r7, r3
    2a2e:	e75f      	b.n	28f0 <__aeabi_dadd+0x4cc>
    2a30:	2400      	movs	r4, #0
    2a32:	e7d2      	b.n	29da <__aeabi_dadd+0x5b6>
    2a34:	0017      	movs	r7, r2
    2a36:	e5b2      	b.n	259e <__aeabi_dadd+0x17a>
    2a38:	2400      	movs	r4, #0
    2a3a:	e7f2      	b.n	2a22 <__aeabi_dadd+0x5fe>
    2a3c:	000007ff 	.word	0x000007ff
    2a40:	ff7fffff 	.word	0xff7fffff

00002a44 <__aeabi_ddiv>:
    2a44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a46:	4657      	mov	r7, sl
    2a48:	4645      	mov	r5, r8
    2a4a:	46de      	mov	lr, fp
    2a4c:	464e      	mov	r6, r9
    2a4e:	b5e0      	push	{r5, r6, r7, lr}
    2a50:	004c      	lsls	r4, r1, #1
    2a52:	030e      	lsls	r6, r1, #12
    2a54:	b087      	sub	sp, #28
    2a56:	4683      	mov	fp, r0
    2a58:	4692      	mov	sl, r2
    2a5a:	001d      	movs	r5, r3
    2a5c:	4680      	mov	r8, r0
    2a5e:	0b36      	lsrs	r6, r6, #12
    2a60:	0d64      	lsrs	r4, r4, #21
    2a62:	0fcf      	lsrs	r7, r1, #31
    2a64:	2c00      	cmp	r4, #0
    2a66:	d04f      	beq.n	2b08 <__aeabi_ddiv+0xc4>
    2a68:	4b6f      	ldr	r3, [pc, #444]	; (2c28 <__aeabi_ddiv+0x1e4>)
    2a6a:	429c      	cmp	r4, r3
    2a6c:	d035      	beq.n	2ada <__aeabi_ddiv+0x96>
    2a6e:	2380      	movs	r3, #128	; 0x80
    2a70:	0f42      	lsrs	r2, r0, #29
    2a72:	041b      	lsls	r3, r3, #16
    2a74:	00f6      	lsls	r6, r6, #3
    2a76:	4313      	orrs	r3, r2
    2a78:	4333      	orrs	r3, r6
    2a7a:	4699      	mov	r9, r3
    2a7c:	00c3      	lsls	r3, r0, #3
    2a7e:	4698      	mov	r8, r3
    2a80:	4b6a      	ldr	r3, [pc, #424]	; (2c2c <__aeabi_ddiv+0x1e8>)
    2a82:	2600      	movs	r6, #0
    2a84:	469c      	mov	ip, r3
    2a86:	2300      	movs	r3, #0
    2a88:	4464      	add	r4, ip
    2a8a:	9303      	str	r3, [sp, #12]
    2a8c:	032b      	lsls	r3, r5, #12
    2a8e:	0b1b      	lsrs	r3, r3, #12
    2a90:	469b      	mov	fp, r3
    2a92:	006b      	lsls	r3, r5, #1
    2a94:	0fed      	lsrs	r5, r5, #31
    2a96:	4650      	mov	r0, sl
    2a98:	0d5b      	lsrs	r3, r3, #21
    2a9a:	9501      	str	r5, [sp, #4]
    2a9c:	d05e      	beq.n	2b5c <__aeabi_ddiv+0x118>
    2a9e:	4a62      	ldr	r2, [pc, #392]	; (2c28 <__aeabi_ddiv+0x1e4>)
    2aa0:	4293      	cmp	r3, r2
    2aa2:	d053      	beq.n	2b4c <__aeabi_ddiv+0x108>
    2aa4:	465a      	mov	r2, fp
    2aa6:	00d1      	lsls	r1, r2, #3
    2aa8:	2280      	movs	r2, #128	; 0x80
    2aaa:	0f40      	lsrs	r0, r0, #29
    2aac:	0412      	lsls	r2, r2, #16
    2aae:	4302      	orrs	r2, r0
    2ab0:	430a      	orrs	r2, r1
    2ab2:	4693      	mov	fp, r2
    2ab4:	4652      	mov	r2, sl
    2ab6:	00d1      	lsls	r1, r2, #3
    2ab8:	4a5c      	ldr	r2, [pc, #368]	; (2c2c <__aeabi_ddiv+0x1e8>)
    2aba:	4694      	mov	ip, r2
    2abc:	2200      	movs	r2, #0
    2abe:	4463      	add	r3, ip
    2ac0:	0038      	movs	r0, r7
    2ac2:	4068      	eors	r0, r5
    2ac4:	4684      	mov	ip, r0
    2ac6:	9002      	str	r0, [sp, #8]
    2ac8:	1ae4      	subs	r4, r4, r3
    2aca:	4316      	orrs	r6, r2
    2acc:	2e0f      	cmp	r6, #15
    2ace:	d900      	bls.n	2ad2 <__aeabi_ddiv+0x8e>
    2ad0:	e0b4      	b.n	2c3c <__aeabi_ddiv+0x1f8>
    2ad2:	4b57      	ldr	r3, [pc, #348]	; (2c30 <__aeabi_ddiv+0x1ec>)
    2ad4:	00b6      	lsls	r6, r6, #2
    2ad6:	599b      	ldr	r3, [r3, r6]
    2ad8:	469f      	mov	pc, r3
    2ada:	0003      	movs	r3, r0
    2adc:	4333      	orrs	r3, r6
    2ade:	4699      	mov	r9, r3
    2ae0:	d16c      	bne.n	2bbc <__aeabi_ddiv+0x178>
    2ae2:	2300      	movs	r3, #0
    2ae4:	4698      	mov	r8, r3
    2ae6:	3302      	adds	r3, #2
    2ae8:	2608      	movs	r6, #8
    2aea:	9303      	str	r3, [sp, #12]
    2aec:	e7ce      	b.n	2a8c <__aeabi_ddiv+0x48>
    2aee:	46cb      	mov	fp, r9
    2af0:	4641      	mov	r1, r8
    2af2:	9a03      	ldr	r2, [sp, #12]
    2af4:	9701      	str	r7, [sp, #4]
    2af6:	2a02      	cmp	r2, #2
    2af8:	d165      	bne.n	2bc6 <__aeabi_ddiv+0x182>
    2afa:	9b01      	ldr	r3, [sp, #4]
    2afc:	4c4a      	ldr	r4, [pc, #296]	; (2c28 <__aeabi_ddiv+0x1e4>)
    2afe:	469c      	mov	ip, r3
    2b00:	2300      	movs	r3, #0
    2b02:	2200      	movs	r2, #0
    2b04:	4698      	mov	r8, r3
    2b06:	e06b      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2b08:	0003      	movs	r3, r0
    2b0a:	4333      	orrs	r3, r6
    2b0c:	4699      	mov	r9, r3
    2b0e:	d04e      	beq.n	2bae <__aeabi_ddiv+0x16a>
    2b10:	2e00      	cmp	r6, #0
    2b12:	d100      	bne.n	2b16 <__aeabi_ddiv+0xd2>
    2b14:	e1bc      	b.n	2e90 <__aeabi_ddiv+0x44c>
    2b16:	0030      	movs	r0, r6
    2b18:	f001 f8ca 	bl	3cb0 <__clzsi2>
    2b1c:	0003      	movs	r3, r0
    2b1e:	3b0b      	subs	r3, #11
    2b20:	2b1c      	cmp	r3, #28
    2b22:	dd00      	ble.n	2b26 <__aeabi_ddiv+0xe2>
    2b24:	e1ac      	b.n	2e80 <__aeabi_ddiv+0x43c>
    2b26:	221d      	movs	r2, #29
    2b28:	1ad3      	subs	r3, r2, r3
    2b2a:	465a      	mov	r2, fp
    2b2c:	0001      	movs	r1, r0
    2b2e:	40da      	lsrs	r2, r3
    2b30:	3908      	subs	r1, #8
    2b32:	408e      	lsls	r6, r1
    2b34:	0013      	movs	r3, r2
    2b36:	4333      	orrs	r3, r6
    2b38:	4699      	mov	r9, r3
    2b3a:	465b      	mov	r3, fp
    2b3c:	408b      	lsls	r3, r1
    2b3e:	4698      	mov	r8, r3
    2b40:	2300      	movs	r3, #0
    2b42:	4c3c      	ldr	r4, [pc, #240]	; (2c34 <__aeabi_ddiv+0x1f0>)
    2b44:	2600      	movs	r6, #0
    2b46:	1a24      	subs	r4, r4, r0
    2b48:	9303      	str	r3, [sp, #12]
    2b4a:	e79f      	b.n	2a8c <__aeabi_ddiv+0x48>
    2b4c:	4651      	mov	r1, sl
    2b4e:	465a      	mov	r2, fp
    2b50:	4311      	orrs	r1, r2
    2b52:	d129      	bne.n	2ba8 <__aeabi_ddiv+0x164>
    2b54:	2200      	movs	r2, #0
    2b56:	4693      	mov	fp, r2
    2b58:	3202      	adds	r2, #2
    2b5a:	e7b1      	b.n	2ac0 <__aeabi_ddiv+0x7c>
    2b5c:	4659      	mov	r1, fp
    2b5e:	4301      	orrs	r1, r0
    2b60:	d01e      	beq.n	2ba0 <__aeabi_ddiv+0x15c>
    2b62:	465b      	mov	r3, fp
    2b64:	2b00      	cmp	r3, #0
    2b66:	d100      	bne.n	2b6a <__aeabi_ddiv+0x126>
    2b68:	e19e      	b.n	2ea8 <__aeabi_ddiv+0x464>
    2b6a:	4658      	mov	r0, fp
    2b6c:	f001 f8a0 	bl	3cb0 <__clzsi2>
    2b70:	0003      	movs	r3, r0
    2b72:	3b0b      	subs	r3, #11
    2b74:	2b1c      	cmp	r3, #28
    2b76:	dd00      	ble.n	2b7a <__aeabi_ddiv+0x136>
    2b78:	e18f      	b.n	2e9a <__aeabi_ddiv+0x456>
    2b7a:	0002      	movs	r2, r0
    2b7c:	4659      	mov	r1, fp
    2b7e:	3a08      	subs	r2, #8
    2b80:	4091      	lsls	r1, r2
    2b82:	468b      	mov	fp, r1
    2b84:	211d      	movs	r1, #29
    2b86:	1acb      	subs	r3, r1, r3
    2b88:	4651      	mov	r1, sl
    2b8a:	40d9      	lsrs	r1, r3
    2b8c:	000b      	movs	r3, r1
    2b8e:	4659      	mov	r1, fp
    2b90:	430b      	orrs	r3, r1
    2b92:	4651      	mov	r1, sl
    2b94:	469b      	mov	fp, r3
    2b96:	4091      	lsls	r1, r2
    2b98:	4b26      	ldr	r3, [pc, #152]	; (2c34 <__aeabi_ddiv+0x1f0>)
    2b9a:	2200      	movs	r2, #0
    2b9c:	1a1b      	subs	r3, r3, r0
    2b9e:	e78f      	b.n	2ac0 <__aeabi_ddiv+0x7c>
    2ba0:	2300      	movs	r3, #0
    2ba2:	2201      	movs	r2, #1
    2ba4:	469b      	mov	fp, r3
    2ba6:	e78b      	b.n	2ac0 <__aeabi_ddiv+0x7c>
    2ba8:	4651      	mov	r1, sl
    2baa:	2203      	movs	r2, #3
    2bac:	e788      	b.n	2ac0 <__aeabi_ddiv+0x7c>
    2bae:	2300      	movs	r3, #0
    2bb0:	4698      	mov	r8, r3
    2bb2:	3301      	adds	r3, #1
    2bb4:	2604      	movs	r6, #4
    2bb6:	2400      	movs	r4, #0
    2bb8:	9303      	str	r3, [sp, #12]
    2bba:	e767      	b.n	2a8c <__aeabi_ddiv+0x48>
    2bbc:	2303      	movs	r3, #3
    2bbe:	46b1      	mov	r9, r6
    2bc0:	9303      	str	r3, [sp, #12]
    2bc2:	260c      	movs	r6, #12
    2bc4:	e762      	b.n	2a8c <__aeabi_ddiv+0x48>
    2bc6:	2a03      	cmp	r2, #3
    2bc8:	d100      	bne.n	2bcc <__aeabi_ddiv+0x188>
    2bca:	e25c      	b.n	3086 <__aeabi_ddiv+0x642>
    2bcc:	9b01      	ldr	r3, [sp, #4]
    2bce:	2a01      	cmp	r2, #1
    2bd0:	d000      	beq.n	2bd4 <__aeabi_ddiv+0x190>
    2bd2:	e1e4      	b.n	2f9e <__aeabi_ddiv+0x55a>
    2bd4:	4013      	ands	r3, r2
    2bd6:	469c      	mov	ip, r3
    2bd8:	2300      	movs	r3, #0
    2bda:	2400      	movs	r4, #0
    2bdc:	2200      	movs	r2, #0
    2bde:	4698      	mov	r8, r3
    2be0:	2100      	movs	r1, #0
    2be2:	0312      	lsls	r2, r2, #12
    2be4:	0b13      	lsrs	r3, r2, #12
    2be6:	0d0a      	lsrs	r2, r1, #20
    2be8:	0512      	lsls	r2, r2, #20
    2bea:	431a      	orrs	r2, r3
    2bec:	0523      	lsls	r3, r4, #20
    2bee:	4c12      	ldr	r4, [pc, #72]	; (2c38 <__aeabi_ddiv+0x1f4>)
    2bf0:	4640      	mov	r0, r8
    2bf2:	4022      	ands	r2, r4
    2bf4:	4313      	orrs	r3, r2
    2bf6:	4662      	mov	r2, ip
    2bf8:	005b      	lsls	r3, r3, #1
    2bfa:	07d2      	lsls	r2, r2, #31
    2bfc:	085b      	lsrs	r3, r3, #1
    2bfe:	4313      	orrs	r3, r2
    2c00:	0019      	movs	r1, r3
    2c02:	b007      	add	sp, #28
    2c04:	bc3c      	pop	{r2, r3, r4, r5}
    2c06:	4690      	mov	r8, r2
    2c08:	4699      	mov	r9, r3
    2c0a:	46a2      	mov	sl, r4
    2c0c:	46ab      	mov	fp, r5
    2c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c10:	2300      	movs	r3, #0
    2c12:	2280      	movs	r2, #128	; 0x80
    2c14:	469c      	mov	ip, r3
    2c16:	0312      	lsls	r2, r2, #12
    2c18:	4698      	mov	r8, r3
    2c1a:	4c03      	ldr	r4, [pc, #12]	; (2c28 <__aeabi_ddiv+0x1e4>)
    2c1c:	e7e0      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2c1e:	2300      	movs	r3, #0
    2c20:	4c01      	ldr	r4, [pc, #4]	; (2c28 <__aeabi_ddiv+0x1e4>)
    2c22:	2200      	movs	r2, #0
    2c24:	4698      	mov	r8, r3
    2c26:	e7db      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2c28:	000007ff 	.word	0x000007ff
    2c2c:	fffffc01 	.word	0xfffffc01
    2c30:	00003df0 	.word	0x00003df0
    2c34:	fffffc0d 	.word	0xfffffc0d
    2c38:	800fffff 	.word	0x800fffff
    2c3c:	45d9      	cmp	r9, fp
    2c3e:	d900      	bls.n	2c42 <__aeabi_ddiv+0x1fe>
    2c40:	e139      	b.n	2eb6 <__aeabi_ddiv+0x472>
    2c42:	d100      	bne.n	2c46 <__aeabi_ddiv+0x202>
    2c44:	e134      	b.n	2eb0 <__aeabi_ddiv+0x46c>
    2c46:	2300      	movs	r3, #0
    2c48:	4646      	mov	r6, r8
    2c4a:	464d      	mov	r5, r9
    2c4c:	469a      	mov	sl, r3
    2c4e:	3c01      	subs	r4, #1
    2c50:	465b      	mov	r3, fp
    2c52:	0e0a      	lsrs	r2, r1, #24
    2c54:	021b      	lsls	r3, r3, #8
    2c56:	431a      	orrs	r2, r3
    2c58:	020b      	lsls	r3, r1, #8
    2c5a:	0c17      	lsrs	r7, r2, #16
    2c5c:	9303      	str	r3, [sp, #12]
    2c5e:	0413      	lsls	r3, r2, #16
    2c60:	0c1b      	lsrs	r3, r3, #16
    2c62:	0039      	movs	r1, r7
    2c64:	0028      	movs	r0, r5
    2c66:	4690      	mov	r8, r2
    2c68:	9301      	str	r3, [sp, #4]
    2c6a:	f7ff fb4f 	bl	230c <__udivsi3>
    2c6e:	0002      	movs	r2, r0
    2c70:	9b01      	ldr	r3, [sp, #4]
    2c72:	4683      	mov	fp, r0
    2c74:	435a      	muls	r2, r3
    2c76:	0028      	movs	r0, r5
    2c78:	0039      	movs	r1, r7
    2c7a:	4691      	mov	r9, r2
    2c7c:	f7ff fbcc 	bl	2418 <__aeabi_uidivmod>
    2c80:	0c35      	lsrs	r5, r6, #16
    2c82:	0409      	lsls	r1, r1, #16
    2c84:	430d      	orrs	r5, r1
    2c86:	45a9      	cmp	r9, r5
    2c88:	d90d      	bls.n	2ca6 <__aeabi_ddiv+0x262>
    2c8a:	465b      	mov	r3, fp
    2c8c:	4445      	add	r5, r8
    2c8e:	3b01      	subs	r3, #1
    2c90:	45a8      	cmp	r8, r5
    2c92:	d900      	bls.n	2c96 <__aeabi_ddiv+0x252>
    2c94:	e13a      	b.n	2f0c <__aeabi_ddiv+0x4c8>
    2c96:	45a9      	cmp	r9, r5
    2c98:	d800      	bhi.n	2c9c <__aeabi_ddiv+0x258>
    2c9a:	e137      	b.n	2f0c <__aeabi_ddiv+0x4c8>
    2c9c:	2302      	movs	r3, #2
    2c9e:	425b      	negs	r3, r3
    2ca0:	469c      	mov	ip, r3
    2ca2:	4445      	add	r5, r8
    2ca4:	44e3      	add	fp, ip
    2ca6:	464b      	mov	r3, r9
    2ca8:	1aeb      	subs	r3, r5, r3
    2caa:	0039      	movs	r1, r7
    2cac:	0018      	movs	r0, r3
    2cae:	9304      	str	r3, [sp, #16]
    2cb0:	f7ff fb2c 	bl	230c <__udivsi3>
    2cb4:	9b01      	ldr	r3, [sp, #4]
    2cb6:	0005      	movs	r5, r0
    2cb8:	4343      	muls	r3, r0
    2cba:	0039      	movs	r1, r7
    2cbc:	9804      	ldr	r0, [sp, #16]
    2cbe:	4699      	mov	r9, r3
    2cc0:	f7ff fbaa 	bl	2418 <__aeabi_uidivmod>
    2cc4:	0433      	lsls	r3, r6, #16
    2cc6:	0409      	lsls	r1, r1, #16
    2cc8:	0c1b      	lsrs	r3, r3, #16
    2cca:	430b      	orrs	r3, r1
    2ccc:	4599      	cmp	r9, r3
    2cce:	d909      	bls.n	2ce4 <__aeabi_ddiv+0x2a0>
    2cd0:	4443      	add	r3, r8
    2cd2:	1e6a      	subs	r2, r5, #1
    2cd4:	4598      	cmp	r8, r3
    2cd6:	d900      	bls.n	2cda <__aeabi_ddiv+0x296>
    2cd8:	e11a      	b.n	2f10 <__aeabi_ddiv+0x4cc>
    2cda:	4599      	cmp	r9, r3
    2cdc:	d800      	bhi.n	2ce0 <__aeabi_ddiv+0x29c>
    2cde:	e117      	b.n	2f10 <__aeabi_ddiv+0x4cc>
    2ce0:	3d02      	subs	r5, #2
    2ce2:	4443      	add	r3, r8
    2ce4:	464a      	mov	r2, r9
    2ce6:	1a9b      	subs	r3, r3, r2
    2ce8:	465a      	mov	r2, fp
    2cea:	0412      	lsls	r2, r2, #16
    2cec:	432a      	orrs	r2, r5
    2cee:	9903      	ldr	r1, [sp, #12]
    2cf0:	4693      	mov	fp, r2
    2cf2:	0c10      	lsrs	r0, r2, #16
    2cf4:	0c0a      	lsrs	r2, r1, #16
    2cf6:	4691      	mov	r9, r2
    2cf8:	0409      	lsls	r1, r1, #16
    2cfa:	465a      	mov	r2, fp
    2cfc:	0c09      	lsrs	r1, r1, #16
    2cfe:	464e      	mov	r6, r9
    2d00:	000d      	movs	r5, r1
    2d02:	0412      	lsls	r2, r2, #16
    2d04:	0c12      	lsrs	r2, r2, #16
    2d06:	4345      	muls	r5, r0
    2d08:	9105      	str	r1, [sp, #20]
    2d0a:	4351      	muls	r1, r2
    2d0c:	4372      	muls	r2, r6
    2d0e:	4370      	muls	r0, r6
    2d10:	1952      	adds	r2, r2, r5
    2d12:	0c0e      	lsrs	r6, r1, #16
    2d14:	18b2      	adds	r2, r6, r2
    2d16:	4295      	cmp	r5, r2
    2d18:	d903      	bls.n	2d22 <__aeabi_ddiv+0x2de>
    2d1a:	2580      	movs	r5, #128	; 0x80
    2d1c:	026d      	lsls	r5, r5, #9
    2d1e:	46ac      	mov	ip, r5
    2d20:	4460      	add	r0, ip
    2d22:	0c15      	lsrs	r5, r2, #16
    2d24:	0409      	lsls	r1, r1, #16
    2d26:	0412      	lsls	r2, r2, #16
    2d28:	0c09      	lsrs	r1, r1, #16
    2d2a:	1828      	adds	r0, r5, r0
    2d2c:	1852      	adds	r2, r2, r1
    2d2e:	4283      	cmp	r3, r0
    2d30:	d200      	bcs.n	2d34 <__aeabi_ddiv+0x2f0>
    2d32:	e0ce      	b.n	2ed2 <__aeabi_ddiv+0x48e>
    2d34:	d100      	bne.n	2d38 <__aeabi_ddiv+0x2f4>
    2d36:	e0c8      	b.n	2eca <__aeabi_ddiv+0x486>
    2d38:	1a1d      	subs	r5, r3, r0
    2d3a:	4653      	mov	r3, sl
    2d3c:	1a9e      	subs	r6, r3, r2
    2d3e:	45b2      	cmp	sl, r6
    2d40:	4192      	sbcs	r2, r2
    2d42:	4252      	negs	r2, r2
    2d44:	1aab      	subs	r3, r5, r2
    2d46:	469a      	mov	sl, r3
    2d48:	4598      	cmp	r8, r3
    2d4a:	d100      	bne.n	2d4e <__aeabi_ddiv+0x30a>
    2d4c:	e117      	b.n	2f7e <__aeabi_ddiv+0x53a>
    2d4e:	0039      	movs	r1, r7
    2d50:	0018      	movs	r0, r3
    2d52:	f7ff fadb 	bl	230c <__udivsi3>
    2d56:	9b01      	ldr	r3, [sp, #4]
    2d58:	0005      	movs	r5, r0
    2d5a:	4343      	muls	r3, r0
    2d5c:	0039      	movs	r1, r7
    2d5e:	4650      	mov	r0, sl
    2d60:	9304      	str	r3, [sp, #16]
    2d62:	f7ff fb59 	bl	2418 <__aeabi_uidivmod>
    2d66:	9804      	ldr	r0, [sp, #16]
    2d68:	040b      	lsls	r3, r1, #16
    2d6a:	0c31      	lsrs	r1, r6, #16
    2d6c:	4319      	orrs	r1, r3
    2d6e:	4288      	cmp	r0, r1
    2d70:	d909      	bls.n	2d86 <__aeabi_ddiv+0x342>
    2d72:	4441      	add	r1, r8
    2d74:	1e6b      	subs	r3, r5, #1
    2d76:	4588      	cmp	r8, r1
    2d78:	d900      	bls.n	2d7c <__aeabi_ddiv+0x338>
    2d7a:	e107      	b.n	2f8c <__aeabi_ddiv+0x548>
    2d7c:	4288      	cmp	r0, r1
    2d7e:	d800      	bhi.n	2d82 <__aeabi_ddiv+0x33e>
    2d80:	e104      	b.n	2f8c <__aeabi_ddiv+0x548>
    2d82:	3d02      	subs	r5, #2
    2d84:	4441      	add	r1, r8
    2d86:	9b04      	ldr	r3, [sp, #16]
    2d88:	1acb      	subs	r3, r1, r3
    2d8a:	0018      	movs	r0, r3
    2d8c:	0039      	movs	r1, r7
    2d8e:	9304      	str	r3, [sp, #16]
    2d90:	f7ff fabc 	bl	230c <__udivsi3>
    2d94:	9b01      	ldr	r3, [sp, #4]
    2d96:	4682      	mov	sl, r0
    2d98:	4343      	muls	r3, r0
    2d9a:	0039      	movs	r1, r7
    2d9c:	9804      	ldr	r0, [sp, #16]
    2d9e:	9301      	str	r3, [sp, #4]
    2da0:	f7ff fb3a 	bl	2418 <__aeabi_uidivmod>
    2da4:	9801      	ldr	r0, [sp, #4]
    2da6:	040b      	lsls	r3, r1, #16
    2da8:	0431      	lsls	r1, r6, #16
    2daa:	0c09      	lsrs	r1, r1, #16
    2dac:	4319      	orrs	r1, r3
    2dae:	4288      	cmp	r0, r1
    2db0:	d90d      	bls.n	2dce <__aeabi_ddiv+0x38a>
    2db2:	4653      	mov	r3, sl
    2db4:	4441      	add	r1, r8
    2db6:	3b01      	subs	r3, #1
    2db8:	4588      	cmp	r8, r1
    2dba:	d900      	bls.n	2dbe <__aeabi_ddiv+0x37a>
    2dbc:	e0e8      	b.n	2f90 <__aeabi_ddiv+0x54c>
    2dbe:	4288      	cmp	r0, r1
    2dc0:	d800      	bhi.n	2dc4 <__aeabi_ddiv+0x380>
    2dc2:	e0e5      	b.n	2f90 <__aeabi_ddiv+0x54c>
    2dc4:	2302      	movs	r3, #2
    2dc6:	425b      	negs	r3, r3
    2dc8:	469c      	mov	ip, r3
    2dca:	4441      	add	r1, r8
    2dcc:	44e2      	add	sl, ip
    2dce:	9b01      	ldr	r3, [sp, #4]
    2dd0:	042d      	lsls	r5, r5, #16
    2dd2:	1ace      	subs	r6, r1, r3
    2dd4:	4651      	mov	r1, sl
    2dd6:	4329      	orrs	r1, r5
    2dd8:	9d05      	ldr	r5, [sp, #20]
    2dda:	464f      	mov	r7, r9
    2ddc:	002a      	movs	r2, r5
    2dde:	040b      	lsls	r3, r1, #16
    2de0:	0c08      	lsrs	r0, r1, #16
    2de2:	0c1b      	lsrs	r3, r3, #16
    2de4:	435a      	muls	r2, r3
    2de6:	4345      	muls	r5, r0
    2de8:	437b      	muls	r3, r7
    2dea:	4378      	muls	r0, r7
    2dec:	195b      	adds	r3, r3, r5
    2dee:	0c17      	lsrs	r7, r2, #16
    2df0:	18fb      	adds	r3, r7, r3
    2df2:	429d      	cmp	r5, r3
    2df4:	d903      	bls.n	2dfe <__aeabi_ddiv+0x3ba>
    2df6:	2580      	movs	r5, #128	; 0x80
    2df8:	026d      	lsls	r5, r5, #9
    2dfa:	46ac      	mov	ip, r5
    2dfc:	4460      	add	r0, ip
    2dfe:	0c1d      	lsrs	r5, r3, #16
    2e00:	0412      	lsls	r2, r2, #16
    2e02:	041b      	lsls	r3, r3, #16
    2e04:	0c12      	lsrs	r2, r2, #16
    2e06:	1828      	adds	r0, r5, r0
    2e08:	189b      	adds	r3, r3, r2
    2e0a:	4286      	cmp	r6, r0
    2e0c:	d200      	bcs.n	2e10 <__aeabi_ddiv+0x3cc>
    2e0e:	e093      	b.n	2f38 <__aeabi_ddiv+0x4f4>
    2e10:	d100      	bne.n	2e14 <__aeabi_ddiv+0x3d0>
    2e12:	e08e      	b.n	2f32 <__aeabi_ddiv+0x4ee>
    2e14:	2301      	movs	r3, #1
    2e16:	4319      	orrs	r1, r3
    2e18:	4ba0      	ldr	r3, [pc, #640]	; (309c <__aeabi_ddiv+0x658>)
    2e1a:	18e3      	adds	r3, r4, r3
    2e1c:	2b00      	cmp	r3, #0
    2e1e:	dc00      	bgt.n	2e22 <__aeabi_ddiv+0x3de>
    2e20:	e099      	b.n	2f56 <__aeabi_ddiv+0x512>
    2e22:	074a      	lsls	r2, r1, #29
    2e24:	d000      	beq.n	2e28 <__aeabi_ddiv+0x3e4>
    2e26:	e09e      	b.n	2f66 <__aeabi_ddiv+0x522>
    2e28:	465a      	mov	r2, fp
    2e2a:	01d2      	lsls	r2, r2, #7
    2e2c:	d506      	bpl.n	2e3c <__aeabi_ddiv+0x3f8>
    2e2e:	465a      	mov	r2, fp
    2e30:	4b9b      	ldr	r3, [pc, #620]	; (30a0 <__aeabi_ddiv+0x65c>)
    2e32:	401a      	ands	r2, r3
    2e34:	2380      	movs	r3, #128	; 0x80
    2e36:	4693      	mov	fp, r2
    2e38:	00db      	lsls	r3, r3, #3
    2e3a:	18e3      	adds	r3, r4, r3
    2e3c:	4a99      	ldr	r2, [pc, #612]	; (30a4 <__aeabi_ddiv+0x660>)
    2e3e:	4293      	cmp	r3, r2
    2e40:	dd68      	ble.n	2f14 <__aeabi_ddiv+0x4d0>
    2e42:	2301      	movs	r3, #1
    2e44:	9a02      	ldr	r2, [sp, #8]
    2e46:	4c98      	ldr	r4, [pc, #608]	; (30a8 <__aeabi_ddiv+0x664>)
    2e48:	401a      	ands	r2, r3
    2e4a:	2300      	movs	r3, #0
    2e4c:	4694      	mov	ip, r2
    2e4e:	4698      	mov	r8, r3
    2e50:	2200      	movs	r2, #0
    2e52:	e6c5      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2e54:	2280      	movs	r2, #128	; 0x80
    2e56:	464b      	mov	r3, r9
    2e58:	0312      	lsls	r2, r2, #12
    2e5a:	4213      	tst	r3, r2
    2e5c:	d00a      	beq.n	2e74 <__aeabi_ddiv+0x430>
    2e5e:	465b      	mov	r3, fp
    2e60:	4213      	tst	r3, r2
    2e62:	d106      	bne.n	2e72 <__aeabi_ddiv+0x42e>
    2e64:	431a      	orrs	r2, r3
    2e66:	0312      	lsls	r2, r2, #12
    2e68:	0b12      	lsrs	r2, r2, #12
    2e6a:	46ac      	mov	ip, r5
    2e6c:	4688      	mov	r8, r1
    2e6e:	4c8e      	ldr	r4, [pc, #568]	; (30a8 <__aeabi_ddiv+0x664>)
    2e70:	e6b6      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2e72:	464b      	mov	r3, r9
    2e74:	431a      	orrs	r2, r3
    2e76:	0312      	lsls	r2, r2, #12
    2e78:	0b12      	lsrs	r2, r2, #12
    2e7a:	46bc      	mov	ip, r7
    2e7c:	4c8a      	ldr	r4, [pc, #552]	; (30a8 <__aeabi_ddiv+0x664>)
    2e7e:	e6af      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2e80:	0003      	movs	r3, r0
    2e82:	465a      	mov	r2, fp
    2e84:	3b28      	subs	r3, #40	; 0x28
    2e86:	409a      	lsls	r2, r3
    2e88:	2300      	movs	r3, #0
    2e8a:	4691      	mov	r9, r2
    2e8c:	4698      	mov	r8, r3
    2e8e:	e657      	b.n	2b40 <__aeabi_ddiv+0xfc>
    2e90:	4658      	mov	r0, fp
    2e92:	f000 ff0d 	bl	3cb0 <__clzsi2>
    2e96:	3020      	adds	r0, #32
    2e98:	e640      	b.n	2b1c <__aeabi_ddiv+0xd8>
    2e9a:	0003      	movs	r3, r0
    2e9c:	4652      	mov	r2, sl
    2e9e:	3b28      	subs	r3, #40	; 0x28
    2ea0:	409a      	lsls	r2, r3
    2ea2:	2100      	movs	r1, #0
    2ea4:	4693      	mov	fp, r2
    2ea6:	e677      	b.n	2b98 <__aeabi_ddiv+0x154>
    2ea8:	f000 ff02 	bl	3cb0 <__clzsi2>
    2eac:	3020      	adds	r0, #32
    2eae:	e65f      	b.n	2b70 <__aeabi_ddiv+0x12c>
    2eb0:	4588      	cmp	r8, r1
    2eb2:	d200      	bcs.n	2eb6 <__aeabi_ddiv+0x472>
    2eb4:	e6c7      	b.n	2c46 <__aeabi_ddiv+0x202>
    2eb6:	464b      	mov	r3, r9
    2eb8:	07de      	lsls	r6, r3, #31
    2eba:	085d      	lsrs	r5, r3, #1
    2ebc:	4643      	mov	r3, r8
    2ebe:	085b      	lsrs	r3, r3, #1
    2ec0:	431e      	orrs	r6, r3
    2ec2:	4643      	mov	r3, r8
    2ec4:	07db      	lsls	r3, r3, #31
    2ec6:	469a      	mov	sl, r3
    2ec8:	e6c2      	b.n	2c50 <__aeabi_ddiv+0x20c>
    2eca:	2500      	movs	r5, #0
    2ecc:	4592      	cmp	sl, r2
    2ece:	d300      	bcc.n	2ed2 <__aeabi_ddiv+0x48e>
    2ed0:	e733      	b.n	2d3a <__aeabi_ddiv+0x2f6>
    2ed2:	9e03      	ldr	r6, [sp, #12]
    2ed4:	4659      	mov	r1, fp
    2ed6:	46b4      	mov	ip, r6
    2ed8:	44e2      	add	sl, ip
    2eda:	45b2      	cmp	sl, r6
    2edc:	41ad      	sbcs	r5, r5
    2ede:	426d      	negs	r5, r5
    2ee0:	4445      	add	r5, r8
    2ee2:	18eb      	adds	r3, r5, r3
    2ee4:	3901      	subs	r1, #1
    2ee6:	4598      	cmp	r8, r3
    2ee8:	d207      	bcs.n	2efa <__aeabi_ddiv+0x4b6>
    2eea:	4298      	cmp	r0, r3
    2eec:	d900      	bls.n	2ef0 <__aeabi_ddiv+0x4ac>
    2eee:	e07f      	b.n	2ff0 <__aeabi_ddiv+0x5ac>
    2ef0:	d100      	bne.n	2ef4 <__aeabi_ddiv+0x4b0>
    2ef2:	e0bc      	b.n	306e <__aeabi_ddiv+0x62a>
    2ef4:	1a1d      	subs	r5, r3, r0
    2ef6:	468b      	mov	fp, r1
    2ef8:	e71f      	b.n	2d3a <__aeabi_ddiv+0x2f6>
    2efa:	4598      	cmp	r8, r3
    2efc:	d1fa      	bne.n	2ef4 <__aeabi_ddiv+0x4b0>
    2efe:	9d03      	ldr	r5, [sp, #12]
    2f00:	4555      	cmp	r5, sl
    2f02:	d9f2      	bls.n	2eea <__aeabi_ddiv+0x4a6>
    2f04:	4643      	mov	r3, r8
    2f06:	468b      	mov	fp, r1
    2f08:	1a1d      	subs	r5, r3, r0
    2f0a:	e716      	b.n	2d3a <__aeabi_ddiv+0x2f6>
    2f0c:	469b      	mov	fp, r3
    2f0e:	e6ca      	b.n	2ca6 <__aeabi_ddiv+0x262>
    2f10:	0015      	movs	r5, r2
    2f12:	e6e7      	b.n	2ce4 <__aeabi_ddiv+0x2a0>
    2f14:	465a      	mov	r2, fp
    2f16:	08c9      	lsrs	r1, r1, #3
    2f18:	0752      	lsls	r2, r2, #29
    2f1a:	430a      	orrs	r2, r1
    2f1c:	055b      	lsls	r3, r3, #21
    2f1e:	4690      	mov	r8, r2
    2f20:	0d5c      	lsrs	r4, r3, #21
    2f22:	465a      	mov	r2, fp
    2f24:	2301      	movs	r3, #1
    2f26:	9902      	ldr	r1, [sp, #8]
    2f28:	0252      	lsls	r2, r2, #9
    2f2a:	4019      	ands	r1, r3
    2f2c:	0b12      	lsrs	r2, r2, #12
    2f2e:	468c      	mov	ip, r1
    2f30:	e656      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2f32:	2b00      	cmp	r3, #0
    2f34:	d100      	bne.n	2f38 <__aeabi_ddiv+0x4f4>
    2f36:	e76f      	b.n	2e18 <__aeabi_ddiv+0x3d4>
    2f38:	4446      	add	r6, r8
    2f3a:	1e4a      	subs	r2, r1, #1
    2f3c:	45b0      	cmp	r8, r6
    2f3e:	d929      	bls.n	2f94 <__aeabi_ddiv+0x550>
    2f40:	0011      	movs	r1, r2
    2f42:	4286      	cmp	r6, r0
    2f44:	d000      	beq.n	2f48 <__aeabi_ddiv+0x504>
    2f46:	e765      	b.n	2e14 <__aeabi_ddiv+0x3d0>
    2f48:	9a03      	ldr	r2, [sp, #12]
    2f4a:	4293      	cmp	r3, r2
    2f4c:	d000      	beq.n	2f50 <__aeabi_ddiv+0x50c>
    2f4e:	e761      	b.n	2e14 <__aeabi_ddiv+0x3d0>
    2f50:	e762      	b.n	2e18 <__aeabi_ddiv+0x3d4>
    2f52:	2101      	movs	r1, #1
    2f54:	4249      	negs	r1, r1
    2f56:	2001      	movs	r0, #1
    2f58:	1ac2      	subs	r2, r0, r3
    2f5a:	2a38      	cmp	r2, #56	; 0x38
    2f5c:	dd21      	ble.n	2fa2 <__aeabi_ddiv+0x55e>
    2f5e:	9b02      	ldr	r3, [sp, #8]
    2f60:	4003      	ands	r3, r0
    2f62:	469c      	mov	ip, r3
    2f64:	e638      	b.n	2bd8 <__aeabi_ddiv+0x194>
    2f66:	220f      	movs	r2, #15
    2f68:	400a      	ands	r2, r1
    2f6a:	2a04      	cmp	r2, #4
    2f6c:	d100      	bne.n	2f70 <__aeabi_ddiv+0x52c>
    2f6e:	e75b      	b.n	2e28 <__aeabi_ddiv+0x3e4>
    2f70:	000a      	movs	r2, r1
    2f72:	1d11      	adds	r1, r2, #4
    2f74:	4291      	cmp	r1, r2
    2f76:	4192      	sbcs	r2, r2
    2f78:	4252      	negs	r2, r2
    2f7a:	4493      	add	fp, r2
    2f7c:	e754      	b.n	2e28 <__aeabi_ddiv+0x3e4>
    2f7e:	4b47      	ldr	r3, [pc, #284]	; (309c <__aeabi_ddiv+0x658>)
    2f80:	18e3      	adds	r3, r4, r3
    2f82:	2b00      	cmp	r3, #0
    2f84:	dde5      	ble.n	2f52 <__aeabi_ddiv+0x50e>
    2f86:	2201      	movs	r2, #1
    2f88:	4252      	negs	r2, r2
    2f8a:	e7f2      	b.n	2f72 <__aeabi_ddiv+0x52e>
    2f8c:	001d      	movs	r5, r3
    2f8e:	e6fa      	b.n	2d86 <__aeabi_ddiv+0x342>
    2f90:	469a      	mov	sl, r3
    2f92:	e71c      	b.n	2dce <__aeabi_ddiv+0x38a>
    2f94:	42b0      	cmp	r0, r6
    2f96:	d839      	bhi.n	300c <__aeabi_ddiv+0x5c8>
    2f98:	d06e      	beq.n	3078 <__aeabi_ddiv+0x634>
    2f9a:	0011      	movs	r1, r2
    2f9c:	e73a      	b.n	2e14 <__aeabi_ddiv+0x3d0>
    2f9e:	9302      	str	r3, [sp, #8]
    2fa0:	e73a      	b.n	2e18 <__aeabi_ddiv+0x3d4>
    2fa2:	2a1f      	cmp	r2, #31
    2fa4:	dc3c      	bgt.n	3020 <__aeabi_ddiv+0x5dc>
    2fa6:	2320      	movs	r3, #32
    2fa8:	1a9b      	subs	r3, r3, r2
    2faa:	000c      	movs	r4, r1
    2fac:	4658      	mov	r0, fp
    2fae:	4099      	lsls	r1, r3
    2fb0:	4098      	lsls	r0, r3
    2fb2:	1e4b      	subs	r3, r1, #1
    2fb4:	4199      	sbcs	r1, r3
    2fb6:	465b      	mov	r3, fp
    2fb8:	40d4      	lsrs	r4, r2
    2fba:	40d3      	lsrs	r3, r2
    2fbc:	4320      	orrs	r0, r4
    2fbe:	4308      	orrs	r0, r1
    2fc0:	001a      	movs	r2, r3
    2fc2:	0743      	lsls	r3, r0, #29
    2fc4:	d009      	beq.n	2fda <__aeabi_ddiv+0x596>
    2fc6:	230f      	movs	r3, #15
    2fc8:	4003      	ands	r3, r0
    2fca:	2b04      	cmp	r3, #4
    2fcc:	d005      	beq.n	2fda <__aeabi_ddiv+0x596>
    2fce:	0001      	movs	r1, r0
    2fd0:	1d08      	adds	r0, r1, #4
    2fd2:	4288      	cmp	r0, r1
    2fd4:	419b      	sbcs	r3, r3
    2fd6:	425b      	negs	r3, r3
    2fd8:	18d2      	adds	r2, r2, r3
    2fda:	0213      	lsls	r3, r2, #8
    2fdc:	d53a      	bpl.n	3054 <__aeabi_ddiv+0x610>
    2fde:	2301      	movs	r3, #1
    2fe0:	9a02      	ldr	r2, [sp, #8]
    2fe2:	2401      	movs	r4, #1
    2fe4:	401a      	ands	r2, r3
    2fe6:	2300      	movs	r3, #0
    2fe8:	4694      	mov	ip, r2
    2fea:	4698      	mov	r8, r3
    2fec:	2200      	movs	r2, #0
    2fee:	e5f7      	b.n	2be0 <__aeabi_ddiv+0x19c>
    2ff0:	2102      	movs	r1, #2
    2ff2:	4249      	negs	r1, r1
    2ff4:	468c      	mov	ip, r1
    2ff6:	9d03      	ldr	r5, [sp, #12]
    2ff8:	44e3      	add	fp, ip
    2ffa:	46ac      	mov	ip, r5
    2ffc:	44e2      	add	sl, ip
    2ffe:	45aa      	cmp	sl, r5
    3000:	41ad      	sbcs	r5, r5
    3002:	426d      	negs	r5, r5
    3004:	4445      	add	r5, r8
    3006:	18ed      	adds	r5, r5, r3
    3008:	1a2d      	subs	r5, r5, r0
    300a:	e696      	b.n	2d3a <__aeabi_ddiv+0x2f6>
    300c:	1e8a      	subs	r2, r1, #2
    300e:	9903      	ldr	r1, [sp, #12]
    3010:	004d      	lsls	r5, r1, #1
    3012:	428d      	cmp	r5, r1
    3014:	4189      	sbcs	r1, r1
    3016:	4249      	negs	r1, r1
    3018:	4441      	add	r1, r8
    301a:	1876      	adds	r6, r6, r1
    301c:	9503      	str	r5, [sp, #12]
    301e:	e78f      	b.n	2f40 <__aeabi_ddiv+0x4fc>
    3020:	201f      	movs	r0, #31
    3022:	4240      	negs	r0, r0
    3024:	1ac3      	subs	r3, r0, r3
    3026:	4658      	mov	r0, fp
    3028:	40d8      	lsrs	r0, r3
    302a:	0003      	movs	r3, r0
    302c:	2a20      	cmp	r2, #32
    302e:	d028      	beq.n	3082 <__aeabi_ddiv+0x63e>
    3030:	2040      	movs	r0, #64	; 0x40
    3032:	465d      	mov	r5, fp
    3034:	1a82      	subs	r2, r0, r2
    3036:	4095      	lsls	r5, r2
    3038:	4329      	orrs	r1, r5
    303a:	1e4a      	subs	r2, r1, #1
    303c:	4191      	sbcs	r1, r2
    303e:	4319      	orrs	r1, r3
    3040:	2307      	movs	r3, #7
    3042:	2200      	movs	r2, #0
    3044:	400b      	ands	r3, r1
    3046:	d009      	beq.n	305c <__aeabi_ddiv+0x618>
    3048:	230f      	movs	r3, #15
    304a:	2200      	movs	r2, #0
    304c:	400b      	ands	r3, r1
    304e:	0008      	movs	r0, r1
    3050:	2b04      	cmp	r3, #4
    3052:	d1bd      	bne.n	2fd0 <__aeabi_ddiv+0x58c>
    3054:	0001      	movs	r1, r0
    3056:	0753      	lsls	r3, r2, #29
    3058:	0252      	lsls	r2, r2, #9
    305a:	0b12      	lsrs	r2, r2, #12
    305c:	08c9      	lsrs	r1, r1, #3
    305e:	4319      	orrs	r1, r3
    3060:	2301      	movs	r3, #1
    3062:	4688      	mov	r8, r1
    3064:	9902      	ldr	r1, [sp, #8]
    3066:	2400      	movs	r4, #0
    3068:	4019      	ands	r1, r3
    306a:	468c      	mov	ip, r1
    306c:	e5b8      	b.n	2be0 <__aeabi_ddiv+0x19c>
    306e:	4552      	cmp	r2, sl
    3070:	d8be      	bhi.n	2ff0 <__aeabi_ddiv+0x5ac>
    3072:	468b      	mov	fp, r1
    3074:	2500      	movs	r5, #0
    3076:	e660      	b.n	2d3a <__aeabi_ddiv+0x2f6>
    3078:	9d03      	ldr	r5, [sp, #12]
    307a:	429d      	cmp	r5, r3
    307c:	d3c6      	bcc.n	300c <__aeabi_ddiv+0x5c8>
    307e:	0011      	movs	r1, r2
    3080:	e762      	b.n	2f48 <__aeabi_ddiv+0x504>
    3082:	2500      	movs	r5, #0
    3084:	e7d8      	b.n	3038 <__aeabi_ddiv+0x5f4>
    3086:	2280      	movs	r2, #128	; 0x80
    3088:	465b      	mov	r3, fp
    308a:	0312      	lsls	r2, r2, #12
    308c:	431a      	orrs	r2, r3
    308e:	9b01      	ldr	r3, [sp, #4]
    3090:	0312      	lsls	r2, r2, #12
    3092:	0b12      	lsrs	r2, r2, #12
    3094:	469c      	mov	ip, r3
    3096:	4688      	mov	r8, r1
    3098:	4c03      	ldr	r4, [pc, #12]	; (30a8 <__aeabi_ddiv+0x664>)
    309a:	e5a1      	b.n	2be0 <__aeabi_ddiv+0x19c>
    309c:	000003ff 	.word	0x000003ff
    30a0:	feffffff 	.word	0xfeffffff
    30a4:	000007fe 	.word	0x000007fe
    30a8:	000007ff 	.word	0x000007ff

000030ac <__aeabi_dmul>:
    30ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ae:	4657      	mov	r7, sl
    30b0:	4645      	mov	r5, r8
    30b2:	46de      	mov	lr, fp
    30b4:	464e      	mov	r6, r9
    30b6:	b5e0      	push	{r5, r6, r7, lr}
    30b8:	030c      	lsls	r4, r1, #12
    30ba:	4698      	mov	r8, r3
    30bc:	004e      	lsls	r6, r1, #1
    30be:	0b23      	lsrs	r3, r4, #12
    30c0:	b087      	sub	sp, #28
    30c2:	0007      	movs	r7, r0
    30c4:	4692      	mov	sl, r2
    30c6:	469b      	mov	fp, r3
    30c8:	0d76      	lsrs	r6, r6, #21
    30ca:	0fcd      	lsrs	r5, r1, #31
    30cc:	2e00      	cmp	r6, #0
    30ce:	d06b      	beq.n	31a8 <__aeabi_dmul+0xfc>
    30d0:	4b6d      	ldr	r3, [pc, #436]	; (3288 <__aeabi_dmul+0x1dc>)
    30d2:	429e      	cmp	r6, r3
    30d4:	d035      	beq.n	3142 <__aeabi_dmul+0x96>
    30d6:	2480      	movs	r4, #128	; 0x80
    30d8:	465b      	mov	r3, fp
    30da:	0f42      	lsrs	r2, r0, #29
    30dc:	0424      	lsls	r4, r4, #16
    30de:	00db      	lsls	r3, r3, #3
    30e0:	4314      	orrs	r4, r2
    30e2:	431c      	orrs	r4, r3
    30e4:	00c3      	lsls	r3, r0, #3
    30e6:	4699      	mov	r9, r3
    30e8:	4b68      	ldr	r3, [pc, #416]	; (328c <__aeabi_dmul+0x1e0>)
    30ea:	46a3      	mov	fp, r4
    30ec:	469c      	mov	ip, r3
    30ee:	2300      	movs	r3, #0
    30f0:	2700      	movs	r7, #0
    30f2:	4466      	add	r6, ip
    30f4:	9302      	str	r3, [sp, #8]
    30f6:	4643      	mov	r3, r8
    30f8:	031c      	lsls	r4, r3, #12
    30fa:	005a      	lsls	r2, r3, #1
    30fc:	0fdb      	lsrs	r3, r3, #31
    30fe:	4650      	mov	r0, sl
    3100:	0b24      	lsrs	r4, r4, #12
    3102:	0d52      	lsrs	r2, r2, #21
    3104:	4698      	mov	r8, r3
    3106:	d100      	bne.n	310a <__aeabi_dmul+0x5e>
    3108:	e076      	b.n	31f8 <__aeabi_dmul+0x14c>
    310a:	4b5f      	ldr	r3, [pc, #380]	; (3288 <__aeabi_dmul+0x1dc>)
    310c:	429a      	cmp	r2, r3
    310e:	d06d      	beq.n	31ec <__aeabi_dmul+0x140>
    3110:	2380      	movs	r3, #128	; 0x80
    3112:	0f41      	lsrs	r1, r0, #29
    3114:	041b      	lsls	r3, r3, #16
    3116:	430b      	orrs	r3, r1
    3118:	495c      	ldr	r1, [pc, #368]	; (328c <__aeabi_dmul+0x1e0>)
    311a:	00e4      	lsls	r4, r4, #3
    311c:	468c      	mov	ip, r1
    311e:	431c      	orrs	r4, r3
    3120:	00c3      	lsls	r3, r0, #3
    3122:	2000      	movs	r0, #0
    3124:	4462      	add	r2, ip
    3126:	4641      	mov	r1, r8
    3128:	18b6      	adds	r6, r6, r2
    312a:	4069      	eors	r1, r5
    312c:	1c72      	adds	r2, r6, #1
    312e:	9101      	str	r1, [sp, #4]
    3130:	4694      	mov	ip, r2
    3132:	4307      	orrs	r7, r0
    3134:	2f0f      	cmp	r7, #15
    3136:	d900      	bls.n	313a <__aeabi_dmul+0x8e>
    3138:	e0b0      	b.n	329c <__aeabi_dmul+0x1f0>
    313a:	4a55      	ldr	r2, [pc, #340]	; (3290 <__aeabi_dmul+0x1e4>)
    313c:	00bf      	lsls	r7, r7, #2
    313e:	59d2      	ldr	r2, [r2, r7]
    3140:	4697      	mov	pc, r2
    3142:	465b      	mov	r3, fp
    3144:	4303      	orrs	r3, r0
    3146:	4699      	mov	r9, r3
    3148:	d000      	beq.n	314c <__aeabi_dmul+0xa0>
    314a:	e087      	b.n	325c <__aeabi_dmul+0x1b0>
    314c:	2300      	movs	r3, #0
    314e:	469b      	mov	fp, r3
    3150:	3302      	adds	r3, #2
    3152:	2708      	movs	r7, #8
    3154:	9302      	str	r3, [sp, #8]
    3156:	e7ce      	b.n	30f6 <__aeabi_dmul+0x4a>
    3158:	4642      	mov	r2, r8
    315a:	9201      	str	r2, [sp, #4]
    315c:	2802      	cmp	r0, #2
    315e:	d067      	beq.n	3230 <__aeabi_dmul+0x184>
    3160:	2803      	cmp	r0, #3
    3162:	d100      	bne.n	3166 <__aeabi_dmul+0xba>
    3164:	e20e      	b.n	3584 <__aeabi_dmul+0x4d8>
    3166:	2801      	cmp	r0, #1
    3168:	d000      	beq.n	316c <__aeabi_dmul+0xc0>
    316a:	e162      	b.n	3432 <__aeabi_dmul+0x386>
    316c:	2300      	movs	r3, #0
    316e:	2400      	movs	r4, #0
    3170:	2200      	movs	r2, #0
    3172:	4699      	mov	r9, r3
    3174:	9901      	ldr	r1, [sp, #4]
    3176:	4001      	ands	r1, r0
    3178:	b2cd      	uxtb	r5, r1
    317a:	2100      	movs	r1, #0
    317c:	0312      	lsls	r2, r2, #12
    317e:	0d0b      	lsrs	r3, r1, #20
    3180:	0b12      	lsrs	r2, r2, #12
    3182:	051b      	lsls	r3, r3, #20
    3184:	4313      	orrs	r3, r2
    3186:	4a43      	ldr	r2, [pc, #268]	; (3294 <__aeabi_dmul+0x1e8>)
    3188:	0524      	lsls	r4, r4, #20
    318a:	4013      	ands	r3, r2
    318c:	431c      	orrs	r4, r3
    318e:	0064      	lsls	r4, r4, #1
    3190:	07ed      	lsls	r5, r5, #31
    3192:	0864      	lsrs	r4, r4, #1
    3194:	432c      	orrs	r4, r5
    3196:	4648      	mov	r0, r9
    3198:	0021      	movs	r1, r4
    319a:	b007      	add	sp, #28
    319c:	bc3c      	pop	{r2, r3, r4, r5}
    319e:	4690      	mov	r8, r2
    31a0:	4699      	mov	r9, r3
    31a2:	46a2      	mov	sl, r4
    31a4:	46ab      	mov	fp, r5
    31a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31a8:	4303      	orrs	r3, r0
    31aa:	4699      	mov	r9, r3
    31ac:	d04f      	beq.n	324e <__aeabi_dmul+0x1a2>
    31ae:	465b      	mov	r3, fp
    31b0:	2b00      	cmp	r3, #0
    31b2:	d100      	bne.n	31b6 <__aeabi_dmul+0x10a>
    31b4:	e189      	b.n	34ca <__aeabi_dmul+0x41e>
    31b6:	4658      	mov	r0, fp
    31b8:	f000 fd7a 	bl	3cb0 <__clzsi2>
    31bc:	0003      	movs	r3, r0
    31be:	3b0b      	subs	r3, #11
    31c0:	2b1c      	cmp	r3, #28
    31c2:	dd00      	ble.n	31c6 <__aeabi_dmul+0x11a>
    31c4:	e17a      	b.n	34bc <__aeabi_dmul+0x410>
    31c6:	221d      	movs	r2, #29
    31c8:	1ad3      	subs	r3, r2, r3
    31ca:	003a      	movs	r2, r7
    31cc:	0001      	movs	r1, r0
    31ce:	465c      	mov	r4, fp
    31d0:	40da      	lsrs	r2, r3
    31d2:	3908      	subs	r1, #8
    31d4:	408c      	lsls	r4, r1
    31d6:	0013      	movs	r3, r2
    31d8:	408f      	lsls	r7, r1
    31da:	4323      	orrs	r3, r4
    31dc:	469b      	mov	fp, r3
    31de:	46b9      	mov	r9, r7
    31e0:	2300      	movs	r3, #0
    31e2:	4e2d      	ldr	r6, [pc, #180]	; (3298 <__aeabi_dmul+0x1ec>)
    31e4:	2700      	movs	r7, #0
    31e6:	1a36      	subs	r6, r6, r0
    31e8:	9302      	str	r3, [sp, #8]
    31ea:	e784      	b.n	30f6 <__aeabi_dmul+0x4a>
    31ec:	4653      	mov	r3, sl
    31ee:	4323      	orrs	r3, r4
    31f0:	d12a      	bne.n	3248 <__aeabi_dmul+0x19c>
    31f2:	2400      	movs	r4, #0
    31f4:	2002      	movs	r0, #2
    31f6:	e796      	b.n	3126 <__aeabi_dmul+0x7a>
    31f8:	4653      	mov	r3, sl
    31fa:	4323      	orrs	r3, r4
    31fc:	d020      	beq.n	3240 <__aeabi_dmul+0x194>
    31fe:	2c00      	cmp	r4, #0
    3200:	d100      	bne.n	3204 <__aeabi_dmul+0x158>
    3202:	e157      	b.n	34b4 <__aeabi_dmul+0x408>
    3204:	0020      	movs	r0, r4
    3206:	f000 fd53 	bl	3cb0 <__clzsi2>
    320a:	0003      	movs	r3, r0
    320c:	3b0b      	subs	r3, #11
    320e:	2b1c      	cmp	r3, #28
    3210:	dd00      	ble.n	3214 <__aeabi_dmul+0x168>
    3212:	e149      	b.n	34a8 <__aeabi_dmul+0x3fc>
    3214:	211d      	movs	r1, #29
    3216:	1acb      	subs	r3, r1, r3
    3218:	4651      	mov	r1, sl
    321a:	0002      	movs	r2, r0
    321c:	40d9      	lsrs	r1, r3
    321e:	4653      	mov	r3, sl
    3220:	3a08      	subs	r2, #8
    3222:	4094      	lsls	r4, r2
    3224:	4093      	lsls	r3, r2
    3226:	430c      	orrs	r4, r1
    3228:	4a1b      	ldr	r2, [pc, #108]	; (3298 <__aeabi_dmul+0x1ec>)
    322a:	1a12      	subs	r2, r2, r0
    322c:	2000      	movs	r0, #0
    322e:	e77a      	b.n	3126 <__aeabi_dmul+0x7a>
    3230:	2501      	movs	r5, #1
    3232:	9b01      	ldr	r3, [sp, #4]
    3234:	4c14      	ldr	r4, [pc, #80]	; (3288 <__aeabi_dmul+0x1dc>)
    3236:	401d      	ands	r5, r3
    3238:	2300      	movs	r3, #0
    323a:	2200      	movs	r2, #0
    323c:	4699      	mov	r9, r3
    323e:	e79c      	b.n	317a <__aeabi_dmul+0xce>
    3240:	2400      	movs	r4, #0
    3242:	2200      	movs	r2, #0
    3244:	2001      	movs	r0, #1
    3246:	e76e      	b.n	3126 <__aeabi_dmul+0x7a>
    3248:	4653      	mov	r3, sl
    324a:	2003      	movs	r0, #3
    324c:	e76b      	b.n	3126 <__aeabi_dmul+0x7a>
    324e:	2300      	movs	r3, #0
    3250:	469b      	mov	fp, r3
    3252:	3301      	adds	r3, #1
    3254:	2704      	movs	r7, #4
    3256:	2600      	movs	r6, #0
    3258:	9302      	str	r3, [sp, #8]
    325a:	e74c      	b.n	30f6 <__aeabi_dmul+0x4a>
    325c:	2303      	movs	r3, #3
    325e:	4681      	mov	r9, r0
    3260:	270c      	movs	r7, #12
    3262:	9302      	str	r3, [sp, #8]
    3264:	e747      	b.n	30f6 <__aeabi_dmul+0x4a>
    3266:	2280      	movs	r2, #128	; 0x80
    3268:	2300      	movs	r3, #0
    326a:	2500      	movs	r5, #0
    326c:	0312      	lsls	r2, r2, #12
    326e:	4699      	mov	r9, r3
    3270:	4c05      	ldr	r4, [pc, #20]	; (3288 <__aeabi_dmul+0x1dc>)
    3272:	e782      	b.n	317a <__aeabi_dmul+0xce>
    3274:	465c      	mov	r4, fp
    3276:	464b      	mov	r3, r9
    3278:	9802      	ldr	r0, [sp, #8]
    327a:	e76f      	b.n	315c <__aeabi_dmul+0xb0>
    327c:	465c      	mov	r4, fp
    327e:	464b      	mov	r3, r9
    3280:	9501      	str	r5, [sp, #4]
    3282:	9802      	ldr	r0, [sp, #8]
    3284:	e76a      	b.n	315c <__aeabi_dmul+0xb0>
    3286:	46c0      	nop			; (mov r8, r8)
    3288:	000007ff 	.word	0x000007ff
    328c:	fffffc01 	.word	0xfffffc01
    3290:	00003e30 	.word	0x00003e30
    3294:	800fffff 	.word	0x800fffff
    3298:	fffffc0d 	.word	0xfffffc0d
    329c:	464a      	mov	r2, r9
    329e:	4649      	mov	r1, r9
    32a0:	0c17      	lsrs	r7, r2, #16
    32a2:	0c1a      	lsrs	r2, r3, #16
    32a4:	041b      	lsls	r3, r3, #16
    32a6:	0c1b      	lsrs	r3, r3, #16
    32a8:	0408      	lsls	r0, r1, #16
    32aa:	0019      	movs	r1, r3
    32ac:	0c00      	lsrs	r0, r0, #16
    32ae:	4341      	muls	r1, r0
    32b0:	0015      	movs	r5, r2
    32b2:	4688      	mov	r8, r1
    32b4:	0019      	movs	r1, r3
    32b6:	437d      	muls	r5, r7
    32b8:	4379      	muls	r1, r7
    32ba:	9503      	str	r5, [sp, #12]
    32bc:	4689      	mov	r9, r1
    32be:	0029      	movs	r1, r5
    32c0:	0015      	movs	r5, r2
    32c2:	4345      	muls	r5, r0
    32c4:	444d      	add	r5, r9
    32c6:	9502      	str	r5, [sp, #8]
    32c8:	4645      	mov	r5, r8
    32ca:	0c2d      	lsrs	r5, r5, #16
    32cc:	46aa      	mov	sl, r5
    32ce:	9d02      	ldr	r5, [sp, #8]
    32d0:	4455      	add	r5, sl
    32d2:	45a9      	cmp	r9, r5
    32d4:	d906      	bls.n	32e4 <__aeabi_dmul+0x238>
    32d6:	468a      	mov	sl, r1
    32d8:	2180      	movs	r1, #128	; 0x80
    32da:	0249      	lsls	r1, r1, #9
    32dc:	4689      	mov	r9, r1
    32de:	44ca      	add	sl, r9
    32e0:	4651      	mov	r1, sl
    32e2:	9103      	str	r1, [sp, #12]
    32e4:	0c29      	lsrs	r1, r5, #16
    32e6:	9104      	str	r1, [sp, #16]
    32e8:	4641      	mov	r1, r8
    32ea:	0409      	lsls	r1, r1, #16
    32ec:	042d      	lsls	r5, r5, #16
    32ee:	0c09      	lsrs	r1, r1, #16
    32f0:	4688      	mov	r8, r1
    32f2:	0029      	movs	r1, r5
    32f4:	0c25      	lsrs	r5, r4, #16
    32f6:	0424      	lsls	r4, r4, #16
    32f8:	4441      	add	r1, r8
    32fa:	0c24      	lsrs	r4, r4, #16
    32fc:	9105      	str	r1, [sp, #20]
    32fe:	0021      	movs	r1, r4
    3300:	4341      	muls	r1, r0
    3302:	4688      	mov	r8, r1
    3304:	0021      	movs	r1, r4
    3306:	4379      	muls	r1, r7
    3308:	468a      	mov	sl, r1
    330a:	4368      	muls	r0, r5
    330c:	4641      	mov	r1, r8
    330e:	4450      	add	r0, sl
    3310:	4681      	mov	r9, r0
    3312:	0c08      	lsrs	r0, r1, #16
    3314:	4448      	add	r0, r9
    3316:	436f      	muls	r7, r5
    3318:	4582      	cmp	sl, r0
    331a:	d903      	bls.n	3324 <__aeabi_dmul+0x278>
    331c:	2180      	movs	r1, #128	; 0x80
    331e:	0249      	lsls	r1, r1, #9
    3320:	4689      	mov	r9, r1
    3322:	444f      	add	r7, r9
    3324:	0c01      	lsrs	r1, r0, #16
    3326:	4689      	mov	r9, r1
    3328:	0039      	movs	r1, r7
    332a:	4449      	add	r1, r9
    332c:	9102      	str	r1, [sp, #8]
    332e:	4641      	mov	r1, r8
    3330:	040f      	lsls	r7, r1, #16
    3332:	9904      	ldr	r1, [sp, #16]
    3334:	0c3f      	lsrs	r7, r7, #16
    3336:	4688      	mov	r8, r1
    3338:	0400      	lsls	r0, r0, #16
    333a:	19c0      	adds	r0, r0, r7
    333c:	4480      	add	r8, r0
    333e:	4641      	mov	r1, r8
    3340:	9104      	str	r1, [sp, #16]
    3342:	4659      	mov	r1, fp
    3344:	0c0f      	lsrs	r7, r1, #16
    3346:	0409      	lsls	r1, r1, #16
    3348:	0c09      	lsrs	r1, r1, #16
    334a:	4688      	mov	r8, r1
    334c:	4359      	muls	r1, r3
    334e:	468a      	mov	sl, r1
    3350:	0039      	movs	r1, r7
    3352:	4351      	muls	r1, r2
    3354:	4689      	mov	r9, r1
    3356:	4641      	mov	r1, r8
    3358:	434a      	muls	r2, r1
    335a:	4651      	mov	r1, sl
    335c:	0c09      	lsrs	r1, r1, #16
    335e:	468b      	mov	fp, r1
    3360:	437b      	muls	r3, r7
    3362:	18d2      	adds	r2, r2, r3
    3364:	445a      	add	r2, fp
    3366:	4293      	cmp	r3, r2
    3368:	d903      	bls.n	3372 <__aeabi_dmul+0x2c6>
    336a:	2380      	movs	r3, #128	; 0x80
    336c:	025b      	lsls	r3, r3, #9
    336e:	469b      	mov	fp, r3
    3370:	44d9      	add	r9, fp
    3372:	4651      	mov	r1, sl
    3374:	0409      	lsls	r1, r1, #16
    3376:	0c09      	lsrs	r1, r1, #16
    3378:	468a      	mov	sl, r1
    337a:	4641      	mov	r1, r8
    337c:	4361      	muls	r1, r4
    337e:	437c      	muls	r4, r7
    3380:	0c13      	lsrs	r3, r2, #16
    3382:	0412      	lsls	r2, r2, #16
    3384:	444b      	add	r3, r9
    3386:	4452      	add	r2, sl
    3388:	46a1      	mov	r9, r4
    338a:	468a      	mov	sl, r1
    338c:	003c      	movs	r4, r7
    338e:	4641      	mov	r1, r8
    3390:	436c      	muls	r4, r5
    3392:	434d      	muls	r5, r1
    3394:	4651      	mov	r1, sl
    3396:	444d      	add	r5, r9
    3398:	0c0f      	lsrs	r7, r1, #16
    339a:	197d      	adds	r5, r7, r5
    339c:	45a9      	cmp	r9, r5
    339e:	d903      	bls.n	33a8 <__aeabi_dmul+0x2fc>
    33a0:	2180      	movs	r1, #128	; 0x80
    33a2:	0249      	lsls	r1, r1, #9
    33a4:	4688      	mov	r8, r1
    33a6:	4444      	add	r4, r8
    33a8:	9f04      	ldr	r7, [sp, #16]
    33aa:	9903      	ldr	r1, [sp, #12]
    33ac:	46b8      	mov	r8, r7
    33ae:	4441      	add	r1, r8
    33b0:	468b      	mov	fp, r1
    33b2:	4583      	cmp	fp, r0
    33b4:	4180      	sbcs	r0, r0
    33b6:	4241      	negs	r1, r0
    33b8:	4688      	mov	r8, r1
    33ba:	4651      	mov	r1, sl
    33bc:	0408      	lsls	r0, r1, #16
    33be:	042f      	lsls	r7, r5, #16
    33c0:	0c00      	lsrs	r0, r0, #16
    33c2:	183f      	adds	r7, r7, r0
    33c4:	4658      	mov	r0, fp
    33c6:	9902      	ldr	r1, [sp, #8]
    33c8:	1810      	adds	r0, r2, r0
    33ca:	4689      	mov	r9, r1
    33cc:	4290      	cmp	r0, r2
    33ce:	4192      	sbcs	r2, r2
    33d0:	444f      	add	r7, r9
    33d2:	46ba      	mov	sl, r7
    33d4:	4252      	negs	r2, r2
    33d6:	4699      	mov	r9, r3
    33d8:	4693      	mov	fp, r2
    33da:	44c2      	add	sl, r8
    33dc:	44d1      	add	r9, sl
    33de:	44cb      	add	fp, r9
    33e0:	428f      	cmp	r7, r1
    33e2:	41bf      	sbcs	r7, r7
    33e4:	45c2      	cmp	sl, r8
    33e6:	4189      	sbcs	r1, r1
    33e8:	4599      	cmp	r9, r3
    33ea:	419b      	sbcs	r3, r3
    33ec:	4593      	cmp	fp, r2
    33ee:	4192      	sbcs	r2, r2
    33f0:	427f      	negs	r7, r7
    33f2:	4249      	negs	r1, r1
    33f4:	0c2d      	lsrs	r5, r5, #16
    33f6:	4252      	negs	r2, r2
    33f8:	430f      	orrs	r7, r1
    33fa:	425b      	negs	r3, r3
    33fc:	4313      	orrs	r3, r2
    33fe:	197f      	adds	r7, r7, r5
    3400:	18ff      	adds	r7, r7, r3
    3402:	465b      	mov	r3, fp
    3404:	193c      	adds	r4, r7, r4
    3406:	0ddb      	lsrs	r3, r3, #23
    3408:	9a05      	ldr	r2, [sp, #20]
    340a:	0264      	lsls	r4, r4, #9
    340c:	431c      	orrs	r4, r3
    340e:	0243      	lsls	r3, r0, #9
    3410:	4313      	orrs	r3, r2
    3412:	1e5d      	subs	r5, r3, #1
    3414:	41ab      	sbcs	r3, r5
    3416:	465a      	mov	r2, fp
    3418:	0dc0      	lsrs	r0, r0, #23
    341a:	4303      	orrs	r3, r0
    341c:	0252      	lsls	r2, r2, #9
    341e:	4313      	orrs	r3, r2
    3420:	01e2      	lsls	r2, r4, #7
    3422:	d556      	bpl.n	34d2 <__aeabi_dmul+0x426>
    3424:	2001      	movs	r0, #1
    3426:	085a      	lsrs	r2, r3, #1
    3428:	4003      	ands	r3, r0
    342a:	4313      	orrs	r3, r2
    342c:	07e2      	lsls	r2, r4, #31
    342e:	4313      	orrs	r3, r2
    3430:	0864      	lsrs	r4, r4, #1
    3432:	485a      	ldr	r0, [pc, #360]	; (359c <__aeabi_dmul+0x4f0>)
    3434:	4460      	add	r0, ip
    3436:	2800      	cmp	r0, #0
    3438:	dd4d      	ble.n	34d6 <__aeabi_dmul+0x42a>
    343a:	075a      	lsls	r2, r3, #29
    343c:	d009      	beq.n	3452 <__aeabi_dmul+0x3a6>
    343e:	220f      	movs	r2, #15
    3440:	401a      	ands	r2, r3
    3442:	2a04      	cmp	r2, #4
    3444:	d005      	beq.n	3452 <__aeabi_dmul+0x3a6>
    3446:	1d1a      	adds	r2, r3, #4
    3448:	429a      	cmp	r2, r3
    344a:	419b      	sbcs	r3, r3
    344c:	425b      	negs	r3, r3
    344e:	18e4      	adds	r4, r4, r3
    3450:	0013      	movs	r3, r2
    3452:	01e2      	lsls	r2, r4, #7
    3454:	d504      	bpl.n	3460 <__aeabi_dmul+0x3b4>
    3456:	2080      	movs	r0, #128	; 0x80
    3458:	4a51      	ldr	r2, [pc, #324]	; (35a0 <__aeabi_dmul+0x4f4>)
    345a:	00c0      	lsls	r0, r0, #3
    345c:	4014      	ands	r4, r2
    345e:	4460      	add	r0, ip
    3460:	4a50      	ldr	r2, [pc, #320]	; (35a4 <__aeabi_dmul+0x4f8>)
    3462:	4290      	cmp	r0, r2
    3464:	dd00      	ble.n	3468 <__aeabi_dmul+0x3bc>
    3466:	e6e3      	b.n	3230 <__aeabi_dmul+0x184>
    3468:	2501      	movs	r5, #1
    346a:	08db      	lsrs	r3, r3, #3
    346c:	0762      	lsls	r2, r4, #29
    346e:	431a      	orrs	r2, r3
    3470:	0264      	lsls	r4, r4, #9
    3472:	9b01      	ldr	r3, [sp, #4]
    3474:	4691      	mov	r9, r2
    3476:	0b22      	lsrs	r2, r4, #12
    3478:	0544      	lsls	r4, r0, #21
    347a:	0d64      	lsrs	r4, r4, #21
    347c:	401d      	ands	r5, r3
    347e:	e67c      	b.n	317a <__aeabi_dmul+0xce>
    3480:	2280      	movs	r2, #128	; 0x80
    3482:	4659      	mov	r1, fp
    3484:	0312      	lsls	r2, r2, #12
    3486:	4211      	tst	r1, r2
    3488:	d008      	beq.n	349c <__aeabi_dmul+0x3f0>
    348a:	4214      	tst	r4, r2
    348c:	d106      	bne.n	349c <__aeabi_dmul+0x3f0>
    348e:	4322      	orrs	r2, r4
    3490:	0312      	lsls	r2, r2, #12
    3492:	0b12      	lsrs	r2, r2, #12
    3494:	4645      	mov	r5, r8
    3496:	4699      	mov	r9, r3
    3498:	4c43      	ldr	r4, [pc, #268]	; (35a8 <__aeabi_dmul+0x4fc>)
    349a:	e66e      	b.n	317a <__aeabi_dmul+0xce>
    349c:	465b      	mov	r3, fp
    349e:	431a      	orrs	r2, r3
    34a0:	0312      	lsls	r2, r2, #12
    34a2:	0b12      	lsrs	r2, r2, #12
    34a4:	4c40      	ldr	r4, [pc, #256]	; (35a8 <__aeabi_dmul+0x4fc>)
    34a6:	e668      	b.n	317a <__aeabi_dmul+0xce>
    34a8:	0003      	movs	r3, r0
    34aa:	4654      	mov	r4, sl
    34ac:	3b28      	subs	r3, #40	; 0x28
    34ae:	409c      	lsls	r4, r3
    34b0:	2300      	movs	r3, #0
    34b2:	e6b9      	b.n	3228 <__aeabi_dmul+0x17c>
    34b4:	f000 fbfc 	bl	3cb0 <__clzsi2>
    34b8:	3020      	adds	r0, #32
    34ba:	e6a6      	b.n	320a <__aeabi_dmul+0x15e>
    34bc:	0003      	movs	r3, r0
    34be:	3b28      	subs	r3, #40	; 0x28
    34c0:	409f      	lsls	r7, r3
    34c2:	2300      	movs	r3, #0
    34c4:	46bb      	mov	fp, r7
    34c6:	4699      	mov	r9, r3
    34c8:	e68a      	b.n	31e0 <__aeabi_dmul+0x134>
    34ca:	f000 fbf1 	bl	3cb0 <__clzsi2>
    34ce:	3020      	adds	r0, #32
    34d0:	e674      	b.n	31bc <__aeabi_dmul+0x110>
    34d2:	46b4      	mov	ip, r6
    34d4:	e7ad      	b.n	3432 <__aeabi_dmul+0x386>
    34d6:	2501      	movs	r5, #1
    34d8:	1a2a      	subs	r2, r5, r0
    34da:	2a38      	cmp	r2, #56	; 0x38
    34dc:	dd06      	ble.n	34ec <__aeabi_dmul+0x440>
    34de:	9b01      	ldr	r3, [sp, #4]
    34e0:	2400      	movs	r4, #0
    34e2:	401d      	ands	r5, r3
    34e4:	2300      	movs	r3, #0
    34e6:	2200      	movs	r2, #0
    34e8:	4699      	mov	r9, r3
    34ea:	e646      	b.n	317a <__aeabi_dmul+0xce>
    34ec:	2a1f      	cmp	r2, #31
    34ee:	dc21      	bgt.n	3534 <__aeabi_dmul+0x488>
    34f0:	2520      	movs	r5, #32
    34f2:	0020      	movs	r0, r4
    34f4:	1aad      	subs	r5, r5, r2
    34f6:	001e      	movs	r6, r3
    34f8:	40ab      	lsls	r3, r5
    34fa:	40a8      	lsls	r0, r5
    34fc:	40d6      	lsrs	r6, r2
    34fe:	1e5d      	subs	r5, r3, #1
    3500:	41ab      	sbcs	r3, r5
    3502:	4330      	orrs	r0, r6
    3504:	4318      	orrs	r0, r3
    3506:	40d4      	lsrs	r4, r2
    3508:	0743      	lsls	r3, r0, #29
    350a:	d009      	beq.n	3520 <__aeabi_dmul+0x474>
    350c:	230f      	movs	r3, #15
    350e:	4003      	ands	r3, r0
    3510:	2b04      	cmp	r3, #4
    3512:	d005      	beq.n	3520 <__aeabi_dmul+0x474>
    3514:	0003      	movs	r3, r0
    3516:	1d18      	adds	r0, r3, #4
    3518:	4298      	cmp	r0, r3
    351a:	419b      	sbcs	r3, r3
    351c:	425b      	negs	r3, r3
    351e:	18e4      	adds	r4, r4, r3
    3520:	0223      	lsls	r3, r4, #8
    3522:	d521      	bpl.n	3568 <__aeabi_dmul+0x4bc>
    3524:	2501      	movs	r5, #1
    3526:	9b01      	ldr	r3, [sp, #4]
    3528:	2401      	movs	r4, #1
    352a:	401d      	ands	r5, r3
    352c:	2300      	movs	r3, #0
    352e:	2200      	movs	r2, #0
    3530:	4699      	mov	r9, r3
    3532:	e622      	b.n	317a <__aeabi_dmul+0xce>
    3534:	251f      	movs	r5, #31
    3536:	0021      	movs	r1, r4
    3538:	426d      	negs	r5, r5
    353a:	1a28      	subs	r0, r5, r0
    353c:	40c1      	lsrs	r1, r0
    353e:	0008      	movs	r0, r1
    3540:	2a20      	cmp	r2, #32
    3542:	d01d      	beq.n	3580 <__aeabi_dmul+0x4d4>
    3544:	355f      	adds	r5, #95	; 0x5f
    3546:	1aaa      	subs	r2, r5, r2
    3548:	4094      	lsls	r4, r2
    354a:	4323      	orrs	r3, r4
    354c:	1e5c      	subs	r4, r3, #1
    354e:	41a3      	sbcs	r3, r4
    3550:	2507      	movs	r5, #7
    3552:	4303      	orrs	r3, r0
    3554:	401d      	ands	r5, r3
    3556:	2200      	movs	r2, #0
    3558:	2d00      	cmp	r5, #0
    355a:	d009      	beq.n	3570 <__aeabi_dmul+0x4c4>
    355c:	220f      	movs	r2, #15
    355e:	2400      	movs	r4, #0
    3560:	401a      	ands	r2, r3
    3562:	0018      	movs	r0, r3
    3564:	2a04      	cmp	r2, #4
    3566:	d1d6      	bne.n	3516 <__aeabi_dmul+0x46a>
    3568:	0003      	movs	r3, r0
    356a:	0765      	lsls	r5, r4, #29
    356c:	0264      	lsls	r4, r4, #9
    356e:	0b22      	lsrs	r2, r4, #12
    3570:	08db      	lsrs	r3, r3, #3
    3572:	432b      	orrs	r3, r5
    3574:	2501      	movs	r5, #1
    3576:	4699      	mov	r9, r3
    3578:	9b01      	ldr	r3, [sp, #4]
    357a:	2400      	movs	r4, #0
    357c:	401d      	ands	r5, r3
    357e:	e5fc      	b.n	317a <__aeabi_dmul+0xce>
    3580:	2400      	movs	r4, #0
    3582:	e7e2      	b.n	354a <__aeabi_dmul+0x49e>
    3584:	2280      	movs	r2, #128	; 0x80
    3586:	2501      	movs	r5, #1
    3588:	0312      	lsls	r2, r2, #12
    358a:	4322      	orrs	r2, r4
    358c:	9901      	ldr	r1, [sp, #4]
    358e:	0312      	lsls	r2, r2, #12
    3590:	0b12      	lsrs	r2, r2, #12
    3592:	400d      	ands	r5, r1
    3594:	4699      	mov	r9, r3
    3596:	4c04      	ldr	r4, [pc, #16]	; (35a8 <__aeabi_dmul+0x4fc>)
    3598:	e5ef      	b.n	317a <__aeabi_dmul+0xce>
    359a:	46c0      	nop			; (mov r8, r8)
    359c:	000003ff 	.word	0x000003ff
    35a0:	feffffff 	.word	0xfeffffff
    35a4:	000007fe 	.word	0x000007fe
    35a8:	000007ff 	.word	0x000007ff

000035ac <__aeabi_dsub>:
    35ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ae:	4646      	mov	r6, r8
    35b0:	46d6      	mov	lr, sl
    35b2:	464f      	mov	r7, r9
    35b4:	030c      	lsls	r4, r1, #12
    35b6:	b5c0      	push	{r6, r7, lr}
    35b8:	0fcd      	lsrs	r5, r1, #31
    35ba:	004e      	lsls	r6, r1, #1
    35bc:	0a61      	lsrs	r1, r4, #9
    35be:	0f44      	lsrs	r4, r0, #29
    35c0:	430c      	orrs	r4, r1
    35c2:	00c1      	lsls	r1, r0, #3
    35c4:	0058      	lsls	r0, r3, #1
    35c6:	0d40      	lsrs	r0, r0, #21
    35c8:	4684      	mov	ip, r0
    35ca:	468a      	mov	sl, r1
    35cc:	000f      	movs	r7, r1
    35ce:	0319      	lsls	r1, r3, #12
    35d0:	0f50      	lsrs	r0, r2, #29
    35d2:	0a49      	lsrs	r1, r1, #9
    35d4:	4301      	orrs	r1, r0
    35d6:	48c6      	ldr	r0, [pc, #792]	; (38f0 <__aeabi_dsub+0x344>)
    35d8:	0d76      	lsrs	r6, r6, #21
    35da:	46a8      	mov	r8, r5
    35dc:	0fdb      	lsrs	r3, r3, #31
    35de:	00d2      	lsls	r2, r2, #3
    35e0:	4584      	cmp	ip, r0
    35e2:	d100      	bne.n	35e6 <__aeabi_dsub+0x3a>
    35e4:	e0d8      	b.n	3798 <__aeabi_dsub+0x1ec>
    35e6:	2001      	movs	r0, #1
    35e8:	4043      	eors	r3, r0
    35ea:	42ab      	cmp	r3, r5
    35ec:	d100      	bne.n	35f0 <__aeabi_dsub+0x44>
    35ee:	e0a6      	b.n	373e <__aeabi_dsub+0x192>
    35f0:	4660      	mov	r0, ip
    35f2:	1a35      	subs	r5, r6, r0
    35f4:	2d00      	cmp	r5, #0
    35f6:	dc00      	bgt.n	35fa <__aeabi_dsub+0x4e>
    35f8:	e105      	b.n	3806 <__aeabi_dsub+0x25a>
    35fa:	2800      	cmp	r0, #0
    35fc:	d110      	bne.n	3620 <__aeabi_dsub+0x74>
    35fe:	000b      	movs	r3, r1
    3600:	4313      	orrs	r3, r2
    3602:	d100      	bne.n	3606 <__aeabi_dsub+0x5a>
    3604:	e0d7      	b.n	37b6 <__aeabi_dsub+0x20a>
    3606:	1e6b      	subs	r3, r5, #1
    3608:	2b00      	cmp	r3, #0
    360a:	d000      	beq.n	360e <__aeabi_dsub+0x62>
    360c:	e14b      	b.n	38a6 <__aeabi_dsub+0x2fa>
    360e:	4653      	mov	r3, sl
    3610:	1a9f      	subs	r7, r3, r2
    3612:	45ba      	cmp	sl, r7
    3614:	4180      	sbcs	r0, r0
    3616:	1a64      	subs	r4, r4, r1
    3618:	4240      	negs	r0, r0
    361a:	1a24      	subs	r4, r4, r0
    361c:	2601      	movs	r6, #1
    361e:	e01e      	b.n	365e <__aeabi_dsub+0xb2>
    3620:	4bb3      	ldr	r3, [pc, #716]	; (38f0 <__aeabi_dsub+0x344>)
    3622:	429e      	cmp	r6, r3
    3624:	d048      	beq.n	36b8 <__aeabi_dsub+0x10c>
    3626:	2380      	movs	r3, #128	; 0x80
    3628:	041b      	lsls	r3, r3, #16
    362a:	4319      	orrs	r1, r3
    362c:	2d38      	cmp	r5, #56	; 0x38
    362e:	dd00      	ble.n	3632 <__aeabi_dsub+0x86>
    3630:	e119      	b.n	3866 <__aeabi_dsub+0x2ba>
    3632:	2d1f      	cmp	r5, #31
    3634:	dd00      	ble.n	3638 <__aeabi_dsub+0x8c>
    3636:	e14c      	b.n	38d2 <__aeabi_dsub+0x326>
    3638:	2320      	movs	r3, #32
    363a:	000f      	movs	r7, r1
    363c:	1b5b      	subs	r3, r3, r5
    363e:	0010      	movs	r0, r2
    3640:	409a      	lsls	r2, r3
    3642:	409f      	lsls	r7, r3
    3644:	40e8      	lsrs	r0, r5
    3646:	1e53      	subs	r3, r2, #1
    3648:	419a      	sbcs	r2, r3
    364a:	40e9      	lsrs	r1, r5
    364c:	4307      	orrs	r7, r0
    364e:	4317      	orrs	r7, r2
    3650:	4653      	mov	r3, sl
    3652:	1bdf      	subs	r7, r3, r7
    3654:	1a61      	subs	r1, r4, r1
    3656:	45ba      	cmp	sl, r7
    3658:	41a4      	sbcs	r4, r4
    365a:	4264      	negs	r4, r4
    365c:	1b0c      	subs	r4, r1, r4
    365e:	0223      	lsls	r3, r4, #8
    3660:	d400      	bmi.n	3664 <__aeabi_dsub+0xb8>
    3662:	e0c5      	b.n	37f0 <__aeabi_dsub+0x244>
    3664:	0264      	lsls	r4, r4, #9
    3666:	0a65      	lsrs	r5, r4, #9
    3668:	2d00      	cmp	r5, #0
    366a:	d100      	bne.n	366e <__aeabi_dsub+0xc2>
    366c:	e0f6      	b.n	385c <__aeabi_dsub+0x2b0>
    366e:	0028      	movs	r0, r5
    3670:	f000 fb1e 	bl	3cb0 <__clzsi2>
    3674:	0003      	movs	r3, r0
    3676:	3b08      	subs	r3, #8
    3678:	2b1f      	cmp	r3, #31
    367a:	dd00      	ble.n	367e <__aeabi_dsub+0xd2>
    367c:	e0e9      	b.n	3852 <__aeabi_dsub+0x2a6>
    367e:	2220      	movs	r2, #32
    3680:	003c      	movs	r4, r7
    3682:	1ad2      	subs	r2, r2, r3
    3684:	409d      	lsls	r5, r3
    3686:	40d4      	lsrs	r4, r2
    3688:	409f      	lsls	r7, r3
    368a:	4325      	orrs	r5, r4
    368c:	429e      	cmp	r6, r3
    368e:	dd00      	ble.n	3692 <__aeabi_dsub+0xe6>
    3690:	e0db      	b.n	384a <__aeabi_dsub+0x29e>
    3692:	1b9e      	subs	r6, r3, r6
    3694:	1c73      	adds	r3, r6, #1
    3696:	2b1f      	cmp	r3, #31
    3698:	dd00      	ble.n	369c <__aeabi_dsub+0xf0>
    369a:	e10a      	b.n	38b2 <__aeabi_dsub+0x306>
    369c:	2220      	movs	r2, #32
    369e:	0038      	movs	r0, r7
    36a0:	1ad2      	subs	r2, r2, r3
    36a2:	0029      	movs	r1, r5
    36a4:	4097      	lsls	r7, r2
    36a6:	002c      	movs	r4, r5
    36a8:	4091      	lsls	r1, r2
    36aa:	40d8      	lsrs	r0, r3
    36ac:	1e7a      	subs	r2, r7, #1
    36ae:	4197      	sbcs	r7, r2
    36b0:	40dc      	lsrs	r4, r3
    36b2:	2600      	movs	r6, #0
    36b4:	4301      	orrs	r1, r0
    36b6:	430f      	orrs	r7, r1
    36b8:	077b      	lsls	r3, r7, #29
    36ba:	d009      	beq.n	36d0 <__aeabi_dsub+0x124>
    36bc:	230f      	movs	r3, #15
    36be:	403b      	ands	r3, r7
    36c0:	2b04      	cmp	r3, #4
    36c2:	d005      	beq.n	36d0 <__aeabi_dsub+0x124>
    36c4:	1d3b      	adds	r3, r7, #4
    36c6:	42bb      	cmp	r3, r7
    36c8:	41bf      	sbcs	r7, r7
    36ca:	427f      	negs	r7, r7
    36cc:	19e4      	adds	r4, r4, r7
    36ce:	001f      	movs	r7, r3
    36d0:	0223      	lsls	r3, r4, #8
    36d2:	d525      	bpl.n	3720 <__aeabi_dsub+0x174>
    36d4:	4b86      	ldr	r3, [pc, #536]	; (38f0 <__aeabi_dsub+0x344>)
    36d6:	3601      	adds	r6, #1
    36d8:	429e      	cmp	r6, r3
    36da:	d100      	bne.n	36de <__aeabi_dsub+0x132>
    36dc:	e0af      	b.n	383e <__aeabi_dsub+0x292>
    36de:	4b85      	ldr	r3, [pc, #532]	; (38f4 <__aeabi_dsub+0x348>)
    36e0:	2501      	movs	r5, #1
    36e2:	401c      	ands	r4, r3
    36e4:	4643      	mov	r3, r8
    36e6:	0762      	lsls	r2, r4, #29
    36e8:	08ff      	lsrs	r7, r7, #3
    36ea:	0264      	lsls	r4, r4, #9
    36ec:	0576      	lsls	r6, r6, #21
    36ee:	4317      	orrs	r7, r2
    36f0:	0b24      	lsrs	r4, r4, #12
    36f2:	0d76      	lsrs	r6, r6, #21
    36f4:	401d      	ands	r5, r3
    36f6:	2100      	movs	r1, #0
    36f8:	0324      	lsls	r4, r4, #12
    36fa:	0b23      	lsrs	r3, r4, #12
    36fc:	0d0c      	lsrs	r4, r1, #20
    36fe:	4a7e      	ldr	r2, [pc, #504]	; (38f8 <__aeabi_dsub+0x34c>)
    3700:	0524      	lsls	r4, r4, #20
    3702:	431c      	orrs	r4, r3
    3704:	4014      	ands	r4, r2
    3706:	0533      	lsls	r3, r6, #20
    3708:	4323      	orrs	r3, r4
    370a:	005b      	lsls	r3, r3, #1
    370c:	07ed      	lsls	r5, r5, #31
    370e:	085b      	lsrs	r3, r3, #1
    3710:	432b      	orrs	r3, r5
    3712:	0038      	movs	r0, r7
    3714:	0019      	movs	r1, r3
    3716:	bc1c      	pop	{r2, r3, r4}
    3718:	4690      	mov	r8, r2
    371a:	4699      	mov	r9, r3
    371c:	46a2      	mov	sl, r4
    371e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3720:	2501      	movs	r5, #1
    3722:	4643      	mov	r3, r8
    3724:	0762      	lsls	r2, r4, #29
    3726:	08ff      	lsrs	r7, r7, #3
    3728:	4317      	orrs	r7, r2
    372a:	08e4      	lsrs	r4, r4, #3
    372c:	401d      	ands	r5, r3
    372e:	4b70      	ldr	r3, [pc, #448]	; (38f0 <__aeabi_dsub+0x344>)
    3730:	429e      	cmp	r6, r3
    3732:	d036      	beq.n	37a2 <__aeabi_dsub+0x1f6>
    3734:	0324      	lsls	r4, r4, #12
    3736:	0576      	lsls	r6, r6, #21
    3738:	0b24      	lsrs	r4, r4, #12
    373a:	0d76      	lsrs	r6, r6, #21
    373c:	e7db      	b.n	36f6 <__aeabi_dsub+0x14a>
    373e:	4663      	mov	r3, ip
    3740:	1af3      	subs	r3, r6, r3
    3742:	2b00      	cmp	r3, #0
    3744:	dc00      	bgt.n	3748 <__aeabi_dsub+0x19c>
    3746:	e094      	b.n	3872 <__aeabi_dsub+0x2c6>
    3748:	4660      	mov	r0, ip
    374a:	2800      	cmp	r0, #0
    374c:	d035      	beq.n	37ba <__aeabi_dsub+0x20e>
    374e:	4868      	ldr	r0, [pc, #416]	; (38f0 <__aeabi_dsub+0x344>)
    3750:	4286      	cmp	r6, r0
    3752:	d0b1      	beq.n	36b8 <__aeabi_dsub+0x10c>
    3754:	2780      	movs	r7, #128	; 0x80
    3756:	043f      	lsls	r7, r7, #16
    3758:	4339      	orrs	r1, r7
    375a:	2b38      	cmp	r3, #56	; 0x38
    375c:	dc00      	bgt.n	3760 <__aeabi_dsub+0x1b4>
    375e:	e0fd      	b.n	395c <__aeabi_dsub+0x3b0>
    3760:	430a      	orrs	r2, r1
    3762:	0017      	movs	r7, r2
    3764:	2100      	movs	r1, #0
    3766:	1e7a      	subs	r2, r7, #1
    3768:	4197      	sbcs	r7, r2
    376a:	4457      	add	r7, sl
    376c:	4557      	cmp	r7, sl
    376e:	4180      	sbcs	r0, r0
    3770:	1909      	adds	r1, r1, r4
    3772:	4244      	negs	r4, r0
    3774:	190c      	adds	r4, r1, r4
    3776:	0223      	lsls	r3, r4, #8
    3778:	d53a      	bpl.n	37f0 <__aeabi_dsub+0x244>
    377a:	4b5d      	ldr	r3, [pc, #372]	; (38f0 <__aeabi_dsub+0x344>)
    377c:	3601      	adds	r6, #1
    377e:	429e      	cmp	r6, r3
    3780:	d100      	bne.n	3784 <__aeabi_dsub+0x1d8>
    3782:	e14b      	b.n	3a1c <__aeabi_dsub+0x470>
    3784:	2201      	movs	r2, #1
    3786:	4b5b      	ldr	r3, [pc, #364]	; (38f4 <__aeabi_dsub+0x348>)
    3788:	401c      	ands	r4, r3
    378a:	087b      	lsrs	r3, r7, #1
    378c:	4017      	ands	r7, r2
    378e:	431f      	orrs	r7, r3
    3790:	07e2      	lsls	r2, r4, #31
    3792:	4317      	orrs	r7, r2
    3794:	0864      	lsrs	r4, r4, #1
    3796:	e78f      	b.n	36b8 <__aeabi_dsub+0x10c>
    3798:	0008      	movs	r0, r1
    379a:	4310      	orrs	r0, r2
    379c:	d000      	beq.n	37a0 <__aeabi_dsub+0x1f4>
    379e:	e724      	b.n	35ea <__aeabi_dsub+0x3e>
    37a0:	e721      	b.n	35e6 <__aeabi_dsub+0x3a>
    37a2:	0023      	movs	r3, r4
    37a4:	433b      	orrs	r3, r7
    37a6:	d100      	bne.n	37aa <__aeabi_dsub+0x1fe>
    37a8:	e1b9      	b.n	3b1e <__aeabi_dsub+0x572>
    37aa:	2280      	movs	r2, #128	; 0x80
    37ac:	0312      	lsls	r2, r2, #12
    37ae:	4314      	orrs	r4, r2
    37b0:	0324      	lsls	r4, r4, #12
    37b2:	0b24      	lsrs	r4, r4, #12
    37b4:	e79f      	b.n	36f6 <__aeabi_dsub+0x14a>
    37b6:	002e      	movs	r6, r5
    37b8:	e77e      	b.n	36b8 <__aeabi_dsub+0x10c>
    37ba:	0008      	movs	r0, r1
    37bc:	4310      	orrs	r0, r2
    37be:	d100      	bne.n	37c2 <__aeabi_dsub+0x216>
    37c0:	e0ca      	b.n	3958 <__aeabi_dsub+0x3ac>
    37c2:	1e58      	subs	r0, r3, #1
    37c4:	4684      	mov	ip, r0
    37c6:	2800      	cmp	r0, #0
    37c8:	d000      	beq.n	37cc <__aeabi_dsub+0x220>
    37ca:	e0e7      	b.n	399c <__aeabi_dsub+0x3f0>
    37cc:	4452      	add	r2, sl
    37ce:	4552      	cmp	r2, sl
    37d0:	4180      	sbcs	r0, r0
    37d2:	1864      	adds	r4, r4, r1
    37d4:	4240      	negs	r0, r0
    37d6:	1824      	adds	r4, r4, r0
    37d8:	0017      	movs	r7, r2
    37da:	2601      	movs	r6, #1
    37dc:	0223      	lsls	r3, r4, #8
    37de:	d507      	bpl.n	37f0 <__aeabi_dsub+0x244>
    37e0:	2602      	movs	r6, #2
    37e2:	e7cf      	b.n	3784 <__aeabi_dsub+0x1d8>
    37e4:	4664      	mov	r4, ip
    37e6:	432c      	orrs	r4, r5
    37e8:	d100      	bne.n	37ec <__aeabi_dsub+0x240>
    37ea:	e1b3      	b.n	3b54 <__aeabi_dsub+0x5a8>
    37ec:	002c      	movs	r4, r5
    37ee:	4667      	mov	r7, ip
    37f0:	077b      	lsls	r3, r7, #29
    37f2:	d000      	beq.n	37f6 <__aeabi_dsub+0x24a>
    37f4:	e762      	b.n	36bc <__aeabi_dsub+0x110>
    37f6:	0763      	lsls	r3, r4, #29
    37f8:	08ff      	lsrs	r7, r7, #3
    37fa:	431f      	orrs	r7, r3
    37fc:	2501      	movs	r5, #1
    37fe:	4643      	mov	r3, r8
    3800:	08e4      	lsrs	r4, r4, #3
    3802:	401d      	ands	r5, r3
    3804:	e793      	b.n	372e <__aeabi_dsub+0x182>
    3806:	2d00      	cmp	r5, #0
    3808:	d178      	bne.n	38fc <__aeabi_dsub+0x350>
    380a:	1c75      	adds	r5, r6, #1
    380c:	056d      	lsls	r5, r5, #21
    380e:	0d6d      	lsrs	r5, r5, #21
    3810:	2d01      	cmp	r5, #1
    3812:	dc00      	bgt.n	3816 <__aeabi_dsub+0x26a>
    3814:	e0f2      	b.n	39fc <__aeabi_dsub+0x450>
    3816:	4650      	mov	r0, sl
    3818:	1a80      	subs	r0, r0, r2
    381a:	4582      	cmp	sl, r0
    381c:	41bf      	sbcs	r7, r7
    381e:	1a65      	subs	r5, r4, r1
    3820:	427f      	negs	r7, r7
    3822:	1bed      	subs	r5, r5, r7
    3824:	4684      	mov	ip, r0
    3826:	0228      	lsls	r0, r5, #8
    3828:	d400      	bmi.n	382c <__aeabi_dsub+0x280>
    382a:	e08c      	b.n	3946 <__aeabi_dsub+0x39a>
    382c:	4650      	mov	r0, sl
    382e:	1a17      	subs	r7, r2, r0
    3830:	42ba      	cmp	r2, r7
    3832:	4192      	sbcs	r2, r2
    3834:	1b0c      	subs	r4, r1, r4
    3836:	4255      	negs	r5, r2
    3838:	1b65      	subs	r5, r4, r5
    383a:	4698      	mov	r8, r3
    383c:	e714      	b.n	3668 <__aeabi_dsub+0xbc>
    383e:	2501      	movs	r5, #1
    3840:	4643      	mov	r3, r8
    3842:	2400      	movs	r4, #0
    3844:	401d      	ands	r5, r3
    3846:	2700      	movs	r7, #0
    3848:	e755      	b.n	36f6 <__aeabi_dsub+0x14a>
    384a:	4c2a      	ldr	r4, [pc, #168]	; (38f4 <__aeabi_dsub+0x348>)
    384c:	1af6      	subs	r6, r6, r3
    384e:	402c      	ands	r4, r5
    3850:	e732      	b.n	36b8 <__aeabi_dsub+0x10c>
    3852:	003d      	movs	r5, r7
    3854:	3828      	subs	r0, #40	; 0x28
    3856:	4085      	lsls	r5, r0
    3858:	2700      	movs	r7, #0
    385a:	e717      	b.n	368c <__aeabi_dsub+0xe0>
    385c:	0038      	movs	r0, r7
    385e:	f000 fa27 	bl	3cb0 <__clzsi2>
    3862:	3020      	adds	r0, #32
    3864:	e706      	b.n	3674 <__aeabi_dsub+0xc8>
    3866:	430a      	orrs	r2, r1
    3868:	0017      	movs	r7, r2
    386a:	2100      	movs	r1, #0
    386c:	1e7a      	subs	r2, r7, #1
    386e:	4197      	sbcs	r7, r2
    3870:	e6ee      	b.n	3650 <__aeabi_dsub+0xa4>
    3872:	2b00      	cmp	r3, #0
    3874:	d000      	beq.n	3878 <__aeabi_dsub+0x2cc>
    3876:	e0e5      	b.n	3a44 <__aeabi_dsub+0x498>
    3878:	1c73      	adds	r3, r6, #1
    387a:	469c      	mov	ip, r3
    387c:	055b      	lsls	r3, r3, #21
    387e:	0d5b      	lsrs	r3, r3, #21
    3880:	2b01      	cmp	r3, #1
    3882:	dc00      	bgt.n	3886 <__aeabi_dsub+0x2da>
    3884:	e09f      	b.n	39c6 <__aeabi_dsub+0x41a>
    3886:	4b1a      	ldr	r3, [pc, #104]	; (38f0 <__aeabi_dsub+0x344>)
    3888:	459c      	cmp	ip, r3
    388a:	d100      	bne.n	388e <__aeabi_dsub+0x2e2>
    388c:	e0c5      	b.n	3a1a <__aeabi_dsub+0x46e>
    388e:	4452      	add	r2, sl
    3890:	4552      	cmp	r2, sl
    3892:	4180      	sbcs	r0, r0
    3894:	1864      	adds	r4, r4, r1
    3896:	4240      	negs	r0, r0
    3898:	1824      	adds	r4, r4, r0
    389a:	07e7      	lsls	r7, r4, #31
    389c:	0852      	lsrs	r2, r2, #1
    389e:	4317      	orrs	r7, r2
    38a0:	0864      	lsrs	r4, r4, #1
    38a2:	4666      	mov	r6, ip
    38a4:	e708      	b.n	36b8 <__aeabi_dsub+0x10c>
    38a6:	4812      	ldr	r0, [pc, #72]	; (38f0 <__aeabi_dsub+0x344>)
    38a8:	4285      	cmp	r5, r0
    38aa:	d100      	bne.n	38ae <__aeabi_dsub+0x302>
    38ac:	e085      	b.n	39ba <__aeabi_dsub+0x40e>
    38ae:	001d      	movs	r5, r3
    38b0:	e6bc      	b.n	362c <__aeabi_dsub+0x80>
    38b2:	0029      	movs	r1, r5
    38b4:	3e1f      	subs	r6, #31
    38b6:	40f1      	lsrs	r1, r6
    38b8:	2b20      	cmp	r3, #32
    38ba:	d100      	bne.n	38be <__aeabi_dsub+0x312>
    38bc:	e07f      	b.n	39be <__aeabi_dsub+0x412>
    38be:	2240      	movs	r2, #64	; 0x40
    38c0:	1ad3      	subs	r3, r2, r3
    38c2:	409d      	lsls	r5, r3
    38c4:	432f      	orrs	r7, r5
    38c6:	1e7d      	subs	r5, r7, #1
    38c8:	41af      	sbcs	r7, r5
    38ca:	2400      	movs	r4, #0
    38cc:	430f      	orrs	r7, r1
    38ce:	2600      	movs	r6, #0
    38d0:	e78e      	b.n	37f0 <__aeabi_dsub+0x244>
    38d2:	002b      	movs	r3, r5
    38d4:	000f      	movs	r7, r1
    38d6:	3b20      	subs	r3, #32
    38d8:	40df      	lsrs	r7, r3
    38da:	2d20      	cmp	r5, #32
    38dc:	d071      	beq.n	39c2 <__aeabi_dsub+0x416>
    38de:	2340      	movs	r3, #64	; 0x40
    38e0:	1b5d      	subs	r5, r3, r5
    38e2:	40a9      	lsls	r1, r5
    38e4:	430a      	orrs	r2, r1
    38e6:	1e51      	subs	r1, r2, #1
    38e8:	418a      	sbcs	r2, r1
    38ea:	2100      	movs	r1, #0
    38ec:	4317      	orrs	r7, r2
    38ee:	e6af      	b.n	3650 <__aeabi_dsub+0xa4>
    38f0:	000007ff 	.word	0x000007ff
    38f4:	ff7fffff 	.word	0xff7fffff
    38f8:	800fffff 	.word	0x800fffff
    38fc:	2e00      	cmp	r6, #0
    38fe:	d03e      	beq.n	397e <__aeabi_dsub+0x3d2>
    3900:	4eb3      	ldr	r6, [pc, #716]	; (3bd0 <__aeabi_dsub+0x624>)
    3902:	45b4      	cmp	ip, r6
    3904:	d045      	beq.n	3992 <__aeabi_dsub+0x3e6>
    3906:	2680      	movs	r6, #128	; 0x80
    3908:	0436      	lsls	r6, r6, #16
    390a:	426d      	negs	r5, r5
    390c:	4334      	orrs	r4, r6
    390e:	2d38      	cmp	r5, #56	; 0x38
    3910:	dd00      	ble.n	3914 <__aeabi_dsub+0x368>
    3912:	e0a8      	b.n	3a66 <__aeabi_dsub+0x4ba>
    3914:	2d1f      	cmp	r5, #31
    3916:	dd00      	ble.n	391a <__aeabi_dsub+0x36e>
    3918:	e11f      	b.n	3b5a <__aeabi_dsub+0x5ae>
    391a:	2620      	movs	r6, #32
    391c:	0027      	movs	r7, r4
    391e:	4650      	mov	r0, sl
    3920:	1b76      	subs	r6, r6, r5
    3922:	40b7      	lsls	r7, r6
    3924:	40e8      	lsrs	r0, r5
    3926:	4307      	orrs	r7, r0
    3928:	4650      	mov	r0, sl
    392a:	40b0      	lsls	r0, r6
    392c:	1e46      	subs	r6, r0, #1
    392e:	41b0      	sbcs	r0, r6
    3930:	40ec      	lsrs	r4, r5
    3932:	4338      	orrs	r0, r7
    3934:	1a17      	subs	r7, r2, r0
    3936:	42ba      	cmp	r2, r7
    3938:	4192      	sbcs	r2, r2
    393a:	1b0c      	subs	r4, r1, r4
    393c:	4252      	negs	r2, r2
    393e:	1aa4      	subs	r4, r4, r2
    3940:	4666      	mov	r6, ip
    3942:	4698      	mov	r8, r3
    3944:	e68b      	b.n	365e <__aeabi_dsub+0xb2>
    3946:	4664      	mov	r4, ip
    3948:	4667      	mov	r7, ip
    394a:	432c      	orrs	r4, r5
    394c:	d000      	beq.n	3950 <__aeabi_dsub+0x3a4>
    394e:	e68b      	b.n	3668 <__aeabi_dsub+0xbc>
    3950:	2500      	movs	r5, #0
    3952:	2600      	movs	r6, #0
    3954:	2700      	movs	r7, #0
    3956:	e6ea      	b.n	372e <__aeabi_dsub+0x182>
    3958:	001e      	movs	r6, r3
    395a:	e6ad      	b.n	36b8 <__aeabi_dsub+0x10c>
    395c:	2b1f      	cmp	r3, #31
    395e:	dc60      	bgt.n	3a22 <__aeabi_dsub+0x476>
    3960:	2720      	movs	r7, #32
    3962:	1af8      	subs	r0, r7, r3
    3964:	000f      	movs	r7, r1
    3966:	4684      	mov	ip, r0
    3968:	4087      	lsls	r7, r0
    396a:	0010      	movs	r0, r2
    396c:	40d8      	lsrs	r0, r3
    396e:	4307      	orrs	r7, r0
    3970:	4660      	mov	r0, ip
    3972:	4082      	lsls	r2, r0
    3974:	1e50      	subs	r0, r2, #1
    3976:	4182      	sbcs	r2, r0
    3978:	40d9      	lsrs	r1, r3
    397a:	4317      	orrs	r7, r2
    397c:	e6f5      	b.n	376a <__aeabi_dsub+0x1be>
    397e:	0026      	movs	r6, r4
    3980:	4650      	mov	r0, sl
    3982:	4306      	orrs	r6, r0
    3984:	d005      	beq.n	3992 <__aeabi_dsub+0x3e6>
    3986:	43ed      	mvns	r5, r5
    3988:	2d00      	cmp	r5, #0
    398a:	d0d3      	beq.n	3934 <__aeabi_dsub+0x388>
    398c:	4e90      	ldr	r6, [pc, #576]	; (3bd0 <__aeabi_dsub+0x624>)
    398e:	45b4      	cmp	ip, r6
    3990:	d1bd      	bne.n	390e <__aeabi_dsub+0x362>
    3992:	000c      	movs	r4, r1
    3994:	0017      	movs	r7, r2
    3996:	4666      	mov	r6, ip
    3998:	4698      	mov	r8, r3
    399a:	e68d      	b.n	36b8 <__aeabi_dsub+0x10c>
    399c:	488c      	ldr	r0, [pc, #560]	; (3bd0 <__aeabi_dsub+0x624>)
    399e:	4283      	cmp	r3, r0
    39a0:	d00b      	beq.n	39ba <__aeabi_dsub+0x40e>
    39a2:	4663      	mov	r3, ip
    39a4:	e6d9      	b.n	375a <__aeabi_dsub+0x1ae>
    39a6:	2d00      	cmp	r5, #0
    39a8:	d000      	beq.n	39ac <__aeabi_dsub+0x400>
    39aa:	e096      	b.n	3ada <__aeabi_dsub+0x52e>
    39ac:	0008      	movs	r0, r1
    39ae:	4310      	orrs	r0, r2
    39b0:	d100      	bne.n	39b4 <__aeabi_dsub+0x408>
    39b2:	e0e2      	b.n	3b7a <__aeabi_dsub+0x5ce>
    39b4:	000c      	movs	r4, r1
    39b6:	0017      	movs	r7, r2
    39b8:	4698      	mov	r8, r3
    39ba:	4e85      	ldr	r6, [pc, #532]	; (3bd0 <__aeabi_dsub+0x624>)
    39bc:	e67c      	b.n	36b8 <__aeabi_dsub+0x10c>
    39be:	2500      	movs	r5, #0
    39c0:	e780      	b.n	38c4 <__aeabi_dsub+0x318>
    39c2:	2100      	movs	r1, #0
    39c4:	e78e      	b.n	38e4 <__aeabi_dsub+0x338>
    39c6:	0023      	movs	r3, r4
    39c8:	4650      	mov	r0, sl
    39ca:	4303      	orrs	r3, r0
    39cc:	2e00      	cmp	r6, #0
    39ce:	d000      	beq.n	39d2 <__aeabi_dsub+0x426>
    39d0:	e0a8      	b.n	3b24 <__aeabi_dsub+0x578>
    39d2:	2b00      	cmp	r3, #0
    39d4:	d100      	bne.n	39d8 <__aeabi_dsub+0x42c>
    39d6:	e0de      	b.n	3b96 <__aeabi_dsub+0x5ea>
    39d8:	000b      	movs	r3, r1
    39da:	4313      	orrs	r3, r2
    39dc:	d100      	bne.n	39e0 <__aeabi_dsub+0x434>
    39de:	e66b      	b.n	36b8 <__aeabi_dsub+0x10c>
    39e0:	4452      	add	r2, sl
    39e2:	4552      	cmp	r2, sl
    39e4:	4180      	sbcs	r0, r0
    39e6:	1864      	adds	r4, r4, r1
    39e8:	4240      	negs	r0, r0
    39ea:	1824      	adds	r4, r4, r0
    39ec:	0017      	movs	r7, r2
    39ee:	0223      	lsls	r3, r4, #8
    39f0:	d400      	bmi.n	39f4 <__aeabi_dsub+0x448>
    39f2:	e6fd      	b.n	37f0 <__aeabi_dsub+0x244>
    39f4:	4b77      	ldr	r3, [pc, #476]	; (3bd4 <__aeabi_dsub+0x628>)
    39f6:	4666      	mov	r6, ip
    39f8:	401c      	ands	r4, r3
    39fa:	e65d      	b.n	36b8 <__aeabi_dsub+0x10c>
    39fc:	0025      	movs	r5, r4
    39fe:	4650      	mov	r0, sl
    3a00:	4305      	orrs	r5, r0
    3a02:	2e00      	cmp	r6, #0
    3a04:	d1cf      	bne.n	39a6 <__aeabi_dsub+0x3fa>
    3a06:	2d00      	cmp	r5, #0
    3a08:	d14f      	bne.n	3aaa <__aeabi_dsub+0x4fe>
    3a0a:	000c      	movs	r4, r1
    3a0c:	4314      	orrs	r4, r2
    3a0e:	d100      	bne.n	3a12 <__aeabi_dsub+0x466>
    3a10:	e0a0      	b.n	3b54 <__aeabi_dsub+0x5a8>
    3a12:	000c      	movs	r4, r1
    3a14:	0017      	movs	r7, r2
    3a16:	4698      	mov	r8, r3
    3a18:	e64e      	b.n	36b8 <__aeabi_dsub+0x10c>
    3a1a:	4666      	mov	r6, ip
    3a1c:	2400      	movs	r4, #0
    3a1e:	2700      	movs	r7, #0
    3a20:	e685      	b.n	372e <__aeabi_dsub+0x182>
    3a22:	001f      	movs	r7, r3
    3a24:	0008      	movs	r0, r1
    3a26:	3f20      	subs	r7, #32
    3a28:	40f8      	lsrs	r0, r7
    3a2a:	0007      	movs	r7, r0
    3a2c:	2b20      	cmp	r3, #32
    3a2e:	d100      	bne.n	3a32 <__aeabi_dsub+0x486>
    3a30:	e08e      	b.n	3b50 <__aeabi_dsub+0x5a4>
    3a32:	2040      	movs	r0, #64	; 0x40
    3a34:	1ac3      	subs	r3, r0, r3
    3a36:	4099      	lsls	r1, r3
    3a38:	430a      	orrs	r2, r1
    3a3a:	1e51      	subs	r1, r2, #1
    3a3c:	418a      	sbcs	r2, r1
    3a3e:	2100      	movs	r1, #0
    3a40:	4317      	orrs	r7, r2
    3a42:	e692      	b.n	376a <__aeabi_dsub+0x1be>
    3a44:	2e00      	cmp	r6, #0
    3a46:	d114      	bne.n	3a72 <__aeabi_dsub+0x4c6>
    3a48:	0026      	movs	r6, r4
    3a4a:	4650      	mov	r0, sl
    3a4c:	4306      	orrs	r6, r0
    3a4e:	d062      	beq.n	3b16 <__aeabi_dsub+0x56a>
    3a50:	43db      	mvns	r3, r3
    3a52:	2b00      	cmp	r3, #0
    3a54:	d15c      	bne.n	3b10 <__aeabi_dsub+0x564>
    3a56:	1887      	adds	r7, r0, r2
    3a58:	4297      	cmp	r7, r2
    3a5a:	4192      	sbcs	r2, r2
    3a5c:	1864      	adds	r4, r4, r1
    3a5e:	4252      	negs	r2, r2
    3a60:	18a4      	adds	r4, r4, r2
    3a62:	4666      	mov	r6, ip
    3a64:	e687      	b.n	3776 <__aeabi_dsub+0x1ca>
    3a66:	4650      	mov	r0, sl
    3a68:	4320      	orrs	r0, r4
    3a6a:	1e44      	subs	r4, r0, #1
    3a6c:	41a0      	sbcs	r0, r4
    3a6e:	2400      	movs	r4, #0
    3a70:	e760      	b.n	3934 <__aeabi_dsub+0x388>
    3a72:	4e57      	ldr	r6, [pc, #348]	; (3bd0 <__aeabi_dsub+0x624>)
    3a74:	45b4      	cmp	ip, r6
    3a76:	d04e      	beq.n	3b16 <__aeabi_dsub+0x56a>
    3a78:	2680      	movs	r6, #128	; 0x80
    3a7a:	0436      	lsls	r6, r6, #16
    3a7c:	425b      	negs	r3, r3
    3a7e:	4334      	orrs	r4, r6
    3a80:	2b38      	cmp	r3, #56	; 0x38
    3a82:	dd00      	ble.n	3a86 <__aeabi_dsub+0x4da>
    3a84:	e07f      	b.n	3b86 <__aeabi_dsub+0x5da>
    3a86:	2b1f      	cmp	r3, #31
    3a88:	dd00      	ble.n	3a8c <__aeabi_dsub+0x4e0>
    3a8a:	e08b      	b.n	3ba4 <__aeabi_dsub+0x5f8>
    3a8c:	2620      	movs	r6, #32
    3a8e:	0027      	movs	r7, r4
    3a90:	4650      	mov	r0, sl
    3a92:	1af6      	subs	r6, r6, r3
    3a94:	40b7      	lsls	r7, r6
    3a96:	40d8      	lsrs	r0, r3
    3a98:	4307      	orrs	r7, r0
    3a9a:	4650      	mov	r0, sl
    3a9c:	40b0      	lsls	r0, r6
    3a9e:	1e46      	subs	r6, r0, #1
    3aa0:	41b0      	sbcs	r0, r6
    3aa2:	4307      	orrs	r7, r0
    3aa4:	40dc      	lsrs	r4, r3
    3aa6:	18bf      	adds	r7, r7, r2
    3aa8:	e7d6      	b.n	3a58 <__aeabi_dsub+0x4ac>
    3aaa:	000d      	movs	r5, r1
    3aac:	4315      	orrs	r5, r2
    3aae:	d100      	bne.n	3ab2 <__aeabi_dsub+0x506>
    3ab0:	e602      	b.n	36b8 <__aeabi_dsub+0x10c>
    3ab2:	4650      	mov	r0, sl
    3ab4:	1a80      	subs	r0, r0, r2
    3ab6:	4582      	cmp	sl, r0
    3ab8:	41bf      	sbcs	r7, r7
    3aba:	1a65      	subs	r5, r4, r1
    3abc:	427f      	negs	r7, r7
    3abe:	1bed      	subs	r5, r5, r7
    3ac0:	4684      	mov	ip, r0
    3ac2:	0228      	lsls	r0, r5, #8
    3ac4:	d400      	bmi.n	3ac8 <__aeabi_dsub+0x51c>
    3ac6:	e68d      	b.n	37e4 <__aeabi_dsub+0x238>
    3ac8:	4650      	mov	r0, sl
    3aca:	1a17      	subs	r7, r2, r0
    3acc:	42ba      	cmp	r2, r7
    3ace:	4192      	sbcs	r2, r2
    3ad0:	1b0c      	subs	r4, r1, r4
    3ad2:	4252      	negs	r2, r2
    3ad4:	1aa4      	subs	r4, r4, r2
    3ad6:	4698      	mov	r8, r3
    3ad8:	e5ee      	b.n	36b8 <__aeabi_dsub+0x10c>
    3ada:	000d      	movs	r5, r1
    3adc:	4315      	orrs	r5, r2
    3ade:	d100      	bne.n	3ae2 <__aeabi_dsub+0x536>
    3ae0:	e76b      	b.n	39ba <__aeabi_dsub+0x40e>
    3ae2:	4650      	mov	r0, sl
    3ae4:	0767      	lsls	r7, r4, #29
    3ae6:	08c0      	lsrs	r0, r0, #3
    3ae8:	4307      	orrs	r7, r0
    3aea:	2080      	movs	r0, #128	; 0x80
    3aec:	08e4      	lsrs	r4, r4, #3
    3aee:	0300      	lsls	r0, r0, #12
    3af0:	4204      	tst	r4, r0
    3af2:	d007      	beq.n	3b04 <__aeabi_dsub+0x558>
    3af4:	08cd      	lsrs	r5, r1, #3
    3af6:	4205      	tst	r5, r0
    3af8:	d104      	bne.n	3b04 <__aeabi_dsub+0x558>
    3afa:	002c      	movs	r4, r5
    3afc:	4698      	mov	r8, r3
    3afe:	08d7      	lsrs	r7, r2, #3
    3b00:	0749      	lsls	r1, r1, #29
    3b02:	430f      	orrs	r7, r1
    3b04:	0f7b      	lsrs	r3, r7, #29
    3b06:	00e4      	lsls	r4, r4, #3
    3b08:	431c      	orrs	r4, r3
    3b0a:	00ff      	lsls	r7, r7, #3
    3b0c:	4e30      	ldr	r6, [pc, #192]	; (3bd0 <__aeabi_dsub+0x624>)
    3b0e:	e5d3      	b.n	36b8 <__aeabi_dsub+0x10c>
    3b10:	4e2f      	ldr	r6, [pc, #188]	; (3bd0 <__aeabi_dsub+0x624>)
    3b12:	45b4      	cmp	ip, r6
    3b14:	d1b4      	bne.n	3a80 <__aeabi_dsub+0x4d4>
    3b16:	000c      	movs	r4, r1
    3b18:	0017      	movs	r7, r2
    3b1a:	4666      	mov	r6, ip
    3b1c:	e5cc      	b.n	36b8 <__aeabi_dsub+0x10c>
    3b1e:	2700      	movs	r7, #0
    3b20:	2400      	movs	r4, #0
    3b22:	e5e8      	b.n	36f6 <__aeabi_dsub+0x14a>
    3b24:	2b00      	cmp	r3, #0
    3b26:	d039      	beq.n	3b9c <__aeabi_dsub+0x5f0>
    3b28:	000b      	movs	r3, r1
    3b2a:	4313      	orrs	r3, r2
    3b2c:	d100      	bne.n	3b30 <__aeabi_dsub+0x584>
    3b2e:	e744      	b.n	39ba <__aeabi_dsub+0x40e>
    3b30:	08c0      	lsrs	r0, r0, #3
    3b32:	0767      	lsls	r7, r4, #29
    3b34:	4307      	orrs	r7, r0
    3b36:	2080      	movs	r0, #128	; 0x80
    3b38:	08e4      	lsrs	r4, r4, #3
    3b3a:	0300      	lsls	r0, r0, #12
    3b3c:	4204      	tst	r4, r0
    3b3e:	d0e1      	beq.n	3b04 <__aeabi_dsub+0x558>
    3b40:	08cb      	lsrs	r3, r1, #3
    3b42:	4203      	tst	r3, r0
    3b44:	d1de      	bne.n	3b04 <__aeabi_dsub+0x558>
    3b46:	08d7      	lsrs	r7, r2, #3
    3b48:	0749      	lsls	r1, r1, #29
    3b4a:	430f      	orrs	r7, r1
    3b4c:	001c      	movs	r4, r3
    3b4e:	e7d9      	b.n	3b04 <__aeabi_dsub+0x558>
    3b50:	2100      	movs	r1, #0
    3b52:	e771      	b.n	3a38 <__aeabi_dsub+0x48c>
    3b54:	2500      	movs	r5, #0
    3b56:	2700      	movs	r7, #0
    3b58:	e5e9      	b.n	372e <__aeabi_dsub+0x182>
    3b5a:	002e      	movs	r6, r5
    3b5c:	0027      	movs	r7, r4
    3b5e:	3e20      	subs	r6, #32
    3b60:	40f7      	lsrs	r7, r6
    3b62:	2d20      	cmp	r5, #32
    3b64:	d02f      	beq.n	3bc6 <__aeabi_dsub+0x61a>
    3b66:	2640      	movs	r6, #64	; 0x40
    3b68:	1b75      	subs	r5, r6, r5
    3b6a:	40ac      	lsls	r4, r5
    3b6c:	4650      	mov	r0, sl
    3b6e:	4320      	orrs	r0, r4
    3b70:	1e44      	subs	r4, r0, #1
    3b72:	41a0      	sbcs	r0, r4
    3b74:	2400      	movs	r4, #0
    3b76:	4338      	orrs	r0, r7
    3b78:	e6dc      	b.n	3934 <__aeabi_dsub+0x388>
    3b7a:	2480      	movs	r4, #128	; 0x80
    3b7c:	2500      	movs	r5, #0
    3b7e:	0324      	lsls	r4, r4, #12
    3b80:	4e13      	ldr	r6, [pc, #76]	; (3bd0 <__aeabi_dsub+0x624>)
    3b82:	2700      	movs	r7, #0
    3b84:	e5d3      	b.n	372e <__aeabi_dsub+0x182>
    3b86:	4650      	mov	r0, sl
    3b88:	4320      	orrs	r0, r4
    3b8a:	0007      	movs	r7, r0
    3b8c:	1e78      	subs	r0, r7, #1
    3b8e:	4187      	sbcs	r7, r0
    3b90:	2400      	movs	r4, #0
    3b92:	18bf      	adds	r7, r7, r2
    3b94:	e760      	b.n	3a58 <__aeabi_dsub+0x4ac>
    3b96:	000c      	movs	r4, r1
    3b98:	0017      	movs	r7, r2
    3b9a:	e58d      	b.n	36b8 <__aeabi_dsub+0x10c>
    3b9c:	000c      	movs	r4, r1
    3b9e:	0017      	movs	r7, r2
    3ba0:	4e0b      	ldr	r6, [pc, #44]	; (3bd0 <__aeabi_dsub+0x624>)
    3ba2:	e589      	b.n	36b8 <__aeabi_dsub+0x10c>
    3ba4:	001e      	movs	r6, r3
    3ba6:	0027      	movs	r7, r4
    3ba8:	3e20      	subs	r6, #32
    3baa:	40f7      	lsrs	r7, r6
    3bac:	2b20      	cmp	r3, #32
    3bae:	d00c      	beq.n	3bca <__aeabi_dsub+0x61e>
    3bb0:	2640      	movs	r6, #64	; 0x40
    3bb2:	1af3      	subs	r3, r6, r3
    3bb4:	409c      	lsls	r4, r3
    3bb6:	4650      	mov	r0, sl
    3bb8:	4320      	orrs	r0, r4
    3bba:	1e44      	subs	r4, r0, #1
    3bbc:	41a0      	sbcs	r0, r4
    3bbe:	4307      	orrs	r7, r0
    3bc0:	2400      	movs	r4, #0
    3bc2:	18bf      	adds	r7, r7, r2
    3bc4:	e748      	b.n	3a58 <__aeabi_dsub+0x4ac>
    3bc6:	2400      	movs	r4, #0
    3bc8:	e7d0      	b.n	3b6c <__aeabi_dsub+0x5c0>
    3bca:	2400      	movs	r4, #0
    3bcc:	e7f3      	b.n	3bb6 <__aeabi_dsub+0x60a>
    3bce:	46c0      	nop			; (mov r8, r8)
    3bd0:	000007ff 	.word	0x000007ff
    3bd4:	ff7fffff 	.word	0xff7fffff

00003bd8 <__aeabi_d2iz>:
    3bd8:	b530      	push	{r4, r5, lr}
    3bda:	4d13      	ldr	r5, [pc, #76]	; (3c28 <__aeabi_d2iz+0x50>)
    3bdc:	030a      	lsls	r2, r1, #12
    3bde:	004b      	lsls	r3, r1, #1
    3be0:	0b12      	lsrs	r2, r2, #12
    3be2:	0d5b      	lsrs	r3, r3, #21
    3be4:	0fc9      	lsrs	r1, r1, #31
    3be6:	2400      	movs	r4, #0
    3be8:	42ab      	cmp	r3, r5
    3bea:	dd10      	ble.n	3c0e <__aeabi_d2iz+0x36>
    3bec:	4c0f      	ldr	r4, [pc, #60]	; (3c2c <__aeabi_d2iz+0x54>)
    3bee:	42a3      	cmp	r3, r4
    3bf0:	dc0f      	bgt.n	3c12 <__aeabi_d2iz+0x3a>
    3bf2:	2480      	movs	r4, #128	; 0x80
    3bf4:	4d0e      	ldr	r5, [pc, #56]	; (3c30 <__aeabi_d2iz+0x58>)
    3bf6:	0364      	lsls	r4, r4, #13
    3bf8:	4322      	orrs	r2, r4
    3bfa:	1aed      	subs	r5, r5, r3
    3bfc:	2d1f      	cmp	r5, #31
    3bfe:	dd0b      	ble.n	3c18 <__aeabi_d2iz+0x40>
    3c00:	480c      	ldr	r0, [pc, #48]	; (3c34 <__aeabi_d2iz+0x5c>)
    3c02:	1ac3      	subs	r3, r0, r3
    3c04:	40da      	lsrs	r2, r3
    3c06:	4254      	negs	r4, r2
    3c08:	2900      	cmp	r1, #0
    3c0a:	d100      	bne.n	3c0e <__aeabi_d2iz+0x36>
    3c0c:	0014      	movs	r4, r2
    3c0e:	0020      	movs	r0, r4
    3c10:	bd30      	pop	{r4, r5, pc}
    3c12:	4b09      	ldr	r3, [pc, #36]	; (3c38 <__aeabi_d2iz+0x60>)
    3c14:	18cc      	adds	r4, r1, r3
    3c16:	e7fa      	b.n	3c0e <__aeabi_d2iz+0x36>
    3c18:	4c08      	ldr	r4, [pc, #32]	; (3c3c <__aeabi_d2iz+0x64>)
    3c1a:	40e8      	lsrs	r0, r5
    3c1c:	46a4      	mov	ip, r4
    3c1e:	4463      	add	r3, ip
    3c20:	409a      	lsls	r2, r3
    3c22:	4302      	orrs	r2, r0
    3c24:	e7ef      	b.n	3c06 <__aeabi_d2iz+0x2e>
    3c26:	46c0      	nop			; (mov r8, r8)
    3c28:	000003fe 	.word	0x000003fe
    3c2c:	0000041d 	.word	0x0000041d
    3c30:	00000433 	.word	0x00000433
    3c34:	00000413 	.word	0x00000413
    3c38:	7fffffff 	.word	0x7fffffff
    3c3c:	fffffbed 	.word	0xfffffbed

00003c40 <__aeabi_ui2d>:
    3c40:	b510      	push	{r4, lr}
    3c42:	1e04      	subs	r4, r0, #0
    3c44:	d028      	beq.n	3c98 <__aeabi_ui2d+0x58>
    3c46:	f000 f833 	bl	3cb0 <__clzsi2>
    3c4a:	4b15      	ldr	r3, [pc, #84]	; (3ca0 <__aeabi_ui2d+0x60>)
    3c4c:	4a15      	ldr	r2, [pc, #84]	; (3ca4 <__aeabi_ui2d+0x64>)
    3c4e:	1a1b      	subs	r3, r3, r0
    3c50:	1ad2      	subs	r2, r2, r3
    3c52:	2a1f      	cmp	r2, #31
    3c54:	dd15      	ble.n	3c82 <__aeabi_ui2d+0x42>
    3c56:	4a14      	ldr	r2, [pc, #80]	; (3ca8 <__aeabi_ui2d+0x68>)
    3c58:	1ad2      	subs	r2, r2, r3
    3c5a:	4094      	lsls	r4, r2
    3c5c:	2200      	movs	r2, #0
    3c5e:	0324      	lsls	r4, r4, #12
    3c60:	055b      	lsls	r3, r3, #21
    3c62:	0b24      	lsrs	r4, r4, #12
    3c64:	0d5b      	lsrs	r3, r3, #21
    3c66:	2100      	movs	r1, #0
    3c68:	0010      	movs	r0, r2
    3c6a:	0324      	lsls	r4, r4, #12
    3c6c:	0d0a      	lsrs	r2, r1, #20
    3c6e:	0b24      	lsrs	r4, r4, #12
    3c70:	0512      	lsls	r2, r2, #20
    3c72:	4322      	orrs	r2, r4
    3c74:	4c0d      	ldr	r4, [pc, #52]	; (3cac <__aeabi_ui2d+0x6c>)
    3c76:	051b      	lsls	r3, r3, #20
    3c78:	4022      	ands	r2, r4
    3c7a:	4313      	orrs	r3, r2
    3c7c:	005b      	lsls	r3, r3, #1
    3c7e:	0859      	lsrs	r1, r3, #1
    3c80:	bd10      	pop	{r4, pc}
    3c82:	0021      	movs	r1, r4
    3c84:	4091      	lsls	r1, r2
    3c86:	000a      	movs	r2, r1
    3c88:	210b      	movs	r1, #11
    3c8a:	1a08      	subs	r0, r1, r0
    3c8c:	40c4      	lsrs	r4, r0
    3c8e:	055b      	lsls	r3, r3, #21
    3c90:	0324      	lsls	r4, r4, #12
    3c92:	0b24      	lsrs	r4, r4, #12
    3c94:	0d5b      	lsrs	r3, r3, #21
    3c96:	e7e6      	b.n	3c66 <__aeabi_ui2d+0x26>
    3c98:	2300      	movs	r3, #0
    3c9a:	2400      	movs	r4, #0
    3c9c:	2200      	movs	r2, #0
    3c9e:	e7e2      	b.n	3c66 <__aeabi_ui2d+0x26>
    3ca0:	0000041e 	.word	0x0000041e
    3ca4:	00000433 	.word	0x00000433
    3ca8:	00000413 	.word	0x00000413
    3cac:	800fffff 	.word	0x800fffff

00003cb0 <__clzsi2>:
    3cb0:	211c      	movs	r1, #28
    3cb2:	2301      	movs	r3, #1
    3cb4:	041b      	lsls	r3, r3, #16
    3cb6:	4298      	cmp	r0, r3
    3cb8:	d301      	bcc.n	3cbe <__clzsi2+0xe>
    3cba:	0c00      	lsrs	r0, r0, #16
    3cbc:	3910      	subs	r1, #16
    3cbe:	0a1b      	lsrs	r3, r3, #8
    3cc0:	4298      	cmp	r0, r3
    3cc2:	d301      	bcc.n	3cc8 <__clzsi2+0x18>
    3cc4:	0a00      	lsrs	r0, r0, #8
    3cc6:	3908      	subs	r1, #8
    3cc8:	091b      	lsrs	r3, r3, #4
    3cca:	4298      	cmp	r0, r3
    3ccc:	d301      	bcc.n	3cd2 <__clzsi2+0x22>
    3cce:	0900      	lsrs	r0, r0, #4
    3cd0:	3904      	subs	r1, #4
    3cd2:	a202      	add	r2, pc, #8	; (adr r2, 3cdc <__clzsi2+0x2c>)
    3cd4:	5c10      	ldrb	r0, [r2, r0]
    3cd6:	1840      	adds	r0, r0, r1
    3cd8:	4770      	bx	lr
    3cda:	46c0      	nop			; (mov r8, r8)
    3cdc:	02020304 	.word	0x02020304
    3ce0:	01010101 	.word	0x01010101
	...

00003cec <__libc_init_array>:
    3cec:	b570      	push	{r4, r5, r6, lr}
    3cee:	2600      	movs	r6, #0
    3cf0:	4d0c      	ldr	r5, [pc, #48]	; (3d24 <__libc_init_array+0x38>)
    3cf2:	4c0d      	ldr	r4, [pc, #52]	; (3d28 <__libc_init_array+0x3c>)
    3cf4:	1b64      	subs	r4, r4, r5
    3cf6:	10a4      	asrs	r4, r4, #2
    3cf8:	42a6      	cmp	r6, r4
    3cfa:	d109      	bne.n	3d10 <__libc_init_array+0x24>
    3cfc:	2600      	movs	r6, #0
    3cfe:	f000 f8b7 	bl	3e70 <_init>
    3d02:	4d0a      	ldr	r5, [pc, #40]	; (3d2c <__libc_init_array+0x40>)
    3d04:	4c0a      	ldr	r4, [pc, #40]	; (3d30 <__libc_init_array+0x44>)
    3d06:	1b64      	subs	r4, r4, r5
    3d08:	10a4      	asrs	r4, r4, #2
    3d0a:	42a6      	cmp	r6, r4
    3d0c:	d105      	bne.n	3d1a <__libc_init_array+0x2e>
    3d0e:	bd70      	pop	{r4, r5, r6, pc}
    3d10:	00b3      	lsls	r3, r6, #2
    3d12:	58eb      	ldr	r3, [r5, r3]
    3d14:	4798      	blx	r3
    3d16:	3601      	adds	r6, #1
    3d18:	e7ee      	b.n	3cf8 <__libc_init_array+0xc>
    3d1a:	00b3      	lsls	r3, r6, #2
    3d1c:	58eb      	ldr	r3, [r5, r3]
    3d1e:	4798      	blx	r3
    3d20:	3601      	adds	r6, #1
    3d22:	e7f2      	b.n	3d0a <__libc_init_array+0x1e>
    3d24:	00003e7c 	.word	0x00003e7c
    3d28:	00003e7c 	.word	0x00003e7c
    3d2c:	00003e7c 	.word	0x00003e7c
    3d30:	00003e80 	.word	0x00003e80

00003d34 <memcpy>:
    3d34:	2300      	movs	r3, #0
    3d36:	b510      	push	{r4, lr}
    3d38:	429a      	cmp	r2, r3
    3d3a:	d100      	bne.n	3d3e <memcpy+0xa>
    3d3c:	bd10      	pop	{r4, pc}
    3d3e:	5ccc      	ldrb	r4, [r1, r3]
    3d40:	54c4      	strb	r4, [r0, r3]
    3d42:	3301      	adds	r3, #1
    3d44:	e7f8      	b.n	3d38 <memcpy+0x4>
    3d46:	0000      	movs	r0, r0
    3d48:	00000002 	.word	0x00000002
    3d4c:	00000003 	.word	0x00000003
    3d50:	00000004 	.word	0x00000004
    3d54:	00000005 	.word	0x00000005
    3d58:	00000006 	.word	0x00000006
    3d5c:	00000007 	.word	0x00000007
    3d60:	0000000e 	.word	0x0000000e
    3d64:	0000000f 	.word	0x0000000f
    3d68:	0000000a 	.word	0x0000000a
    3d6c:	0000000b 	.word	0x0000000b
    3d70:	0000ffff 	.word	0x0000ffff
    3d74:	0000ffff 	.word	0x0000ffff
    3d78:	0000ffff 	.word	0x0000ffff
    3d7c:	0000ffff 	.word	0x0000ffff
    3d80:	0000ffff 	.word	0x0000ffff
    3d84:	0000ffff 	.word	0x0000ffff
    3d88:	0000ffff 	.word	0x0000ffff
    3d8c:	0000ffff 	.word	0x0000ffff
    3d90:	0000ffff 	.word	0x0000ffff
    3d94:	0000ffff 	.word	0x0000ffff

00003d98 <tc_interrupt_vectors.12581>:
    3d98:	00000e0d 42000800 42000c00 42001000     .......B...B...B

00003da8 <_tcc_intflag>:
    3da8:	00000001 00000002 00000004 00000008     ................
    3db8:	00001000 00002000 00004000 00008000     ..... ...@......
    3dc8:	00010000 00020000 00040000 00080000     ................
    3dd8:	01040404 05041004 15041404 03082004     ............. ..
    3de8:	15080908 82011902 00002c3c 00002c1e     ........<,...,..
    3df8:	00002bd8 00002af6 00002bd8 00002c10     .+...*...+...,..
    3e08:	00002bd8 00002af6 00002c1e 00002c1e     .+...*...,...,..
    3e18:	00002c10 00002af6 00002aee 00002aee     .,...*...*...*..
    3e28:	00002aee 00002e54 0000329c 0000315c     .*..T....2..\1..
    3e38:	0000315c 00003158 00003274 00003274     \1..X1..t2..t2..
    3e48:	00003266 00003158 00003274 00003266     f2..X1..t2..f2..
    3e58:	00003274 00003158 0000327c 0000327c     t2..X1..|2..|2..
    3e68:	0000327c 00003480                       |2...4..

00003e70 <_init>:
    3e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e72:	46c0      	nop			; (mov r8, r8)
    3e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e76:	bc08      	pop	{r3}
    3e78:	469e      	mov	lr, r3
    3e7a:	4770      	bx	lr

00003e7c <__init_array_start>:
    3e7c:	000000b5 	.word	0x000000b5

00003e80 <_fini>:
    3e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e82:	46c0      	nop			; (mov r8, r8)
    3e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3e86:	bc08      	pop	{r3}
    3e88:	469e      	mov	lr, r3
    3e8a:	4770      	bx	lr

00003e8c <__fini_array_start>:
    3e8c:	0000008d 	.word	0x0000008d
