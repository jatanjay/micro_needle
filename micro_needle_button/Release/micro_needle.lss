
micro_needle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f98  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00002f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000234  20000020  00002fb8  00020020  2**2
                  ALLOC
  3 .stack        00000404  20000254  000031ec  00020020  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
  6 .debug_info   00057b46  00000000  00000000  000200a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005f0e  00000000  00000000  00077be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000073b6  00000000  00000000  0007daf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000008a8  00000000  00000000  00084ead  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c90  00000000  00000000  00085755  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b43f  00000000  00000000  000863e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000153a1  00000000  00000000  000a1824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007d324  00000000  00000000  000b6bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001494  00000000  00000000  00133eec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	58 06 00 20 d5 28 00 00 d3 28 00 00 d3 28 00 00     X.. .(...(...(..
	...
      2c:	d3 28 00 00 00 00 00 00 00 00 00 00 d3 28 00 00     .(...........(..
      3c:	d3 28 00 00 d3 28 00 00 d3 28 00 00 d3 28 00 00     .(...(...(...(..
      4c:	d3 28 00 00 11 07 00 00 d3 28 00 00 d3 28 00 00     .(.......(...(..
      5c:	d3 28 00 00 d3 28 00 00 29 1a 00 00 39 1a 00 00     .(...(..)...9...
      6c:	49 1a 00 00 65 25 00 00 05 26 00 00 0f 26 00 00     I...e%...&...&..
      7c:	d3 28 00 00 d3 28 00 00 d3 28 00 00 d3 28 00 00     .(...(...(...(..

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000020 	.word	0x20000020
      ac:	00000000 	.word	0x00000000
      b0:	00002f98 	.word	0x00002f98

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000024 	.word	0x20000024
      e0:	00002f98 	.word	0x00002f98
      e4:	00002f98 	.word	0x00002f98
      e8:	00000000 	.word	0x00000000

000000ec <configure_adc>:

#include <adc_sample.h>

uint16_t adc_result;

void configure_adc(void) {
      ec:	b510      	push	{r4, lr}
      ee:	b08c      	sub	sp, #48	; 0x30
  struct adc_config config_adc;
  adc_get_config_defaults(&config_adc);
      f0:	4668      	mov	r0, sp
      f2:	f000 fa9f 	bl	634 <adc_get_config_defaults>
  // config_adc.gain_factor = ADC_GAIN_FACTOR_DIV2;
  adc_init(&adc_instance, ADC, &config_adc);
      f6:	4c12      	ldr	r4, [pc, #72]	; (140 <configure_adc+0x54>)
      f8:	466a      	mov	r2, sp
      fa:	4912      	ldr	r1, [pc, #72]	; (144 <configure_adc+0x58>)
      fc:	0020      	movs	r0, r4
      fe:	f000 fabd 	bl	67c <adc_init>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     102:	6822      	ldr	r2, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     104:	7e53      	ldrb	r3, [r2, #25]
     106:	b25b      	sxtb	r3, r3
     108:	2b00      	cmp	r3, #0
     10a:	db15      	blt.n	138 <configure_adc+0x4c>
		return true;
	}

	return false;
     10c:	2100      	movs	r1, #0

	while (adc_is_syncing(module_inst)) {
     10e:	2900      	cmp	r1, #0
     110:	d1f8      	bne.n	104 <configure_adc+0x18>
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#   endif
#endif

	/* Disbale interrupt */
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
     112:	230f      	movs	r3, #15
     114:	7593      	strb	r3, [r2, #22]
	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
     116:	7613      	strb	r3, [r2, #24]

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     118:	7813      	ldrb	r3, [r2, #0]
     11a:	2002      	movs	r0, #2
     11c:	4303      	orrs	r3, r0
     11e:	b2db      	uxtb	r3, r3
     120:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
     122:	4b07      	ldr	r3, [pc, #28]	; (140 <configure_adc+0x54>)
     124:	681b      	ldr	r3, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     126:	7e5b      	ldrb	r3, [r3, #25]
     128:	b25b      	sxtb	r3, r3
     12a:	2b00      	cmp	r3, #0
     12c:	db06      	blt.n	13c <configure_adc+0x50>
	return false;
     12e:	000b      	movs	r3, r1

	while (adc_is_syncing(module_inst)) {
     130:	2b00      	cmp	r3, #0
     132:	d1f6      	bne.n	122 <configure_adc+0x36>
  adc_enable(&adc_instance);
}
     134:	b00c      	add	sp, #48	; 0x30
     136:	bd10      	pop	{r4, pc}
		return true;
     138:	2101      	movs	r1, #1
     13a:	e7e8      	b.n	10e <configure_adc+0x22>
     13c:	2301      	movs	r3, #1
     13e:	e7f7      	b.n	130 <configure_adc+0x44>
     140:	2000009c 	.word	0x2000009c
     144:	42002000 	.word	0x42002000

00000148 <sample_adc>:

void sample_adc(void) {
     148:	b510      	push	{r4, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     14a:	4b2c      	ldr	r3, [pc, #176]	; (1fc <sample_adc+0xb4>)
     14c:	681a      	ldr	r2, [r3, #0]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     14e:	7e53      	ldrb	r3, [r2, #25]
     150:	b25b      	sxtb	r3, r3
     152:	2b00      	cmp	r3, #0
     154:	db0f      	blt.n	176 <sample_adc+0x2e>
	return false;
     156:	2100      	movs	r1, #0

	while (adc_is_syncing(module_inst)) {
     158:	2900      	cmp	r1, #0
     15a:	d1f8      	bne.n	14e <sample_adc+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     15c:	7b13      	ldrb	r3, [r2, #12]
     15e:	2002      	movs	r0, #2
     160:	4303      	orrs	r3, r0
     162:	b2db      	uxtb	r3, r3
     164:	7313      	strb	r3, [r2, #12]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     166:	7e53      	ldrb	r3, [r2, #25]
     168:	b25b      	sxtb	r3, r3
     16a:	2b00      	cmp	r3, #0
     16c:	db05      	blt.n	17a <sample_adc+0x32>
	return false;
     16e:	0008      	movs	r0, r1

	while (adc_is_syncing(module_inst)) {
     170:	2800      	cmp	r0, #0
     172:	d1f8      	bne.n	166 <sample_adc+0x1e>
     174:	e00a      	b.n	18c <sample_adc+0x44>
		return true;
     176:	2101      	movs	r1, #1
     178:	e7ee      	b.n	158 <sample_adc+0x10>
     17a:	2001      	movs	r0, #1
     17c:	e7f8      	b.n	170 <sample_adc+0x28>
		status_flags |= ADC_STATUS_RESULT_READY;
     17e:	2201      	movs	r2, #1
     180:	e00b      	b.n	19a <sample_adc+0x52>
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
     182:	07d3      	lsls	r3, r2, #31
     184:	d412      	bmi.n	1ac <sample_adc+0x64>
		/* Result not ready */
		return STATUS_BUSY;
     186:	2305      	movs	r3, #5
  adc_start_conversion(&adc_instance);
  do {
  } while (adc_read(&adc_instance, &adc_result) == STATUS_BUSY);
     188:	2b05      	cmp	r3, #5
     18a:	d136      	bne.n	1fa <sample_adc+0xb2>
	Adc *const adc_module = module_inst->hw;
     18c:	4b1b      	ldr	r3, [pc, #108]	; (1fc <sample_adc+0xb4>)
     18e:	6819      	ldr	r1, [r3, #0]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     190:	7e0b      	ldrb	r3, [r1, #24]
     192:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     194:	07da      	lsls	r2, r3, #31
     196:	d4f2      	bmi.n	17e <sample_adc+0x36>
	uint32_t status_flags = 0;
     198:	2200      	movs	r2, #0
	if (int_flags & ADC_INTFLAG_WINMON) {
     19a:	075c      	lsls	r4, r3, #29
     19c:	d501      	bpl.n	1a2 <sample_adc+0x5a>
		status_flags |= ADC_STATUS_WINDOW;
     19e:	2402      	movs	r4, #2
     1a0:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     1a2:	079b      	lsls	r3, r3, #30
     1a4:	d5ed      	bpl.n	182 <sample_adc+0x3a>
		status_flags |= ADC_STATUS_OVERRUN;
     1a6:	2304      	movs	r3, #4
     1a8:	431a      	orrs	r2, r3
     1aa:	e7ea      	b.n	182 <sample_adc+0x3a>
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     1ac:	7e4b      	ldrb	r3, [r1, #25]
     1ae:	b25b      	sxtb	r3, r3
     1b0:	2b00      	cmp	r3, #0
     1b2:	db1c      	blt.n	1ee <sample_adc+0xa6>
	return false;
     1b4:	0003      	movs	r3, r0
	}

	Adc *const adc_module = module_inst->hw;

#if (SAMD) || (SAMHA1) || (SAMHA0) || (SAMR21)
	while (adc_is_syncing(module_inst)) {
     1b6:	2b00      	cmp	r3, #0
     1b8:	d1f8      	bne.n	1ac <sample_adc+0x64>
		/* Wait for synchronization */
	}
#endif

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
     1ba:	8b4a      	ldrh	r2, [r1, #26]
     1bc:	4b10      	ldr	r3, [pc, #64]	; (200 <sample_adc+0xb8>)
     1be:	801a      	strh	r2, [r3, #0]
	Adc *const adc_module = module_inst->hw;
     1c0:	4b0e      	ldr	r3, [pc, #56]	; (1fc <sample_adc+0xb4>)
     1c2:	6819      	ldr	r1, [r3, #0]
	adc_module->INTFLAG.reg = int_flags;
     1c4:	2301      	movs	r3, #1
     1c6:	760b      	strb	r3, [r1, #24]
	uint32_t int_flags = adc_module->INTFLAG.reg;
     1c8:	7e0b      	ldrb	r3, [r1, #24]
     1ca:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
     1cc:	07da      	lsls	r2, r3, #31
     1ce:	d410      	bmi.n	1f2 <sample_adc+0xaa>
	uint32_t status_flags = 0;
     1d0:	2200      	movs	r2, #0
	if (int_flags & ADC_INTFLAG_WINMON) {
     1d2:	075c      	lsls	r4, r3, #29
     1d4:	d501      	bpl.n	1da <sample_adc+0x92>
		status_flags |= ADC_STATUS_WINDOW;
     1d6:	2402      	movs	r4, #2
     1d8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
     1da:	079b      	lsls	r3, r3, #30
     1dc:	d501      	bpl.n	1e2 <sample_adc+0x9a>
		status_flags |= ADC_STATUS_OVERRUN;
     1de:	2304      	movs	r3, #4
     1e0:	431a      	orrs	r2, r3

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
     1e2:	0753      	lsls	r3, r2, #29
     1e4:	d507      	bpl.n	1f6 <sample_adc+0xae>
	adc_module->INTFLAG.reg = int_flags;
     1e6:	2302      	movs	r3, #2
     1e8:	760b      	strb	r3, [r1, #24]
		adc_clear_status(module_inst, ADC_STATUS_OVERRUN);
		return STATUS_ERR_OVERFLOW;
     1ea:	331c      	adds	r3, #28
     1ec:	e7cc      	b.n	188 <sample_adc+0x40>
		return true;
     1ee:	2301      	movs	r3, #1
     1f0:	e7e1      	b.n	1b6 <sample_adc+0x6e>
		status_flags |= ADC_STATUS_RESULT_READY;
     1f2:	2201      	movs	r2, #1
     1f4:	e7ed      	b.n	1d2 <sample_adc+0x8a>
	}

	return STATUS_OK;
     1f6:	2300      	movs	r3, #0
     1f8:	e7c6      	b.n	188 <sample_adc+0x40>
     1fa:	bd10      	pop	{r4, pc}
     1fc:	2000009c 	.word	0x2000009c
     200:	20000098 	.word	0x20000098

00000204 <_adc_set_config>:
 * \retval STATUS_ERR_INVALID_ARG  Invalid argument(s) were provided
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
     204:	b5f0      	push	{r4, r5, r6, r7, lr}
     206:	46d6      	mov	lr, sl
     208:	464f      	mov	r7, r9
     20a:	4646      	mov	r6, r8
     20c:	b5c0      	push	{r6, r7, lr}
     20e:	b096      	sub	sp, #88	; 0x58
     210:	4682      	mov	sl, r0
     212:	000f      	movs	r7, r1
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_REVISION_Msk) >> DSU_DID_REVISION_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     214:	6803      	ldr	r3, [r0, #0]
     216:	4699      	mov	r9, r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     218:	a915      	add	r1, sp, #84	; 0x54

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     21a:	783b      	ldrb	r3, [r7, #0]
     21c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     21e:	2013      	movs	r0, #19
     220:	f001 fe50 	bl	1ec4 <system_gclk_chan_set_config>
	system_gclk_chan_enable(ADC_GCLK_ID);
     224:	2013      	movs	r0, #19
     226:	f001 fe11 	bl	1e4c <system_gclk_chan_enable>

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     22a:	232c      	movs	r3, #44	; 0x2c
     22c:	5cfb      	ldrb	r3, [r7, r3]
     22e:	2b00      	cmp	r3, #0
     230:	d054      	beq.n	2dc <_adc_set_config+0xd8>
		uint8_t offset = config->pin_scan.offset_start_scan;
     232:	222b      	movs	r2, #43	; 0x2b
     234:	5cbe      	ldrb	r6, [r7, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     236:	7b3d      	ldrb	r5, [r7, #12]
		uint8_t start_pin =
     238:	1975      	adds	r5, r6, r5
     23a:	b2ed      	uxtb	r5, r5
		uint8_t end_pin =
     23c:	195b      	adds	r3, r3, r5
     23e:	b2db      	uxtb	r3, r3
     240:	4698      	mov	r8, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     242:	e003      	b.n	24c <_adc_set_config+0x48>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
     244:	3501      	adds	r5, #1
     246:	b2ed      	uxtb	r5, r5
			offset++;
     248:	3601      	adds	r6, #1
     24a:	b2f6      	uxtb	r6, r6
		while (start_pin < end_pin) {
     24c:	4545      	cmp	r5, r8
     24e:	d219      	bcs.n	284 <_adc_set_config+0x80>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     250:	240f      	movs	r4, #15
     252:	4034      	ands	r4, r6
     254:	7b3b      	ldrb	r3, [r7, #12]
     256:	18e4      	adds	r4, r4, r3
	const uint32_t pinmapping[] = {
     258:	2250      	movs	r2, #80	; 0x50
     25a:	49a7      	ldr	r1, [pc, #668]	; (4f8 <STACK_SIZE+0xf8>)
     25c:	a801      	add	r0, sp, #4
     25e:	f002 fd6d 	bl	2d3c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     262:	2c09      	cmp	r4, #9
     264:	d8ee      	bhi.n	244 <_adc_set_config+0x40>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     266:	00a4      	lsls	r4, r4, #2
     268:	ab01      	add	r3, sp, #4
     26a:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     26c:	2300      	movs	r3, #0
     26e:	466a      	mov	r2, sp
     270:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     272:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     274:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     276:	3301      	adds	r3, #1
     278:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     27a:	b2c0      	uxtb	r0, r0
     27c:	4669      	mov	r1, sp
     27e:	f001 fe8b 	bl	1f98 <system_pinmux_pin_set_config>
     282:	e7df      	b.n	244 <_adc_set_config+0x40>
		}
		_adc_configure_ain_pin(config->negative_input);
     284:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
     286:	2250      	movs	r2, #80	; 0x50
     288:	499b      	ldr	r1, [pc, #620]	; (4f8 <STACK_SIZE+0xf8>)
     28a:	a801      	add	r0, sp, #4
     28c:	f002 fd56 	bl	2d3c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     290:	2c09      	cmp	r4, #9
     292:	d914      	bls.n	2be <_adc_set_config+0xba>
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     294:	7d7b      	ldrb	r3, [r7, #21]
     296:	009b      	lsls	r3, r3, #2
     298:	b2db      	uxtb	r3, r3
     29a:	464a      	mov	r2, r9
     29c:	7013      	strb	r3, [r2, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     29e:	7dba      	ldrb	r2, [r7, #22]
     2a0:	01d2      	lsls	r2, r2, #7
			(config->reference);
     2a2:	2301      	movs	r3, #1
     2a4:	56fb      	ldrsb	r3, [r7, r3]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2a6:	4313      	orrs	r3, r2
     2a8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     2aa:	464a      	mov	r2, r9
     2ac:	7053      	strb	r3, [r2, #1]

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     2ae:	793b      	ldrb	r3, [r7, #4]
     2b0:	2b34      	cmp	r3, #52	; 0x34
     2b2:	d900      	bls.n	2b6 <_adc_set_config+0xb2>
     2b4:	e1b1      	b.n	61a <STACK_SIZE+0x21a>
     2b6:	009b      	lsls	r3, r3, #2
     2b8:	4a90      	ldr	r2, [pc, #576]	; (4fc <STACK_SIZE+0xfc>)
     2ba:	58d3      	ldr	r3, [r2, r3]
     2bc:	469f      	mov	pc, r3
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2be:	00a4      	lsls	r4, r4, #2
     2c0:	ab01      	add	r3, sp, #4
     2c2:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c4:	2300      	movs	r3, #0
     2c6:	466a      	mov	r2, sp
     2c8:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     2ca:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2cc:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     2ce:	3301      	adds	r3, #1
     2d0:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     2d2:	b2c0      	uxtb	r0, r0
     2d4:	4669      	mov	r1, sp
     2d6:	f001 fe5f 	bl	1f98 <system_pinmux_pin_set_config>
     2da:	e7db      	b.n	294 <_adc_set_config+0x90>
		_adc_configure_ain_pin(config->positive_input);
     2dc:	7b3c      	ldrb	r4, [r7, #12]
	const uint32_t pinmapping[] = {
     2de:	2250      	movs	r2, #80	; 0x50
     2e0:	4985      	ldr	r1, [pc, #532]	; (4f8 <STACK_SIZE+0xf8>)
     2e2:	a801      	add	r0, sp, #4
     2e4:	f002 fd2a 	bl	2d3c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2e8:	2c09      	cmp	r4, #9
     2ea:	d916      	bls.n	31a <_adc_set_config+0x116>
		_adc_configure_ain_pin(config->negative_input);
     2ec:	89fc      	ldrh	r4, [r7, #14]
	const uint32_t pinmapping[] = {
     2ee:	2250      	movs	r2, #80	; 0x50
     2f0:	4981      	ldr	r1, [pc, #516]	; (4f8 <STACK_SIZE+0xf8>)
     2f2:	a801      	add	r0, sp, #4
     2f4:	f002 fd22 	bl	2d3c <memcpy>
	if (pin <= ADC_EXTCHANNEL_MSB) {
     2f8:	2c09      	cmp	r4, #9
     2fa:	d8cb      	bhi.n	294 <_adc_set_config+0x90>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2fc:	00a4      	lsls	r4, r4, #2
     2fe:	ab01      	add	r3, sp, #4
     300:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     302:	2300      	movs	r3, #0
     304:	466a      	mov	r2, sp
     306:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     308:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     30a:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     30c:	3301      	adds	r3, #1
     30e:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     310:	b2c0      	uxtb	r0, r0
     312:	4669      	mov	r1, sp
     314:	f001 fe40 	bl	1f98 <system_pinmux_pin_set_config>
     318:	e7bc      	b.n	294 <_adc_set_config+0x90>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     31a:	00a4      	lsls	r4, r4, #2
     31c:	ab01      	add	r3, sp, #4
     31e:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     320:	2300      	movs	r3, #0
     322:	466a      	mov	r2, sp
     324:	7053      	strb	r3, [r2, #1]
	config->powersave    = false;
     326:	70d3      	strb	r3, [r2, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     328:	7093      	strb	r3, [r2, #2]
		config.mux_position = 1;
     32a:	3301      	adds	r3, #1
     32c:	7013      	strb	r3, [r2, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     32e:	b2c0      	uxtb	r0, r0
     330:	4669      	mov	r1, sp
     332:	f001 fe31 	bl	1f98 <system_pinmux_pin_set_config>
     336:	e7d9      	b.n	2ec <_adc_set_config+0xe8>
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     338:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     33a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     33c:	2301      	movs	r3, #1
     33e:	e01a      	b.n	376 <_adc_set_config+0x172>
		adjres = config->divide_result;
     340:	7c7b      	ldrb	r3, [r7, #17]
		accumulate = config->accumulate_samples;
     342:	7c3a      	ldrb	r2, [r7, #16]
		resolution = ADC_RESOLUTION_16BIT;
     344:	2010      	movs	r0, #16
		break;
     346:	e016      	b.n	376 <_adc_set_config+0x172>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     348:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     34a:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     34c:	2301      	movs	r3, #1
		break;
     34e:	e012      	b.n	376 <_adc_set_config+0x172>

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     350:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     352:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     354:	2300      	movs	r3, #0
		break;
     356:	e00e      	b.n	376 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     358:	2200      	movs	r2, #0
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     35a:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     35c:	2300      	movs	r3, #0
		break;
     35e:	e00a      	b.n	376 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     360:	2200      	movs	r2, #0
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     362:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     364:	2300      	movs	r3, #0
		break;
     366:	e006      	b.n	376 <_adc_set_config+0x172>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     368:	2200      	movs	r2, #0
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     36a:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     36c:	2300      	movs	r3, #0
		break;
     36e:	e002      	b.n	376 <_adc_set_config+0x172>
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     370:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     372:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     374:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     376:	011b      	lsls	r3, r3, #4
     378:	2170      	movs	r1, #112	; 0x70
     37a:	400b      	ands	r3, r1
     37c:	4313      	orrs	r3, r2
     37e:	464a      	mov	r2, r9
     380:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     382:	7dfb      	ldrb	r3, [r7, #23]
     384:	2b3f      	cmp	r3, #63	; 0x3f
     386:	d906      	bls.n	396 <_adc_set_config+0x192>
		return STATUS_ERR_INVALID_ARG;
     388:	2017      	movs	r0, #23
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
}
     38a:	b016      	add	sp, #88	; 0x58
     38c:	bc1c      	pop	{r2, r3, r4}
     38e:	4690      	mov	r8, r2
     390:	4699      	mov	r9, r3
     392:	46a2      	mov	sl, r4
     394:	bdf0      	pop	{r4, r5, r6, r7, pc}
		adc_module->SAMPCTRL.reg =
     396:	70d3      	strb	r3, [r2, #3]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     398:	4653      	mov	r3, sl
     39a:	681b      	ldr	r3, [r3, #0]
     39c:	7e5b      	ldrb	r3, [r3, #25]
     39e:	b25b      	sxtb	r3, r3
     3a0:	2b00      	cmp	r3, #0
     3a2:	db27      	blt.n	3f4 <_adc_set_config+0x1f0>
	return false;
     3a4:	2200      	movs	r2, #0
	while (adc_is_syncing(module_inst)) {
     3a6:	2a00      	cmp	r2, #0
     3a8:	d1f6      	bne.n	398 <_adc_set_config+0x194>
			config->clock_prescaler |
     3aa:	887b      	ldrh	r3, [r7, #2]
     3ac:	4303      	orrs	r3, r0
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3ae:	2124      	movs	r1, #36	; 0x24
     3b0:	5c79      	ldrb	r1, [r7, r1]
     3b2:	00c9      	lsls	r1, r1, #3
			resolution |
     3b4:	430b      	orrs	r3, r1
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3b6:	7d39      	ldrb	r1, [r7, #20]
     3b8:	0089      	lsls	r1, r1, #2
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     3ba:	430b      	orrs	r3, r1
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3bc:	7cb9      	ldrb	r1, [r7, #18]
     3be:	0049      	lsls	r1, r1, #1
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
     3c0:	430b      	orrs	r3, r1
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);
     3c2:	7cf9      	ldrb	r1, [r7, #19]
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
     3c4:	430b      	orrs	r3, r1
	adc_module->CTRLB.reg =
     3c6:	4649      	mov	r1, r9
     3c8:	808b      	strh	r3, [r1, #4]
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     3ca:	7e3b      	ldrb	r3, [r7, #24]
     3cc:	2b00      	cmp	r3, #0
     3ce:	d100      	bne.n	3d2 <_adc_set_config+0x1ce>
     3d0:	e0a8      	b.n	524 <STACK_SIZE+0x124>
		switch (resolution) {
     3d2:	2810      	cmp	r0, #16
     3d4:	d06c      	beq.n	4b0 <STACK_SIZE+0xb0>
     3d6:	d90f      	bls.n	3f8 <_adc_set_config+0x1f4>
     3d8:	2820      	cmp	r0, #32
     3da:	d030      	beq.n	43e <STACK_SIZE+0x3e>
     3dc:	2830      	cmp	r0, #48	; 0x30
     3de:	d000      	beq.n	3e2 <_adc_set_config+0x1de>
     3e0:	e0a0      	b.n	524 <STACK_SIZE+0x124>
			if (config->differential_mode &&
     3e2:	7cf9      	ldrb	r1, [r7, #19]
     3e4:	2900      	cmp	r1, #0
     3e6:	d020      	beq.n	42a <STACK_SIZE+0x2a>
					(config->window.window_lower_value > 127 ||
     3e8:	69f9      	ldr	r1, [r7, #28]
     3ea:	3180      	adds	r1, #128	; 0x80
			if (config->differential_mode &&
     3ec:	29ff      	cmp	r1, #255	; 0xff
     3ee:	d913      	bls.n	418 <STACK_SIZE+0x18>
				return STATUS_ERR_INVALID_ARG;
     3f0:	2017      	movs	r0, #23
     3f2:	e7ca      	b.n	38a <_adc_set_config+0x186>
		return true;
     3f4:	2201      	movs	r2, #1
     3f6:	e7d6      	b.n	3a6 <_adc_set_config+0x1a2>
		switch (resolution) {
     3f8:	2800      	cmp	r0, #0
     3fa:	d000      	beq.n	3fe <_adc_set_config+0x1fa>
     3fc:	e092      	b.n	524 <STACK_SIZE+0x124>
			if (config->differential_mode &&
     3fe:	7cf9      	ldrb	r1, [r7, #19]
     400:	2900      	cmp	r1, #0
     402:	d04a      	beq.n	49a <STACK_SIZE+0x9a>
					(config->window.window_lower_value > 2047 ||
     404:	69f9      	ldr	r1, [r7, #28]
     406:	2080      	movs	r0, #128	; 0x80
     408:	0100      	lsls	r0, r0, #4
     40a:	4684      	mov	ip, r0
     40c:	4461      	add	r1, ip
			if (config->differential_mode &&
     40e:	483c      	ldr	r0, [pc, #240]	; (500 <STACK_SIZE+0x100>)
     410:	4281      	cmp	r1, r0
     412:	d937      	bls.n	484 <STACK_SIZE+0x84>
				return STATUS_ERR_INVALID_ARG;
     414:	2017      	movs	r0, #23
     416:	e7b8      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 127 ||
     418:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -128 ||
     41a:	297f      	cmp	r1, #127	; 0x7f
     41c:	dd01      	ble.n	422 <STACK_SIZE+0x22>
				return STATUS_ERR_INVALID_ARG;
     41e:	2017      	movs	r0, #23
     420:	e7b3      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 127 ||
     422:	3180      	adds	r1, #128	; 0x80
     424:	da01      	bge.n	42a <STACK_SIZE+0x2a>
				return STATUS_ERR_INVALID_ARG;
     426:	2017      	movs	r0, #23
     428:	e7af      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 255 ||
     42a:	69f9      	ldr	r1, [r7, #28]
     42c:	29ff      	cmp	r1, #255	; 0xff
     42e:	dd01      	ble.n	434 <STACK_SIZE+0x34>
				return STATUS_ERR_INVALID_ARG;
     430:	2017      	movs	r0, #23
     432:	e7aa      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 255 ||
     434:	6a39      	ldr	r1, [r7, #32]
     436:	29ff      	cmp	r1, #255	; 0xff
     438:	dd74      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     43a:	2017      	movs	r0, #23
     43c:	e7a5      	b.n	38a <_adc_set_config+0x186>
			if (config->differential_mode &&
     43e:	7cf9      	ldrb	r1, [r7, #19]
     440:	2900      	cmp	r1, #0
     442:	d014      	beq.n	46e <STACK_SIZE+0x6e>
					(config->window.window_lower_value > 511 ||
     444:	69f9      	ldr	r1, [r7, #28]
     446:	2080      	movs	r0, #128	; 0x80
     448:	0080      	lsls	r0, r0, #2
     44a:	4684      	mov	ip, r0
     44c:	4461      	add	r1, ip
			if (config->differential_mode &&
     44e:	482d      	ldr	r0, [pc, #180]	; (504 <STACK_SIZE+0x104>)
     450:	4281      	cmp	r1, r0
     452:	d901      	bls.n	458 <STACK_SIZE+0x58>
				return STATUS_ERR_INVALID_ARG;
     454:	2017      	movs	r0, #23
     456:	e798      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 511 ||
     458:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -512 ||
     45a:	482b      	ldr	r0, [pc, #172]	; (508 <STACK_SIZE+0x108>)
     45c:	4281      	cmp	r1, r0
     45e:	dd01      	ble.n	464 <STACK_SIZE+0x64>
				return STATUS_ERR_INVALID_ARG;
     460:	2017      	movs	r0, #23
     462:	e792      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 511 ||
     464:	4829      	ldr	r0, [pc, #164]	; (50c <STACK_SIZE+0x10c>)
     466:	4281      	cmp	r1, r0
     468:	da01      	bge.n	46e <STACK_SIZE+0x6e>
				return STATUS_ERR_INVALID_ARG;
     46a:	2017      	movs	r0, #23
     46c:	e78d      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 1023 ||
     46e:	4925      	ldr	r1, [pc, #148]	; (504 <STACK_SIZE+0x104>)
     470:	69f8      	ldr	r0, [r7, #28]
     472:	4288      	cmp	r0, r1
     474:	dd01      	ble.n	47a <STACK_SIZE+0x7a>
				return STATUS_ERR_INVALID_ARG;
     476:	2017      	movs	r0, #23
     478:	e787      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 1023 ||
     47a:	6a38      	ldr	r0, [r7, #32]
     47c:	4288      	cmp	r0, r1
     47e:	dd51      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     480:	2017      	movs	r0, #23
     482:	e782      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 2047 ||
     484:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -2048 ||
     486:	4822      	ldr	r0, [pc, #136]	; (510 <STACK_SIZE+0x110>)
     488:	4281      	cmp	r1, r0
     48a:	dd01      	ble.n	490 <STACK_SIZE+0x90>
				return STATUS_ERR_INVALID_ARG;
     48c:	2017      	movs	r0, #23
     48e:	e77c      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 2047 ||
     490:	4820      	ldr	r0, [pc, #128]	; (514 <STACK_SIZE+0x114>)
     492:	4281      	cmp	r1, r0
     494:	da01      	bge.n	49a <STACK_SIZE+0x9a>
				return STATUS_ERR_INVALID_ARG;
     496:	2017      	movs	r0, #23
     498:	e777      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 4095 ||
     49a:	4919      	ldr	r1, [pc, #100]	; (500 <STACK_SIZE+0x100>)
     49c:	69f8      	ldr	r0, [r7, #28]
     49e:	4288      	cmp	r0, r1
     4a0:	dd01      	ble.n	4a6 <STACK_SIZE+0xa6>
				return STATUS_ERR_INVALID_ARG;
     4a2:	2017      	movs	r0, #23
     4a4:	e771      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 4095 ||
     4a6:	6a38      	ldr	r0, [r7, #32]
     4a8:	4288      	cmp	r0, r1
     4aa:	dd3b      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     4ac:	2017      	movs	r0, #23
     4ae:	e76c      	b.n	38a <_adc_set_config+0x186>
			if (config->differential_mode &&
     4b0:	7cf9      	ldrb	r1, [r7, #19]
     4b2:	2900      	cmp	r1, #0
     4b4:	d014      	beq.n	4e0 <STACK_SIZE+0xe0>
					(config->window.window_lower_value > 32767 ||
     4b6:	69f9      	ldr	r1, [r7, #28]
     4b8:	2080      	movs	r0, #128	; 0x80
     4ba:	0200      	lsls	r0, r0, #8
     4bc:	4684      	mov	ip, r0
     4be:	4461      	add	r1, ip
			if (config->differential_mode &&
     4c0:	4815      	ldr	r0, [pc, #84]	; (518 <STACK_SIZE+0x118>)
     4c2:	4281      	cmp	r1, r0
     4c4:	d901      	bls.n	4ca <STACK_SIZE+0xca>
				return STATUS_ERR_INVALID_ARG;
     4c6:	2017      	movs	r0, #23
     4c8:	e75f      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 32767 ||
     4ca:	6a39      	ldr	r1, [r7, #32]
					config->window.window_lower_value < -32768 ||
     4cc:	4813      	ldr	r0, [pc, #76]	; (51c <STACK_SIZE+0x11c>)
     4ce:	4281      	cmp	r1, r0
     4d0:	dd01      	ble.n	4d6 <STACK_SIZE+0xd6>
				return STATUS_ERR_INVALID_ARG;
     4d2:	2017      	movs	r0, #23
     4d4:	e759      	b.n	38a <_adc_set_config+0x186>
					config->window.window_upper_value > 32767 ||
     4d6:	4812      	ldr	r0, [pc, #72]	; (520 <STACK_SIZE+0x120>)
     4d8:	4281      	cmp	r1, r0
     4da:	da01      	bge.n	4e0 <STACK_SIZE+0xe0>
				return STATUS_ERR_INVALID_ARG;
     4dc:	2017      	movs	r0, #23
     4de:	e754      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 65535 ||
     4e0:	490d      	ldr	r1, [pc, #52]	; (518 <STACK_SIZE+0x118>)
     4e2:	69f8      	ldr	r0, [r7, #28]
     4e4:	4288      	cmp	r0, r1
     4e6:	dd01      	ble.n	4ec <STACK_SIZE+0xec>
				return STATUS_ERR_INVALID_ARG;
     4e8:	2017      	movs	r0, #23
     4ea:	e74e      	b.n	38a <_adc_set_config+0x186>
			} else if (config->window.window_lower_value > 65535 ||
     4ec:	6a38      	ldr	r0, [r7, #32]
     4ee:	4288      	cmp	r0, r1
     4f0:	dd18      	ble.n	524 <STACK_SIZE+0x124>
				return STATUS_ERR_INVALID_ARG;
     4f2:	2017      	movs	r0, #23
     4f4:	e749      	b.n	38a <_adc_set_config+0x186>
     4f6:	46c0      	nop			; (mov r8, r8)
     4f8:	00002e24 	.word	0x00002e24
     4fc:	00002d50 	.word	0x00002d50
     500:	00000fff 	.word	0x00000fff
     504:	000003ff 	.word	0x000003ff
     508:	000001ff 	.word	0x000001ff
     50c:	fffffe00 	.word	0xfffffe00
     510:	000007ff 	.word	0x000007ff
     514:	fffff800 	.word	0xfffff800
     518:	0000ffff 	.word	0x0000ffff
     51c:	00007fff 	.word	0x00007fff
     520:	ffff8000 	.word	0xffff8000
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     524:	4651      	mov	r1, sl
     526:	6809      	ldr	r1, [r1, #0]
     528:	7e49      	ldrb	r1, [r1, #25]
     52a:	b249      	sxtb	r1, r1
     52c:	2900      	cmp	r1, #0
     52e:	db26      	blt.n	57e <STACK_SIZE+0x17e>
	return false;
     530:	0011      	movs	r1, r2
	while (adc_is_syncing(module_inst)) {
     532:	2900      	cmp	r1, #0
     534:	d1f6      	bne.n	524 <STACK_SIZE+0x124>
	adc_module->WINCTRL.reg = config->window.window_mode;
     536:	464a      	mov	r2, r9
     538:	7213      	strb	r3, [r2, #8]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     53a:	4653      	mov	r3, sl
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	7e5b      	ldrb	r3, [r3, #25]
     540:	b25b      	sxtb	r3, r3
     542:	2b00      	cmp	r3, #0
     544:	db1d      	blt.n	582 <STACK_SIZE+0x182>
	return false;
     546:	000a      	movs	r2, r1
	while (adc_is_syncing(module_inst)) {
     548:	2a00      	cmp	r2, #0
     54a:	d1f6      	bne.n	53a <STACK_SIZE+0x13a>
	adc_module->WINLT.reg =
     54c:	8bbb      	ldrh	r3, [r7, #28]
     54e:	4649      	mov	r1, r9
     550:	838b      	strh	r3, [r1, #28]
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     552:	4653      	mov	r3, sl
     554:	681b      	ldr	r3, [r3, #0]
     556:	7e5b      	ldrb	r3, [r3, #25]
     558:	b25b      	sxtb	r3, r3
     55a:	2b00      	cmp	r3, #0
     55c:	db13      	blt.n	586 <STACK_SIZE+0x186>
	return false;
     55e:	0011      	movs	r1, r2
	while (adc_is_syncing(module_inst)) {
     560:	2900      	cmp	r1, #0
     562:	d1f6      	bne.n	552 <STACK_SIZE+0x152>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     564:	8c3b      	ldrh	r3, [r7, #32]
     566:	464a      	mov	r2, r9
     568:	8413      	strh	r3, [r2, #32]
	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     56a:	232c      	movs	r3, #44	; 0x2c
     56c:	5cfb      	ldrb	r3, [r7, r3]
	if (inputs_to_scan > 0) {
     56e:	2b00      	cmp	r3, #0
     570:	d001      	beq.n	576 <STACK_SIZE+0x176>
		inputs_to_scan--;
     572:	3b01      	subs	r3, #1
     574:	b2db      	uxtb	r3, r3
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     576:	2b0f      	cmp	r3, #15
     578:	d907      	bls.n	58a <STACK_SIZE+0x18a>
		return STATUS_ERR_INVALID_ARG;
     57a:	2017      	movs	r0, #23
     57c:	e705      	b.n	38a <_adc_set_config+0x186>
		return true;
     57e:	2101      	movs	r1, #1
     580:	e7d7      	b.n	532 <STACK_SIZE+0x132>
     582:	2201      	movs	r2, #1
     584:	e7e0      	b.n	548 <STACK_SIZE+0x148>
     586:	2101      	movs	r1, #1
     588:	e7ea      	b.n	560 <STACK_SIZE+0x160>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     58a:	222b      	movs	r2, #43	; 0x2b
     58c:	5cba      	ldrb	r2, [r7, r2]
	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     58e:	2a0f      	cmp	r2, #15
     590:	d901      	bls.n	596 <STACK_SIZE+0x196>
		return STATUS_ERR_INVALID_ARG;
     592:	2017      	movs	r0, #23
     594:	e6f9      	b.n	38a <_adc_set_config+0x186>
	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     596:	4650      	mov	r0, sl
     598:	6800      	ldr	r0, [r0, #0]
     59a:	7e40      	ldrb	r0, [r0, #25]
     59c:	b240      	sxtb	r0, r0
     59e:	2800      	cmp	r0, #0
     5a0:	da39      	bge.n	616 <STACK_SIZE+0x216>
		return true;
     5a2:	2001      	movs	r0, #1
	while (adc_is_syncing(module_inst)) {
     5a4:	2800      	cmp	r0, #0
     5a6:	d1f6      	bne.n	596 <STACK_SIZE+0x196>
			(config->pin_scan.offset_start_scan <<
     5a8:	0512      	lsls	r2, r2, #20
			config->gain_factor |
     5aa:	68b9      	ldr	r1, [r7, #8]
     5ac:	430a      	orrs	r2, r1
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     5ae:	041b      	lsls	r3, r3, #16
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     5b0:	4313      	orrs	r3, r2
			config->negative_input |
     5b2:	89fa      	ldrh	r2, [r7, #14]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     5b4:	4313      	orrs	r3, r2
			config->positive_input;
     5b6:	7b3a      	ldrb	r2, [r7, #12]
			config->negative_input |
     5b8:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     5ba:	464a      	mov	r2, r9
     5bc:	6113      	str	r3, [r2, #16]
	adc_module->EVCTRL.reg = config->event_action;
     5be:	232a      	movs	r3, #42	; 0x2a
     5c0:	5cfb      	ldrb	r3, [r7, r3]
     5c2:	7513      	strb	r3, [r2, #20]
	adc_module->INTENCLR.reg =
     5c4:	230f      	movs	r3, #15
     5c6:	7593      	strb	r3, [r2, #22]
	if (config->correction.correction_enable){
     5c8:	3315      	adds	r3, #21
     5ca:	5cfb      	ldrb	r3, [r7, r3]
     5cc:	2b00      	cmp	r3, #0
     5ce:	d00f      	beq.n	5f0 <STACK_SIZE+0x1f0>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     5d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
     5d2:	4a15      	ldr	r2, [pc, #84]	; (628 <STACK_SIZE+0x228>)
     5d4:	4293      	cmp	r3, r2
     5d6:	d822      	bhi.n	61e <STACK_SIZE+0x21e>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     5d8:	464a      	mov	r2, r9
     5da:	8493      	strh	r3, [r2, #36]	; 0x24
		if (config->correction.offset_correction > 2047 ||
     5dc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
     5de:	2380      	movs	r3, #128	; 0x80
     5e0:	011b      	lsls	r3, r3, #4
     5e2:	18d3      	adds	r3, r2, r3
     5e4:	b29b      	uxth	r3, r3
     5e6:	4910      	ldr	r1, [pc, #64]	; (628 <STACK_SIZE+0x228>)
     5e8:	428b      	cmp	r3, r1
     5ea:	d81a      	bhi.n	622 <STACK_SIZE+0x222>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     5ec:	464b      	mov	r3, r9
     5ee:	84da      	strh	r2, [r3, #38]	; 0x26
			ADC_CALIB_BIAS_CAL(
     5f0:	4b0e      	ldr	r3, [pc, #56]	; (62c <STACK_SIZE+0x22c>)
     5f2:	681b      	ldr	r3, [r3, #0]
     5f4:	08db      	lsrs	r3, r3, #3
     5f6:	021b      	lsls	r3, r3, #8
     5f8:	22e0      	movs	r2, #224	; 0xe0
     5fa:	00d2      	lsls	r2, r2, #3
     5fc:	4013      	ands	r3, r2
			ADC_CALIB_LINEARITY_CAL(
     5fe:	490c      	ldr	r1, [pc, #48]	; (630 <STACK_SIZE+0x230>)
     600:	680a      	ldr	r2, [r1, #0]
     602:	6849      	ldr	r1, [r1, #4]
     604:	0149      	lsls	r1, r1, #5
     606:	0ed2      	lsrs	r2, r2, #27
     608:	430a      	orrs	r2, r1
     60a:	b2d2      	uxtb	r2, r2
			) |
     60c:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     60e:	464a      	mov	r2, r9
     610:	8513      	strh	r3, [r2, #40]	; 0x28
	return STATUS_OK;
     612:	2000      	movs	r0, #0
     614:	e6b9      	b.n	38a <_adc_set_config+0x186>
	return false;
     616:	0008      	movs	r0, r1
     618:	e7c4      	b.n	5a4 <STACK_SIZE+0x1a4>
		return STATUS_ERR_INVALID_ARG;
     61a:	2017      	movs	r0, #23
     61c:	e6b5      	b.n	38a <_adc_set_config+0x186>
			return STATUS_ERR_INVALID_ARG;
     61e:	2017      	movs	r0, #23
     620:	e6b3      	b.n	38a <_adc_set_config+0x186>
			return STATUS_ERR_INVALID_ARG;
     622:	2017      	movs	r0, #23
     624:	e6b1      	b.n	38a <_adc_set_config+0x186>
     626:	46c0      	nop			; (mov r8, r8)
     628:	00000fff 	.word	0x00000fff
     62c:	00806024 	.word	0x00806024
     630:	00806020 	.word	0x00806020

00000634 <adc_get_config_defaults>:
{
     634:	b510      	push	{r4, lr}
	config->clock_source                  = GCLK_GENERATOR_0;
     636:	2200      	movs	r2, #0
     638:	2300      	movs	r3, #0
     63a:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     63c:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     63e:	2100      	movs	r1, #0
     640:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     642:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     644:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     646:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     648:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     64a:	6082      	str	r2, [r0, #8]
 	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     64c:	7303      	strb	r3, [r0, #12]
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     64e:	24c0      	movs	r4, #192	; 0xc0
     650:	0164      	lsls	r4, r4, #5
     652:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     654:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     656:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     658:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     65a:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     65c:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     65e:	242a      	movs	r4, #42	; 0x2a
     660:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     662:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     664:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     666:	3c06      	subs	r4, #6
     668:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     66a:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     66c:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     66e:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     670:	232b      	movs	r3, #43	; 0x2b
     672:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     674:	3301      	adds	r3, #1
     676:	54c1      	strb	r1, [r0, r3]
}
     678:	bd10      	pop	{r4, pc}
	...

0000067c <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     67c:	b570      	push	{r4, r5, r6, lr}
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     67e:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     680:	4c0e      	ldr	r4, [pc, #56]	; (6bc <adc_init+0x40>)
     682:	6a25      	ldr	r5, [r4, #32]
     684:	2380      	movs	r3, #128	; 0x80
     686:	005b      	lsls	r3, r3, #1
     688:	432b      	orrs	r3, r5
     68a:	6223      	str	r3, [r4, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     68c:	780b      	ldrb	r3, [r1, #0]
     68e:	07db      	lsls	r3, r3, #31
     690:	d501      	bpl.n	696 <adc_init+0x1a>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     692:	2005      	movs	r0, #5
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     694:	bd70      	pop	{r4, r5, r6, pc}
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     696:	780b      	ldrb	r3, [r1, #0]
     698:	079b      	lsls	r3, r3, #30
     69a:	d501      	bpl.n	6a0 <adc_init+0x24>
		return STATUS_ERR_DENIED;
     69c:	201c      	movs	r0, #28
     69e:	e7f9      	b.n	694 <adc_init+0x18>
	module_inst->reference = config->reference;
     6a0:	7853      	ldrb	r3, [r2, #1]
     6a2:	7103      	strb	r3, [r0, #4]
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     6a4:	2b00      	cmp	r3, #0
     6a6:	d104      	bne.n	6b2 <adc_init+0x36>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     6a8:	4905      	ldr	r1, [pc, #20]	; (6c0 <adc_init+0x44>)
     6aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
     6ac:	2404      	movs	r4, #4
     6ae:	4323      	orrs	r3, r4
     6b0:	640b      	str	r3, [r1, #64]	; 0x40
	return _adc_set_config(module_inst, config);
     6b2:	0011      	movs	r1, r2
     6b4:	f7ff fda6 	bl	204 <_adc_set_config>
     6b8:	e7ec      	b.n	694 <adc_init+0x18>
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	40000400 	.word	0x40000400
     6c0:	40000800 	.word	0x40000800

000006c4 <extint_register_callback>:
	const enum extint_callback_type type)
{
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     6c4:	2a00      	cmp	r2, #0
     6c6:	d001      	beq.n	6cc <extint_register_callback+0x8>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6c8:	2017      	movs	r0, #23
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6ca:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     6cc:	008b      	lsls	r3, r1, #2
     6ce:	4a07      	ldr	r2, [pc, #28]	; (6ec <extint_register_callback+0x28>)
     6d0:	589b      	ldr	r3, [r3, r2]
     6d2:	2b00      	cmp	r3, #0
     6d4:	d003      	beq.n	6de <extint_register_callback+0x1a>
	} else if (_extint_dev.callbacks[channel] == callback) {
     6d6:	4283      	cmp	r3, r0
     6d8:	d005      	beq.n	6e6 <extint_register_callback+0x22>
	return STATUS_ERR_ALREADY_INITIALIZED;
     6da:	201d      	movs	r0, #29
     6dc:	e7f5      	b.n	6ca <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     6de:	0089      	lsls	r1, r1, #2
     6e0:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     6e2:	2000      	movs	r0, #0
     6e4:	e7f1      	b.n	6ca <extint_register_callback+0x6>
		return STATUS_OK;
     6e6:	2000      	movs	r0, #0
     6e8:	e7ef      	b.n	6ca <extint_register_callback+0x6>
     6ea:	46c0      	nop			; (mov r8, r8)
     6ec:	200000a8 	.word	0x200000a8

000006f0 <extint_chan_enable_callback>:
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     6f0:	2900      	cmp	r1, #0
     6f2:	d001      	beq.n	6f8 <extint_chan_enable_callback+0x8>

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     6f4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     6f6:	4770      	bx	lr
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
	uint8_t eic_index = (channel / 32);

	if (eic_index < EIC_INST_NUM) {
     6f8:	281f      	cmp	r0, #31
     6fa:	d905      	bls.n	708 <extint_chan_enable_callback+0x18>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     6fc:	2200      	movs	r2, #0
		eic->INTENSET.reg = (1UL << channel);
     6fe:	2301      	movs	r3, #1
     700:	4083      	lsls	r3, r0
     702:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     704:	2000      	movs	r0, #0
     706:	e7f6      	b.n	6f6 <extint_chan_enable_callback+0x6>
		return eics[eic_index];
     708:	4a00      	ldr	r2, [pc, #0]	; (70c <extint_chan_enable_callback+0x1c>)
     70a:	e7f8      	b.n	6fe <extint_chan_enable_callback+0xe>
     70c:	40001800 	.word	0x40001800

00000710 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     710:	b510      	push	{r4, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     712:	2200      	movs	r2, #0
     714:	4b0f      	ldr	r3, [pc, #60]	; (754 <EIC_Handler+0x44>)
     716:	701a      	strb	r2, [r3, #0]
     718:	e005      	b.n	726 <EIC_Handler+0x16>
     71a:	480f      	ldr	r0, [pc, #60]	; (758 <EIC_Handler+0x48>)
     71c:	e00a      	b.n	734 <EIC_Handler+0x24>
     71e:	4a0d      	ldr	r2, [pc, #52]	; (754 <EIC_Handler+0x44>)
     720:	7813      	ldrb	r3, [r2, #0]
     722:	3301      	adds	r3, #1
     724:	7013      	strb	r3, [r2, #0]
     726:	4b0b      	ldr	r3, [pc, #44]	; (754 <EIC_Handler+0x44>)
     728:	781b      	ldrb	r3, [r3, #0]
     72a:	2b0f      	cmp	r3, #15
     72c:	d811      	bhi.n	752 <EIC_Handler+0x42>
	if (eic_index < EIC_INST_NUM) {
     72e:	2b1f      	cmp	r3, #31
     730:	d9f3      	bls.n	71a <EIC_Handler+0xa>
		return NULL;
     732:	2000      	movs	r0, #0
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     734:	211f      	movs	r1, #31
     736:	4019      	ands	r1, r3
     738:	2201      	movs	r2, #1
     73a:	408a      	lsls	r2, r1

	return (eic_module->INTFLAG.reg & eic_mask);
     73c:	6901      	ldr	r1, [r0, #16]
		if (extint_chan_is_detected(_current_channel)) {
     73e:	4211      	tst	r1, r2
     740:	d0ed      	beq.n	71e <EIC_Handler+0xe>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     742:	6102      	str	r2, [r0, #16]
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     744:	009b      	lsls	r3, r3, #2
     746:	4a05      	ldr	r2, [pc, #20]	; (75c <EIC_Handler+0x4c>)
     748:	589b      	ldr	r3, [r3, r2]
     74a:	2b00      	cmp	r3, #0
     74c:	d0e7      	beq.n	71e <EIC_Handler+0xe>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     74e:	4798      	blx	r3
     750:	e7e5      	b.n	71e <EIC_Handler+0xe>
			}
		}
	}
}
     752:	bd10      	pop	{r4, pc}
     754:	200000a4 	.word	0x200000a4
     758:	40001800 	.word	0x40001800
     75c:	200000a8 	.word	0x200000a8

00000760 <_extint_enable>:
void _extint_enable(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     760:	2200      	movs	r2, #0
     762:	2a00      	cmp	r2, #0
     764:	d006      	beq.n	774 <_extint_enable+0x14>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     766:	2300      	movs	r3, #0
     768:	2b00      	cmp	r3, #0
     76a:	d00b      	beq.n	784 <_extint_enable+0x24>
	return false;
     76c:	2300      	movs	r3, #0
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
	}

	while (extint_is_syncing()) {
     76e:	2b00      	cmp	r3, #0
     770:	d1f9      	bne.n	766 <_extint_enable+0x6>
		/* Wait for all hardware modules to complete synchronization */
	}
}
     772:	4770      	bx	lr
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     774:	4908      	ldr	r1, [pc, #32]	; (798 <_extint_enable+0x38>)
     776:	780b      	ldrb	r3, [r1, #0]
     778:	2002      	movs	r0, #2
     77a:	4303      	orrs	r3, r0
     77c:	b2db      	uxtb	r3, r3
     77e:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     780:	3201      	adds	r2, #1
     782:	e7ee      	b.n	762 <_extint_enable+0x2>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     784:	4a04      	ldr	r2, [pc, #16]	; (798 <_extint_enable+0x38>)
     786:	7852      	ldrb	r2, [r2, #1]
     788:	b252      	sxtb	r2, r2
     78a:	2a00      	cmp	r2, #0
     78c:	db01      	blt.n	792 <_extint_enable+0x32>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     78e:	3301      	adds	r3, #1
     790:	e7ea      	b.n	768 <_extint_enable+0x8>
			return true;
     792:	2301      	movs	r3, #1
     794:	e7eb      	b.n	76e <_extint_enable+0xe>
     796:	46c0      	nop			; (mov r8, r8)
     798:	40001800 	.word	0x40001800

0000079c <_system_extint_init>:
{
     79c:	b500      	push	{lr}
     79e:	b083      	sub	sp, #12
			PM->APBAMASK.reg |= mask;
     7a0:	4a1b      	ldr	r2, [pc, #108]	; (810 <_system_extint_init+0x74>)
     7a2:	6993      	ldr	r3, [r2, #24]
     7a4:	2140      	movs	r1, #64	; 0x40
     7a6:	430b      	orrs	r3, r1
     7a8:	6193      	str	r3, [r2, #24]
     7aa:	a901      	add	r1, sp, #4
     7ac:	2300      	movs	r3, #0
     7ae:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     7b0:	2005      	movs	r0, #5
     7b2:	f001 fb87 	bl	1ec4 <system_gclk_chan_set_config>
	system_gclk_chan_enable(EIC_GCLK_ID);
     7b6:	2005      	movs	r0, #5
     7b8:	f001 fb48 	bl	1e4c <system_gclk_chan_enable>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7bc:	2200      	movs	r2, #0
     7be:	2a00      	cmp	r2, #0
     7c0:	d006      	beq.n	7d0 <_system_extint_init+0x34>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7c2:	2300      	movs	r3, #0
     7c4:	2b00      	cmp	r3, #0
     7c6:	d00b      	beq.n	7e0 <_system_extint_init+0x44>
	return false;
     7c8:	2300      	movs	r3, #0
	while (extint_is_syncing()) {
     7ca:	2b00      	cmp	r3, #0
     7cc:	d1f9      	bne.n	7c2 <_system_extint_init+0x26>
     7ce:	e016      	b.n	7fe <_system_extint_init+0x62>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     7d0:	4910      	ldr	r1, [pc, #64]	; (814 <_system_extint_init+0x78>)
     7d2:	780b      	ldrb	r3, [r1, #0]
     7d4:	2001      	movs	r0, #1
     7d6:	4303      	orrs	r3, r0
     7d8:	b2db      	uxtb	r3, r3
     7da:	700b      	strb	r3, [r1, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7dc:	3201      	adds	r2, #1
     7de:	e7ee      	b.n	7be <_system_extint_init+0x22>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     7e0:	4a0c      	ldr	r2, [pc, #48]	; (814 <_system_extint_init+0x78>)
     7e2:	7852      	ldrb	r2, [r2, #1]
     7e4:	b252      	sxtb	r2, r2
     7e6:	2a00      	cmp	r2, #0
     7e8:	db01      	blt.n	7ee <_system_extint_init+0x52>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
     7ea:	3301      	adds	r3, #1
     7ec:	e7ea      	b.n	7c4 <_system_extint_init+0x28>
			return true;
     7ee:	2301      	movs	r3, #1
     7f0:	e7eb      	b.n	7ca <_system_extint_init+0x2e>
		_extint_dev.callbacks[j] = NULL;
     7f2:	0099      	lsls	r1, r3, #2
     7f4:	2000      	movs	r0, #0
     7f6:	4a08      	ldr	r2, [pc, #32]	; (818 <_system_extint_init+0x7c>)
     7f8:	5088      	str	r0, [r1, r2]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     7fa:	3301      	adds	r3, #1
     7fc:	b2db      	uxtb	r3, r3
     7fe:	2b0f      	cmp	r3, #15
     800:	d9f7      	bls.n	7f2 <_system_extint_init+0x56>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     802:	2210      	movs	r2, #16
     804:	4b05      	ldr	r3, [pc, #20]	; (81c <_system_extint_init+0x80>)
     806:	601a      	str	r2, [r3, #0]
	_extint_enable();
     808:	f7ff ffaa 	bl	760 <_extint_enable>
}
     80c:	b003      	add	sp, #12
     80e:	bd00      	pop	{pc}
     810:	40000400 	.word	0x40000400
     814:	40001800 	.word	0x40001800
     818:	200000a8 	.word	0x200000a8
     81c:	e000e100 	.word	0xe000e100

00000820 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     820:	2300      	movs	r3, #0
     822:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     824:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     826:	2201      	movs	r2, #1
     828:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     82a:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     82c:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     82e:	3302      	adds	r3, #2
     830:	72c3      	strb	r3, [r0, #11]
}
     832:	4770      	bx	lr

00000834 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     834:	b5f0      	push	{r4, r5, r6, r7, lr}
     836:	b083      	sub	sp, #12
     838:	0005      	movs	r5, r0
     83a:	000c      	movs	r4, r1
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     83c:	a901      	add	r1, sp, #4
     83e:	2300      	movs	r3, #0
     840:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     842:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     844:	7923      	ldrb	r3, [r4, #4]
     846:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     848:	7a23      	ldrb	r3, [r4, #8]
     84a:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     84c:	7820      	ldrb	r0, [r4, #0]
     84e:	f001 fba3 	bl	1f98 <system_pinmux_pin_set_config>
	if (eic_index < EIC_INST_NUM) {
     852:	2d1f      	cmp	r5, #31
     854:	d920      	bls.n	898 <extint_chan_set_config+0x64>
		return NULL;
     856:	2000      	movs	r0, #0

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     858:	2207      	movs	r2, #7
     85a:	402a      	ands	r2, r5
     85c:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     85e:	7ae3      	ldrb	r3, [r4, #11]
     860:	001e      	movs	r6, r3

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     862:	7aa1      	ldrb	r1, [r4, #10]
     864:	2900      	cmp	r1, #0
     866:	d002      	beq.n	86e <extint_chan_set_config+0x3a>
		new_config |= EIC_CONFIG_FILTEN0;
     868:	2608      	movs	r6, #8
     86a:	431e      	orrs	r6, r3
     86c:	b2f6      	uxtb	r6, r6
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
     86e:	08eb      	lsrs	r3, r5, #3
		= (EIC_module->CONFIG[channel / 8].reg &
     870:	3306      	adds	r3, #6
     872:	009b      	lsls	r3, r3, #2
     874:	5819      	ldr	r1, [r3, r0]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     876:	270f      	movs	r7, #15
     878:	4097      	lsls	r7, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     87a:	43b9      	bics	r1, r7
			(new_config << config_pos);
     87c:	4096      	lsls	r6, r2
     87e:	0032      	movs	r2, r6
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     880:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     882:	501a      	str	r2, [r3, r0]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     884:	7a63      	ldrb	r3, [r4, #9]
     886:	2b00      	cmp	r3, #0
     888:	d108      	bne.n	89c <extint_chan_set_config+0x68>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     88a:	6943      	ldr	r3, [r0, #20]
     88c:	2201      	movs	r2, #1
     88e:	40aa      	lsls	r2, r5
     890:	4393      	bics	r3, r2
     892:	6143      	str	r3, [r0, #20]
	}
}
     894:	b003      	add	sp, #12
     896:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return eics[eic_index];
     898:	4803      	ldr	r0, [pc, #12]	; (8a8 <extint_chan_set_config+0x74>)
     89a:	e7dd      	b.n	858 <extint_chan_set_config+0x24>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     89c:	6943      	ldr	r3, [r0, #20]
     89e:	2201      	movs	r2, #1
     8a0:	40aa      	lsls	r2, r5
     8a2:	4313      	orrs	r3, r2
     8a4:	6143      	str	r3, [r0, #20]
     8a6:	e7f5      	b.n	894 <extint_chan_set_config+0x60>
     8a8:	40001800 	.word	0x40001800

000008ac <is_button_two_pressed>:
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	return (port_base->IN.reg & pin_mask);
     8ac:	4b1a      	ldr	r3, [pc, #104]	; (918 <is_button_two_pressed+0x6c>)
     8ae:	6a1b      	ldr	r3, [r3, #32]
/* Button 2 function
 */
/************************************************************************/
bool is_button_two_pressed(void) {

  if (!port_pin_get_input_level(BUTTON_2)) {
     8b0:	041b      	lsls	r3, r3, #16
     8b2:	d417      	bmi.n	8e4 <is_button_two_pressed+0x38>
    BUTTON_TWO_PRESS_STATUS = true;
     8b4:	2201      	movs	r2, #1
     8b6:	4b19      	ldr	r3, [pc, #100]	; (91c <is_button_two_pressed+0x70>)
     8b8:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count--;
     8ba:	4a19      	ldr	r2, [pc, #100]	; (920 <is_button_two_pressed+0x74>)
     8bc:	6813      	ldr	r3, [r2, #0]
     8be:	3b01      	subs	r3, #1
     8c0:	6013      	str	r3, [r2, #0]
    long_press_B2_delay_count--;
     8c2:	4a18      	ldr	r2, [pc, #96]	; (924 <is_button_two_pressed+0x78>)
     8c4:	6813      	ldr	r3, [r2, #0]
     8c6:	3b01      	subs	r3, #1
     8c8:	6013      	str	r3, [r2, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
    long_press_B2_delay_count = DELAY_PRESS_CN;
  }

  // long press delay logic
  if (long_press_B2_delay_count <= 0) {
     8ca:	4b16      	ldr	r3, [pc, #88]	; (924 <is_button_two_pressed+0x78>)
     8cc:	681b      	ldr	r3, [r3, #0]
     8ce:	2b00      	cmp	r3, #0
     8d0:	dd13      	ble.n	8fa <is_button_two_pressed+0x4e>
    LongPressB2Flag = true;
    long_press_B2_delay_count = 0;
  }

  // debounce logic
  if (press_B2_delay_count <= 0) {
     8d2:	4b13      	ldr	r3, [pc, #76]	; (920 <is_button_two_pressed+0x74>)
     8d4:	681b      	ldr	r3, [r3, #0]
     8d6:	2b00      	cmp	r3, #0
     8d8:	dd16      	ble.n	908 <is_button_two_pressed+0x5c>
    BUTTON_TWO_RELEASE_STATUS = false;
    press_B2_delay_count = 0;
    return true;

  } else {
    BUTTON_TWO_RELEASE_STATUS = true;
     8da:	2201      	movs	r2, #1
     8dc:	4b12      	ldr	r3, [pc, #72]	; (928 <is_button_two_pressed+0x7c>)
     8de:	701a      	strb	r2, [r3, #0]
    return false;
     8e0:	2000      	movs	r0, #0
  }
     8e2:	4770      	bx	lr
    BUTTON_TWO_PRESS_STATUS = false;
     8e4:	2200      	movs	r2, #0
     8e6:	4b0d      	ldr	r3, [pc, #52]	; (91c <is_button_two_pressed+0x70>)
     8e8:	701a      	strb	r2, [r3, #0]
    press_B2_delay_count = DELAY_DEBOUNCE_CN;
     8ea:	320a      	adds	r2, #10
     8ec:	4b0c      	ldr	r3, [pc, #48]	; (920 <is_button_two_pressed+0x74>)
     8ee:	601a      	str	r2, [r3, #0]
    long_press_B2_delay_count = DELAY_PRESS_CN;
     8f0:	3223      	adds	r2, #35	; 0x23
     8f2:	32ff      	adds	r2, #255	; 0xff
     8f4:	4b0b      	ldr	r3, [pc, #44]	; (924 <is_button_two_pressed+0x78>)
     8f6:	601a      	str	r2, [r3, #0]
     8f8:	e7e7      	b.n	8ca <is_button_two_pressed+0x1e>
    LongPressB2Flag = true;
     8fa:	2201      	movs	r2, #1
     8fc:	4b0b      	ldr	r3, [pc, #44]	; (92c <is_button_two_pressed+0x80>)
     8fe:	701a      	strb	r2, [r3, #0]
    long_press_B2_delay_count = 0;
     900:	2200      	movs	r2, #0
     902:	4b08      	ldr	r3, [pc, #32]	; (924 <is_button_two_pressed+0x78>)
     904:	601a      	str	r2, [r3, #0]
     906:	e7e4      	b.n	8d2 <is_button_two_pressed+0x26>
    BUTTON_TWO_RELEASE_STATUS = false;
     908:	2300      	movs	r3, #0
     90a:	4a07      	ldr	r2, [pc, #28]	; (928 <is_button_two_pressed+0x7c>)
     90c:	7013      	strb	r3, [r2, #0]
    press_B2_delay_count = 0;
     90e:	4a04      	ldr	r2, [pc, #16]	; (920 <is_button_two_pressed+0x74>)
     910:	6013      	str	r3, [r2, #0]
    return true;
     912:	2001      	movs	r0, #1
     914:	e7e5      	b.n	8e2 <is_button_two_pressed+0x36>
     916:	46c0      	nop			; (mov r8, r8)
     918:	41004400 	.word	0x41004400
     91c:	2000003c 	.word	0x2000003c
     920:	20000004 	.word	0x20000004
     924:	20000000 	.word	0x20000000
     928:	2000003d 	.word	0x2000003d
     92c:	2000003e 	.word	0x2000003e

00000930 <set_pwm_color_channel>:
int flash_led_counter;
// extern void flash_pwm_led(void);
bool is_cycle_led;
bool pwm_led_toggle_flag;

void set_pwm_color_channel(uint8_t channel, bool enable) {
     930:	b510      	push	{r4, lr}
  if (enable) {
     932:	2900      	cmp	r1, #0
     934:	d010      	beq.n	958 <set_pwm_color_channel+0x28>
    tcc_set_compare_value(&tcc_instance, channel, INDICATION_LED_DUTY_CYCLE);
     936:	4a0d      	ldr	r2, [pc, #52]	; (96c <set_pwm_color_channel+0x3c>)
     938:	0001      	movs	r1, r0
     93a:	480d      	ldr	r0, [pc, #52]	; (970 <set_pwm_color_channel+0x40>)
     93c:	f001 fdec 	bl	2518 <tcc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     940:	4b0b      	ldr	r3, [pc, #44]	; (970 <set_pwm_color_channel+0x40>)
     942:	681a      	ldr	r2, [r3, #0]
	uint32_t last_cmd;

	/* Wait until last command is done */
	do {
		while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     944:	6893      	ldr	r3, [r2, #8]
     946:	075b      	lsls	r3, r3, #29
     948:	d4fc      	bmi.n	944 <set_pwm_color_channel+0x14>
			/* Wait for sync */
		}
		last_cmd = tcc_module->CTRLBSET.reg & TCC_CTRLBSET_CMD_Msk;
     94a:	7953      	ldrb	r3, [r2, #5]
     94c:	211f      	movs	r1, #31
     94e:	438b      	bics	r3, r1
		if (last_cmd == TCC_CTRLBSET_CMD_NONE) {
     950:	d008      	beq.n	964 <set_pwm_color_channel+0x34>
			break;
		} else if (last_cmd == TCC_CTRLBSET_CMD_UPDATE) {
     952:	2b60      	cmp	r3, #96	; 0x60
     954:	d1f6      	bne.n	944 <set_pwm_color_channel+0x14>
     956:	e007      	b.n	968 <set_pwm_color_channel+0x38>
  } else {
    tcc_set_compare_value(&tcc_instance, channel, ZERO_DUTY_CYCLE);
     958:	2200      	movs	r2, #0
     95a:	0001      	movs	r1, r0
     95c:	4804      	ldr	r0, [pc, #16]	; (970 <set_pwm_color_channel+0x40>)
     95e:	f001 fddb 	bl	2518 <tcc_set_compare_value>
     962:	e7ed      	b.n	940 <set_pwm_color_channel+0x10>
			return;
		}
	} while (1);

	/* Write command to execute */
	tcc_module->CTRLBSET.reg = TCC_CTRLBSET_CMD_UPDATE;
     964:	2360      	movs	r3, #96	; 0x60
     966:	7153      	strb	r3, [r2, #5]
  }

  tcc_force_double_buffer_update(&tcc_instance);
}
     968:	bd10      	pop	{r4, pc}
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	000004fe 	.word	0x000004fe
     970:	200000e8 	.word	0x200000e8

00000974 <pwm_led_system_cleanup>:

void pwm_led_system_cleanup(void) {
     974:	b510      	push	{r4, lr}
  set_pwm_color_channel(RED_CHANNEL, false);
     976:	2100      	movs	r1, #0
     978:	2000      	movs	r0, #0
     97a:	f7ff ffd9 	bl	930 <set_pwm_color_channel>
  set_pwm_color_channel(BLUE_CHANNEL, false);
     97e:	2100      	movs	r1, #0
     980:	2002      	movs	r0, #2
     982:	f7ff ffd5 	bl	930 <set_pwm_color_channel>
  set_pwm_color_channel(GREEN_CHANNEL, false);
     986:	2100      	movs	r1, #0
     988:	2001      	movs	r0, #1
     98a:	f7ff ffd1 	bl	930 <set_pwm_color_channel>
  set_pwm_color_channel(WHITE_CHANNEL, false);
     98e:	2100      	movs	r1, #0
     990:	2003      	movs	r0, #3
     992:	f7ff ffcd 	bl	930 <set_pwm_color_channel>
}
     996:	bd10      	pop	{r4, pc}

00000998 <set_pwm_color>:

void set_pwm_color(int color) {
     998:	b510      	push	{r4, lr}

  switch (color) {
     99a:	2806      	cmp	r0, #6
     99c:	d807      	bhi.n	9ae <set_pwm_color+0x16>
     99e:	0080      	lsls	r0, r0, #2
     9a0:	4b18      	ldr	r3, [pc, #96]	; (a04 <set_pwm_color+0x6c>)
     9a2:	581b      	ldr	r3, [r3, r0]
     9a4:	469f      	mov	pc, r3
  case 0: // Red
    set_pwm_color_channel(RED_CHANNEL, true);
     9a6:	2101      	movs	r1, #1
     9a8:	2000      	movs	r0, #0
     9aa:	f7ff ffc1 	bl	930 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
    break;
  default:
    break;
  }
}
     9ae:	bd10      	pop	{r4, pc}
    set_pwm_color_channel(GREEN_CHANNEL, true);
     9b0:	2101      	movs	r1, #1
     9b2:	2001      	movs	r0, #1
     9b4:	f7ff ffbc 	bl	930 <set_pwm_color_channel>
    break;
     9b8:	e7f9      	b.n	9ae <set_pwm_color+0x16>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     9ba:	2101      	movs	r1, #1
     9bc:	2002      	movs	r0, #2
     9be:	f7ff ffb7 	bl	930 <set_pwm_color_channel>
    break;
     9c2:	e7f4      	b.n	9ae <set_pwm_color+0x16>
    set_pwm_color_channel(WHITE_CHANNEL, true);
     9c4:	2101      	movs	r1, #1
     9c6:	2003      	movs	r0, #3
     9c8:	f7ff ffb2 	bl	930 <set_pwm_color_channel>
    break;
     9cc:	e7ef      	b.n	9ae <set_pwm_color+0x16>
    set_pwm_color_channel(RED_CHANNEL, true);
     9ce:	2101      	movs	r1, #1
     9d0:	2000      	movs	r0, #0
     9d2:	f7ff ffad 	bl	930 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
     9d6:	2101      	movs	r1, #1
     9d8:	2001      	movs	r0, #1
     9da:	f7ff ffa9 	bl	930 <set_pwm_color_channel>
    break;
     9de:	e7e6      	b.n	9ae <set_pwm_color+0x16>
    set_pwm_color_channel(RED_CHANNEL, true);
     9e0:	2101      	movs	r1, #1
     9e2:	2000      	movs	r0, #0
     9e4:	f7ff ffa4 	bl	930 <set_pwm_color_channel>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     9e8:	2101      	movs	r1, #1
     9ea:	2002      	movs	r0, #2
     9ec:	f7ff ffa0 	bl	930 <set_pwm_color_channel>
    break;
     9f0:	e7dd      	b.n	9ae <set_pwm_color+0x16>
    set_pwm_color_channel(BLUE_CHANNEL, true);
     9f2:	2101      	movs	r1, #1
     9f4:	2002      	movs	r0, #2
     9f6:	f7ff ff9b 	bl	930 <set_pwm_color_channel>
    set_pwm_color_channel(GREEN_CHANNEL, true);
     9fa:	2101      	movs	r1, #1
     9fc:	2001      	movs	r0, #1
     9fe:	f7ff ff97 	bl	930 <set_pwm_color_channel>
}
     a02:	e7d4      	b.n	9ae <set_pwm_color+0x16>
     a04:	00002e74 	.word	0x00002e74

00000a08 <configure_pwm_tcc>:

void configure_pwm_tcc(void) {
     a08:	b570      	push	{r4, r5, r6, lr}
  tcc_get_config_defaults(&config_tcc, CONF_PWM_MODULE);
     a0a:	4d1b      	ldr	r5, [pc, #108]	; (a78 <configure_pwm_tcc+0x70>)
     a0c:	4c1b      	ldr	r4, [pc, #108]	; (a7c <configure_pwm_tcc+0x74>)
     a0e:	0029      	movs	r1, r5
     a10:	0020      	movs	r0, r4
     a12:	f001 fb25 	bl	2060 <tcc_get_config_defaults>
  config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     a16:	2302      	movs	r3, #2
     a18:	7623      	strb	r3, [r4, #24]
  config_tcc.counter.period = CONF_DEFAULT_PERIOD;
     a1a:	4b19      	ldr	r3, [pc, #100]	; (a80 <configure_pwm_tcc+0x78>)
     a1c:	6063      	str	r3, [r4, #4]
  config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
     a1e:	2205      	movs	r2, #5
     a20:	72e2      	strb	r2, [r4, #11]

  config_tcc.compare.match[RED_CHANNEL] = ZERO_DUTY_CYCLE;
     a22:	2300      	movs	r3, #0
     a24:	61e3      	str	r3, [r4, #28]
  config_tcc.compare.match[BLUE_CHANNEL] = ZERO_DUTY_CYCLE;
     a26:	6263      	str	r3, [r4, #36]	; 0x24
  config_tcc.compare.match[GREEN_CHANNEL] = ZERO_DUTY_CYCLE;
     a28:	6223      	str	r3, [r4, #32]
  config_tcc.compare.match[WHITE_CHANNEL] = ZERO_DUTY_CYCLE;
     a2a:	62a3      	str	r3, [r4, #40]	; 0x28

  config_tcc.pins.wave_out_pin[RED_CHANNEL] = PIN_PA04F_TCC0_WO0; // RED
     a2c:	2104      	movs	r1, #4
     a2e:	65a1      	str	r1, [r4, #88]	; 0x58
  config_tcc.pins.wave_out_pin_mux[RED_CHANNEL] = MUX_PA04F_TCC0_WO0;
     a30:	67a2      	str	r2, [r4, #120]	; 0x78
  config_tcc.pins.enable_wave_out_pin[RED_CHANNEL] = true;
     a32:	3301      	adds	r3, #1
     a34:	2098      	movs	r0, #152	; 0x98
     a36:	5423      	strb	r3, [r4, r0]

  config_tcc.pins.wave_out_pin[GREEN_CHANNEL] = PIN_PA05F_TCC0_WO1; // GREEN
     a38:	65e2      	str	r2, [r4, #92]	; 0x5c
  config_tcc.pins.wave_out_pin_mux[GREEN_CHANNEL] = MUX_PA05F_TCC0_WO1;
     a3a:	67e2      	str	r2, [r4, #124]	; 0x7c
  config_tcc.pins.enable_wave_out_pin[GREEN_CHANNEL] = true;
     a3c:	3294      	adds	r2, #148	; 0x94
     a3e:	54a3      	strb	r3, [r4, r2]

  config_tcc.pins.wave_out_pin[BLUE_CHANNEL] = PIN_PA08E_TCC0_WO2; // BLUE
     a40:	3a91      	subs	r2, #145	; 0x91
     a42:	6622      	str	r2, [r4, #96]	; 0x60
  config_tcc.pins.wave_out_pin_mux[BLUE_CHANNEL] = MUX_PA08E_TCC0_WO2;
     a44:	3278      	adds	r2, #120	; 0x78
     a46:	50a1      	str	r1, [r4, r2]
  config_tcc.pins.enable_wave_out_pin[BLUE_CHANNEL] = true;
     a48:	321a      	adds	r2, #26
     a4a:	54a3      	strb	r3, [r4, r2]

  config_tcc.pins.wave_out_pin[WHITE_CHANNEL] = PIN_PA09E_TCC0_WO3; // WHITE
     a4c:	3a91      	subs	r2, #145	; 0x91
     a4e:	6662      	str	r2, [r4, #100]	; 0x64
  config_tcc.pins.wave_out_pin_mux[WHITE_CHANNEL] = MUX_PA09E_TCC0_WO3;
     a50:	327b      	adds	r2, #123	; 0x7b
     a52:	50a1      	str	r1, [r4, r2]
  config_tcc.pins.enable_wave_out_pin[WHITE_CHANNEL] = true;
     a54:	3217      	adds	r2, #23
     a56:	54a3      	strb	r3, [r4, r2]

  tcc_init(&tcc_instance, CONF_PWM_MODULE, &config_tcc);
     a58:	4e0a      	ldr	r6, [pc, #40]	; (a84 <configure_pwm_tcc+0x7c>)
     a5a:	0022      	movs	r2, r4
     a5c:	0029      	movs	r1, r5
     a5e:	0030      	movs	r0, r6
     a60:	f001 fba0 	bl	21a4 <tcc_init>
	Tcc *const tcc_module = module_inst->hw;
     a64:	6832      	ldr	r2, [r6, #0]
	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     a66:	6893      	ldr	r3, [r2, #8]
     a68:	079b      	lsls	r3, r3, #30
     a6a:	d4fc      	bmi.n	a66 <configure_pwm_tcc+0x5e>
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     a6c:	6813      	ldr	r3, [r2, #0]
     a6e:	2102      	movs	r1, #2
     a70:	430b      	orrs	r3, r1
     a72:	6013      	str	r3, [r2, #0]
  tcc_enable(&tcc_instance);
}
     a74:	bd70      	pop	{r4, r5, r6, pc}
     a76:	46c0      	nop			; (mov r8, r8)
     a78:	42001400 	.word	0x42001400
     a7c:	20000144 	.word	0x20000144
     a80:	000004ff 	.word	0x000004ff
     a84:	200000e8 	.word	0x200000e8

00000a88 <cycle_pwm_led>:
// pwm_led_system_cleanup(); // Reset to 1 for red
// break;
//}
//}

void cycle_pwm_led(void) {
     a88:	b510      	push	{r4, lr}
  flash_led_counter = 0;
     a8a:	2200      	movs	r2, #0
     a8c:	4b0c      	ldr	r3, [pc, #48]	; (ac0 <cycle_pwm_led+0x38>)
     a8e:	601a      	str	r2, [r3, #0]
  switch (pwm_led_toggle_count) {
     a90:	4b0c      	ldr	r3, [pc, #48]	; (ac4 <cycle_pwm_led+0x3c>)
     a92:	781b      	ldrb	r3, [r3, #0]
     a94:	2b01      	cmp	r3, #1
     a96:	d002      	beq.n	a9e <cycle_pwm_led+0x16>
     a98:	2b06      	cmp	r3, #6
     a9a:	d00a      	beq.n	ab2 <cycle_pwm_led+0x2a>
  case 6:
    pwm_led_toggle_count = 0;
    pwm_led_system_cleanup(); // Reset to 1 for red
    break;
  }
}
     a9c:	bd10      	pop	{r4, pc}
    SET_RED;
     a9e:	2000      	movs	r0, #0
     aa0:	f7ff ff7a 	bl	998 <set_pwm_color>
    SET_BLU;
     aa4:	2002      	movs	r0, #2
     aa6:	f7ff ff77 	bl	998 <set_pwm_color>
    SET_GRN;
     aaa:	2001      	movs	r0, #1
     aac:	f7ff ff74 	bl	998 <set_pwm_color>
    break;
     ab0:	e7f4      	b.n	a9c <cycle_pwm_led+0x14>
    pwm_led_toggle_count = 0;
     ab2:	2200      	movs	r2, #0
     ab4:	4b03      	ldr	r3, [pc, #12]	; (ac4 <cycle_pwm_led+0x3c>)
     ab6:	701a      	strb	r2, [r3, #0]
    pwm_led_system_cleanup(); // Reset to 1 for red
     ab8:	f7ff ff5c 	bl	974 <pwm_led_system_cleanup>
}
     abc:	e7ee      	b.n	a9c <cycle_pwm_led+0x14>
     abe:	46c0      	nop			; (mov r8, r8)
     ac0:	20000208 	.word	0x20000208
     ac4:	2000003f 	.word	0x2000003f

00000ac8 <configure_pwm_generator>:

bool pulsating_motor_routine = false;
uint8_t motor_toggle_count = -1;
bool motor_running = false;

void configure_pwm_generator(void) {
     ac8:	b500      	push	{lr}
     aca:	b08f      	sub	sp, #60	; 0x3c
{
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     acc:	aa01      	add	r2, sp, #4
     ace:	2300      	movs	r3, #0
     ad0:	2100      	movs	r1, #0
     ad2:	7013      	strb	r3, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     ad4:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
     ad6:	2000      	movs	r0, #0
     ad8:	7050      	strb	r0, [r2, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35) || (WLR089)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     ada:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     adc:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     ade:	7311      	strb	r1, [r2, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     ae0:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
     ae2:	7351      	strb	r1, [r2, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     ae4:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     ae6:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     ae8:	6253      	str	r3, [r2, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     aea:	8513      	strh	r3, [r2, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     aec:	8553      	strh	r3, [r2, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     aee:	8593      	strh	r3, [r2, #44]	; 0x2c
  struct tc_config config_tc;
  tc_get_config_defaults(&config_tc);

  config_tc.clock_source = TC_CLOCK_SOURCE;
  config_tc.counter_size = TC_COUNTER_SIZE;
     af0:	3304      	adds	r3, #4
     af2:	7093      	strb	r3, [r2, #2]
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
     af4:	21a0      	movs	r1, #160	; 0xa0
     af6:	00c9      	lsls	r1, r1, #3
     af8:	8091      	strh	r1, [r2, #4]

  config_tc.counter_8_bit.value = 0;
  config_tc.counter_8_bit.period = PWM_PERIOD_VALUE;
     afa:	2055      	movs	r0, #85	; 0x55
     afc:	2129      	movs	r1, #41	; 0x29
     afe:	5450      	strb	r0, [r2, r1]

  config_tc.counter_8_bit.compare_capture_channel[0] = INITIAL_DUTY_CYCLE;
     b00:	3840      	subs	r0, #64	; 0x40
     b02:	3101      	adds	r1, #1
     b04:	5450      	strb	r0, [r2, r1]

  config_tc.wave_generation = TC_WAVE_GENERATION_NORMAL_PWM;
     b06:	3116      	adds	r1, #22
     b08:	7191      	strb	r1, [r2, #6]
  config_tc.pwm_channel[0].pin_out = PWM_PIN_OUT;
     b0a:	3936      	subs	r1, #54	; 0x36
     b0c:	6151      	str	r1, [r2, #20]
  config_tc.pwm_channel[0].pin_mux = PWM_MUX_OUT;
     b0e:	6193      	str	r3, [r2, #24]

  config_tc.pwm_channel[0].enabled = true;
     b10:	3b03      	subs	r3, #3
     b12:	7413      	strb	r3, [r2, #16]

  tc_init(&pwm_generator_instance, PWM_GENERATOR, &config_tc);
     b14:	4902      	ldr	r1, [pc, #8]	; (b20 <configure_pwm_generator+0x58>)
     b16:	4803      	ldr	r0, [pc, #12]	; (b24 <configure_pwm_generator+0x5c>)
     b18:	f001 fd96 	bl	2648 <tc_init>
}
     b1c:	b00f      	add	sp, #60	; 0x3c
     b1e:	bd00      	pop	{pc}
     b20:	42001c00 	.word	0x42001c00
     b24:	200001e8 	.word	0x200001e8

00000b28 <motor_enable>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b28:	4b08      	ldr	r3, [pc, #32]	; (b4c <motor_enable+0x24>)
     b2a:	681a      	ldr	r2, [r3, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b2c:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     b2e:	b25b      	sxtb	r3, r3
     b30:	2b00      	cmp	r3, #0
     b32:	dbfb      	blt.n	b2c <motor_enable+0x4>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     b34:	8813      	ldrh	r3, [r2, #0]
     b36:	2102      	movs	r1, #2
     b38:	430b      	orrs	r3, r1
     b3a:	b29b      	uxth	r3, r3
     b3c:	8013      	strh	r3, [r2, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     b3e:	2240      	movs	r2, #64	; 0x40
     b40:	4b03      	ldr	r3, [pc, #12]	; (b50 <motor_enable+0x28>)
     b42:	619a      	str	r2, [r3, #24]

void motor_enable(void) {
  tc_enable(&pwm_generator_instance);
  port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
  motor_running = true;
     b44:	3a3f      	subs	r2, #63	; 0x3f
     b46:	4b03      	ldr	r3, [pc, #12]	; (b54 <motor_enable+0x2c>)
     b48:	701a      	strb	r2, [r3, #0]
  // set_motor_speed_1_indication();
}
     b4a:	4770      	bx	lr
     b4c:	200001e8 	.word	0x200001e8
     b50:	41004400 	.word	0x41004400
     b54:	20000041 	.word	0x20000041

00000b58 <motor_disable>:

void motor_disable(void) {
     b58:	b510      	push	{r4, lr}
  pulsating_motor_routine = false;
     b5a:	2300      	movs	r3, #0
     b5c:	4a0e      	ldr	r2, [pc, #56]	; (b98 <motor_disable+0x40>)
     b5e:	7013      	strb	r3, [r2, #0]
  motor_toggle_count = -1;
     b60:	21ff      	movs	r1, #255	; 0xff
     b62:	4a0e      	ldr	r2, [pc, #56]	; (b9c <motor_disable+0x44>)
     b64:	7011      	strb	r1, [r2, #0]
  motor_running = false;
     b66:	4a0e      	ldr	r2, [pc, #56]	; (ba0 <motor_disable+0x48>)
     b68:	7013      	strb	r3, [r2, #0]
  tc_set_compare_value(&pwm_generator_instance, TC_COMPARE_CAPTURE_CHANNEL_0,
     b6a:	4c0e      	ldr	r4, [pc, #56]	; (ba4 <motor_disable+0x4c>)
     b6c:	2215      	movs	r2, #21
     b6e:	2100      	movs	r1, #0
     b70:	0020      	movs	r0, r4
     b72:	f001 fe87 	bl	2884 <tc_set_compare_value>
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     b76:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     b78:	7bd3      	ldrb	r3, [r2, #15]

	while (tc_is_syncing(module_inst)) {
     b7a:	b25b      	sxtb	r3, r3
     b7c:	2b00      	cmp	r3, #0
     b7e:	dbfb      	blt.n	b78 <motor_disable+0x20>
		/* Wait for sync */
	}

	/* Disbale interrupt */
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
     b80:	233b      	movs	r3, #59	; 0x3b
     b82:	7313      	strb	r3, [r2, #12]
	/* Clear interrupt flag */
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
     b84:	7393      	strb	r3, [r2, #14]

	/* Disable TC module */
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
     b86:	8813      	ldrh	r3, [r2, #0]
     b88:	2102      	movs	r1, #2
     b8a:	438b      	bics	r3, r1
     b8c:	8013      	strh	r3, [r2, #0]
	} else {
		port_base->OUTCLR.reg = pin_mask;
     b8e:	2240      	movs	r2, #64	; 0x40
     b90:	4b05      	ldr	r3, [pc, #20]	; (ba8 <motor_disable+0x50>)
     b92:	615a      	str	r2, [r3, #20]
                       INITIAL_DUTY_CYCLE);
  tc_disable(&pwm_generator_instance);
  port_pin_set_output_level(MOTOR_NSLEEP_PIN, LOW);
}
     b94:	bd10      	pop	{r4, pc}
     b96:	46c0      	nop			; (mov r8, r8)
     b98:	20000042 	.word	0x20000042
     b9c:	20000008 	.word	0x20000008
     ba0:	20000041 	.word	0x20000041
     ba4:	200001e8 	.word	0x200001e8
     ba8:	41004400 	.word	0x41004400

00000bac <cycle_pwm_motor>:

void cycle_pwm_motor(void) {
     bac:	b510      	push	{r4, lr}
  {
    if (motor_running) {
     bae:	4b13      	ldr	r3, [pc, #76]	; (bfc <cycle_pwm_motor+0x50>)
     bb0:	781b      	ldrb	r3, [r3, #0]
     bb2:	2b00      	cmp	r3, #0
     bb4:	d008      	beq.n	bc8 <cycle_pwm_motor+0x1c>
      if (motor_toggle_count == 2) {
     bb6:	4b12      	ldr	r3, [pc, #72]	; (c00 <cycle_pwm_motor+0x54>)
     bb8:	781b      	ldrb	r3, [r3, #0]
     bba:	2b02      	cmp	r3, #2
     bbc:	d005      	beq.n	bca <cycle_pwm_motor+0x1e>
        tc_set_compare_value(&pwm_generator_instance,
                             TC_COMPARE_CAPTURE_CHANNEL_0, FIRST_DUTY_CYCLE);
        // set_motor_speed_2_indication();
      } else if (motor_toggle_count == 3) {
     bbe:	2b03      	cmp	r3, #3
     bc0:	d009      	beq.n	bd6 <cycle_pwm_motor+0x2a>
        tc_set_compare_value(&pwm_generator_instance,
                             TC_COMPARE_CAPTURE_CHANNEL_0, SECOND_DUTY_CYCLE);
        // set_motor_speed_3_indication();
      } else if (motor_toggle_count == 4) {
     bc2:	2b04      	cmp	r3, #4
     bc4:	d00d      	beq.n	be2 <cycle_pwm_motor+0x36>
        tc_set_compare_value(&pwm_generator_instance,
                             TC_COMPARE_CAPTURE_CHANNEL_0, SECOND_DUTY_CYCLE);
        // set_motor_pulsating_indication();
      }

      else if (motor_toggle_count > 4) {
     bc6:	d815      	bhi.n	bf4 <cycle_pwm_motor+0x48>
        motor_disable();
      }
    }
  }
}
     bc8:	bd10      	pop	{r4, pc}
        tc_set_compare_value(&pwm_generator_instance,
     bca:	2222      	movs	r2, #34	; 0x22
     bcc:	2100      	movs	r1, #0
     bce:	480d      	ldr	r0, [pc, #52]	; (c04 <cycle_pwm_motor+0x58>)
     bd0:	f001 fe58 	bl	2884 <tc_set_compare_value>
     bd4:	e7f8      	b.n	bc8 <cycle_pwm_motor+0x1c>
        tc_set_compare_value(&pwm_generator_instance,
     bd6:	224d      	movs	r2, #77	; 0x4d
     bd8:	2100      	movs	r1, #0
     bda:	480a      	ldr	r0, [pc, #40]	; (c04 <cycle_pwm_motor+0x58>)
     bdc:	f001 fe52 	bl	2884 <tc_set_compare_value>
     be0:	e7f2      	b.n	bc8 <cycle_pwm_motor+0x1c>
        pulsating_motor_routine = true;
     be2:	2201      	movs	r2, #1
     be4:	4b08      	ldr	r3, [pc, #32]	; (c08 <cycle_pwm_motor+0x5c>)
     be6:	701a      	strb	r2, [r3, #0]
        tc_set_compare_value(&pwm_generator_instance,
     be8:	324c      	adds	r2, #76	; 0x4c
     bea:	2100      	movs	r1, #0
     bec:	4805      	ldr	r0, [pc, #20]	; (c04 <cycle_pwm_motor+0x58>)
     bee:	f001 fe49 	bl	2884 <tc_set_compare_value>
     bf2:	e7e9      	b.n	bc8 <cycle_pwm_motor+0x1c>
        motor_disable();
     bf4:	f7ff ffb0 	bl	b58 <motor_disable>
}
     bf8:	e7e6      	b.n	bc8 <cycle_pwm_motor+0x1c>
     bfa:	46c0      	nop			; (mov r8, r8)
     bfc:	20000041 	.word	0x20000041
     c00:	20000008 	.word	0x20000008
     c04:	200001e8 	.word	0x200001e8
     c08:	20000042 	.word	0x20000042

00000c0c <toggle_nsleep>:

void toggle_nsleep(void) {
  static bool PULSATING_MOTOR = false;
  if (pulsating_motor_routine) {
     c0c:	4b0a      	ldr	r3, [pc, #40]	; (c38 <toggle_nsleep+0x2c>)
     c0e:	781b      	ldrb	r3, [r3, #0]
     c10:	2b00      	cmp	r3, #0
     c12:	d009      	beq.n	c28 <toggle_nsleep+0x1c>
    if (PULSATING_MOTOR) {
     c14:	4b09      	ldr	r3, [pc, #36]	; (c3c <toggle_nsleep+0x30>)
     c16:	781b      	ldrb	r3, [r3, #0]
     c18:	2b00      	cmp	r3, #0
     c1a:	d106      	bne.n	c2a <toggle_nsleep+0x1e>
      port_pin_set_output_level(MOTOR_NSLEEP_PIN, LOW);
      PULSATING_MOTOR = false;
    } else {
      PULSATING_MOTOR = true;
     c1c:	2201      	movs	r2, #1
     c1e:	4b07      	ldr	r3, [pc, #28]	; (c3c <toggle_nsleep+0x30>)
     c20:	701a      	strb	r2, [r3, #0]
		port_base->OUTSET.reg = pin_mask;
     c22:	323f      	adds	r2, #63	; 0x3f
     c24:	4b06      	ldr	r3, [pc, #24]	; (c40 <toggle_nsleep+0x34>)
     c26:	619a      	str	r2, [r3, #24]
      port_pin_set_output_level(MOTOR_NSLEEP_PIN, HIGH);
    }
  }
}
     c28:	4770      	bx	lr
		port_base->OUTCLR.reg = pin_mask;
     c2a:	2240      	movs	r2, #64	; 0x40
     c2c:	4b04      	ldr	r3, [pc, #16]	; (c40 <toggle_nsleep+0x34>)
     c2e:	615a      	str	r2, [r3, #20]
      PULSATING_MOTOR = false;
     c30:	2200      	movs	r2, #0
     c32:	4b02      	ldr	r3, [pc, #8]	; (c3c <toggle_nsleep+0x30>)
     c34:	701a      	strb	r2, [r3, #0]
     c36:	e7f7      	b.n	c28 <toggle_nsleep+0x1c>
     c38:	20000042 	.word	0x20000042
     c3c:	20000040 	.word	0x20000040
     c40:	41004400 	.word	0x41004400

00000c44 <system_inactive>:
  system_sleep();
}

void sys_sleep_logic(void) { put_to_sleep(); }

void system_inactive(void) {
     c44:	b510      	push	{r4, lr}
  motor_disable();          // shutdown PWM motor
     c46:	f7ff ff87 	bl	b58 <motor_disable>
  pwm_led_system_cleanup(); // shutdown illumination led
     c4a:	f7ff fe93 	bl	974 <pwm_led_system_cleanup>
  is_cycle_led = false;
     c4e:	2300      	movs	r3, #0
     c50:	4a03      	ldr	r2, [pc, #12]	; (c60 <system_inactive+0x1c>)
     c52:	7013      	strb	r3, [r2, #0]
  pwm_led_toggle_count = 0; // reset counter to start the routine from beginning
     c54:	4a03      	ldr	r2, [pc, #12]	; (c64 <system_inactive+0x20>)
     c56:	7013      	strb	r3, [r2, #0]
  reset_chip();
     c58:	f001 fed4 	bl	2a04 <reset_chip>
}
     c5c:	bd10      	pop	{r4, pc}
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	20000204 	.word	0x20000204
     c64:	2000003f 	.word	0x2000003f

00000c68 <put_to_sleep>:
void put_to_sleep(void) {
     c68:	b510      	push	{r4, lr}
  system_inactive(); // once entered sleep mode -- sys inactive
     c6a:	f7ff ffeb 	bl	c44 <system_inactive>
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
     c6e:	4a04      	ldr	r2, [pc, #16]	; (c80 <put_to_sleep+0x18>)
     c70:	6913      	ldr	r3, [r2, #16]
     c72:	2104      	movs	r1, #4
     c74:	430b      	orrs	r3, r1
     c76:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     c78:	f3bf 8f4f 	dsb	sy
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
	__DSB();
	__WFI();
     c7c:	bf30      	wfi
}
     c7e:	bd10      	pop	{r4, pc}
     c80:	e000ed00 	.word	0xe000ed00

00000c84 <sys_sleep_logic>:
void sys_sleep_logic(void) { put_to_sleep(); }
     c84:	b510      	push	{r4, lr}
     c86:	f7ff ffef 	bl	c68 <put_to_sleep>
     c8a:	bd10      	pop	{r4, pc}

00000c8c <regular_routine>:

void regular_routine(void) {
     c8c:	b510      	push	{r4, lr}

  /** shift from button 1 --> 2 11/17

  **/

  if (is_button_two_pressed()) {
     c8e:	f7ff fe0d 	bl	8ac <is_button_two_pressed>
     c92:	2800      	cmp	r0, #0
     c94:	d02e      	beq.n	cf4 <regular_routine+0x68>
    SleepTickCount = SLEEP_TICK_COUNT;
     c96:	4a2f      	ldr	r2, [pc, #188]	; (d54 <regular_routine+0xc8>)
     c98:	4b2f      	ldr	r3, [pc, #188]	; (d58 <regular_routine+0xcc>)
     c9a:	601a      	str	r2, [r3, #0]
    if (LongPressB2Flag) {
     c9c:	4b2f      	ldr	r3, [pc, #188]	; (d5c <regular_routine+0xd0>)
     c9e:	781b      	ldrb	r3, [r3, #0]
     ca0:	2b00      	cmp	r3, #0
     ca2:	d125      	bne.n	cf0 <regular_routine+0x64>
      system_inactive();
    } else {
      if (!motor_status_changed && !led_button_status_changed &&
     ca4:	4b2e      	ldr	r3, [pc, #184]	; (d60 <regular_routine+0xd4>)
     ca6:	781b      	ldrb	r3, [r3, #0]
     ca8:	2b00      	cmp	r3, #0
     caa:	d123      	bne.n	cf4 <regular_routine+0x68>
     cac:	4b2d      	ldr	r3, [pc, #180]	; (d64 <regular_routine+0xd8>)
     cae:	781b      	ldrb	r3, [r3, #0]
     cb0:	2b00      	cmp	r3, #0
     cb2:	d11f      	bne.n	cf4 <regular_routine+0x68>
          !Vbus_State) { // makeshift to stop led array working when connected
     cb4:	4b2c      	ldr	r3, [pc, #176]	; (d68 <regular_routine+0xdc>)
     cb6:	781b      	ldrb	r3, [r3, #0]
      if (!motor_status_changed && !led_button_status_changed &&
     cb8:	2b00      	cmp	r3, #0
     cba:	d11b      	bne.n	cf4 <regular_routine+0x68>

        led_button_status_changed = true;
     cbc:	3301      	adds	r3, #1
     cbe:	4a29      	ldr	r2, [pc, #164]	; (d64 <regular_routine+0xd8>)
     cc0:	7013      	strb	r3, [r2, #0]
        motor_status_changed = true;
     cc2:	4a27      	ldr	r2, [pc, #156]	; (d60 <regular_routine+0xd4>)
     cc4:	7013      	strb	r3, [r2, #0]
        pwm_led_toggle_count++;
     cc6:	4a29      	ldr	r2, [pc, #164]	; (d6c <regular_routine+0xe0>)
     cc8:	7813      	ldrb	r3, [r2, #0]
     cca:	3301      	adds	r3, #1
     ccc:	7013      	strb	r3, [r2, #0]
        motor_toggle_count++;
     cce:	4a28      	ldr	r2, [pc, #160]	; (d70 <regular_routine+0xe4>)
     cd0:	7813      	ldrb	r3, [r2, #0]
     cd2:	3301      	adds	r3, #1
     cd4:	7013      	strb	r3, [r2, #0]
        // if (motor_toggle_count == 0) {
        // led_wave_flag = true;
        //}
        // if(!BATTERY_LOWEST){

        cycle_pwm_led();
     cd6:	f7ff fed7 	bl	a88 <cycle_pwm_led>
        if (!motor_running && motor_toggle_count == 1) {
     cda:	4b26      	ldr	r3, [pc, #152]	; (d74 <regular_routine+0xe8>)
     cdc:	781b      	ldrb	r3, [r3, #0]
     cde:	2b00      	cmp	r3, #0
     ce0:	d103      	bne.n	cea <regular_routine+0x5e>
     ce2:	4b23      	ldr	r3, [pc, #140]	; (d70 <regular_routine+0xe4>)
     ce4:	781b      	ldrb	r3, [r3, #0]
     ce6:	2b01      	cmp	r3, #1
     ce8:	d021      	beq.n	d2e <regular_routine+0xa2>
          motor_enable();
        } else {
          cycle_pwm_motor();
     cea:	f7ff ff5f 	bl	bac <cycle_pwm_motor>
     cee:	e001      	b.n	cf4 <regular_routine+0x68>
      system_inactive();
     cf0:	f7ff ffa8 	bl	c44 <system_inactive>
        }
      }
    }
  }

  if (BUTTON_TWO_RELEASE_STATUS) {
     cf4:	4b20      	ldr	r3, [pc, #128]	; (d78 <regular_routine+0xec>)
     cf6:	781b      	ldrb	r3, [r3, #0]
     cf8:	2b00      	cmp	r3, #0
     cfa:	d004      	beq.n	d06 <regular_routine+0x7a>
    motor_status_changed = false;
     cfc:	2300      	movs	r3, #0
     cfe:	4a18      	ldr	r2, [pc, #96]	; (d60 <regular_routine+0xd4>)
     d00:	7013      	strb	r3, [r2, #0]
    led_button_status_changed = false;
     d02:	4a18      	ldr	r2, [pc, #96]	; (d64 <regular_routine+0xd8>)
     d04:	7013      	strb	r3, [r2, #0]
  }

  if (BATTERY_LOWEST) {
     d06:	4b1d      	ldr	r3, [pc, #116]	; (d7c <regular_routine+0xf0>)
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	2b00      	cmp	r3, #0
     d0c:	d112      	bne.n	d34 <regular_routine+0xa8>
  //}
  // if (BUTTON_TWO_RELEASE_STATUS) {
  // led_button_status_changed = false;
  //}

  if (Vbus_State == false) {
     d0e:	4b16      	ldr	r3, [pc, #88]	; (d68 <regular_routine+0xdc>)
     d10:	781b      	ldrb	r3, [r3, #0]
     d12:	2b00      	cmp	r3, #0
     d14:	d00a      	beq.n	d2c <regular_routine+0xa0>
    ; // Enable Motor PWM
  } else {

    if (motor_running) {
     d16:	4b17      	ldr	r3, [pc, #92]	; (d74 <regular_routine+0xe8>)
     d18:	781b      	ldrb	r3, [r3, #0]
     d1a:	2b00      	cmp	r3, #0
     d1c:	d112      	bne.n	d44 <regular_routine+0xb8>
      system_inactive();
    }
    // ITS PLUGGED IN
    if (Chargn_On_State == false) { // battery charging (plugged in)
     d1e:	4b18      	ldr	r3, [pc, #96]	; (d80 <regular_routine+0xf4>)
     d20:	781b      	ldrb	r3, [r3, #0]
     d22:	2b00      	cmp	r3, #0
     d24:	d011      	beq.n	d4a <regular_routine+0xbe>
      BATTERY_CHARGING = true;      // show battery charge routine
    } else {
      BATTERY_CHARGING = false;
     d26:	2200      	movs	r2, #0
     d28:	4b16      	ldr	r3, [pc, #88]	; (d84 <regular_routine+0xf8>)
     d2a:	701a      	strb	r2, [r3, #0]
    }
  }
}
     d2c:	bd10      	pop	{r4, pc}
          motor_enable();
     d2e:	f7ff fefb 	bl	b28 <motor_enable>
     d32:	e7df      	b.n	cf4 <regular_routine+0x68>
    motor_disable();          // shutdown PWM motor
     d34:	f7ff ff10 	bl	b58 <motor_disable>
    pwm_led_system_cleanup(); // shutdown illumination led
     d38:	f7ff fe1c 	bl	974 <pwm_led_system_cleanup>
    pwm_led_toggle_count = 0;
     d3c:	2200      	movs	r2, #0
     d3e:	4b0b      	ldr	r3, [pc, #44]	; (d6c <regular_routine+0xe0>)
     d40:	701a      	strb	r2, [r3, #0]
     d42:	e7e4      	b.n	d0e <regular_routine+0x82>
      system_inactive();
     d44:	f7ff ff7e 	bl	c44 <system_inactive>
     d48:	e7e9      	b.n	d1e <regular_routine+0x92>
      BATTERY_CHARGING = true;      // show battery charge routine
     d4a:	2201      	movs	r2, #1
     d4c:	4b0d      	ldr	r3, [pc, #52]	; (d84 <regular_routine+0xf8>)
     d4e:	701a      	strb	r2, [r3, #0]
     d50:	e7ec      	b.n	d2c <regular_routine+0xa0>
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	00001194 	.word	0x00001194
     d58:	2000000c 	.word	0x2000000c
     d5c:	2000003e 	.word	0x2000003e
     d60:	20000048 	.word	0x20000048
     d64:	20000047 	.word	0x20000047
     d68:	2000020e 	.word	0x2000020e
     d6c:	2000003f 	.word	0x2000003f
     d70:	20000008 	.word	0x20000008
     d74:	20000041 	.word	0x20000041
     d78:	2000003d 	.word	0x2000003d
     d7c:	20000046 	.word	0x20000046
     d80:	2000020f 	.word	0x2000020f
     d84:	20000044 	.word	0x20000044

00000d88 <get_battery_level>:
//}
//}

void get_battery_level(void) {
  // bool logic = !motor_running && !Vbus_State;
  bool logic = !Vbus_State;
     d88:	4b21      	ldr	r3, [pc, #132]	; (e10 <get_battery_level+0x88>)
     d8a:	781b      	ldrb	r3, [r3, #0]
     d8c:	2201      	movs	r2, #1
     d8e:	4053      	eors	r3, r2
     d90:	b2db      	uxtb	r3, r3
  if (logic) {
     d92:	2b00      	cmp	r3, #0
     d94:	d034      	beq.n	e00 <get_battery_level+0x78>
    if (adc_result <= VOLTAGE_THRESH_LOWEST) {
     d96:	4b1f      	ldr	r3, [pc, #124]	; (e14 <get_battery_level+0x8c>)
     d98:	881b      	ldrh	r3, [r3, #0]
     d9a:	4a1f      	ldr	r2, [pc, #124]	; (e18 <get_battery_level+0x90>)
     d9c:	4293      	cmp	r3, r2
     d9e:	d914      	bls.n	dca <get_battery_level+0x42>
      // LOWEST SITUATION
      BATTERY_LOWEST = true;
      BATTERY_LOW = false;
      BATTERY_CHARGED = false;

    } else if (adc_result > VOLTAGE_THRESH_LOWEST &&
     da0:	4a1e      	ldr	r2, [pc, #120]	; (e1c <get_battery_level+0x94>)
     da2:	189a      	adds	r2, r3, r2
     da4:	b292      	uxth	r2, r2
     da6:	2a28      	cmp	r2, #40	; 0x28
     da8:	d918      	bls.n	ddc <get_battery_level+0x54>
      // LOW SITUATION
      BATTERY_LOWEST = false;
      BATTERY_LOW = true;
      BATTERY_CHARGED = false;

    } else if (adc_result > VOLTAGE_THRESH_LOW &&
     daa:	4a1d      	ldr	r2, [pc, #116]	; (e20 <get_battery_level+0x98>)
     dac:	4694      	mov	ip, r2
     dae:	4463      	add	r3, ip
     db0:	b29b      	uxth	r3, r3
     db2:	22a3      	movs	r2, #163	; 0xa3
     db4:	0052      	lsls	r2, r2, #1
     db6:	4293      	cmp	r3, r2
     db8:	d819      	bhi.n	dee <get_battery_level+0x66>
               adc_result <= VOLTAGE_THRESH_MAX) {
      BATTERY_LOWEST = false;
     dba:	2300      	movs	r3, #0
     dbc:	4a19      	ldr	r2, [pc, #100]	; (e24 <get_battery_level+0x9c>)
     dbe:	7013      	strb	r3, [r2, #0]
      BATTERY_LOW = false;
     dc0:	4a19      	ldr	r2, [pc, #100]	; (e28 <get_battery_level+0xa0>)
     dc2:	7013      	strb	r3, [r2, #0]
      BATTERY_CHARGED = false;
     dc4:	4a19      	ldr	r2, [pc, #100]	; (e2c <get_battery_level+0xa4>)
     dc6:	7013      	strb	r3, [r2, #0]
     dc8:	e021      	b.n	e0e <get_battery_level+0x86>
      BATTERY_LOWEST = true;
     dca:	2201      	movs	r2, #1
     dcc:	4b15      	ldr	r3, [pc, #84]	; (e24 <get_battery_level+0x9c>)
     dce:	701a      	strb	r2, [r3, #0]
      BATTERY_LOW = false;
     dd0:	2300      	movs	r3, #0
     dd2:	4a15      	ldr	r2, [pc, #84]	; (e28 <get_battery_level+0xa0>)
     dd4:	7013      	strb	r3, [r2, #0]
      BATTERY_CHARGED = false;
     dd6:	4a15      	ldr	r2, [pc, #84]	; (e2c <get_battery_level+0xa4>)
     dd8:	7013      	strb	r3, [r2, #0]
     dda:	e018      	b.n	e0e <get_battery_level+0x86>
      BATTERY_LOWEST = false;
     ddc:	2300      	movs	r3, #0
     dde:	4a11      	ldr	r2, [pc, #68]	; (e24 <get_battery_level+0x9c>)
     de0:	7013      	strb	r3, [r2, #0]
      BATTERY_LOW = true;
     de2:	2101      	movs	r1, #1
     de4:	4a10      	ldr	r2, [pc, #64]	; (e28 <get_battery_level+0xa0>)
     de6:	7011      	strb	r1, [r2, #0]
      BATTERY_CHARGED = false;
     de8:	4a10      	ldr	r2, [pc, #64]	; (e2c <get_battery_level+0xa4>)
     dea:	7013      	strb	r3, [r2, #0]
     dec:	e00f      	b.n	e0e <get_battery_level+0x86>
    } else {
      BATTERY_LOWEST = false;
     dee:	2300      	movs	r3, #0
     df0:	4a0c      	ldr	r2, [pc, #48]	; (e24 <get_battery_level+0x9c>)
     df2:	7013      	strb	r3, [r2, #0]
      BATTERY_LOW = false;
     df4:	4a0c      	ldr	r2, [pc, #48]	; (e28 <get_battery_level+0xa0>)
     df6:	7013      	strb	r3, [r2, #0]
      BATTERY_CHARGED = true;
     df8:	2201      	movs	r2, #1
     dfa:	4b0c      	ldr	r3, [pc, #48]	; (e2c <get_battery_level+0xa4>)
     dfc:	701a      	strb	r2, [r3, #0]
     dfe:	e006      	b.n	e0e <get_battery_level+0x86>
    }
  } else {
    if (Charged_State) {
     e00:	4b0b      	ldr	r3, [pc, #44]	; (e30 <get_battery_level+0xa8>)
     e02:	781b      	ldrb	r3, [r3, #0]
     e04:	2b00      	cmp	r3, #0
     e06:	d002      	beq.n	e0e <get_battery_level+0x86>
      BATTERY_CHARGED = true;
     e08:	2201      	movs	r2, #1
     e0a:	4b08      	ldr	r3, [pc, #32]	; (e2c <get_battery_level+0xa4>)
     e0c:	701a      	strb	r2, [r3, #0]
    }
  }
}
     e0e:	4770      	bx	lr
     e10:	2000020e 	.word	0x2000020e
     e14:	20000098 	.word	0x20000098
     e18:	00000c6d 	.word	0x00000c6d
     e1c:	fffff392 	.word	0xfffff392
     e20:	fffff369 	.word	0xfffff369
     e24:	20000046 	.word	0x20000046
     e28:	20000045 	.word	0x20000045
     e2c:	20000043 	.word	0x20000043
     e30:	20000210 	.word	0x20000210

00000e34 <system_logic>:

/************************************************************************/
/* LOGIC MACHINE */
/************************************************************************/

void system_logic(void) {
     e34:	b510      	push	{r4, lr}
  if (SYS_TICK_10MS) {
     e36:	4b12      	ldr	r3, [pc, #72]	; (e80 <system_logic+0x4c>)
     e38:	781b      	ldrb	r3, [r3, #0]
     e3a:	2b00      	cmp	r3, #0
     e3c:	d108      	bne.n	e50 <system_logic+0x1c>
  // if (is_cycle_led){
  // flicker_pwm_led();
  //}
  //}

  if (SYS_TICK_200MS) {
     e3e:	4b11      	ldr	r3, [pc, #68]	; (e84 <system_logic+0x50>)
     e40:	781b      	ldrb	r3, [r3, #0]
     e42:	2b00      	cmp	r3, #0
     e44:	d10c      	bne.n	e60 <system_logic+0x2c>
    //} else {
    // flash_led_counter = 0;
    //}
  }

  if (SYS_SLEEP) {
     e46:	4b10      	ldr	r3, [pc, #64]	; (e88 <system_logic+0x54>)
     e48:	781b      	ldrb	r3, [r3, #0]
     e4a:	2b00      	cmp	r3, #0
     e4c:	d112      	bne.n	e74 <system_logic+0x40>
    SYS_SLEEP = false;
    sys_sleep_logic();
  }
}
     e4e:	bd10      	pop	{r4, pc}
    SYS_TICK_10MS = false;
     e50:	2200      	movs	r2, #0
     e52:	4b0b      	ldr	r3, [pc, #44]	; (e80 <system_logic+0x4c>)
     e54:	701a      	strb	r2, [r3, #0]
    system_state(); // Get latest system_state
     e56:	f000 f9ed 	bl	1234 <system_state>
    regular_routine();
     e5a:	f7ff ff17 	bl	c8c <regular_routine>
     e5e:	e7ee      	b.n	e3e <system_logic+0xa>
    SYS_TICK_200MS = false;
     e60:	2200      	movs	r2, #0
     e62:	4b08      	ldr	r3, [pc, #32]	; (e84 <system_logic+0x50>)
     e64:	701a      	strb	r2, [r3, #0]
    sample_adc();
     e66:	f7ff f96f 	bl	148 <sample_adc>
    get_battery_level();
     e6a:	f7ff ff8d 	bl	d88 <get_battery_level>
    toggle_nsleep();
     e6e:	f7ff fecd 	bl	c0c <toggle_nsleep>
     e72:	e7e8      	b.n	e46 <system_logic+0x12>
    SYS_SLEEP = false;
     e74:	2200      	movs	r2, #0
     e76:	4b04      	ldr	r3, [pc, #16]	; (e88 <system_logic+0x54>)
     e78:	701a      	strb	r2, [r3, #0]
    sys_sleep_logic();
     e7a:	f7ff ff03 	bl	c84 <sys_sleep_logic>
}
     e7e:	e7e6      	b.n	e4e <system_logic+0x1a>
     e80:	2000004b 	.word	0x2000004b
     e84:	2000004c 	.word	0x2000004c
     e88:	20000049 	.word	0x20000049

00000e8c <_tc_interrupt_get_interrupt_vector>:
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     e8c:	4b01      	ldr	r3, [pc, #4]	; (e94 <_tc_interrupt_get_interrupt_vector+0x8>)
     e8e:	5618      	ldrsb	r0, [r3, r0]
}
     e90:	4770      	bx	lr
     e92:	46c0      	nop			; (mov r8, r8)
     e94:	00002e90 	.word	0x00002e90

00000e98 <sys_tc_callback>:
  static int tick_count_100ms;
  static int tick_count_200ms;
  // static int tick_count_500ms;
  // static int tick_count_1000ms;

  tick_count_1ms++;
     e98:	4a2f      	ldr	r2, [pc, #188]	; (f58 <sys_tc_callback+0xc0>)
     e9a:	6813      	ldr	r3, [r2, #0]
     e9c:	3301      	adds	r3, #1
     e9e:	6013      	str	r3, [r2, #0]

  // port_pin_toggle_output_level (LED0_PIN);
  // // visually check sys clock on PA16

  // Check for 10ms interval
  if (tick_count_1ms >= 10) {
     ea0:	2b09      	cmp	r3, #9
     ea2:	dd09      	ble.n	eb8 <sys_tc_callback+0x20>
    tick_count_10ms++;
     ea4:	4a2d      	ldr	r2, [pc, #180]	; (f5c <sys_tc_callback+0xc4>)
     ea6:	6813      	ldr	r3, [r2, #0]
     ea8:	3301      	adds	r3, #1
     eaa:	6013      	str	r3, [r2, #0]
    tick_count_1ms = 0;
     eac:	2200      	movs	r2, #0
     eae:	4b2a      	ldr	r3, [pc, #168]	; (f58 <sys_tc_callback+0xc0>)
     eb0:	601a      	str	r2, [r3, #0]
    SYS_TICK_10MS = true; // Flag for 10ms interval
     eb2:	3201      	adds	r2, #1
     eb4:	4b2a      	ldr	r3, [pc, #168]	; (f60 <sys_tc_callback+0xc8>)
     eb6:	701a      	strb	r2, [r3, #0]
                          // port_pin_toggle_output_level (LED0_PIN);
                          // //
    // visually check sys clock on PA16
  }

  if (tick_count_10ms >= 2) {
     eb8:	4b28      	ldr	r3, [pc, #160]	; (f5c <sys_tc_callback+0xc4>)
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	2b01      	cmp	r3, #1
     ebe:	dd06      	ble.n	ece <sys_tc_callback+0x36>
    tick_count_20ms++;
     ec0:	4928      	ldr	r1, [pc, #160]	; (f64 <sys_tc_callback+0xcc>)
     ec2:	680a      	ldr	r2, [r1, #0]
     ec4:	3201      	adds	r2, #1
     ec6:	600a      	str	r2, [r1, #0]
    // tick_count_10ms = 0;
    SYS_TICK_20MS = true; // Flag for 18ms interval
     ec8:	2101      	movs	r1, #1
     eca:	4a27      	ldr	r2, [pc, #156]	; (f68 <sys_tc_callback+0xd0>)
     ecc:	7011      	strb	r1, [r2, #0]
  }

  // Check for 50ms interval
  if (tick_count_10ms >= 5) {
     ece:	2b04      	cmp	r3, #4
     ed0:	dd09      	ble.n	ee6 <sys_tc_callback+0x4e>
    tick_count_50ms++;
     ed2:	4a26      	ldr	r2, [pc, #152]	; (f6c <sys_tc_callback+0xd4>)
     ed4:	6813      	ldr	r3, [r2, #0]
     ed6:	3301      	adds	r3, #1
     ed8:	6013      	str	r3, [r2, #0]
    tick_count_10ms = 0;
     eda:	2200      	movs	r2, #0
     edc:	4b1f      	ldr	r3, [pc, #124]	; (f5c <sys_tc_callback+0xc4>)
     ede:	601a      	str	r2, [r3, #0]
    SYS_TICK_50MS = true; // Flag for 50ms interval
     ee0:	3201      	adds	r2, #1
     ee2:	4b23      	ldr	r3, [pc, #140]	; (f70 <sys_tc_callback+0xd8>)
     ee4:	701a      	strb	r2, [r3, #0]
                          // //
    // visually check sys clock on PA16
  }

  // Check for 100ms interval
  if (tick_count_50ms >= 2) {
     ee6:	4b21      	ldr	r3, [pc, #132]	; (f6c <sys_tc_callback+0xd4>)
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	2b01      	cmp	r3, #1
     eec:	dd09      	ble.n	f02 <sys_tc_callback+0x6a>
    tick_count_100ms++;
     eee:	4a21      	ldr	r2, [pc, #132]	; (f74 <sys_tc_callback+0xdc>)
     ef0:	6813      	ldr	r3, [r2, #0]
     ef2:	3301      	adds	r3, #1
     ef4:	6013      	str	r3, [r2, #0]
    tick_count_50ms = 0;
     ef6:	2200      	movs	r2, #0
     ef8:	4b1c      	ldr	r3, [pc, #112]	; (f6c <sys_tc_callback+0xd4>)
     efa:	601a      	str	r2, [r3, #0]
    SYS_TICK_100MS = true; // Flag for 100ms interval
     efc:	3201      	adds	r2, #1
     efe:	4b1e      	ldr	r3, [pc, #120]	; (f78 <sys_tc_callback+0xe0>)
     f00:	701a      	strb	r2, [r3, #0]
                           // //
    // visually check sys clock on PA16
  }

  // Check for 200ms interval
  if (tick_count_100ms >= 2) {
     f02:	4b1c      	ldr	r3, [pc, #112]	; (f74 <sys_tc_callback+0xdc>)
     f04:	681b      	ldr	r3, [r3, #0]
     f06:	2b01      	cmp	r3, #1
     f08:	dd09      	ble.n	f1e <sys_tc_callback+0x86>
    tick_count_200ms++;
     f0a:	4a1c      	ldr	r2, [pc, #112]	; (f7c <sys_tc_callback+0xe4>)
     f0c:	6813      	ldr	r3, [r2, #0]
     f0e:	3301      	adds	r3, #1
     f10:	6013      	str	r3, [r2, #0]
    tick_count_100ms = 0;
     f12:	2200      	movs	r2, #0
     f14:	4b17      	ldr	r3, [pc, #92]	; (f74 <sys_tc_callback+0xdc>)
     f16:	601a      	str	r2, [r3, #0]
    SYS_TICK_200MS = true; // Flag for 200ms interval
     f18:	3201      	adds	r2, #1
     f1a:	4b19      	ldr	r3, [pc, #100]	; (f80 <sys_tc_callback+0xe8>)
     f1c:	701a      	strb	r2, [r3, #0]
                           // port_pin_toggle_output_level (LED0_PIN);
  }

  if (SYS_TICK_200MS || LongPressB2Flag) {
     f1e:	4b18      	ldr	r3, [pc, #96]	; (f80 <sys_tc_callback+0xe8>)
     f20:	781b      	ldrb	r3, [r3, #0]
     f22:	2b00      	cmp	r3, #0
     f24:	d103      	bne.n	f2e <sys_tc_callback+0x96>
     f26:	4b17      	ldr	r3, [pc, #92]	; (f84 <sys_tc_callback+0xec>)
     f28:	781b      	ldrb	r3, [r3, #0]
     f2a:	2b00      	cmp	r3, #0
     f2c:	d00f      	beq.n	f4e <sys_tc_callback+0xb6>
    if (LongPressB2Flag) {
     f2e:	4b15      	ldr	r3, [pc, #84]	; (f84 <sys_tc_callback+0xec>)
     f30:	781b      	ldrb	r3, [r3, #0]
     f32:	2b00      	cmp	r3, #0
     f34:	d002      	beq.n	f3c <sys_tc_callback+0xa4>
      SleepTickCount = 25;
     f36:	2219      	movs	r2, #25
     f38:	4b13      	ldr	r3, [pc, #76]	; (f88 <sys_tc_callback+0xf0>)
     f3a:	601a      	str	r2, [r3, #0]
    }
    LongPressB2Flag = false;
     f3c:	2200      	movs	r2, #0
     f3e:	4b11      	ldr	r3, [pc, #68]	; (f84 <sys_tc_callback+0xec>)
     f40:	701a      	strb	r2, [r3, #0]
    SleepTickCount--;
     f42:	4a11      	ldr	r2, [pc, #68]	; (f88 <sys_tc_callback+0xf0>)
     f44:	6813      	ldr	r3, [r2, #0]
     f46:	3b01      	subs	r3, #1
     f48:	6013      	str	r3, [r2, #0]
    if (SleepTickCount < 1) {
     f4a:	2b00      	cmp	r3, #0
     f4c:	dd00      	ble.n	f50 <sys_tc_callback+0xb8>
      SYS_SLEEP = true;
    }
  }
}
     f4e:	4770      	bx	lr
      SYS_SLEEP = true;
     f50:	2201      	movs	r2, #1
     f52:	4b0e      	ldr	r3, [pc, #56]	; (f8c <sys_tc_callback+0xf4>)
     f54:	701a      	strb	r2, [r3, #0]
}
     f56:	e7fa      	b.n	f4e <sys_tc_callback+0xb6>
     f58:	20000058 	.word	0x20000058
     f5c:	20000054 	.word	0x20000054
     f60:	2000004b 	.word	0x2000004b
     f64:	20000060 	.word	0x20000060
     f68:	2000004d 	.word	0x2000004d
     f6c:	20000064 	.word	0x20000064
     f70:	2000004e 	.word	0x2000004e
     f74:	20000050 	.word	0x20000050
     f78:	2000004a 	.word	0x2000004a
     f7c:	2000005c 	.word	0x2000005c
     f80:	2000004c 	.word	0x2000004c
     f84:	2000003e 	.word	0x2000003e
     f88:	2000000c 	.word	0x2000000c
     f8c:	20000049 	.word	0x20000049

00000f90 <extint_detection_callback>:
                           EXTINT_CALLBACK_TYPE_DETECT);
  extint_chan_enable_callback(PA_11_EIC_LINE_custom,
                              EXTINT_CALLBACK_TYPE_DETECT);
}

void extint_detection_callback(void) { SleepTickCount = SLEEP_TICK_COUNT; }
     f90:	4a01      	ldr	r2, [pc, #4]	; (f98 <extint_detection_callback+0x8>)
     f92:	4b02      	ldr	r3, [pc, #8]	; (f9c <extint_detection_callback+0xc>)
     f94:	601a      	str	r2, [r3, #0]
     f96:	4770      	bx	lr
     f98:	00001194 	.word	0x00001194
     f9c:	2000000c 	.word	0x2000000c

00000fa0 <configure_port_pins>:
void configure_port_pins(void) {
     fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fa2:	b083      	sub	sp, #12
	config->direction  = PORT_PIN_DIR_INPUT;
     fa4:	ac01      	add	r4, sp, #4
     fa6:	2600      	movs	r6, #0
     fa8:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
     faa:	70a6      	strb	r6, [r4, #2]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN;
     fac:	2702      	movs	r7, #2
     fae:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(VBUS_PIN, &config_port_pin);
     fb0:	0021      	movs	r1, r4
     fb2:	201b      	movs	r0, #27
     fb4:	f000 f97c 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     fb8:	2501      	movs	r5, #1
     fba:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     fbc:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(MOTOR_NSLEEP_PIN, &config_port_pin);
     fbe:	0021      	movs	r1, r4
     fc0:	2006      	movs	r0, #6
     fc2:	f000 f975 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     fc6:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP; // START AT PULL UP.
     fc8:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(SWITCH_OFF_PIN, &config_port_pin);
     fca:	0021      	movs	r1, r4
     fcc:	2007      	movs	r0, #7
     fce:	f000 f96f 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     fd2:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP; // START AT PULL DOWN.
     fd4:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(BUTTON_2, &config_port_pin);
     fd6:	0021      	movs	r1, r4
     fd8:	200f      	movs	r0, #15
     fda:	f000 f969 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
     fde:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     fe0:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(BAT_CHARGED_PIN, &config_port_pin);
     fe2:	0021      	movs	r1, r4
     fe4:	200b      	movs	r0, #11
     fe6:	f000 f963 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     fea:	7025      	strb	r5, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_DOWN; // START AT PULL DOWN.
     fec:	7067      	strb	r7, [r4, #1]
  port_pin_set_config(CHARGN_OFF_PIN, &config_port_pin);
     fee:	0021      	movs	r1, r4
     ff0:	2003      	movs	r0, #3
     ff2:	f000 f95d 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     ff6:	7025      	strb	r5, [r4, #0]
  port_pin_set_config(XPLAINED_LED, &config_port_pin);
     ff8:	0021      	movs	r1, r4
     ffa:	2010      	movs	r0, #16
     ffc:	f000 f958 	bl	12b0 <port_pin_set_config>
  config_port_pin.direction = PORT_PIN_DIR_INPUT;
    1000:	7026      	strb	r6, [r4, #0]
  config_port_pin.input_pull = PORT_PIN_PULL_UP;
    1002:	7065      	strb	r5, [r4, #1]
  port_pin_set_config(BUTTON_1, &config_port_pin);
    1004:	0021      	movs	r1, r4
    1006:	200e      	movs	r0, #14
    1008:	f000 f952 	bl	12b0 <port_pin_set_config>
}
    100c:	b003      	add	sp, #12
    100e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001010 <configure_system_tc>:
void configure_system_tc(void) {
    1010:	b510      	push	{r4, lr}
    1012:	b08e      	sub	sp, #56	; 0x38
	config->clock_source               = GCLK_GENERATOR_0;
    1014:	aa01      	add	r2, sp, #4
    1016:	2300      	movs	r3, #0
    1018:	2100      	movs	r1, #0
    101a:	7013      	strb	r3, [r2, #0]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    101c:	7193      	strb	r3, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    101e:	8113      	strh	r3, [r2, #8]
	config->run_in_standby             = false;
    1020:	2000      	movs	r0, #0
    1022:	7050      	strb	r0, [r2, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    1024:	7291      	strb	r1, [r2, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    1026:	72d1      	strb	r1, [r2, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    1028:	7311      	strb	r1, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    102a:	7391      	strb	r1, [r2, #14]
	config->oneshot                    = false;
    102c:	7351      	strb	r1, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    102e:	6153      	str	r3, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    1030:	6193      	str	r3, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    1032:	7711      	strb	r1, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    1034:	6213      	str	r3, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    1036:	6253      	str	r3, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    1038:	8513      	strh	r3, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    103a:	8553      	strh	r3, [r2, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    103c:	8593      	strh	r3, [r2, #44]	; 0x2c
  config_tc.counter_size = TC_COUNTER_SIZE;
    103e:	3304      	adds	r3, #4
    1040:	7093      	strb	r3, [r2, #2]
  config_tc.clock_prescaler = TC_CLOCK_PRESCALER;
    1042:	23a0      	movs	r3, #160	; 0xa0
    1044:	00db      	lsls	r3, r3, #3
    1046:	8093      	strh	r3, [r2, #4]
  config_tc.counter_8_bit.period = SYSTEM_TC_PERIOD_VALUE;
    1048:	216f      	movs	r1, #111	; 0x6f
    104a:	2329      	movs	r3, #41	; 0x29
    104c:	54d1      	strb	r1, [r2, r3]
  config_tc.pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = true;
    104e:	3b28      	subs	r3, #40	; 0x28
    1050:	7413      	strb	r3, [r2, #16]
  tc_init(&system_timer_instance, SYSTEM_TC, &config_tc);
    1052:	4c08      	ldr	r4, [pc, #32]	; (1074 <configure_system_tc+0x64>)
    1054:	4908      	ldr	r1, [pc, #32]	; (1078 <configure_system_tc+0x68>)
    1056:	0020      	movs	r0, r4
    1058:	f001 faf6 	bl	2648 <tc_init>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    105c:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    105e:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    1060:	b25b      	sxtb	r3, r3
    1062:	2b00      	cmp	r3, #0
    1064:	dbfb      	blt.n	105e <configure_system_tc+0x4e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    1066:	8813      	ldrh	r3, [r2, #0]
    1068:	2102      	movs	r1, #2
    106a:	430b      	orrs	r3, r1
    106c:	b29b      	uxth	r3, r3
    106e:	8013      	strh	r3, [r2, #0]
}
    1070:	b00e      	add	sp, #56	; 0x38
    1072:	bd10      	pop	{r4, pc}
    1074:	20000128 	.word	0x20000128
    1078:	42001800 	.word	0x42001800

0000107c <system_tc_callbacks>:
void system_tc_callbacks(void) {
    107c:	b510      	push	{r4, lr}
  tc_register_callback(&system_timer_instance, sys_tc_callback,
    107e:	4c0c      	ldr	r4, [pc, #48]	; (10b0 <system_tc_callbacks+0x34>)
    1080:	2200      	movs	r2, #0
    1082:	490c      	ldr	r1, [pc, #48]	; (10b4 <system_tc_callbacks+0x38>)
    1084:	0020      	movs	r0, r4
    1086:	f001 fa72 	bl	256e <tc_register_callback>
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    108a:	6820      	ldr	r0, [r4, #0]
    108c:	f001 fac4 	bl	2618 <_tc_get_inst_index>
    1090:	f7ff fefc 	bl	e8c <_tc_interrupt_get_interrupt_vector>
    1094:	231f      	movs	r3, #31
    1096:	4018      	ands	r0, r3
    1098:	2201      	movs	r2, #1
    109a:	0011      	movs	r1, r2
    109c:	4081      	lsls	r1, r0
    109e:	4b06      	ldr	r3, [pc, #24]	; (10b8 <system_tc_callbacks+0x3c>)
    10a0:	6019      	str	r1, [r3, #0]
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
    10a2:	7e63      	ldrb	r3, [r4, #25]
    10a4:	2101      	movs	r1, #1
    10a6:	430b      	orrs	r3, r1
    10a8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    10aa:	6823      	ldr	r3, [r4, #0]
    10ac:	735a      	strb	r2, [r3, #13]
}
    10ae:	bd10      	pop	{r4, pc}
    10b0:	20000128 	.word	0x20000128
    10b4:	00000e99 	.word	0x00000e99
    10b8:	e000e100 	.word	0xe000e100

000010bc <configure_extint_channel>:
void configure_extint_channel(void) {
    10bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10be:	b085      	sub	sp, #20
  extint_chan_get_config_defaults(&config_extint_chan);
    10c0:	ac01      	add	r4, sp, #4
    10c2:	0020      	movs	r0, r4
    10c4:	f7ff fbac 	bl	820 <extint_chan_get_config_defaults>
  config_extint_chan.gpio_pin = PIN_PA15A_EIC_EXTINT1;
    10c8:	230f      	movs	r3, #15
    10ca:	9301      	str	r3, [sp, #4]
  config_extint_chan.gpio_pin_mux = MUX_PA15A_EIC_EXTINT1;
    10cc:	2700      	movs	r7, #0
    10ce:	6067      	str	r7, [r4, #4]
  config_extint_chan.wake_if_sleeping = true;
    10d0:	2501      	movs	r5, #1
    10d2:	7265      	strb	r5, [r4, #9]
  config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    10d4:	7225      	strb	r5, [r4, #8]
  config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    10d6:	2602      	movs	r6, #2
    10d8:	72e6      	strb	r6, [r4, #11]
  extint_chan_set_config(BUTTON_0_EIC_LINE_custom, &config_extint_chan);
    10da:	0021      	movs	r1, r4
    10dc:	2001      	movs	r0, #1
    10de:	f7ff fba9 	bl	834 <extint_chan_set_config>
  extint_chan_get_config_defaults(&config_extint_chan);
    10e2:	0020      	movs	r0, r4
    10e4:	f7ff fb9c 	bl	820 <extint_chan_get_config_defaults>
  config_extint_chan.gpio_pin = PIN_PA11A_EIC_EXTINT3;
    10e8:	230b      	movs	r3, #11
    10ea:	9301      	str	r3, [sp, #4]
  config_extint_chan.gpio_pin_mux = MUX_PA11A_EIC_EXTINT3;
    10ec:	6067      	str	r7, [r4, #4]
  config_extint_chan.wake_if_sleeping = true;
    10ee:	7265      	strb	r5, [r4, #9]
  config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    10f0:	7225      	strb	r5, [r4, #8]
  config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
    10f2:	72e6      	strb	r6, [r4, #11]
  extint_chan_set_config(PA_11_EIC_LINE_custom, &config_extint_chan);
    10f4:	0021      	movs	r1, r4
    10f6:	2003      	movs	r0, #3
    10f8:	f7ff fb9c 	bl	834 <extint_chan_set_config>
}
    10fc:	b005      	add	sp, #20
    10fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001100 <configure_extint_callbacks>:
void configure_extint_callbacks(void) {
    1100:	b510      	push	{r4, lr}
  extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE_custom,
    1102:	4c0a      	ldr	r4, [pc, #40]	; (112c <configure_extint_callbacks+0x2c>)
    1104:	2200      	movs	r2, #0
    1106:	2101      	movs	r1, #1
    1108:	0020      	movs	r0, r4
    110a:	f7ff fadb 	bl	6c4 <extint_register_callback>
  extint_chan_enable_callback(BUTTON_0_EIC_LINE_custom,
    110e:	2100      	movs	r1, #0
    1110:	2001      	movs	r0, #1
    1112:	f7ff faed 	bl	6f0 <extint_chan_enable_callback>
  extint_register_callback(extint_detection_callback, PA_11_EIC_LINE_custom,
    1116:	2200      	movs	r2, #0
    1118:	2103      	movs	r1, #3
    111a:	0020      	movs	r0, r4
    111c:	f7ff fad2 	bl	6c4 <extint_register_callback>
  extint_chan_enable_callback(PA_11_EIC_LINE_custom,
    1120:	2100      	movs	r1, #0
    1122:	2003      	movs	r0, #3
    1124:	f7ff fae4 	bl	6f0 <extint_chan_enable_callback>
}
    1128:	bd10      	pop	{r4, pc}
    112a:	46c0      	nop			; (mov r8, r8)
    112c:	00000f91 	.word	0x00000f91

00001130 <configure_sleep_clock>:
    1130:	4a02      	ldr	r2, [pc, #8]	; (113c <configure_sleep_clock+0xc>)
    1132:	6993      	ldr	r3, [r2, #24]
    1134:	2140      	movs	r1, #64	; 0x40
    1136:	430b      	orrs	r3, r1
    1138:	6193      	str	r3, [r2, #24]
      system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, mask);

  if (result != STATUS_OK) {
    Assert(false);
  }
}
    113a:	4770      	bx	lr
    113c:	40000400 	.word	0x40000400

00001140 <startup_default_pin_state>:
		port_base->OUTCLR.reg = pin_mask;
    1140:	4b06      	ldr	r3, [pc, #24]	; (115c <startup_default_pin_state+0x1c>)
    1142:	2240      	movs	r2, #64	; 0x40
    1144:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1146:	3240      	adds	r2, #64	; 0x40
    1148:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    114a:	2280      	movs	r2, #128	; 0x80
    114c:	0212      	lsls	r2, r2, #8
    114e:	615a      	str	r2, [r3, #20]
    1150:	2280      	movs	r2, #128	; 0x80
    1152:	0112      	lsls	r2, r2, #4
    1154:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1156:	2208      	movs	r2, #8
    1158:	619a      	str	r2, [r3, #24]
  port_pin_set_output_level(SWITCH_OFF_PIN, HIGH); // at high rev 2
  port_pin_set_output_level(BUTTON_2, LOW);
  port_pin_set_output_level(BAT_CHARGED_PIN, LOW);
  port_pin_set_output_level(CHARGN_OFF_PIN, HIGH);
  // port_pin_set_output_level(SAMPLE_ADC_PIN,LOW);
}
    115a:	4770      	bx	lr
    115c:	41004400 	.word	0x41004400

00001160 <startup_sys_configs>:

/************************************************************************/
/* SYSTEM startup function call (config functions)
 */
/************************************************************************/
void startup_sys_configs(void) {
    1160:	b510      	push	{r4, lr}
  system_init();                    // System Initialize
    1162:	f000 ff30 	bl	1fc6 <system_init>
	cpu_irq_enable();
    1166:	2201      	movs	r2, #1
    1168:	4b0e      	ldr	r3, [pc, #56]	; (11a4 <startup_sys_configs+0x44>)
    116a:	701a      	strb	r2, [r3, #0]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    116c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1170:	b662      	cpsie	i
  system_interrupt_enable_global(); // System Interrupts
  configure_port_pins();            // System PORTs
    1172:	f7ff ff15 	bl	fa0 <configure_port_pins>
  startup_default_pin_state();
    1176:	f7ff ffe3 	bl	1140 <startup_default_pin_state>
  i2c_master_setup();    // Startup I2C
    117a:	f001 fcd9 	bl	2b30 <i2c_master_setup>
  configure_system_tc(); // System Clock
    117e:	f7ff ff47 	bl	1010 <configure_system_tc>
  system_tc_callbacks(); // System Clock Callback
    1182:	f7ff ff7b 	bl	107c <system_tc_callbacks>
  configure_pwm_tcc();   // Startup PWM
    1186:	f7ff fc3f 	bl	a08 <configure_pwm_tcc>
  configure_adc();
    118a:	f7fe ffaf 	bl	ec <configure_adc>
  configure_pwm_generator();
    118e:	f7ff fc9b 	bl	ac8 <configure_pwm_generator>

  configure_sleep_clock();
    1192:	f7ff ffcd 	bl	1130 <configure_sleep_clock>
  configure_extint_channel();
    1196:	f7ff ff91 	bl	10bc <configure_extint_channel>
  configure_extint_callbacks();
    119a:	f7ff ffb1 	bl	1100 <configure_extint_callbacks>
  extint_detection_callback();
    119e:	f7ff fef7 	bl	f90 <extint_detection_callback>
}
    11a2:	bd10      	pop	{r4, pc}
    11a4:	20000010 	.word	0x20000010

000011a8 <update_battery_states>:
	return (port_base->IN.reg & pin_mask);
    11a8:	4906      	ldr	r1, [pc, #24]	; (11c4 <update_battery_states+0x1c>)
    11aa:	6a0b      	ldr	r3, [r1, #32]
    11ac:	0edb      	lsrs	r3, r3, #27
    11ae:	2201      	movs	r2, #1
    11b0:	4013      	ands	r3, r2
#define VBUS_STATE port_pin_get_input_level(VBUS_PIN)
#define CHARGED_STATE port_pin_get_input_level(BAT_CHARGED_PIN)
// #define CHARGN_OFF_STATE port_pin_get_input_level(CHARGN_OFF_PIN)

void update_battery_states(void) {
  Vbus_State = VBUS_STATE;
    11b2:	4805      	ldr	r0, [pc, #20]	; (11c8 <update_battery_states+0x20>)
    11b4:	7003      	strb	r3, [r0, #0]
    11b6:	6a0b      	ldr	r3, [r1, #32]
    11b8:	0adb      	lsrs	r3, r3, #11
    11ba:	401a      	ands	r2, r3
  Charged_State = CHARGED_STATE;
    11bc:	4b03      	ldr	r3, [pc, #12]	; (11cc <update_battery_states+0x24>)
    11be:	701a      	strb	r2, [r3, #0]
}
    11c0:	4770      	bx	lr
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	41004400 	.word	0x41004400
    11c8:	2000020e 	.word	0x2000020e
    11cc:	20000210 	.word	0x20000210

000011d0 <display_battery_state>:

/************************************************************************/
/* Indication LED Control                                               */
/************************************************************************/

void display_battery_state(void) {
    11d0:	b510      	push	{r4, lr}
  2. Steady red light when device has a low battery
  3. Blinking green light when device is charging
  4. Steady green light when the device is at least 100% charged.
  */

  if (Vbus_State) {
    11d2:	4b12      	ldr	r3, [pc, #72]	; (121c <display_battery_state+0x4c>)
    11d4:	781b      	ldrb	r3, [r3, #0]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d009      	beq.n	11ee <display_battery_state+0x1e>
    // port_pin_set_output_level(BAT_CHARGED_PIN, false);
    // system_inactive();
    // // turn  off all motor/ led array if plugged in
    if (!Charged_State) {
    11da:	4b11      	ldr	r3, [pc, #68]	; (1220 <display_battery_state+0x50>)
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	2b00      	cmp	r3, #0
    11e0:	d102      	bne.n	11e8 <display_battery_state+0x18>
      set_battery_charge_routine(); //  blink
    11e2:	f001 fc29 	bl	2a38 <set_battery_charge_routine>
        set_color_red_indication();
      }
    } else {
    }
  }
}
    11e6:	bd10      	pop	{r4, pc}
      set_color_green_indication();
    11e8:	f001 fbd8 	bl	299c <set_color_green_indication>
    11ec:	e7fb      	b.n	11e6 <display_battery_state+0x16>
    if (!motor_running) {
    11ee:	4b0d      	ldr	r3, [pc, #52]	; (1224 <display_battery_state+0x54>)
    11f0:	781b      	ldrb	r3, [r3, #0]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d1f7      	bne.n	11e6 <display_battery_state+0x16>
      if (BATTERY_LOWEST) {
    11f6:	4b0c      	ldr	r3, [pc, #48]	; (1228 <display_battery_state+0x58>)
    11f8:	781b      	ldrb	r3, [r3, #0]
    11fa:	2b00      	cmp	r3, #0
    11fc:	d1f3      	bne.n	11e6 <display_battery_state+0x16>
      } else if (BATTERY_LOW) {
    11fe:	4b0b      	ldr	r3, [pc, #44]	; (122c <display_battery_state+0x5c>)
    1200:	781b      	ldrb	r3, [r3, #0]
    1202:	2b00      	cmp	r3, #0
    1204:	d106      	bne.n	1214 <display_battery_state+0x44>
      } else if (BATTERY_CHARGED) {
    1206:	4b0a      	ldr	r3, [pc, #40]	; (1230 <display_battery_state+0x60>)
    1208:	781b      	ldrb	r3, [r3, #0]
    120a:	2b00      	cmp	r3, #0
    120c:	d1eb      	bne.n	11e6 <display_battery_state+0x16>
        set_color_red_indication();
    120e:	f001 fbdf 	bl	29d0 <set_color_red_indication>
}
    1212:	e7e8      	b.n	11e6 <display_battery_state+0x16>
        set_battery_low_routine(); //  blink
    1214:	f001 fc4e 	bl	2ab4 <set_battery_low_routine>
    1218:	e7e5      	b.n	11e6 <display_battery_state+0x16>
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	2000020e 	.word	0x2000020e
    1220:	20000210 	.word	0x20000210
    1224:	20000041 	.word	0x20000041
    1228:	20000046 	.word	0x20000046
    122c:	20000045 	.word	0x20000045
    1230:	20000043 	.word	0x20000043

00001234 <system_state>:

/************************************************************************/
/* STATE MACHINE */
/************************************************************************/

void system_state(void) {
    1234:	b510      	push	{r4, lr}
  update_battery_states();
    1236:	f7ff ffb7 	bl	11a8 <update_battery_states>
  display_battery_state();
    123a:	f7ff ffc9 	bl	11d0 <display_battery_state>
    123e:	bd10      	pop	{r4, pc}

00001240 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1240:	4b0c      	ldr	r3, [pc, #48]	; (1274 <cpu_irq_enter_critical+0x34>)
    1242:	681b      	ldr	r3, [r3, #0]
    1244:	2b00      	cmp	r3, #0
    1246:	d106      	bne.n	1256 <cpu_irq_enter_critical+0x16>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1248:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    124c:	2b00      	cmp	r3, #0
    124e:	d007      	beq.n	1260 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1250:	2200      	movs	r2, #0
    1252:	4b09      	ldr	r3, [pc, #36]	; (1278 <cpu_irq_enter_critical+0x38>)
    1254:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1256:	4a07      	ldr	r2, [pc, #28]	; (1274 <cpu_irq_enter_critical+0x34>)
    1258:	6813      	ldr	r3, [r2, #0]
    125a:	3301      	adds	r3, #1
    125c:	6013      	str	r3, [r2, #0]
}
    125e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1260:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
    1262:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1266:	2200      	movs	r2, #0
    1268:	4b04      	ldr	r3, [pc, #16]	; (127c <cpu_irq_enter_critical+0x3c>)
    126a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    126c:	3201      	adds	r2, #1
    126e:	4b02      	ldr	r3, [pc, #8]	; (1278 <cpu_irq_enter_critical+0x38>)
    1270:	701a      	strb	r2, [r3, #0]
    1272:	e7f0      	b.n	1256 <cpu_irq_enter_critical+0x16>
    1274:	20000068 	.word	0x20000068
    1278:	2000006c 	.word	0x2000006c
    127c:	20000010 	.word	0x20000010

00001280 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1280:	4b08      	ldr	r3, [pc, #32]	; (12a4 <cpu_irq_leave_critical+0x24>)
    1282:	681a      	ldr	r2, [r3, #0]
    1284:	3a01      	subs	r2, #1
    1286:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1288:	681b      	ldr	r3, [r3, #0]
    128a:	2b00      	cmp	r3, #0
    128c:	d109      	bne.n	12a2 <cpu_irq_leave_critical+0x22>
    128e:	4b06      	ldr	r3, [pc, #24]	; (12a8 <cpu_irq_leave_critical+0x28>)
    1290:	781b      	ldrb	r3, [r3, #0]
    1292:	2b00      	cmp	r3, #0
    1294:	d005      	beq.n	12a2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1296:	2201      	movs	r2, #1
    1298:	4b04      	ldr	r3, [pc, #16]	; (12ac <cpu_irq_leave_critical+0x2c>)
    129a:	701a      	strb	r2, [r3, #0]
    129c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    12a0:	b662      	cpsie	i
	}
}
    12a2:	4770      	bx	lr
    12a4:	20000068 	.word	0x20000068
    12a8:	2000006c 	.word	0x2000006c
    12ac:	20000010 	.word	0x20000010

000012b0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    12b0:	b500      	push	{lr}
    12b2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    12b4:	ab01      	add	r3, sp, #4
    12b6:	2280      	movs	r2, #128	; 0x80
    12b8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    12ba:	780a      	ldrb	r2, [r1, #0]
    12bc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    12be:	784a      	ldrb	r2, [r1, #1]
    12c0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    12c2:	788a      	ldrb	r2, [r1, #2]
    12c4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    12c6:	0019      	movs	r1, r3
    12c8:	f000 fe66 	bl	1f98 <system_pinmux_pin_set_config>
}
    12cc:	b003      	add	sp, #12
    12ce:	bd00      	pop	{pc}

000012d0 <_i2c_master_wait_for_sync>:
{
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    12d0:	6803      	ldr	r3, [r0, #0]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    12d2:	69db      	ldr	r3, [r3, #28]
		const struct i2c_master_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
    12d4:	075b      	lsls	r3, r3, #29
    12d6:	d1fb      	bne.n	12d0 <_i2c_master_wait_for_sync>
		/* Wait for I2C module to sync. */
	}
}
    12d8:	4770      	bx	lr
	...

000012dc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
    12dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12de:	46c6      	mov	lr, r8
    12e0:	b500      	push	{lr}
    12e2:	b082      	sub	sp, #8
    12e4:	0007      	movs	r7, r0
    12e6:	000c      	movs	r4, r1
	int32_t tmp_baud = 0;
	int32_t tmp_baud_hs = 0;
	int32_t tmp_baudlow_hs = 0;
	enum status_code tmp_status_code = STATUS_OK;

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    12e8:	6806      	ldr	r6, [r0, #0]
	Sercom *const sercom_hw = module->hw;

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    12ea:	0030      	movs	r0, r6
    12ec:	f000 fb52 	bl	1994 <_sercom_get_sercom_inst_index>
    12f0:	4680      	mov	r8, r0
    12f2:	ab01      	add	r3, sp, #4
    12f4:	2280      	movs	r2, #128	; 0x80
    12f6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    12f8:	2200      	movs	r2, #0
    12fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    12fc:	2101      	movs	r1, #1
    12fe:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    1300:	70da      	strb	r2, [r3, #3]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);

	uint32_t pad0 = config->pinmux_pad0;
    1302:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1304:	6a25      	ldr	r5, [r4, #32]

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
    1306:	2800      	cmp	r0, #0
    1308:	d01e      	beq.n	1348 <_i2c_master_set_config+0x6c>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
    130a:	a901      	add	r1, sp, #4
    130c:	7008      	strb	r0, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    130e:	2302      	movs	r3, #2
    1310:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1312:	0c00      	lsrs	r0, r0, #16
    1314:	b2c0      	uxtb	r0, r0
    1316:	f000 fe3f 	bl	1f98 <system_pinmux_pin_set_config>

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
    131a:	2d00      	cmp	r5, #0
    131c:	d019      	beq.n	1352 <_i2c_master_set_config+0x76>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
    131e:	a901      	add	r1, sp, #4
    1320:	700d      	strb	r5, [r1, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1322:	2302      	movs	r3, #2
    1324:	704b      	strb	r3, [r1, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1326:	0c2d      	lsrs	r5, r5, #16
    1328:	b2e8      	uxtb	r0, r5
    132a:	f000 fe35 	bl	1f98 <system_pinmux_pin_set_config>

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    132e:	8aa3      	ldrh	r3, [r4, #20]
    1330:	80fb      	strh	r3, [r7, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
    1332:	8ae3      	ldrh	r3, [r4, #22]
    1334:	813b      	strh	r3, [r7, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    1336:	7e23      	ldrb	r3, [r4, #24]
    1338:	2b00      	cmp	r3, #0
    133a:	d110      	bne.n	135e <_i2c_master_set_config+0x82>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    133c:	4b27      	ldr	r3, [pc, #156]	; (13dc <_i2c_master_set_config+0x100>)
    133e:	789b      	ldrb	r3, [r3, #2]
    1340:	079b      	lsls	r3, r3, #30
    1342:	d449      	bmi.n	13d8 <_i2c_master_set_config+0xfc>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
	} else {
		tmp_ctrla = 0;
    1344:	2300      	movs	r3, #0
    1346:	e00b      	b.n	1360 <_i2c_master_set_config+0x84>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    1348:	2100      	movs	r1, #0
    134a:	0030      	movs	r0, r6
    134c:	f000 fac2 	bl	18d4 <_sercom_get_default_pad>
    1350:	e7db      	b.n	130a <_i2c_master_set_config+0x2e>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1352:	2101      	movs	r1, #1
    1354:	0030      	movs	r0, r6
    1356:	f000 fabd 	bl	18d4 <_sercom_get_default_pad>
    135a:	0005      	movs	r5, r0
    135c:	e7df      	b.n	131e <_i2c_master_set_config+0x42>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    135e:	2380      	movs	r3, #128	; 0x80
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
    1360:	6922      	ldr	r2, [r4, #16]
    1362:	2a00      	cmp	r2, #0
    1364:	d000      	beq.n	1368 <_i2c_master_set_config+0x8c>
		tmp_ctrla |= config->start_hold_time;
    1366:	4313      	orrs	r3, r2
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
    1368:	68a2      	ldr	r2, [r4, #8]
    136a:	4313      	orrs	r3, r2

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
    136c:	2124      	movs	r1, #36	; 0x24
    136e:	5c61      	ldrb	r1, [r4, r1]
    1370:	2900      	cmp	r1, #0
    1372:	d002      	beq.n	137a <_i2c_master_set_config+0x9e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1374:	2180      	movs	r1, #128	; 0x80
    1376:	05c9      	lsls	r1, r1, #23
    1378:	430b      	orrs	r3, r1
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
    137a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    137c:	2900      	cmp	r1, #0
    137e:	d000      	beq.n	1382 <_i2c_master_set_config+0xa6>
		tmp_ctrla |= config->inactive_timeout;
    1380:	430b      	orrs	r3, r1
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1382:	212c      	movs	r1, #44	; 0x2c
    1384:	5c61      	ldrb	r1, [r4, r1]
    1386:	2900      	cmp	r1, #0
    1388:	d103      	bne.n	1392 <_i2c_master_set_config+0xb6>
    138a:	2180      	movs	r1, #128	; 0x80
    138c:	0489      	lsls	r1, r1, #18
    138e:	428a      	cmp	r2, r1
    1390:	d102      	bne.n	1398 <_i2c_master_set_config+0xbc>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1392:	2280      	movs	r2, #128	; 0x80
    1394:	0512      	lsls	r2, r2, #20
    1396:	4313      	orrs	r3, r2
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
    1398:	222d      	movs	r2, #45	; 0x2d
    139a:	5ca2      	ldrb	r2, [r4, r2]
    139c:	2a00      	cmp	r2, #0
    139e:	d002      	beq.n	13a6 <_i2c_master_set_config+0xca>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    13a0:	2280      	movs	r2, #128	; 0x80
    13a2:	0412      	lsls	r2, r2, #16
    13a4:	4313      	orrs	r3, r2
	}
	
	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
    13a6:	222e      	movs	r2, #46	; 0x2e
    13a8:	5ca2      	ldrb	r2, [r4, r2]
    13aa:	2a00      	cmp	r2, #0
    13ac:	d002      	beq.n	13b4 <_i2c_master_set_config+0xd8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    13ae:	2280      	movs	r2, #128	; 0x80
    13b0:	03d2      	lsls	r2, r2, #15
    13b2:	4313      	orrs	r3, r2
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
    13b4:	6832      	ldr	r2, [r6, #0]
    13b6:	4313      	orrs	r3, r2
    13b8:	6033      	str	r3, [r6, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    13ba:	2380      	movs	r3, #128	; 0x80
    13bc:	005b      	lsls	r3, r3, #1
    13be:	6073      	str	r3, [r6, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    13c0:	4647      	mov	r7, r8
    13c2:	370e      	adds	r7, #14
    13c4:	b2f8      	uxtb	r0, r7
    13c6:	f000 fd89 	bl	1edc <system_gclk_chan_get_hz>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    13ca:	2323      	movs	r3, #35	; 0x23
    13cc:	60f3      	str	r3, [r6, #12]
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
	}

	return tmp_status_code;
}
    13ce:	2000      	movs	r0, #0
    13d0:	b002      	add	sp, #8
    13d2:	bc04      	pop	{r2}
    13d4:	4690      	mov	r8, r2
    13d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    13d8:	2380      	movs	r3, #128	; 0x80
    13da:	e7c1      	b.n	1360 <_i2c_master_set_config+0x84>
    13dc:	41002000 	.word	0x41002000

000013e0 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    13e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    13e2:	b083      	sub	sp, #12
    13e4:	0007      	movs	r7, r0
    13e6:	000d      	movs	r5, r1
    13e8:	0016      	movs	r6, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    13ea:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    13ec:	0008      	movs	r0, r1
    13ee:	f000 fad1 	bl	1994 <_sercom_get_sercom_inst_index>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    13f2:	1c82      	adds	r2, r0, #2
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    13f4:	300e      	adds	r0, #14
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    13f6:	2301      	movs	r3, #1
    13f8:	4093      	lsls	r3, r2
			PM->APBCMASK.reg |= mask;
    13fa:	4a1b      	ldr	r2, [pc, #108]	; (1468 <i2c_master_init+0x88>)
    13fc:	6a11      	ldr	r1, [r2, #32]
    13fe:	430b      	orrs	r3, r1
    1400:	6213      	str	r3, [r2, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1402:	7b33      	ldrb	r3, [r6, #12]
    1404:	a901      	add	r1, sp, #4
    1406:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1408:	b2c4      	uxtb	r4, r0
    140a:	0020      	movs	r0, r4
    140c:	f000 fd5a 	bl	1ec4 <system_gclk_chan_set_config>
	system_gclk_chan_enable(gclk_index);
    1410:	0020      	movs	r0, r4
    1412:	f000 fd1b 	bl	1e4c <system_gclk_chan_enable>
	sercom_set_gclk_generator(config->generator_source, false);
    1416:	7b30      	ldrb	r0, [r6, #12]
    1418:	2100      	movs	r1, #0
    141a:	f000 fa39 	bl	1890 <sercom_set_gclk_generator>

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    141e:	682b      	ldr	r3, [r5, #0]
    1420:	079b      	lsls	r3, r3, #30
    1422:	d502      	bpl.n	142a <i2c_master_init+0x4a>
		return STATUS_ERR_DENIED;
    1424:	201c      	movs	r0, #28
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    1426:	b003      	add	sp, #12
    1428:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    142a:	682b      	ldr	r3, [r5, #0]
    142c:	07db      	lsls	r3, r3, #31
    142e:	d501      	bpl.n	1434 <i2c_master_init+0x54>
		return STATUS_BUSY;
    1430:	2005      	movs	r0, #5
    1432:	e7f8      	b.n	1426 <i2c_master_init+0x46>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    1434:	6838      	ldr	r0, [r7, #0]
    1436:	f000 faad 	bl	1994 <_sercom_get_sercom_inst_index>
    143a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    143c:	490b      	ldr	r1, [pc, #44]	; (146c <i2c_master_init+0x8c>)
    143e:	f000 fac3 	bl	19c8 <_sercom_set_handler>
	_sercom_instances[instance_index] = module;
    1442:	00a4      	lsls	r4, r4, #2
    1444:	4b0a      	ldr	r3, [pc, #40]	; (1470 <i2c_master_init+0x90>)
    1446:	50e7      	str	r7, [r4, r3]
	module->registered_callback = 0;
    1448:	2300      	movs	r3, #0
    144a:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    144c:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    144e:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    1450:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    1452:	2225      	movs	r2, #37	; 0x25
    1454:	2100      	movs	r1, #0
    1456:	54b9      	strb	r1, [r7, r2]
	module->buffer = NULL;
    1458:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    145a:	3314      	adds	r3, #20
    145c:	602b      	str	r3, [r5, #0]
	return _i2c_master_set_config(module, config);
    145e:	0031      	movs	r1, r6
    1460:	0038      	movs	r0, r7
    1462:	f7ff ff3b 	bl	12dc <_i2c_master_set_config>
    1466:	e7de      	b.n	1426 <i2c_master_init+0x46>
    1468:	40000400 	.word	0x40000400
    146c:	00001721 	.word	0x00001721
    1470:	20000214 	.word	0x20000214

00001474 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1474:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1476:	7e1a      	ldrb	r2, [r3, #24]
    1478:	0792      	lsls	r2, r2, #30
    147a:	d506      	bpl.n	148a <_i2c_master_address_response+0x16>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    147c:	2202      	movs	r2, #2
    147e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1480:	8b5b      	ldrh	r3, [r3, #26]
    1482:	079b      	lsls	r3, r3, #30
    1484:	d50b      	bpl.n	149e <_i2c_master_address_response+0x2a>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1486:	2041      	movs	r0, #65	; 0x41
		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
}
    1488:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    148a:	8b5a      	ldrh	r2, [r3, #26]
    148c:	0752      	lsls	r2, r2, #29
    148e:	d508      	bpl.n	14a2 <_i2c_master_address_response+0x2e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1490:	6859      	ldr	r1, [r3, #4]
    1492:	22c0      	movs	r2, #192	; 0xc0
    1494:	0292      	lsls	r2, r2, #10
    1496:	430a      	orrs	r2, r1
    1498:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    149a:	2018      	movs	r0, #24
    149c:	e7f4      	b.n	1488 <_i2c_master_address_response+0x14>
	return STATUS_OK;
    149e:	2000      	movs	r0, #0
    14a0:	e7f2      	b.n	1488 <_i2c_master_address_response+0x14>
    14a2:	2000      	movs	r0, #0
    14a4:	e7f0      	b.n	1488 <_i2c_master_address_response+0x14>

000014a6 <_i2c_master_wait_for_bus>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14a6:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    14a8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    14aa:	7e11      	ldrb	r1, [r2, #24]
    14ac:	07c9      	lsls	r1, r1, #31
    14ae:	d40b      	bmi.n	14c8 <_i2c_master_wait_for_bus+0x22>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    14b0:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    14b2:	0789      	lsls	r1, r1, #30
    14b4:	d406      	bmi.n	14c4 <_i2c_master_wait_for_bus+0x1e>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    14b6:	3301      	adds	r3, #1
    14b8:	b29b      	uxth	r3, r3
    14ba:	8901      	ldrh	r1, [r0, #8]
    14bc:	428b      	cmp	r3, r1
    14be:	d3f4      	bcc.n	14aa <_i2c_master_wait_for_bus+0x4>
			return STATUS_ERR_TIMEOUT;
    14c0:	2012      	movs	r0, #18
    14c2:	e002      	b.n	14ca <_i2c_master_wait_for_bus+0x24>
		}
	}
	return STATUS_OK;
    14c4:	2000      	movs	r0, #0
    14c6:	e000      	b.n	14ca <_i2c_master_wait_for_bus+0x24>
    14c8:	2000      	movs	r0, #0
}
    14ca:	4770      	bx	lr

000014cc <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    14cc:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14ce:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    14d0:	6862      	ldr	r2, [r4, #4]
    14d2:	2380      	movs	r3, #128	; 0x80
    14d4:	02db      	lsls	r3, r3, #11
    14d6:	4313      	orrs	r3, r2
    14d8:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    14da:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    14dc:	f7ff ffe3 	bl	14a6 <_i2c_master_wait_for_bus>
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    14e0:	2301      	movs	r3, #1
    14e2:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    14e4:	bd10      	pop	{r4, pc}
	...

000014e8 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    14e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14ea:	46de      	mov	lr, fp
    14ec:	4657      	mov	r7, sl
    14ee:	4646      	mov	r6, r8
    14f0:	b5c0      	push	{r6, r7, lr}
    14f2:	b082      	sub	sp, #8
    14f4:	9001      	str	r0, [sp, #4]
    14f6:	468a      	mov	sl, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14f8:	6807      	ldr	r7, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    14fa:	884d      	ldrh	r5, [r1, #2]

	_i2c_master_wait_for_sync(module);
    14fc:	f7ff fee8 	bl	12d0 <_i2c_master_wait_for_sync>

	/* Switch to high speed mode */
	if (packet->high_speed) {
    1500:	4653      	mov	r3, sl
    1502:	7a5b      	ldrb	r3, [r3, #9]
    1504:	2b00      	cmp	r3, #0
    1506:	d139      	bne.n	157c <_i2c_master_write_packet+0x94>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1508:	687b      	ldr	r3, [r7, #4]
    150a:	4a32      	ldr	r2, [pc, #200]	; (15d4 <_i2c_master_write_packet+0xec>)
    150c:	4013      	ands	r3, r2
    150e:	607b      	str	r3, [r7, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    1510:	4653      	mov	r3, sl
    1512:	7a1b      	ldrb	r3, [r3, #8]
    1514:	2b00      	cmp	r3, #0
    1516:	d037      	beq.n	1588 <_i2c_master_write_packet+0xa0>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1518:	4653      	mov	r3, sl
    151a:	881b      	ldrh	r3, [r3, #0]
    151c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    151e:	4652      	mov	r2, sl
    1520:	7a52      	ldrb	r2, [r2, #9]
    1522:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1524:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1526:	2280      	movs	r2, #128	; 0x80
    1528:	0212      	lsls	r2, r2, #8
    152a:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    152c:	627b      	str	r3, [r7, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    152e:	9801      	ldr	r0, [sp, #4]
    1530:	f7ff ffb9 	bl	14a6 <_i2c_master_wait_for_bus>
    1534:	1e04      	subs	r4, r0, #0

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1536:	d030      	beq.n	159a <_i2c_master_write_packet+0xb2>
		tmp_status = _i2c_master_address_response(module);
	}

	/* Check that no error has occurred. */
	if (tmp_status == STATUS_OK) {
    1538:	2c00      	cmp	r4, #0
    153a:	d138      	bne.n	15ae <_i2c_master_write_packet+0xc6>
    153c:	2600      	movs	r6, #0
		/* Buffer counter. */
		uint16_t buffer_counter = 0;

		/* Write data buffer. */
		while (tmp_data_length--) {
    153e:	1e6b      	subs	r3, r5, #1
    1540:	b29b      	uxth	r3, r3
    1542:	469b      	mov	fp, r3
    1544:	2d00      	cmp	r5, #0
    1546:	d02e      	beq.n	15a6 <_i2c_master_write_packet+0xbe>
			/* Check that bus ownership is not lost. */
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1548:	8b7b      	ldrh	r3, [r7, #26]
    154a:	069b      	lsls	r3, r3, #26
    154c:	d53f      	bpl.n	15ce <_i2c_master_write_packet+0xe6>
				return STATUS_ERR_PACKET_COLLISION;
			}

			/* Write byte to slave. */
			_i2c_master_wait_for_sync(module);
    154e:	9c01      	ldr	r4, [sp, #4]
    1550:	0020      	movs	r0, r4
    1552:	f7ff febd 	bl	12d0 <_i2c_master_wait_for_sync>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1556:	1c75      	adds	r5, r6, #1
    1558:	b2ab      	uxth	r3, r5
    155a:	4698      	mov	r8, r3
    155c:	4653      	mov	r3, sl
    155e:	685b      	ldr	r3, [r3, #4]
    1560:	5d9a      	ldrb	r2, [r3, r6]
    1562:	2328      	movs	r3, #40	; 0x28
    1564:	54fa      	strb	r2, [r7, r3]

			/* Wait for response. */
			tmp_status = _i2c_master_wait_for_bus(module);
    1566:	0020      	movs	r0, r4
    1568:	f7ff ff9d 	bl	14a6 <_i2c_master_wait_for_bus>
    156c:	1e04      	subs	r4, r0, #0

			/* Check for error. */
			if (tmp_status != STATUS_OK) {
    156e:	d11a      	bne.n	15a6 <_i2c_master_write_packet+0xbe>
				break;
			}

			/* Check for NACK from slave. */
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1570:	8b7b      	ldrh	r3, [r7, #26]
		while (tmp_data_length--) {
    1572:	465d      	mov	r5, fp
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1574:	075b      	lsls	r3, r3, #29
    1576:	d415      	bmi.n	15a4 <_i2c_master_write_packet+0xbc>
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1578:	4646      	mov	r6, r8
    157a:	e7e0      	b.n	153e <_i2c_master_write_packet+0x56>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    157c:	4653      	mov	r3, sl
    157e:	7a99      	ldrb	r1, [r3, #10]
    1580:	9801      	ldr	r0, [sp, #4]
    1582:	f7ff ffa3 	bl	14cc <_i2c_master_send_hs_master_code>
    1586:	e7bf      	b.n	1508 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1588:	4653      	mov	r3, sl
    158a:	881b      	ldrh	r3, [r3, #0]
    158c:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    158e:	4652      	mov	r2, sl
    1590:	7a52      	ldrb	r2, [r2, #9]
    1592:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    1594:	4313      	orrs	r3, r2
    1596:	627b      	str	r3, [r7, #36]	; 0x24
    1598:	e7c9      	b.n	152e <_i2c_master_write_packet+0x46>
		tmp_status = _i2c_master_address_response(module);
    159a:	9801      	ldr	r0, [sp, #4]
    159c:	f7ff ff6a 	bl	1474 <_i2c_master_address_response>
    15a0:	0004      	movs	r4, r0
    15a2:	e7c9      	b.n	1538 <_i2c_master_write_packet+0x50>
				/* Return bad data value. */
				tmp_status = STATUS_ERR_OVERFLOW;
    15a4:	241e      	movs	r4, #30
				break;
			}
		}

		if (module->send_stop) {
    15a6:	9b01      	ldr	r3, [sp, #4]
    15a8:	7a9b      	ldrb	r3, [r3, #10]
    15aa:	2b00      	cmp	r3, #0
    15ac:	d106      	bne.n	15bc <_i2c_master_write_packet+0xd4>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    15ae:	0020      	movs	r0, r4
    15b0:	b002      	add	sp, #8
    15b2:	bc1c      	pop	{r2, r3, r4}
    15b4:	4690      	mov	r8, r2
    15b6:	469a      	mov	sl, r3
    15b8:	46a3      	mov	fp, r4
    15ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
			_i2c_master_wait_for_sync(module);
    15bc:	9801      	ldr	r0, [sp, #4]
    15be:	f7ff fe87 	bl	12d0 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    15c2:	687a      	ldr	r2, [r7, #4]
    15c4:	23c0      	movs	r3, #192	; 0xc0
    15c6:	029b      	lsls	r3, r3, #10
    15c8:	4313      	orrs	r3, r2
    15ca:	607b      	str	r3, [r7, #4]
    15cc:	e7ef      	b.n	15ae <_i2c_master_write_packet+0xc6>
				return STATUS_ERR_PACKET_COLLISION;
    15ce:	2441      	movs	r4, #65	; 0x41
    15d0:	e7ed      	b.n	15ae <_i2c_master_write_packet+0xc6>
    15d2:	46c0      	nop			; (mov r8, r8)
    15d4:	fffbffff 	.word	0xfffbffff

000015d8 <i2c_master_write_packet_wait>:
 *                                      last data sent
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    15d8:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    15da:	8b83      	ldrh	r3, [r0, #28]
    15dc:	b29b      	uxth	r3, r3
    15de:	2b00      	cmp	r3, #0
    15e0:	d001      	beq.n	15e6 <i2c_master_write_packet_wait+0xe>
		return STATUS_BUSY;
    15e2:	2005      	movs	r0, #5

	module->send_stop = true;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    15e4:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    15e6:	3301      	adds	r3, #1
    15e8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    15ea:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    15ec:	f7ff ff7c 	bl	14e8 <_i2c_master_write_packet>
    15f0:	e7f8      	b.n	15e4 <i2c_master_write_packet_wait+0xc>

000015f2 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    15f2:	6803      	ldr	r3, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    15f4:	69db      	ldr	r3, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    15f6:	075b      	lsls	r3, r3, #29
    15f8:	d1fb      	bne.n	15f2 <_i2c_master_wait_for_sync>
}
    15fa:	4770      	bx	lr

000015fc <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    15fc:	b570      	push	{r4, r5, r6, lr}
    15fe:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1600:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1602:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1604:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1606:	8b83      	ldrh	r3, [r0, #28]
    1608:	1aed      	subs	r5, r5, r3
    160a:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    160c:	8b83      	ldrh	r3, [r0, #28]
    160e:	3b01      	subs	r3, #1
    1610:	b29b      	uxth	r3, r3
    1612:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1614:	0113      	lsls	r3, r2, #4
    1616:	d51d      	bpl.n	1654 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1618:	7ac3      	ldrb	r3, [r0, #11]
    161a:	2b00      	cmp	r3, #0
    161c:	d003      	beq.n	1626 <_i2c_master_read+0x2a>
    161e:	8b83      	ldrh	r3, [r0, #28]
    1620:	b29b      	uxth	r3, r3
    1622:	2b01      	cmp	r3, #1
    1624:	d010      	beq.n	1648 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1626:	8ba3      	ldrh	r3, [r4, #28]
    1628:	b29b      	uxth	r3, r3
    162a:	2b00      	cmp	r3, #0
    162c:	d102      	bne.n	1634 <_i2c_master_read+0x38>
		if (module->send_stop) {
    162e:	7aa3      	ldrb	r3, [r4, #10]
    1630:	2b00      	cmp	r3, #0
    1632:	d11c      	bne.n	166e <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1634:	0020      	movs	r0, r4
    1636:	f7ff ffdc 	bl	15f2 <_i2c_master_wait_for_sync>
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    163a:	6a23      	ldr	r3, [r4, #32]
    163c:	195d      	adds	r5, r3, r5
    163e:	2328      	movs	r3, #40	; 0x28
    1640:	5cf3      	ldrb	r3, [r6, r3]
    1642:	b2db      	uxtb	r3, r3
    1644:	702b      	strb	r3, [r5, #0]
}
    1646:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1648:	6872      	ldr	r2, [r6, #4]
    164a:	2380      	movs	r3, #128	; 0x80
    164c:	02db      	lsls	r3, r3, #11
    164e:	4313      	orrs	r3, r2
    1650:	6073      	str	r3, [r6, #4]
    1652:	e7e8      	b.n	1626 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1654:	7ac3      	ldrb	r3, [r0, #11]
    1656:	2b00      	cmp	r3, #0
    1658:	d0e5      	beq.n	1626 <_i2c_master_read+0x2a>
    165a:	8b83      	ldrh	r3, [r0, #28]
    165c:	b29b      	uxth	r3, r3
    165e:	2b00      	cmp	r3, #0
    1660:	d1e1      	bne.n	1626 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1662:	6872      	ldr	r2, [r6, #4]
    1664:	2380      	movs	r3, #128	; 0x80
    1666:	02db      	lsls	r3, r3, #11
    1668:	4313      	orrs	r3, r2
    166a:	6073      	str	r3, [r6, #4]
    166c:	e7db      	b.n	1626 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    166e:	0020      	movs	r0, r4
    1670:	f7ff ffbf 	bl	15f2 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1674:	6872      	ldr	r2, [r6, #4]
    1676:	23c0      	movs	r3, #192	; 0xc0
    1678:	029b      	lsls	r3, r3, #10
    167a:	4313      	orrs	r3, r2
    167c:	6073      	str	r3, [r6, #4]
    167e:	e7d9      	b.n	1634 <_i2c_master_read+0x38>

00001680 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1680:	b570      	push	{r4, r5, r6, lr}
    1682:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1684:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1686:	8b6b      	ldrh	r3, [r5, #26]
    1688:	075b      	lsls	r3, r3, #29
    168a:	d503      	bpl.n	1694 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    168c:	221e      	movs	r2, #30
    168e:	2325      	movs	r3, #37	; 0x25
    1690:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1692:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1694:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1696:	8b83      	ldrh	r3, [r0, #28]
    1698:	1af6      	subs	r6, r6, r3
    169a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    169c:	8b83      	ldrh	r3, [r0, #28]
    169e:	3b01      	subs	r3, #1
    16a0:	b29b      	uxth	r3, r3
    16a2:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    16a4:	f7ff ffa5 	bl	15f2 <_i2c_master_wait_for_sync>
	i2c_module->DATA.reg = module->buffer[buffer_index];
    16a8:	6a23      	ldr	r3, [r4, #32]
    16aa:	199e      	adds	r6, r3, r6
    16ac:	7833      	ldrb	r3, [r6, #0]
    16ae:	b2db      	uxtb	r3, r3
    16b0:	2228      	movs	r2, #40	; 0x28
    16b2:	54ab      	strb	r3, [r5, r2]
    16b4:	e7ed      	b.n	1692 <_i2c_master_write+0x12>

000016b6 <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
    16b6:	b570      	push	{r4, r5, r6, lr}
    16b8:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    16ba:	6805      	ldr	r5, [r0, #0]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    16bc:	7e2b      	ldrb	r3, [r5, #24]
    16be:	07db      	lsls	r3, r3, #31
    16c0:	d507      	bpl.n	16d2 <_i2c_master_async_address_response+0x1c>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    16c2:	2301      	movs	r3, #1
    16c4:	762b      	strb	r3, [r5, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    16c6:	8b6b      	ldrh	r3, [r5, #26]
    16c8:	079b      	lsls	r3, r3, #30
    16ca:	d50a      	bpl.n	16e2 <_i2c_master_async_address_response+0x2c>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
    16cc:	2241      	movs	r2, #65	; 0x41
    16ce:	2325      	movs	r3, #37	; 0x25
    16d0:	54c2      	strb	r2, [r0, r3]
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
    16d2:	8ba3      	ldrh	r3, [r4, #28]
    16d4:	b29b      	uxth	r3, r3
    16d6:	8363      	strh	r3, [r4, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
    16d8:	2325      	movs	r3, #37	; 0x25
    16da:	5ce3      	ldrb	r3, [r4, r3]
    16dc:	2b05      	cmp	r3, #5
    16de:	d013      	beq.n	1708 <_i2c_master_async_address_response+0x52>
			_i2c_master_write(module);
		} else {
			_i2c_master_read(module);
		}
	}
}
    16e0:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    16e2:	8b6b      	ldrh	r3, [r5, #26]
    16e4:	075b      	lsls	r3, r3, #29
    16e6:	d5f4      	bpl.n	16d2 <_i2c_master_async_address_response+0x1c>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    16e8:	2218      	movs	r2, #24
    16ea:	2325      	movs	r3, #37	; 0x25
    16ec:	54c2      	strb	r2, [r0, r3]
			module->buffer_remaining = 0;
    16ee:	2300      	movs	r3, #0
    16f0:	8383      	strh	r3, [r0, #28]
			if (module->send_stop) {
    16f2:	7a83      	ldrb	r3, [r0, #10]
    16f4:	2b00      	cmp	r3, #0
    16f6:	d0ec      	beq.n	16d2 <_i2c_master_async_address_response+0x1c>
				_i2c_master_wait_for_sync(module);
    16f8:	f7ff ff7b 	bl	15f2 <_i2c_master_wait_for_sync>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    16fc:	686a      	ldr	r2, [r5, #4]
    16fe:	23c0      	movs	r3, #192	; 0xc0
    1700:	029b      	lsls	r3, r3, #10
    1702:	4313      	orrs	r3, r2
    1704:	606b      	str	r3, [r5, #4]
    1706:	e7e4      	b.n	16d2 <_i2c_master_async_address_response+0x1c>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1708:	331f      	adds	r3, #31
    170a:	5ce3      	ldrb	r3, [r4, r3]
    170c:	2b00      	cmp	r3, #0
    170e:	d003      	beq.n	1718 <_i2c_master_async_address_response+0x62>
			_i2c_master_read(module);
    1710:	0020      	movs	r0, r4
    1712:	f7ff ff73 	bl	15fc <_i2c_master_read>
}
    1716:	e7e3      	b.n	16e0 <_i2c_master_async_address_response+0x2a>
			_i2c_master_write(module);
    1718:	0020      	movs	r0, r4
    171a:	f7ff ffb1 	bl	1680 <_i2c_master_write>
    171e:	e7df      	b.n	16e0 <_i2c_master_async_address_response+0x2a>

00001720 <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1720:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1722:	0080      	lsls	r0, r0, #2
    1724:	4b59      	ldr	r3, [pc, #356]	; (188c <_i2c_master_interrupt_handler+0x16c>)
    1726:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1728:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    172a:	682b      	ldr	r3, [r5, #0]
    172c:	011b      	lsls	r3, r3, #4
    172e:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1730:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1732:	7e26      	ldrb	r6, [r4, #24]
    1734:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1736:	8b63      	ldrh	r3, [r4, #26]
    1738:	b29b      	uxth	r3, r3
    173a:	2b00      	cmp	r3, #0
    173c:	d103      	bne.n	1746 <_i2c_master_interrupt_handler+0x26>
    173e:	8ba3      	ldrh	r3, [r4, #28]
    1740:	b29b      	uxth	r3, r3
    1742:	2b00      	cmp	r3, #0
    1744:	d120      	bne.n	1788 <_i2c_master_interrupt_handler+0x68>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1746:	8b63      	ldrh	r3, [r4, #26]
    1748:	b29b      	uxth	r3, r3
    174a:	2b00      	cmp	r3, #0
    174c:	d007      	beq.n	175e <_i2c_master_interrupt_handler+0x3e>
    174e:	8ba3      	ldrh	r3, [r4, #28]
    1750:	b29b      	uxth	r3, r3
    1752:	2b00      	cmp	r3, #0
    1754:	d103      	bne.n	175e <_i2c_master_interrupt_handler+0x3e>
			(module->status == STATUS_BUSY) &&
    1756:	3325      	adds	r3, #37	; 0x25
    1758:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    175a:	2b05      	cmp	r3, #5
    175c:	d03a      	beq.n	17d4 <_i2c_master_interrupt_handler+0xb4>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    175e:	8b63      	ldrh	r3, [r4, #26]
    1760:	b29b      	uxth	r3, r3
    1762:	2b00      	cmp	r3, #0
    1764:	d013      	beq.n	178e <_i2c_master_interrupt_handler+0x6e>
    1766:	8ba3      	ldrh	r3, [r4, #28]
    1768:	b29b      	uxth	r3, r3
    176a:	2b00      	cmp	r3, #0
    176c:	d00f      	beq.n	178e <_i2c_master_interrupt_handler+0x6e>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    176e:	8b6b      	ldrh	r3, [r5, #26]
    1770:	069b      	lsls	r3, r3, #26
    1772:	d44e      	bmi.n	1812 <_i2c_master_interrupt_handler+0xf2>
    1774:	2a00      	cmp	r2, #0
    1776:	d003      	beq.n	1780 <_i2c_master_interrupt_handler+0x60>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1778:	8ba3      	ldrh	r3, [r4, #28]
    177a:	b29b      	uxth	r3, r3
    177c:	2b01      	cmp	r3, #1
    177e:	d048      	beq.n	1812 <_i2c_master_interrupt_handler+0xf2>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1780:	2241      	movs	r2, #65	; 0x41
    1782:	2325      	movs	r3, #37	; 0x25
    1784:	54e2      	strb	r2, [r4, r3]
    1786:	e002      	b.n	178e <_i2c_master_interrupt_handler+0x6e>
		_i2c_master_async_address_response(module);
    1788:	0020      	movs	r0, r4
    178a:	f7ff ff94 	bl	16b6 <_i2c_master_async_address_response>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    178e:	8b63      	ldrh	r3, [r4, #26]
    1790:	b29b      	uxth	r3, r3
    1792:	2b00      	cmp	r3, #0
    1794:	d007      	beq.n	17a6 <_i2c_master_interrupt_handler+0x86>
    1796:	8ba3      	ldrh	r3, [r4, #28]
    1798:	b29b      	uxth	r3, r3
    179a:	2b00      	cmp	r3, #0
    179c:	d103      	bne.n	17a6 <_i2c_master_interrupt_handler+0x86>
			(module->status == STATUS_BUSY) &&
    179e:	3325      	adds	r3, #37	; 0x25
    17a0:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    17a2:	2b05      	cmp	r3, #5
    17a4:	d041      	beq.n	182a <_i2c_master_interrupt_handler+0x10a>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    17a6:	2325      	movs	r3, #37	; 0x25
    17a8:	5ce3      	ldrb	r3, [r4, r3]
    17aa:	2b05      	cmp	r3, #5
    17ac:	d011      	beq.n	17d2 <_i2c_master_interrupt_handler+0xb2>
    17ae:	2325      	movs	r3, #37	; 0x25
    17b0:	5ce3      	ldrb	r3, [r4, r3]
    17b2:	2b00      	cmp	r3, #0
    17b4:	d00d      	beq.n	17d2 <_i2c_master_interrupt_handler+0xb2>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    17b6:	2303      	movs	r3, #3
    17b8:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    17ba:	2300      	movs	r3, #0
    17bc:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    17be:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    17c0:	3325      	adds	r3, #37	; 0x25
    17c2:	5ce3      	ldrb	r3, [r4, r3]
    17c4:	2b41      	cmp	r3, #65	; 0x41
    17c6:	d002      	beq.n	17ce <_i2c_master_interrupt_handler+0xae>
				module->send_stop) {
    17c8:	7aa3      	ldrb	r3, [r4, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    17ca:	2b00      	cmp	r3, #0
    17cc:	d151      	bne.n	1872 <_i2c_master_interrupt_handler+0x152>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    17ce:	0773      	lsls	r3, r6, #29
    17d0:	d458      	bmi.n	1884 <_i2c_master_interrupt_handler+0x164>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    17d2:	bd70      	pop	{r4, r5, r6, pc}
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    17d4:	331f      	adds	r3, #31
    17d6:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    17d8:	2b00      	cmp	r3, #0
    17da:	d1c0      	bne.n	175e <_i2c_master_interrupt_handler+0x3e>
		i2c_module->INTENCLR.reg =
    17dc:	3303      	adds	r3, #3
    17de:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    17e0:	2300      	movs	r3, #0
    17e2:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    17e4:	3325      	adds	r3, #37	; 0x25
    17e6:	2200      	movs	r2, #0
    17e8:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    17ea:	7aa3      	ldrb	r3, [r4, #10]
    17ec:	2b00      	cmp	r3, #0
    17ee:	d107      	bne.n	1800 <_i2c_master_interrupt_handler+0xe0>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    17f0:	2301      	movs	r3, #1
    17f2:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    17f4:	07f3      	lsls	r3, r6, #31
    17f6:	d5ca      	bpl.n	178e <_i2c_master_interrupt_handler+0x6e>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    17f8:	68e3      	ldr	r3, [r4, #12]
    17fa:	0020      	movs	r0, r4
    17fc:	4798      	blx	r3
    17fe:	e7c6      	b.n	178e <_i2c_master_interrupt_handler+0x6e>
			_i2c_master_wait_for_sync(module);
    1800:	0020      	movs	r0, r4
    1802:	f7ff fef6 	bl	15f2 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1806:	686a      	ldr	r2, [r5, #4]
    1808:	23c0      	movs	r3, #192	; 0xc0
    180a:	029b      	lsls	r3, r3, #10
    180c:	4313      	orrs	r3, r2
    180e:	606b      	str	r3, [r5, #4]
    1810:	e7f0      	b.n	17f4 <_i2c_master_interrupt_handler+0xd4>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1812:	2324      	movs	r3, #36	; 0x24
    1814:	5ce3      	ldrb	r3, [r4, r3]
    1816:	2b00      	cmp	r3, #0
    1818:	d103      	bne.n	1822 <_i2c_master_interrupt_handler+0x102>
			_i2c_master_write(module);
    181a:	0020      	movs	r0, r4
    181c:	f7ff ff30 	bl	1680 <_i2c_master_write>
    1820:	e7b5      	b.n	178e <_i2c_master_interrupt_handler+0x6e>
			_i2c_master_read(module);
    1822:	0020      	movs	r0, r4
    1824:	f7ff feea 	bl	15fc <_i2c_master_read>
    1828:	e7b1      	b.n	178e <_i2c_master_interrupt_handler+0x6e>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    182a:	331f      	adds	r3, #31
    182c:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    182e:	2b01      	cmp	r3, #1
    1830:	d1b9      	bne.n	17a6 <_i2c_master_interrupt_handler+0x86>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1832:	7e2b      	ldrb	r3, [r5, #24]
    1834:	079b      	lsls	r3, r3, #30
    1836:	d501      	bpl.n	183c <_i2c_master_interrupt_handler+0x11c>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1838:	2302      	movs	r3, #2
    183a:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    183c:	2303      	movs	r3, #3
    183e:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1840:	2300      	movs	r3, #0
    1842:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1844:	3325      	adds	r3, #37	; 0x25
    1846:	2200      	movs	r2, #0
    1848:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    184a:	07b3      	lsls	r3, r6, #30
    184c:	d503      	bpl.n	1856 <_i2c_master_interrupt_handler+0x136>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    184e:	2324      	movs	r3, #36	; 0x24
    1850:	5ce3      	ldrb	r3, [r4, r3]
    1852:	2b01      	cmp	r3, #1
    1854:	d009      	beq.n	186a <_i2c_master_interrupt_handler+0x14a>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1856:	07f3      	lsls	r3, r6, #31
    1858:	d5a5      	bpl.n	17a6 <_i2c_master_interrupt_handler+0x86>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    185a:	2324      	movs	r3, #36	; 0x24
    185c:	5ce3      	ldrb	r3, [r4, r3]
    185e:	2b00      	cmp	r3, #0
    1860:	d1a1      	bne.n	17a6 <_i2c_master_interrupt_handler+0x86>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1862:	68e3      	ldr	r3, [r4, #12]
    1864:	0020      	movs	r0, r4
    1866:	4798      	blx	r3
    1868:	e79d      	b.n	17a6 <_i2c_master_interrupt_handler+0x86>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    186a:	6923      	ldr	r3, [r4, #16]
    186c:	0020      	movs	r0, r4
    186e:	4798      	blx	r3
    1870:	e799      	b.n	17a6 <_i2c_master_interrupt_handler+0x86>
			_i2c_master_wait_for_sync(module);
    1872:	0020      	movs	r0, r4
    1874:	f7ff febd 	bl	15f2 <_i2c_master_wait_for_sync>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1878:	686a      	ldr	r2, [r5, #4]
    187a:	23e0      	movs	r3, #224	; 0xe0
    187c:	02db      	lsls	r3, r3, #11
    187e:	4313      	orrs	r3, r2
    1880:	606b      	str	r3, [r5, #4]
    1882:	e7a4      	b.n	17ce <_i2c_master_interrupt_handler+0xae>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1884:	6963      	ldr	r3, [r4, #20]
    1886:	0020      	movs	r0, r4
    1888:	4798      	blx	r3
}
    188a:	e7a2      	b.n	17d2 <_i2c_master_interrupt_handler+0xb2>
    188c:	20000214 	.word	0x20000214

00001890 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1890:	b510      	push	{r4, lr}
    1892:	b082      	sub	sp, #8
    1894:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1896:	4b0e      	ldr	r3, [pc, #56]	; (18d0 <sercom_set_gclk_generator+0x40>)
    1898:	781b      	ldrb	r3, [r3, #0]
    189a:	2b00      	cmp	r3, #0
    189c:	d007      	beq.n	18ae <sercom_set_gclk_generator+0x1e>
    189e:	2900      	cmp	r1, #0
    18a0:	d105      	bne.n	18ae <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    18a2:	4b0b      	ldr	r3, [pc, #44]	; (18d0 <sercom_set_gclk_generator+0x40>)
    18a4:	785b      	ldrb	r3, [r3, #1]
    18a6:	4283      	cmp	r3, r0
    18a8:	d010      	beq.n	18cc <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    18aa:	201d      	movs	r0, #29
    18ac:	e00c      	b.n	18c8 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    18ae:	a901      	add	r1, sp, #4
    18b0:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    18b2:	200d      	movs	r0, #13
    18b4:	f000 fb06 	bl	1ec4 <system_gclk_chan_set_config>
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    18b8:	200d      	movs	r0, #13
    18ba:	f000 fac7 	bl	1e4c <system_gclk_chan_enable>
		_sercom_config.generator_source = generator_source;
    18be:	4b04      	ldr	r3, [pc, #16]	; (18d0 <sercom_set_gclk_generator+0x40>)
    18c0:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    18c2:	2201      	movs	r2, #1
    18c4:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    18c6:	2000      	movs	r0, #0
}
    18c8:	b002      	add	sp, #8
    18ca:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    18cc:	2000      	movs	r0, #0
    18ce:	e7fb      	b.n	18c8 <sercom_set_gclk_generator+0x38>
    18d0:	20000070 	.word	0x20000070

000018d4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    18d4:	4b20      	ldr	r3, [pc, #128]	; (1958 <_sercom_get_default_pad+0x84>)
    18d6:	4298      	cmp	r0, r3
    18d8:	d017      	beq.n	190a <_sercom_get_default_pad+0x36>
    18da:	4b20      	ldr	r3, [pc, #128]	; (195c <_sercom_get_default_pad+0x88>)
    18dc:	4298      	cmp	r0, r3
    18de:	d024      	beq.n	192a <_sercom_get_default_pad+0x56>
    18e0:	4b1f      	ldr	r3, [pc, #124]	; (1960 <_sercom_get_default_pad+0x8c>)
    18e2:	4298      	cmp	r0, r3
    18e4:	d001      	beq.n	18ea <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    18e6:	2000      	movs	r0, #0
}
    18e8:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18ea:	2901      	cmp	r1, #1
    18ec:	d02d      	beq.n	194a <_sercom_get_default_pad+0x76>
    18ee:	2900      	cmp	r1, #0
    18f0:	d005      	beq.n	18fe <_sercom_get_default_pad+0x2a>
    18f2:	2902      	cmp	r1, #2
    18f4:	d005      	beq.n	1902 <_sercom_get_default_pad+0x2e>
    18f6:	2903      	cmp	r1, #3
    18f8:	d005      	beq.n	1906 <_sercom_get_default_pad+0x32>
	return 0;
    18fa:	2000      	movs	r0, #0
    18fc:	e7f4      	b.n	18e8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    18fe:	4819      	ldr	r0, [pc, #100]	; (1964 <_sercom_get_default_pad+0x90>)
    1900:	e7f2      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1902:	4819      	ldr	r0, [pc, #100]	; (1968 <_sercom_get_default_pad+0x94>)
    1904:	e7f0      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1906:	4819      	ldr	r0, [pc, #100]	; (196c <_sercom_get_default_pad+0x98>)
    1908:	e7ee      	b.n	18e8 <_sercom_get_default_pad+0x14>
    190a:	2901      	cmp	r1, #1
    190c:	d01f      	beq.n	194e <_sercom_get_default_pad+0x7a>
    190e:	2900      	cmp	r1, #0
    1910:	d005      	beq.n	191e <_sercom_get_default_pad+0x4a>
    1912:	2902      	cmp	r1, #2
    1914:	d005      	beq.n	1922 <_sercom_get_default_pad+0x4e>
    1916:	2903      	cmp	r1, #3
    1918:	d005      	beq.n	1926 <_sercom_get_default_pad+0x52>
	return 0;
    191a:	2000      	movs	r0, #0
    191c:	e7e4      	b.n	18e8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    191e:	4814      	ldr	r0, [pc, #80]	; (1970 <_sercom_get_default_pad+0x9c>)
    1920:	e7e2      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1922:	4814      	ldr	r0, [pc, #80]	; (1974 <_sercom_get_default_pad+0xa0>)
    1924:	e7e0      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1926:	4814      	ldr	r0, [pc, #80]	; (1978 <_sercom_get_default_pad+0xa4>)
    1928:	e7de      	b.n	18e8 <_sercom_get_default_pad+0x14>
    192a:	2901      	cmp	r1, #1
    192c:	d011      	beq.n	1952 <_sercom_get_default_pad+0x7e>
    192e:	2900      	cmp	r1, #0
    1930:	d005      	beq.n	193e <_sercom_get_default_pad+0x6a>
    1932:	2902      	cmp	r1, #2
    1934:	d005      	beq.n	1942 <_sercom_get_default_pad+0x6e>
    1936:	2903      	cmp	r1, #3
    1938:	d005      	beq.n	1946 <_sercom_get_default_pad+0x72>
	return 0;
    193a:	2000      	movs	r0, #0
    193c:	e7d4      	b.n	18e8 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    193e:	480f      	ldr	r0, [pc, #60]	; (197c <_sercom_get_default_pad+0xa8>)
    1940:	e7d2      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1942:	480f      	ldr	r0, [pc, #60]	; (1980 <_sercom_get_default_pad+0xac>)
    1944:	e7d0      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1946:	480f      	ldr	r0, [pc, #60]	; (1984 <_sercom_get_default_pad+0xb0>)
    1948:	e7ce      	b.n	18e8 <_sercom_get_default_pad+0x14>
    194a:	480f      	ldr	r0, [pc, #60]	; (1988 <_sercom_get_default_pad+0xb4>)
    194c:	e7cc      	b.n	18e8 <_sercom_get_default_pad+0x14>
    194e:	480f      	ldr	r0, [pc, #60]	; (198c <_sercom_get_default_pad+0xb8>)
    1950:	e7ca      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1952:	480f      	ldr	r0, [pc, #60]	; (1990 <_sercom_get_default_pad+0xbc>)
    1954:	e7c8      	b.n	18e8 <_sercom_get_default_pad+0x14>
    1956:	46c0      	nop			; (mov r8, r8)
    1958:	42000c00 	.word	0x42000c00
    195c:	42001000 	.word	0x42001000
    1960:	42000800 	.word	0x42000800
    1964:	00040003 	.word	0x00040003
    1968:	00060003 	.word	0x00060003
    196c:	00070003 	.word	0x00070003
    1970:	00160002 	.word	0x00160002
    1974:	001e0003 	.word	0x001e0003
    1978:	001f0003 	.word	0x001f0003
    197c:	00160003 	.word	0x00160003
    1980:	00100003 	.word	0x00100003
    1984:	00190003 	.word	0x00190003
    1988:	00050003 	.word	0x00050003
    198c:	00170002 	.word	0x00170002
    1990:	00170003 	.word	0x00170003

00001994 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    1994:	b530      	push	{r4, r5, lr}
    1996:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    1998:	aa01      	add	r2, sp, #4
    199a:	4b09      	ldr	r3, [pc, #36]	; (19c0 <_sercom_get_sercom_inst_index+0x2c>)
    199c:	cb32      	ldmia	r3!, {r1, r4, r5}
    199e:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19a0:	2300      	movs	r3, #0
    19a2:	2b02      	cmp	r3, #2
    19a4:	d808      	bhi.n	19b8 <_sercom_get_sercom_inst_index+0x24>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    19a6:	009a      	lsls	r2, r3, #2
    19a8:	a901      	add	r1, sp, #4
    19aa:	5852      	ldr	r2, [r2, r1]
    19ac:	4282      	cmp	r2, r0
    19ae:	d001      	beq.n	19b4 <_sercom_get_sercom_inst_index+0x20>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19b0:	3301      	adds	r3, #1
    19b2:	e7f6      	b.n	19a2 <_sercom_get_sercom_inst_index+0xe>
			return i;
    19b4:	b2d8      	uxtb	r0, r3
    19b6:	e000      	b.n	19ba <_sercom_get_sercom_inst_index+0x26>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    19b8:	2000      	movs	r0, #0
}
    19ba:	b005      	add	sp, #20
    19bc:	bd30      	pop	{r4, r5, pc}
    19be:	46c0      	nop			; (mov r8, r8)
    19c0:	00002e94 	.word	0x00002e94

000019c4 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    19c4:	4770      	bx	lr
	...

000019c8 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    19c8:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    19ca:	4b0b      	ldr	r3, [pc, #44]	; (19f8 <_sercom_set_handler+0x30>)
    19cc:	781b      	ldrb	r3, [r3, #0]
    19ce:	2b00      	cmp	r3, #0
    19d0:	d008      	beq.n	19e4 <_sercom_set_handler+0x1c>
    19d2:	e00c      	b.n	19ee <_sercom_set_handler+0x26>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    19d4:	009a      	lsls	r2, r3, #2
    19d6:	4d09      	ldr	r5, [pc, #36]	; (19fc <_sercom_set_handler+0x34>)
    19d8:	4c09      	ldr	r4, [pc, #36]	; (1a00 <_sercom_set_handler+0x38>)
    19da:	5115      	str	r5, [r2, r4]
			_sercom_instances[i] = NULL;
    19dc:	2500      	movs	r5, #0
    19de:	4c09      	ldr	r4, [pc, #36]	; (1a04 <_sercom_set_handler+0x3c>)
    19e0:	5115      	str	r5, [r2, r4]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    19e2:	3301      	adds	r3, #1
    19e4:	2b02      	cmp	r3, #2
    19e6:	d9f5      	bls.n	19d4 <_sercom_set_handler+0xc>
		}

		_handler_table_initialized = true;
    19e8:	2201      	movs	r2, #1
    19ea:	4b03      	ldr	r3, [pc, #12]	; (19f8 <_sercom_set_handler+0x30>)
    19ec:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    19ee:	0080      	lsls	r0, r0, #2
    19f0:	4b03      	ldr	r3, [pc, #12]	; (1a00 <_sercom_set_handler+0x38>)
    19f2:	50c1      	str	r1, [r0, r3]
}
    19f4:	bd30      	pop	{r4, r5, pc}
    19f6:	46c0      	nop			; (mov r8, r8)
    19f8:	20000072 	.word	0x20000072
    19fc:	000019c5 	.word	0x000019c5
    1a00:	20000074 	.word	0x20000074
    1a04:	20000214 	.word	0x20000214

00001a08 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    1a08:	b510      	push	{r4, lr}
    1a0a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1a0c:	ac01      	add	r4, sp, #4
    1a0e:	4b05      	ldr	r3, [pc, #20]	; (1a24 <_sercom_get_interrupt_vector+0x1c>)
    1a10:	881a      	ldrh	r2, [r3, #0]
    1a12:	8022      	strh	r2, [r4, #0]
    1a14:	789b      	ldrb	r3, [r3, #2]
    1a16:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    1a18:	f7ff ffbc 	bl	1994 <_sercom_get_sercom_inst_index>

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1a1c:	5620      	ldrsb	r0, [r4, r0]
}
    1a1e:	b002      	add	sp, #8
    1a20:	bd10      	pop	{r4, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	00002ea0 	.word	0x00002ea0

00001a28 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1a28:	b510      	push	{r4, lr}
    1a2a:	4b02      	ldr	r3, [pc, #8]	; (1a34 <SERCOM0_Handler+0xc>)
    1a2c:	681b      	ldr	r3, [r3, #0]
    1a2e:	2000      	movs	r0, #0
    1a30:	4798      	blx	r3
    1a32:	bd10      	pop	{r4, pc}
    1a34:	20000074 	.word	0x20000074

00001a38 <SERCOM1_Handler>:
    1a38:	b510      	push	{r4, lr}
    1a3a:	4b02      	ldr	r3, [pc, #8]	; (1a44 <SERCOM1_Handler+0xc>)
    1a3c:	685b      	ldr	r3, [r3, #4]
    1a3e:	2001      	movs	r0, #1
    1a40:	4798      	blx	r3
    1a42:	bd10      	pop	{r4, pc}
    1a44:	20000074 	.word	0x20000074

00001a48 <SERCOM2_Handler>:
    1a48:	b510      	push	{r4, lr}
    1a4a:	4b02      	ldr	r3, [pc, #8]	; (1a54 <SERCOM2_Handler+0xc>)
    1a4c:	689b      	ldr	r3, [r3, #8]
    1a4e:	2002      	movs	r0, #2
    1a50:	4798      	blx	r3
    1a52:	bd10      	pop	{r4, pc}
    1a54:	20000074 	.word	0x20000074

00001a58 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    1a58:	b510      	push	{r4, lr}
    1a5a:	b082      	sub	sp, #8
	uint32_t gclk_id;
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1a5c:	2201      	movs	r2, #1
    1a5e:	ab01      	add	r3, sp, #4
    1a60:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_5;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a62:	2400      	movs	r4, #0
    1a64:	e004      	b.n	1a70 <_switch_peripheral_gclk+0x18>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1a66:	b2e0      	uxtb	r0, r4
    1a68:	a901      	add	r1, sp, #4
    1a6a:	f000 fa2b 	bl	1ec4 <system_gclk_chan_set_config>
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1a6e:	3401      	adds	r4, #1
    1a70:	2c17      	cmp	r4, #23
    1a72:	d9f8      	bls.n	1a66 <_switch_peripheral_gclk+0xe>
	}
}
    1a74:	b002      	add	sp, #8
    1a76:	bd10      	pop	{r4, pc}

00001a78 <system_clock_source_get_hz>:
{
    1a78:	b510      	push	{r4, lr}
	switch (clock_source) {
    1a7a:	2808      	cmp	r0, #8
    1a7c:	d834      	bhi.n	1ae8 <system_clock_source_get_hz+0x70>
    1a7e:	0080      	lsls	r0, r0, #2
    1a80:	4b1c      	ldr	r3, [pc, #112]	; (1af4 <system_clock_source_get_hz+0x7c>)
    1a82:	581b      	ldr	r3, [r3, r0]
    1a84:	469f      	mov	pc, r3
		return 32768UL;
    1a86:	2080      	movs	r0, #128	; 0x80
    1a88:	0200      	lsls	r0, r0, #8
}
    1a8a:	bd10      	pop	{r4, pc}
		return _system_clock_inst.xosc.frequency;
    1a8c:	4b1a      	ldr	r3, [pc, #104]	; (1af8 <system_clock_source_get_hz+0x80>)
    1a8e:	6918      	ldr	r0, [r3, #16]
    1a90:	e7fb      	b.n	1a8a <system_clock_source_get_hz+0x12>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1a92:	4b1a      	ldr	r3, [pc, #104]	; (1afc <system_clock_source_get_hz+0x84>)
    1a94:	6a1b      	ldr	r3, [r3, #32]
    1a96:	059b      	lsls	r3, r3, #22
    1a98:	0f9b      	lsrs	r3, r3, #30
    1a9a:	4819      	ldr	r0, [pc, #100]	; (1b00 <system_clock_source_get_hz+0x88>)
    1a9c:	40d8      	lsrs	r0, r3
    1a9e:	e7f4      	b.n	1a8a <system_clock_source_get_hz+0x12>
		return _system_clock_inst.xosc32k.frequency;
    1aa0:	4b15      	ldr	r3, [pc, #84]	; (1af8 <system_clock_source_get_hz+0x80>)
    1aa2:	6958      	ldr	r0, [r3, #20]
    1aa4:	e7f1      	b.n	1a8a <system_clock_source_get_hz+0x12>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1aa6:	4b14      	ldr	r3, [pc, #80]	; (1af8 <system_clock_source_get_hz+0x80>)
    1aa8:	681b      	ldr	r3, [r3, #0]
    1aaa:	079b      	lsls	r3, r3, #30
    1aac:	d51e      	bpl.n	1aec <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1aae:	4b13      	ldr	r3, [pc, #76]	; (1afc <system_clock_source_get_hz+0x84>)
    1ab0:	68db      	ldr	r3, [r3, #12]
    1ab2:	06db      	lsls	r3, r3, #27
    1ab4:	d5fb      	bpl.n	1aae <system_clock_source_get_hz+0x36>
		switch(_system_clock_inst.dfll.control &
    1ab6:	4b10      	ldr	r3, [pc, #64]	; (1af8 <system_clock_source_get_hz+0x80>)
    1ab8:	681a      	ldr	r2, [r3, #0]
    1aba:	2324      	movs	r3, #36	; 0x24
    1abc:	4013      	ands	r3, r2
    1abe:	2b04      	cmp	r3, #4
    1ac0:	d001      	beq.n	1ac6 <system_clock_source_get_hz+0x4e>
			return 48000000UL;
    1ac2:	4810      	ldr	r0, [pc, #64]	; (1b04 <system_clock_source_get_hz+0x8c>)
    1ac4:	e7e1      	b.n	1a8a <system_clock_source_get_hz+0x12>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ac6:	2000      	movs	r0, #0
    1ac8:	f000 fa08 	bl	1edc <system_gclk_chan_get_hz>
					(_system_clock_inst.dfll.mul & 0xffff);
    1acc:	4b0a      	ldr	r3, [pc, #40]	; (1af8 <system_clock_source_get_hz+0x80>)
    1ace:	689b      	ldr	r3, [r3, #8]
    1ad0:	041b      	lsls	r3, r3, #16
    1ad2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1ad4:	4358      	muls	r0, r3
    1ad6:	e7d8      	b.n	1a8a <system_clock_source_get_hz+0x12>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1ad8:	2350      	movs	r3, #80	; 0x50
    1ada:	4a08      	ldr	r2, [pc, #32]	; (1afc <system_clock_source_get_hz+0x84>)
    1adc:	5cd3      	ldrb	r3, [r2, r3]
    1ade:	075b      	lsls	r3, r3, #29
    1ae0:	d506      	bpl.n	1af0 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    1ae2:	4b05      	ldr	r3, [pc, #20]	; (1af8 <system_clock_source_get_hz+0x80>)
    1ae4:	68d8      	ldr	r0, [r3, #12]
    1ae6:	e7d0      	b.n	1a8a <system_clock_source_get_hz+0x12>
		return 0;
    1ae8:	2000      	movs	r0, #0
    1aea:	e7ce      	b.n	1a8a <system_clock_source_get_hz+0x12>
			return 0;
    1aec:	2000      	movs	r0, #0
    1aee:	e7cc      	b.n	1a8a <system_clock_source_get_hz+0x12>
			return 0;
    1af0:	2000      	movs	r0, #0
    1af2:	e7ca      	b.n	1a8a <system_clock_source_get_hz+0x12>
    1af4:	00002ea4 	.word	0x00002ea4
    1af8:	20000080 	.word	0x20000080
    1afc:	40000800 	.word	0x40000800
    1b00:	007a1200 	.word	0x007a1200
    1b04:	02dc6c00 	.word	0x02dc6c00

00001b08 <system_clock_source_osc8m_set_config>:
{
    1b08:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1b0a:	4d0c      	ldr	r5, [pc, #48]	; (1b3c <system_clock_source_osc8m_set_config+0x34>)
    1b0c:	6a2e      	ldr	r6, [r5, #32]
	temp.bit.PRESC    = config->prescaler;
    1b0e:	7802      	ldrb	r2, [r0, #0]
    1b10:	2103      	movs	r1, #3
    1b12:	400a      	ands	r2, r1
    1b14:	0212      	lsls	r2, r2, #8
    1b16:	490a      	ldr	r1, [pc, #40]	; (1b40 <system_clock_source_osc8m_set_config+0x38>)
    1b18:	4031      	ands	r1, r6
    1b1a:	4311      	orrs	r1, r2
	temp.bit.ONDEMAND = config->on_demand;
    1b1c:	7882      	ldrb	r2, [r0, #2]
    1b1e:	2401      	movs	r4, #1
    1b20:	4022      	ands	r2, r4
    1b22:	01d2      	lsls	r2, r2, #7
    1b24:	2380      	movs	r3, #128	; 0x80
    1b26:	4399      	bics	r1, r3
    1b28:	430a      	orrs	r2, r1
	temp.bit.RUNSTDBY = config->run_in_standby;
    1b2a:	7843      	ldrb	r3, [r0, #1]
    1b2c:	4023      	ands	r3, r4
    1b2e:	019b      	lsls	r3, r3, #6
    1b30:	2140      	movs	r1, #64	; 0x40
    1b32:	438a      	bics	r2, r1
    1b34:	4313      	orrs	r3, r2
	SYSCTRL->OSC8M = temp;
    1b36:	622b      	str	r3, [r5, #32]
}
    1b38:	bd70      	pop	{r4, r5, r6, pc}
    1b3a:	46c0      	nop			; (mov r8, r8)
    1b3c:	40000800 	.word	0x40000800
    1b40:	fffffcff 	.word	0xfffffcff

00001b44 <system_clock_source_enable>:
	switch (clock_source) {
    1b44:	2808      	cmp	r0, #8
    1b46:	d84a      	bhi.n	1bde <system_clock_source_enable+0x9a>
    1b48:	0080      	lsls	r0, r0, #2
    1b4a:	4b26      	ldr	r3, [pc, #152]	; (1be4 <system_clock_source_enable+0xa0>)
    1b4c:	581b      	ldr	r3, [r3, r0]
    1b4e:	469f      	mov	pc, r3
		return STATUS_OK;
    1b50:	2000      	movs	r0, #0
}
    1b52:	4770      	bx	lr
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1b54:	4a24      	ldr	r2, [pc, #144]	; (1be8 <system_clock_source_enable+0xa4>)
    1b56:	6a13      	ldr	r3, [r2, #32]
    1b58:	2102      	movs	r1, #2
    1b5a:	430b      	orrs	r3, r1
    1b5c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1b5e:	2000      	movs	r0, #0
    1b60:	e7f7      	b.n	1b52 <system_clock_source_enable+0xe>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1b62:	4a21      	ldr	r2, [pc, #132]	; (1be8 <system_clock_source_enable+0xa4>)
    1b64:	6993      	ldr	r3, [r2, #24]
    1b66:	2102      	movs	r1, #2
    1b68:	430b      	orrs	r3, r1
    1b6a:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    1b6c:	2000      	movs	r0, #0
		break;
    1b6e:	e7f0      	b.n	1b52 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1b70:	4a1d      	ldr	r2, [pc, #116]	; (1be8 <system_clock_source_enable+0xa4>)
    1b72:	8a13      	ldrh	r3, [r2, #16]
    1b74:	2102      	movs	r1, #2
    1b76:	430b      	orrs	r3, r1
    1b78:	b29b      	uxth	r3, r3
    1b7a:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1b7c:	2000      	movs	r0, #0
		break;
    1b7e:	e7e8      	b.n	1b52 <system_clock_source_enable+0xe>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1b80:	4a19      	ldr	r2, [pc, #100]	; (1be8 <system_clock_source_enable+0xa4>)
    1b82:	8a93      	ldrh	r3, [r2, #20]
    1b84:	2102      	movs	r1, #2
    1b86:	430b      	orrs	r3, r1
    1b88:	b29b      	uxth	r3, r3
    1b8a:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1b8c:	2000      	movs	r0, #0
		break;
    1b8e:	e7e0      	b.n	1b52 <system_clock_source_enable+0xe>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1b90:	4916      	ldr	r1, [pc, #88]	; (1bec <system_clock_source_enable+0xa8>)
    1b92:	680b      	ldr	r3, [r1, #0]
    1b94:	2202      	movs	r2, #2
    1b96:	4313      	orrs	r3, r2
    1b98:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1b9a:	4b13      	ldr	r3, [pc, #76]	; (1be8 <system_clock_source_enable+0xa4>)
    1b9c:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1b9e:	4b12      	ldr	r3, [pc, #72]	; (1be8 <system_clock_source_enable+0xa4>)
    1ba0:	68db      	ldr	r3, [r3, #12]
    1ba2:	06db      	lsls	r3, r3, #27
    1ba4:	d5fb      	bpl.n	1b9e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ba6:	4a11      	ldr	r2, [pc, #68]	; (1bec <system_clock_source_enable+0xa8>)
    1ba8:	6891      	ldr	r1, [r2, #8]
    1baa:	4b0f      	ldr	r3, [pc, #60]	; (1be8 <system_clock_source_enable+0xa4>)
    1bac:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1bae:	6852      	ldr	r2, [r2, #4]
    1bb0:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1bb2:	2200      	movs	r2, #0
    1bb4:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1bb6:	4b0c      	ldr	r3, [pc, #48]	; (1be8 <system_clock_source_enable+0xa4>)
    1bb8:	68db      	ldr	r3, [r3, #12]
    1bba:	06db      	lsls	r3, r3, #27
    1bbc:	d5fb      	bpl.n	1bb6 <system_clock_source_enable+0x72>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1bbe:	4b0b      	ldr	r3, [pc, #44]	; (1bec <system_clock_source_enable+0xa8>)
    1bc0:	681b      	ldr	r3, [r3, #0]
    1bc2:	b29b      	uxth	r3, r3
    1bc4:	4a08      	ldr	r2, [pc, #32]	; (1be8 <system_clock_source_enable+0xa4>)
    1bc6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1bc8:	2000      	movs	r0, #0
    1bca:	e7c2      	b.n	1b52 <system_clock_source_enable+0xe>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1bcc:	4906      	ldr	r1, [pc, #24]	; (1be8 <system_clock_source_enable+0xa4>)
    1bce:	2244      	movs	r2, #68	; 0x44
    1bd0:	5c8b      	ldrb	r3, [r1, r2]
    1bd2:	2002      	movs	r0, #2
    1bd4:	4303      	orrs	r3, r0
    1bd6:	b2db      	uxtb	r3, r3
    1bd8:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1bda:	2000      	movs	r0, #0
		break;
    1bdc:	e7b9      	b.n	1b52 <system_clock_source_enable+0xe>
		return STATUS_ERR_INVALID_ARG;
    1bde:	2017      	movs	r0, #23
    1be0:	e7b7      	b.n	1b52 <system_clock_source_enable+0xe>
    1be2:	46c0      	nop			; (mov r8, r8)
    1be4:	00002ec8 	.word	0x00002ec8
    1be8:	40000800 	.word	0x40000800
    1bec:	20000080 	.word	0x20000080

00001bf0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1bf0:	b570      	push	{r4, r5, r6, lr}
    1bf2:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1bf4:	22c2      	movs	r2, #194	; 0xc2
    1bf6:	00d2      	lsls	r2, r2, #3
    1bf8:	4b1b      	ldr	r3, [pc, #108]	; (1c68 <system_clock_init+0x78>)
    1bfa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1bfc:	4b1b      	ldr	r3, [pc, #108]	; (1c6c <system_clock_init+0x7c>)
    1bfe:	6859      	ldr	r1, [r3, #4]
    1c00:	221e      	movs	r2, #30
    1c02:	4391      	bics	r1, r2
    1c04:	6059      	str	r1, [r3, #4]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    1c06:	f7ff ff27 	bl	1a58 <_switch_peripheral_gclk>

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1c0a:	a803      	add	r0, sp, #12
    1c0c:	2400      	movs	r4, #0
    1c0e:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    1c10:	7084      	strb	r4, [r0, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    1c12:	2501      	movs	r5, #1
    1c14:	7045      	strb	r5, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1c16:	f7ff ff77 	bl	1b08 <system_clock_source_osc8m_set_config>
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1c1a:	2006      	movs	r0, #6
    1c1c:	f7ff ff92 	bl	1b44 <system_clock_source_enable>


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1c20:	f000 f828 	bl	1c74 <system_gclk_init>
	config->division_factor    = 1;
    1c24:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1c26:	466b      	mov	r3, sp
    1c28:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c2a:	2606      	movs	r6, #6
    1c2c:	701e      	strb	r6, [r3, #0]
	config->run_in_standby     = false;
    1c2e:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1c30:	725c      	strb	r4, [r3, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1c32:	4669      	mov	r1, sp
    1c34:	2005      	movs	r0, #5
    1c36:	f000 f82f 	bl	1c98 <system_gclk_gen_set_config>
    1c3a:	2005      	movs	r0, #5
    1c3c:	f000 f890 	bl	1d60 <system_gclk_gen_enable>
	PM->CPUSEL.reg = (uint32_t)divider;
    1c40:	4b0b      	ldr	r3, [pc, #44]	; (1c70 <system_clock_init+0x80>)
    1c42:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1c44:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1c46:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1c48:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1c4a:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1c4c:	466b      	mov	r3, sp
    1c4e:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1c50:	701e      	strb	r6, [r3, #0]
	config->output_enable      = false;
    1c52:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1c54:	721d      	strb	r5, [r3, #8]
    1c56:	4669      	mov	r1, sp
    1c58:	2000      	movs	r0, #0
    1c5a:	f000 f81d 	bl	1c98 <system_gclk_gen_set_config>
    1c5e:	2000      	movs	r0, #0
    1c60:	f000 f87e 	bl	1d60 <system_gclk_gen_enable>
#endif
}
    1c64:	b004      	add	sp, #16
    1c66:	bd70      	pop	{r4, r5, r6, pc}
    1c68:	40000800 	.word	0x40000800
    1c6c:	41004000 	.word	0x41004000
    1c70:	40000400 	.word	0x40000400

00001c74 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1c74:	4a06      	ldr	r2, [pc, #24]	; (1c90 <system_gclk_init+0x1c>)
    1c76:	6993      	ldr	r3, [r2, #24]
    1c78:	2108      	movs	r1, #8
    1c7a:	430b      	orrs	r3, r1
    1c7c:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1c7e:	2201      	movs	r2, #1
    1c80:	4b04      	ldr	r3, [pc, #16]	; (1c94 <system_gclk_init+0x20>)
    1c82:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1c84:	4b03      	ldr	r3, [pc, #12]	; (1c94 <system_gclk_init+0x20>)
    1c86:	781b      	ldrb	r3, [r3, #0]
    1c88:	07db      	lsls	r3, r3, #31
    1c8a:	d4fb      	bmi.n	1c84 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    1c8c:	4770      	bx	lr
    1c8e:	46c0      	nop			; (mov r8, r8)
    1c90:	40000400 	.word	0x40000400
    1c94:	40000c00 	.word	0x40000c00

00001c98 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c9a:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c9c:	0005      	movs	r5, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c9e:	780c      	ldrb	r4, [r1, #0]
    1ca0:	0224      	lsls	r4, r4, #8
    1ca2:	4304      	orrs	r4, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1ca4:	784b      	ldrb	r3, [r1, #1]
    1ca6:	2b00      	cmp	r3, #0
    1ca8:	d002      	beq.n	1cb0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1caa:	2380      	movs	r3, #128	; 0x80
    1cac:	02db      	lsls	r3, r3, #11
    1cae:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1cb0:	7a4b      	ldrb	r3, [r1, #9]
    1cb2:	2b00      	cmp	r3, #0
    1cb4:	d002      	beq.n	1cbc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1cb6:	2380      	movs	r3, #128	; 0x80
    1cb8:	031b      	lsls	r3, r3, #12
    1cba:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1cbc:	6848      	ldr	r0, [r1, #4]
    1cbe:	2801      	cmp	r0, #1
    1cc0:	d912      	bls.n	1ce8 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1cc2:	1e43      	subs	r3, r0, #1
    1cc4:	4203      	tst	r3, r0
    1cc6:	d03d      	beq.n	1d44 <system_gclk_gen_set_config+0xac>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1cc8:	0205      	lsls	r5, r0, #8
			new_gendiv_config  |=
    1cca:	4335      	orrs	r5, r6

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1ccc:	2380      	movs	r3, #128	; 0x80
    1cce:	029b      	lsls	r3, r3, #10
    1cd0:	431c      	orrs	r4, r3
    1cd2:	e009      	b.n	1ce8 <system_gclk_gen_set_config+0x50>
				div2_count++;
    1cd4:	3201      	adds	r2, #1
						mask <<= 1) {
    1cd6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1cd8:	4283      	cmp	r3, r0
    1cda:	d3fb      	bcc.n	1cd4 <system_gclk_gen_set_config+0x3c>
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1cdc:	0212      	lsls	r2, r2, #8
    1cde:	4332      	orrs	r2, r6
    1ce0:	0015      	movs	r5, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1ce2:	2380      	movs	r3, #128	; 0x80
    1ce4:	035b      	lsls	r3, r3, #13
    1ce6:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1ce8:	7a0b      	ldrb	r3, [r1, #8]
    1cea:	2b00      	cmp	r3, #0
    1cec:	d002      	beq.n	1cf4 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1cee:	2380      	movs	r3, #128	; 0x80
    1cf0:	039b      	lsls	r3, r3, #14
    1cf2:	431c      	orrs	r4, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cf4:	4b18      	ldr	r3, [pc, #96]	; (1d58 <system_gclk_gen_set_config+0xc0>)
    1cf6:	785b      	ldrb	r3, [r3, #1]
    1cf8:	b25b      	sxtb	r3, r3
    1cfa:	2b00      	cmp	r3, #0
    1cfc:	db25      	blt.n	1d4a <system_gclk_gen_set_config+0xb2>
	return false;
    1cfe:	2700      	movs	r7, #0
	}

	while (system_gclk_is_syncing()) {
    1d00:	2f00      	cmp	r7, #0
    1d02:	d1f7      	bne.n	1cf4 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    1d04:	f7ff fa9c 	bl	1240 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d08:	4b14      	ldr	r3, [pc, #80]	; (1d5c <system_gclk_gen_set_config+0xc4>)
    1d0a:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d0c:	4b12      	ldr	r3, [pc, #72]	; (1d58 <system_gclk_gen_set_config+0xc0>)
    1d0e:	785b      	ldrb	r3, [r3, #1]
    1d10:	b25b      	sxtb	r3, r3
    1d12:	2b00      	cmp	r3, #0
    1d14:	db1b      	blt.n	1d4e <system_gclk_gen_set_config+0xb6>
	return false;
    1d16:	003a      	movs	r2, r7

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1d18:	2a00      	cmp	r2, #0
    1d1a:	d1f7      	bne.n	1d0c <system_gclk_gen_set_config+0x74>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1d1c:	4b0e      	ldr	r3, [pc, #56]	; (1d58 <system_gclk_gen_set_config+0xc0>)
    1d1e:	609d      	str	r5, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d20:	4b0d      	ldr	r3, [pc, #52]	; (1d58 <system_gclk_gen_set_config+0xc0>)
    1d22:	785b      	ldrb	r3, [r3, #1]
    1d24:	b25b      	sxtb	r3, r3
    1d26:	2b00      	cmp	r3, #0
    1d28:	db13      	blt.n	1d52 <system_gclk_gen_set_config+0xba>
	return false;
    1d2a:	0013      	movs	r3, r2

	while (system_gclk_is_syncing()) {
    1d2c:	2b00      	cmp	r3, #0
    1d2e:	d1f7      	bne.n	1d20 <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1d30:	4a09      	ldr	r2, [pc, #36]	; (1d58 <system_gclk_gen_set_config+0xc0>)
    1d32:	6853      	ldr	r3, [r2, #4]
    1d34:	2180      	movs	r1, #128	; 0x80
    1d36:	0249      	lsls	r1, r1, #9
    1d38:	400b      	ands	r3, r1
    1d3a:	431c      	orrs	r4, r3
    1d3c:	6054      	str	r4, [r2, #4]
	cpu_irq_leave_critical();
    1d3e:	f7ff fa9f 	bl	1280 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d44:	2302      	movs	r3, #2
    1d46:	2200      	movs	r2, #0
    1d48:	e7c6      	b.n	1cd8 <system_gclk_gen_set_config+0x40>
		return true;
    1d4a:	2701      	movs	r7, #1
    1d4c:	e7d8      	b.n	1d00 <system_gclk_gen_set_config+0x68>
    1d4e:	2201      	movs	r2, #1
    1d50:	e7e2      	b.n	1d18 <system_gclk_gen_set_config+0x80>
    1d52:	2301      	movs	r3, #1
    1d54:	e7ea      	b.n	1d2c <system_gclk_gen_set_config+0x94>
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	40000c00 	.word	0x40000c00
    1d5c:	40000c08 	.word	0x40000c08

00001d60 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1d60:	b570      	push	{r4, r5, r6, lr}
    1d62:	0005      	movs	r5, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d64:	4b10      	ldr	r3, [pc, #64]	; (1da8 <system_gclk_gen_enable+0x48>)
    1d66:	785b      	ldrb	r3, [r3, #1]
    1d68:	b25b      	sxtb	r3, r3
    1d6a:	2b00      	cmp	r3, #0
    1d6c:	db17      	blt.n	1d9e <system_gclk_gen_enable+0x3e>
	return false;
    1d6e:	2400      	movs	r4, #0
	while (system_gclk_is_syncing()) {
    1d70:	2c00      	cmp	r4, #0
    1d72:	d1f7      	bne.n	1d64 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    1d74:	f7ff fa64 	bl	1240 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d78:	4b0c      	ldr	r3, [pc, #48]	; (1dac <system_gclk_gen_enable+0x4c>)
    1d7a:	701d      	strb	r5, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d7c:	4b0a      	ldr	r3, [pc, #40]	; (1da8 <system_gclk_gen_enable+0x48>)
    1d7e:	785b      	ldrb	r3, [r3, #1]
    1d80:	b25b      	sxtb	r3, r3
    1d82:	2b00      	cmp	r3, #0
    1d84:	db0d      	blt.n	1da2 <system_gclk_gen_enable+0x42>
	return false;
    1d86:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1d88:	2b00      	cmp	r3, #0
    1d8a:	d1f7      	bne.n	1d7c <system_gclk_gen_enable+0x1c>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1d8c:	4a06      	ldr	r2, [pc, #24]	; (1da8 <system_gclk_gen_enable+0x48>)
    1d8e:	6851      	ldr	r1, [r2, #4]
    1d90:	2380      	movs	r3, #128	; 0x80
    1d92:	025b      	lsls	r3, r3, #9
    1d94:	430b      	orrs	r3, r1
    1d96:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1d98:	f7ff fa72 	bl	1280 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1d9c:	bd70      	pop	{r4, r5, r6, pc}
		return true;
    1d9e:	2401      	movs	r4, #1
    1da0:	e7e6      	b.n	1d70 <system_gclk_gen_enable+0x10>
    1da2:	2301      	movs	r3, #1
    1da4:	e7f0      	b.n	1d88 <system_gclk_gen_enable+0x28>
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	40000c00 	.word	0x40000c00
    1dac:	40000c04 	.word	0x40000c04

00001db0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1db2:	0007      	movs	r7, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1db4:	4b22      	ldr	r3, [pc, #136]	; (1e40 <system_gclk_gen_get_hz+0x90>)
    1db6:	785b      	ldrb	r3, [r3, #1]
    1db8:	b25b      	sxtb	r3, r3
    1dba:	2b00      	cmp	r3, #0
    1dbc:	db34      	blt.n	1e28 <system_gclk_gen_get_hz+0x78>
	return false;
    1dbe:	2500      	movs	r5, #0
	while (system_gclk_is_syncing()) {
    1dc0:	2d00      	cmp	r5, #0
    1dc2:	d1f7      	bne.n	1db4 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    1dc4:	f7ff fa3c 	bl	1240 <cpu_irq_enter_critical>
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dc8:	4b1e      	ldr	r3, [pc, #120]	; (1e44 <system_gclk_gen_get_hz+0x94>)
    1dca:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1dcc:	4b1c      	ldr	r3, [pc, #112]	; (1e40 <system_gclk_gen_get_hz+0x90>)
    1dce:	785b      	ldrb	r3, [r3, #1]
    1dd0:	b25b      	sxtb	r3, r3
    1dd2:	2b00      	cmp	r3, #0
    1dd4:	db2a      	blt.n	1e2c <system_gclk_gen_get_hz+0x7c>
	return false;
    1dd6:	002c      	movs	r4, r5
	while (system_gclk_is_syncing()) {
    1dd8:	2c00      	cmp	r4, #0
    1dda:	d1f7      	bne.n	1dcc <system_gclk_gen_get_hz+0x1c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1ddc:	4e18      	ldr	r6, [pc, #96]	; (1e40 <system_gclk_gen_get_hz+0x90>)
    1dde:	6870      	ldr	r0, [r6, #4]
    1de0:	04c0      	lsls	r0, r0, #19
    1de2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1de4:	f7ff fe48 	bl	1a78 <system_clock_source_get_hz>
    1de8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1dea:	4b16      	ldr	r3, [pc, #88]	; (1e44 <system_gclk_gen_get_hz+0x94>)
    1dec:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1dee:	6876      	ldr	r6, [r6, #4]
    1df0:	02f6      	lsls	r6, r6, #11
    1df2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1df4:	4b14      	ldr	r3, [pc, #80]	; (1e48 <system_gclk_gen_get_hz+0x98>)
    1df6:	701f      	strb	r7, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1df8:	4b11      	ldr	r3, [pc, #68]	; (1e40 <system_gclk_gen_get_hz+0x90>)
    1dfa:	785b      	ldrb	r3, [r3, #1]
    1dfc:	b25b      	sxtb	r3, r3
    1dfe:	2b00      	cmp	r3, #0
    1e00:	db16      	blt.n	1e30 <system_gclk_gen_get_hz+0x80>
	return false;
    1e02:	0023      	movs	r3, r4
	while (system_gclk_is_syncing()) {
    1e04:	2b00      	cmp	r3, #0
    1e06:	d1f7      	bne.n	1df8 <system_gclk_gen_get_hz+0x48>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1e08:	4b0d      	ldr	r3, [pc, #52]	; (1e40 <system_gclk_gen_get_hz+0x90>)
    1e0a:	689c      	ldr	r4, [r3, #8]
    1e0c:	0224      	lsls	r4, r4, #8
    1e0e:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1e10:	f7ff fa36 	bl	1280 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1e14:	2e00      	cmp	r6, #0
    1e16:	d10d      	bne.n	1e34 <system_gclk_gen_get_hz+0x84>
    1e18:	2c01      	cmp	r4, #1
    1e1a:	d90b      	bls.n	1e34 <system_gclk_gen_get_hz+0x84>
		gen_input_hz /= divider;
    1e1c:	0021      	movs	r1, r4
    1e1e:	0028      	movs	r0, r5
    1e20:	f000 fedc 	bl	2bdc <__udivsi3>
    1e24:	0005      	movs	r5, r0
    1e26:	e009      	b.n	1e3c <system_gclk_gen_get_hz+0x8c>
		return true;
    1e28:	2501      	movs	r5, #1
    1e2a:	e7c9      	b.n	1dc0 <system_gclk_gen_get_hz+0x10>
    1e2c:	2401      	movs	r4, #1
    1e2e:	e7d3      	b.n	1dd8 <system_gclk_gen_get_hz+0x28>
    1e30:	2301      	movs	r3, #1
    1e32:	e7e7      	b.n	1e04 <system_gclk_gen_get_hz+0x54>
	} else if (divsel) {
    1e34:	2e00      	cmp	r6, #0
    1e36:	d001      	beq.n	1e3c <system_gclk_gen_get_hz+0x8c>
		gen_input_hz >>= (divider+1);
    1e38:	3401      	adds	r4, #1
    1e3a:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1e3c:	0028      	movs	r0, r5
    1e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1e40:	40000c00 	.word	0x40000c00
    1e44:	40000c04 	.word	0x40000c04
    1e48:	40000c08 	.word	0x40000c08

00001e4c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1e4c:	b510      	push	{r4, lr}
    1e4e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e50:	f7ff f9f6 	bl	1240 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e54:	4b05      	ldr	r3, [pc, #20]	; (1e6c <system_gclk_chan_enable+0x20>)
    1e56:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1e58:	4a05      	ldr	r2, [pc, #20]	; (1e70 <system_gclk_chan_enable+0x24>)
    1e5a:	8853      	ldrh	r3, [r2, #2]
    1e5c:	2180      	movs	r1, #128	; 0x80
    1e5e:	01c9      	lsls	r1, r1, #7
    1e60:	430b      	orrs	r3, r1
    1e62:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1e64:	f7ff fa0c 	bl	1280 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1e68:	bd10      	pop	{r4, pc}
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	40000c02 	.word	0x40000c02
    1e70:	40000c00 	.word	0x40000c00

00001e74 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1e74:	b510      	push	{r4, lr}
    1e76:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1e78:	f7ff f9e2 	bl	1240 <cpu_irq_enter_critical>
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e7c:	4b0d      	ldr	r3, [pc, #52]	; (1eb4 <system_gclk_chan_disable+0x40>)
    1e7e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1e80:	490d      	ldr	r1, [pc, #52]	; (1eb8 <system_gclk_chan_disable+0x44>)
    1e82:	884b      	ldrh	r3, [r1, #2]
    1e84:	051b      	lsls	r3, r3, #20
    1e86:	0f1a      	lsrs	r2, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1e88:	884b      	ldrh	r3, [r1, #2]
    1e8a:	480c      	ldr	r0, [pc, #48]	; (1ebc <system_gclk_chan_disable+0x48>)
    1e8c:	4003      	ands	r3, r0
    1e8e:	804b      	strh	r3, [r1, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1e90:	884b      	ldrh	r3, [r1, #2]
    1e92:	480b      	ldr	r0, [pc, #44]	; (1ec0 <system_gclk_chan_disable+0x4c>)
    1e94:	4003      	ands	r3, r0
    1e96:	804b      	strh	r3, [r1, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1e98:	4b07      	ldr	r3, [pc, #28]	; (1eb8 <system_gclk_chan_disable+0x44>)
    1e9a:	885b      	ldrh	r3, [r3, #2]
    1e9c:	045b      	lsls	r3, r3, #17
    1e9e:	d4fb      	bmi.n	1e98 <system_gclk_chan_disable+0x24>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1ea0:	4805      	ldr	r0, [pc, #20]	; (1eb8 <system_gclk_chan_disable+0x44>)
    1ea2:	8841      	ldrh	r1, [r0, #2]
    1ea4:	0213      	lsls	r3, r2, #8
    1ea6:	4a05      	ldr	r2, [pc, #20]	; (1ebc <system_gclk_chan_disable+0x48>)
    1ea8:	400a      	ands	r2, r1
    1eaa:	4313      	orrs	r3, r2
    1eac:	8043      	strh	r3, [r0, #2]
	cpu_irq_leave_critical();
    1eae:	f7ff f9e7 	bl	1280 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();
}
    1eb2:	bd10      	pop	{r4, pc}
    1eb4:	40000c02 	.word	0x40000c02
    1eb8:	40000c00 	.word	0x40000c00
    1ebc:	fffff0ff 	.word	0xfffff0ff
    1ec0:	ffffbfff 	.word	0xffffbfff

00001ec4 <system_gclk_chan_set_config>:
{
    1ec4:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1ec6:	780c      	ldrb	r4, [r1, #0]
    1ec8:	0224      	lsls	r4, r4, #8
    1eca:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1ecc:	f7ff ffd2 	bl	1e74 <system_gclk_chan_disable>
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1ed0:	b2a4      	uxth	r4, r4
    1ed2:	4b01      	ldr	r3, [pc, #4]	; (1ed8 <system_gclk_chan_set_config+0x14>)
    1ed4:	805c      	strh	r4, [r3, #2]
}
    1ed6:	bd10      	pop	{r4, pc}
    1ed8:	40000c00 	.word	0x40000c00

00001edc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1edc:	b510      	push	{r4, lr}
    1ede:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1ee0:	f7ff f9ae 	bl	1240 <cpu_irq_enter_critical>
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1ee4:	4b05      	ldr	r3, [pc, #20]	; (1efc <system_gclk_chan_get_hz+0x20>)
    1ee6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1ee8:	4b05      	ldr	r3, [pc, #20]	; (1f00 <system_gclk_chan_get_hz+0x24>)
    1eea:	885c      	ldrh	r4, [r3, #2]
    1eec:	0524      	lsls	r4, r4, #20
    1eee:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1ef0:	f7ff f9c6 	bl	1280 <cpu_irq_leave_critical>

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1ef4:	0020      	movs	r0, r4
    1ef6:	f7ff ff5b 	bl	1db0 <system_gclk_gen_get_hz>
}
    1efa:	bd10      	pop	{r4, pc}
    1efc:	40000c02 	.word	0x40000c02
    1f00:	40000c00 	.word	0x40000c00

00001f04 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1f04:	b570      	push	{r4, r5, r6, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1f06:	78d3      	ldrb	r3, [r2, #3]
    1f08:	2b00      	cmp	r3, #0
    1f0a:	d120      	bne.n	1f4e <_system_pinmux_config+0x4a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1f0c:	7815      	ldrb	r5, [r2, #0]
    1f0e:	2d80      	cmp	r5, #128	; 0x80
    1f10:	d01b      	beq.n	1f4a <_system_pinmux_config+0x46>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1f12:	062d      	lsls	r5, r5, #24
    1f14:	2380      	movs	r3, #128	; 0x80
    1f16:	025b      	lsls	r3, r3, #9
    1f18:	431d      	orrs	r5, r3
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1f1a:	7853      	ldrb	r3, [r2, #1]
    1f1c:	2b00      	cmp	r3, #0
    1f1e:	d001      	beq.n	1f24 <_system_pinmux_config+0x20>
    1f20:	2b02      	cmp	r3, #2
    1f22:	d10a      	bne.n	1f3a <_system_pinmux_config+0x36>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1f24:	2380      	movs	r3, #128	; 0x80
    1f26:	029b      	lsls	r3, r3, #10
    1f28:	432b      	orrs	r3, r5

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1f2a:	7894      	ldrb	r4, [r2, #2]
    1f2c:	2c00      	cmp	r4, #0
    1f2e:	d002      	beq.n	1f36 <_system_pinmux_config+0x32>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1f30:	23c0      	movs	r3, #192	; 0xc0
    1f32:	02db      	lsls	r3, r3, #11
    1f34:	432b      	orrs	r3, r5
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1f36:	6041      	str	r1, [r0, #4]
    1f38:	001d      	movs	r5, r3
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f3a:	7853      	ldrb	r3, [r2, #1]
    1f3c:	3b01      	subs	r3, #1
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	2b01      	cmp	r3, #1
    1f42:	d806      	bhi.n	1f52 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1f44:	4b13      	ldr	r3, [pc, #76]	; (1f94 <_system_pinmux_config+0x90>)
    1f46:	401d      	ands	r5, r3
    1f48:	e003      	b.n	1f52 <_system_pinmux_config+0x4e>
	uint32_t pin_cfg = 0;
    1f4a:	2500      	movs	r5, #0
    1f4c:	e7e5      	b.n	1f1a <_system_pinmux_config+0x16>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1f4e:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    1f50:	2500      	movs	r5, #0
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1f52:	040c      	lsls	r4, r1, #16
    1f54:	0c24      	lsrs	r4, r4, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1f56:	0c0b      	lsrs	r3, r1, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f58:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1f5a:	26a0      	movs	r6, #160	; 0xa0
    1f5c:	05f6      	lsls	r6, r6, #23
    1f5e:	4334      	orrs	r4, r6
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f60:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f62:	432b      	orrs	r3, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1f64:	24d0      	movs	r4, #208	; 0xd0
    1f66:	0624      	lsls	r4, r4, #24
    1f68:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1f6a:	6283      	str	r3, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1f6c:	78d3      	ldrb	r3, [r2, #3]
    1f6e:	2b00      	cmp	r3, #0
    1f70:	d10a      	bne.n	1f88 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1f72:	036b      	lsls	r3, r5, #13
    1f74:	d503      	bpl.n	1f7e <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1f76:	7893      	ldrb	r3, [r2, #2]
    1f78:	2b01      	cmp	r3, #1
    1f7a:	d006      	beq.n	1f8a <_system_pinmux_config+0x86>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1f7c:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1f7e:	7853      	ldrb	r3, [r2, #1]
    1f80:	3b01      	subs	r3, #1
    1f82:	b2db      	uxtb	r3, r3
    1f84:	2b01      	cmp	r3, #1
    1f86:	d902      	bls.n	1f8e <_system_pinmux_config+0x8a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1f88:	bd70      	pop	{r4, r5, r6, pc}
				port->OUTSET.reg = pin_mask;
    1f8a:	6181      	str	r1, [r0, #24]
    1f8c:	e7f7      	b.n	1f7e <_system_pinmux_config+0x7a>
			port->DIRSET.reg = pin_mask;
    1f8e:	6081      	str	r1, [r0, #8]
}
    1f90:	e7fa      	b.n	1f88 <_system_pinmux_config+0x84>
    1f92:	46c0      	nop			; (mov r8, r8)
    1f94:	fffbffff 	.word	0xfffbffff

00001f98 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1f98:	b510      	push	{r4, lr}
    1f9a:	000a      	movs	r2, r1
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
	uint8_t port_index  = (gpio_pin / 128);
    1f9c:	09c1      	lsrs	r1, r0, #7
	uint8_t group_index = (gpio_pin / 32);
    1f9e:	0943      	lsrs	r3, r0, #5

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1fa0:	2900      	cmp	r1, #0
    1fa2:	d10b      	bne.n	1fbc <system_pinmux_pin_set_config+0x24>
		return &(ports[port_index]->Group[group_index]);
    1fa4:	01db      	lsls	r3, r3, #7
    1fa6:	4906      	ldr	r1, [pc, #24]	; (1fc0 <system_pinmux_pin_set_config+0x28>)
    1fa8:	468c      	mov	ip, r1
    1faa:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1fac:	241f      	movs	r4, #31
    1fae:	4020      	ands	r0, r4
    1fb0:	2101      	movs	r1, #1
    1fb2:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1fb4:	0018      	movs	r0, r3
    1fb6:	f7ff ffa5 	bl	1f04 <_system_pinmux_config>
}
    1fba:	bd10      	pop	{r4, pc}
	} else {
		Assert(false);
		return NULL;
    1fbc:	2300      	movs	r3, #0
    1fbe:	e7f5      	b.n	1fac <system_pinmux_pin_set_config+0x14>
    1fc0:	41004400 	.word	0x41004400

00001fc4 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1fc4:	4770      	bx	lr

00001fc6 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1fc6:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1fc8:	f7ff fe12 	bl	1bf0 <system_clock_init>
	//system_board_init();
	

	
	/* Initialize EVSYS hardware */
	_system_events_init();
    1fcc:	f7ff fffa 	bl	1fc4 <_system_dummy_init>

	/* Initialize External hardware */
	_system_extint_init();
    1fd0:	f7fe fbe4 	bl	79c <_system_extint_init>
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1fd4:	f7ff fff6 	bl	1fc4 <_system_dummy_init>
}
    1fd8:	bd10      	pop	{r4, pc}
	...

00001fdc <_tcc_get_inst_index>:
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1fdc:	2300      	movs	r3, #0
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d001      	beq.n	1fe6 <_tcc_get_inst_index+0xa>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1fe2:	2000      	movs	r0, #0
}
    1fe4:	4770      	bx	lr
		if (hw == tcc_modules[i]) {
    1fe6:	4a03      	ldr	r2, [pc, #12]	; (1ff4 <_tcc_get_inst_index+0x18>)
    1fe8:	4290      	cmp	r0, r2
    1fea:	d001      	beq.n	1ff0 <_tcc_get_inst_index+0x14>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
    1fec:	3301      	adds	r3, #1
    1fee:	e7f6      	b.n	1fde <_tcc_get_inst_index+0x2>
			return i;
    1ff0:	b2d8      	uxtb	r0, r3
    1ff2:	e7f7      	b.n	1fe4 <_tcc_get_inst_index+0x8>
    1ff4:	42001400 	.word	0x42001400

00001ff8 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
    1ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1ffa:	000c      	movs	r4, r1
    1ffc:	0016      	movs	r6, r2
    1ffe:	001f      	movs	r7, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2000:	6805      	ldr	r5, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
    2002:	0028      	movs	r0, r5
    2004:	f7ff ffea 	bl	1fdc <_tcc_get_inst_index>

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
    2008:	2c03      	cmp	r4, #3
    200a:	d901      	bls.n	2010 <_tcc_set_compare_value+0x18>
		return STATUS_ERR_INVALID_ARG;
    200c:	2017      	movs	r0, #23
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
}
    200e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (compare > max_count) {
    2010:	4b12      	ldr	r3, [pc, #72]	; (205c <_tcc_set_compare_value+0x64>)
    2012:	429e      	cmp	r6, r3
    2014:	d901      	bls.n	201a <_tcc_set_compare_value+0x22>
		return STATUS_ERR_INVALID_ARG;
    2016:	2017      	movs	r0, #23
    2018:	e7f9      	b.n	200e <_tcc_set_compare_value+0x16>
	if (double_buffering_enabled) {
    201a:	2f00      	cmp	r7, #0
    201c:	d011      	beq.n	2042 <_tcc_set_compare_value+0x4a>
		while(tcc_module->STATUS.reg  &
    201e:	6b29      	ldr	r1, [r5, #48]	; 0x30
				(TCC_STATUS_CCBV0 << channel_index)) {
    2020:	0022      	movs	r2, r4
    2022:	2380      	movs	r3, #128	; 0x80
    2024:	025b      	lsls	r3, r3, #9
    2026:	40a3      	lsls	r3, r4
		while(tcc_module->STATUS.reg  &
    2028:	420b      	tst	r3, r1
    202a:	d1f8      	bne.n	201e <_tcc_set_compare_value+0x26>
		while(tcc_module->SYNCBUSY.reg  &
    202c:	68a9      	ldr	r1, [r5, #8]
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
    202e:	2380      	movs	r3, #128	; 0x80
    2030:	031b      	lsls	r3, r3, #12
    2032:	4093      	lsls	r3, r2
		while(tcc_module->SYNCBUSY.reg  &
    2034:	420b      	tst	r3, r1
    2036:	d1f9      	bne.n	202c <_tcc_set_compare_value+0x34>
		tcc_module->CCB[channel_index].reg = compare;
    2038:	321c      	adds	r2, #28
    203a:	0092      	lsls	r2, r2, #2
    203c:	5156      	str	r6, [r2, r5]
	return STATUS_OK;
    203e:	2000      	movs	r0, #0
    2040:	e7e5      	b.n	200e <_tcc_set_compare_value+0x16>
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
    2042:	68aa      	ldr	r2, [r5, #8]
    2044:	0021      	movs	r1, r4
    2046:	2380      	movs	r3, #128	; 0x80
    2048:	005b      	lsls	r3, r3, #1
    204a:	40a3      	lsls	r3, r4
    204c:	4213      	tst	r3, r2
    204e:	d1f8      	bne.n	2042 <_tcc_set_compare_value+0x4a>
		tcc_module->CC[channel_index].reg = compare;
    2050:	3110      	adds	r1, #16
    2052:	0089      	lsls	r1, r1, #2
    2054:	186d      	adds	r5, r5, r1
    2056:	606e      	str	r6, [r5, #4]
	return STATUS_OK;
    2058:	2000      	movs	r0, #0
    205a:	e7d8      	b.n	200e <_tcc_set_compare_value+0x16>
    205c:	00ffffff 	.word	0x00ffffff

00002060 <tcc_get_config_defaults>:
{
    2060:	b510      	push	{r4, lr}
    2062:	0004      	movs	r4, r0
	uint8_t module_index = _tcc_get_inst_index(hw);
    2064:	0008      	movs	r0, r1
    2066:	f7ff ffb9 	bl	1fdc <_tcc_get_inst_index>
	config->counter.count                  = 0;
    206a:	2300      	movs	r3, #0
    206c:	6023      	str	r3, [r4, #0]
	config->counter.period                 = _tcc_maxs[module_index];
    206e:	4a4c      	ldr	r2, [pc, #304]	; (21a0 <tcc_get_config_defaults+0x140>)
    2070:	6062      	str	r2, [r4, #4]
	config->counter.clock_source           = GCLK_GENERATOR_0;
    2072:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
    2074:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
    2076:	7323      	strb	r3, [r4, #12]
	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
    2078:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
    207a:	7223      	strb	r3, [r4, #8]
	MREPEAT(TCC_NUM_CHANNELS,
    207c:	61e3      	str	r3, [r4, #28]
    207e:	6223      	str	r3, [r4, #32]
    2080:	6263      	str	r3, [r4, #36]	; 0x24
    2082:	62a3      	str	r3, [r4, #40]	; 0x28
	MREPEAT(TCC_NUM_CHANNELS,
    2084:	7523      	strb	r3, [r4, #20]
    2086:	7563      	strb	r3, [r4, #21]
    2088:	75a3      	strb	r3, [r4, #22]
    208a:	75e3      	strb	r3, [r4, #23]
	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
    208c:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
    208e:	7663      	strb	r3, [r4, #25]
	MREPEAT(TCC_NUM_CHANNELS,
    2090:	7423      	strb	r3, [r4, #16]
    2092:	7463      	strb	r3, [r4, #17]
    2094:	74a3      	strb	r3, [r4, #18]
    2096:	74e3      	strb	r3, [r4, #19]
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
    2098:	222c      	movs	r2, #44	; 0x2c
    209a:	54a3      	strb	r3, [r4, r2]
    209c:	3201      	adds	r2, #1
    209e:	54a3      	strb	r3, [r4, r2]
    20a0:	3201      	adds	r2, #1
    20a2:	54a3      	strb	r3, [r4, r2]
    20a4:	3201      	adds	r2, #1
    20a6:	54a3      	strb	r3, [r4, r2]
    20a8:	3201      	adds	r2, #1
    20aa:	54a3      	strb	r3, [r4, r2]
    20ac:	3201      	adds	r2, #1
    20ae:	54a3      	strb	r3, [r4, r2]
    20b0:	3201      	adds	r2, #1
    20b2:	54a3      	strb	r3, [r4, r2]
    20b4:	3201      	adds	r2, #1
    20b6:	54a3      	strb	r3, [r4, r2]
    20b8:	3201      	adds	r2, #1
    20ba:	54a3      	strb	r3, [r4, r2]
    20bc:	3201      	adds	r2, #1
    20be:	54a3      	strb	r3, [r4, r2]
    20c0:	3201      	adds	r2, #1
    20c2:	54a3      	strb	r3, [r4, r2]
    20c4:	3201      	adds	r2, #1
    20c6:	54a3      	strb	r3, [r4, r2]
    20c8:	3201      	adds	r2, #1
    20ca:	54a3      	strb	r3, [r4, r2]
    20cc:	3201      	adds	r2, #1
    20ce:	54a3      	strb	r3, [r4, r2]
    20d0:	3201      	adds	r2, #1
    20d2:	54a3      	strb	r3, [r4, r2]
    20d4:	3201      	adds	r2, #1
    20d6:	54a3      	strb	r3, [r4, r2]
    20d8:	3201      	adds	r2, #1
    20da:	54a3      	strb	r3, [r4, r2]
    20dc:	3201      	adds	r2, #1
    20de:	54a3      	strb	r3, [r4, r2]
    20e0:	3201      	adds	r2, #1
    20e2:	54a3      	strb	r3, [r4, r2]
    20e4:	3201      	adds	r2, #1
    20e6:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
    20e8:	3201      	adds	r2, #1
    20ea:	54a3      	strb	r3, [r4, r2]
    20ec:	3201      	adds	r2, #1
    20ee:	54a3      	strb	r3, [r4, r2]
    20f0:	3201      	adds	r2, #1
    20f2:	54a3      	strb	r3, [r4, r2]
    20f4:	3201      	adds	r2, #1
    20f6:	54a3      	strb	r3, [r4, r2]
    20f8:	3201      	adds	r2, #1
    20fa:	54a3      	strb	r3, [r4, r2]
    20fc:	3201      	adds	r2, #1
    20fe:	54a3      	strb	r3, [r4, r2]
    2100:	3201      	adds	r2, #1
    2102:	54a3      	strb	r3, [r4, r2]
    2104:	3201      	adds	r2, #1
    2106:	54a3      	strb	r3, [r4, r2]
    2108:	3201      	adds	r2, #1
    210a:	54a3      	strb	r3, [r4, r2]
    210c:	3201      	adds	r2, #1
    210e:	54a3      	strb	r3, [r4, r2]
    2110:	3201      	adds	r2, #1
    2112:	54a3      	strb	r3, [r4, r2]
    2114:	3201      	adds	r2, #1
    2116:	54a3      	strb	r3, [r4, r2]
    2118:	3201      	adds	r2, #1
    211a:	54a3      	strb	r3, [r4, r2]
    211c:	3201      	adds	r2, #1
    211e:	54a3      	strb	r3, [r4, r2]
    2120:	3201      	adds	r2, #1
    2122:	54a3      	strb	r3, [r4, r2]
    2124:	3201      	adds	r2, #1
    2126:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
    2128:	3201      	adds	r2, #1
    212a:	54a3      	strb	r3, [r4, r2]
    212c:	3201      	adds	r2, #1
    212e:	54a3      	strb	r3, [r4, r2]
    2130:	3201      	adds	r2, #1
    2132:	54a3      	strb	r3, [r4, r2]
    2134:	3201      	adds	r2, #1
    2136:	54a3      	strb	r3, [r4, r2]
    2138:	3201      	adds	r2, #1
    213a:	54a3      	strb	r3, [r4, r2]
    213c:	3201      	adds	r2, #1
    213e:	54a3      	strb	r3, [r4, r2]
    2140:	3201      	adds	r2, #1
    2142:	54a3      	strb	r3, [r4, r2]
    2144:	3201      	adds	r2, #1
    2146:	54a3      	strb	r3, [r4, r2]
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
    2148:	3241      	adds	r2, #65	; 0x41
    214a:	54a3      	strb	r3, [r4, r2]
    214c:	65a3      	str	r3, [r4, #88]	; 0x58
    214e:	67a3      	str	r3, [r4, #120]	; 0x78
    2150:	3201      	adds	r2, #1
    2152:	54a3      	strb	r3, [r4, r2]
    2154:	65e3      	str	r3, [r4, #92]	; 0x5c
    2156:	67e3      	str	r3, [r4, #124]	; 0x7c
    2158:	3201      	adds	r2, #1
    215a:	54a3      	strb	r3, [r4, r2]
    215c:	6623      	str	r3, [r4, #96]	; 0x60
    215e:	3a1a      	subs	r2, #26
    2160:	50a3      	str	r3, [r4, r2]
    2162:	321b      	adds	r2, #27
    2164:	54a3      	strb	r3, [r4, r2]
    2166:	6663      	str	r3, [r4, #100]	; 0x64
    2168:	3a17      	subs	r2, #23
    216a:	50a3      	str	r3, [r4, r2]
    216c:	3218      	adds	r2, #24
    216e:	54a3      	strb	r3, [r4, r2]
    2170:	66a3      	str	r3, [r4, #104]	; 0x68
    2172:	3a14      	subs	r2, #20
    2174:	50a3      	str	r3, [r4, r2]
    2176:	3215      	adds	r2, #21
    2178:	54a3      	strb	r3, [r4, r2]
    217a:	66e3      	str	r3, [r4, #108]	; 0x6c
    217c:	3a11      	subs	r2, #17
    217e:	50a3      	str	r3, [r4, r2]
    2180:	3212      	adds	r2, #18
    2182:	54a3      	strb	r3, [r4, r2]
    2184:	6723      	str	r3, [r4, #112]	; 0x70
    2186:	3a0e      	subs	r2, #14
    2188:	50a3      	str	r3, [r4, r2]
    218a:	320f      	adds	r2, #15
    218c:	54a3      	strb	r3, [r4, r2]
    218e:	6763      	str	r3, [r4, #116]	; 0x74
    2190:	3a0b      	subs	r2, #11
    2192:	50a3      	str	r3, [r4, r2]
	config->double_buffering_enabled  = true;
    2194:	2101      	movs	r1, #1
    2196:	320c      	adds	r2, #12
    2198:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
    219a:	3201      	adds	r2, #1
    219c:	54a3      	strb	r3, [r4, r2]
}
    219e:	bd10      	pop	{r4, pc}
    21a0:	00ffffff 	.word	0x00ffffff

000021a4 <tcc_init>:
{
    21a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    21a6:	46de      	mov	lr, fp
    21a8:	4657      	mov	r7, sl
    21aa:	464e      	mov	r6, r9
    21ac:	4645      	mov	r5, r8
    21ae:	b5e0      	push	{r5, r6, r7, lr}
    21b0:	b08b      	sub	sp, #44	; 0x2c
    21b2:	0007      	movs	r7, r0
    21b4:	000c      	movs	r4, r1
    21b6:	0016      	movs	r6, r2
	uint8_t module_index = _tcc_get_inst_index(hw);
    21b8:	0008      	movs	r0, r1
    21ba:	f7ff ff0f 	bl	1fdc <_tcc_get_inst_index>
			PM->APBCMASK.reg |= mask;
    21be:	4ac6      	ldr	r2, [pc, #792]	; (24d8 <tcc_init+0x334>)
    21c0:	6a13      	ldr	r3, [r2, #32]
    21c2:	2120      	movs	r1, #32
    21c4:	430b      	orrs	r3, r1
    21c6:	6213      	str	r3, [r2, #32]
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
    21c8:	6823      	ldr	r3, [r4, #0]
    21ca:	079b      	lsls	r3, r3, #30
    21cc:	d508      	bpl.n	21e0 <tcc_init+0x3c>
		return STATUS_ERR_DENIED;
    21ce:	251c      	movs	r5, #28
}
    21d0:	0028      	movs	r0, r5
    21d2:	b00b      	add	sp, #44	; 0x2c
    21d4:	bc3c      	pop	{r2, r3, r4, r5}
    21d6:	4690      	mov	r8, r2
    21d8:	4699      	mov	r9, r3
    21da:	46a2      	mov	sl, r4
    21dc:	46ab      	mov	fp, r5
    21de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
    21e0:	6823      	ldr	r3, [r4, #0]
    21e2:	2201      	movs	r2, #1
    21e4:	4013      	ands	r3, r2
    21e6:	d001      	beq.n	21ec <tcc_init+0x48>
		return STATUS_ERR_DENIED;
    21e8:	251c      	movs	r5, #28
    21ea:	e7f1      	b.n	21d0 <tcc_init+0x2c>
	if ((config->counter.count > count_max)
    21ec:	4abb      	ldr	r2, [pc, #748]	; (24dc <tcc_init+0x338>)
    21ee:	6831      	ldr	r1, [r6, #0]
    21f0:	4291      	cmp	r1, r2
    21f2:	d901      	bls.n	21f8 <tcc_init+0x54>
		return STATUS_ERR_INVALID_ARG;
    21f4:	2517      	movs	r5, #23
    21f6:	e7eb      	b.n	21d0 <tcc_init+0x2c>
		|| (config->counter.period > count_max)
    21f8:	6871      	ldr	r1, [r6, #4]
    21fa:	4291      	cmp	r1, r2
    21fc:	d901      	bls.n	2202 <tcc_init+0x5e>
		return STATUS_ERR_INVALID_ARG;
    21fe:	2517      	movs	r5, #23
    2200:	e7e6      	b.n	21d0 <tcc_init+0x2c>
    2202:	2100      	movs	r1, #0
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2204:	2903      	cmp	r1, #3
    2206:	dc09      	bgt.n	221c <tcc_init+0x78>
		if ((config->compare.match[i] > count_max)
    2208:	1d8a      	adds	r2, r1, #6
    220a:	0092      	lsls	r2, r2, #2
    220c:	18b2      	adds	r2, r6, r2
    220e:	6855      	ldr	r5, [r2, #4]
    2210:	4ab2      	ldr	r2, [pc, #712]	; (24dc <tcc_init+0x338>)
    2212:	4295      	cmp	r5, r2
    2214:	d900      	bls.n	2218 <tcc_init+0x74>
    2216:	e17b      	b.n	2510 <tcc_init+0x36c>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    2218:	3101      	adds	r1, #1
    221a:	e7f3      	b.n	2204 <tcc_init+0x60>
    221c:	2200      	movs	r2, #0
    221e:	e000      	b.n	2222 <tcc_init+0x7e>
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    2220:	3201      	adds	r2, #1
    2222:	2a07      	cmp	r2, #7
    2224:	ddfc      	ble.n	2220 <tcc_init+0x7c>
    2226:	2200      	movs	r2, #0
    2228:	2500      	movs	r5, #0
    222a:	e000      	b.n	222e <tcc_init+0x8a>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
    222c:	3201      	adds	r2, #1
    222e:	2a03      	cmp	r2, #3
    2230:	dc0a      	bgt.n	2248 <tcc_init+0xa4>
		if (config->capture.channel_function[i] ==
    2232:	18b1      	adds	r1, r6, r2
    2234:	7c09      	ldrb	r1, [r1, #16]
    2236:	2901      	cmp	r1, #1
    2238:	d1f8      	bne.n	222c <tcc_init+0x88>
			if (i > _tcc_cc_nums[module_index]) {
    223a:	2a04      	cmp	r2, #4
    223c:	dc23      	bgt.n	2286 <tcc_init+0xe2>
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
    223e:	2180      	movs	r1, #128	; 0x80
    2240:	0449      	lsls	r1, r1, #17
    2242:	4091      	lsls	r1, r2
    2244:	430d      	orrs	r5, r1
    2246:	e7f1      	b.n	222c <tcc_init+0x88>
	if (config->run_in_standby) {
    2248:	22a1      	movs	r2, #161	; 0xa1
    224a:	5cb2      	ldrb	r2, [r6, r2]
    224c:	2a00      	cmp	r2, #0
    224e:	d002      	beq.n	2256 <tcc_init+0xb2>
		ctrla |= TCC_CTRLA_RUNSTDBY;
    2250:	2280      	movs	r2, #128	; 0x80
    2252:	0112      	lsls	r2, r2, #4
    2254:	4315      	orrs	r5, r2
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
    2256:	7b32      	ldrb	r2, [r6, #12]
    2258:	0312      	lsls	r2, r2, #12
    225a:	432a      	orrs	r2, r5
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
    225c:	7af1      	ldrb	r1, [r6, #11]
    225e:	0209      	lsls	r1, r1, #8
    2260:	430a      	orrs	r2, r1
    2262:	9201      	str	r2, [sp, #4]
	return STATUS_OK;
    2264:	2500      	movs	r5, #0
	if (STATUS_OK != status) {
    2266:	2d00      	cmp	r5, #0
    2268:	d1b2      	bne.n	21d0 <tcc_init+0x2c>
	if (config->counter.oneshot) {
    226a:	7a32      	ldrb	r2, [r6, #8]
    226c:	2a00      	cmp	r2, #0
    226e:	d10e      	bne.n	228e <tcc_init+0xea>
	uint8_t ctrlb = 0;
    2270:	9204      	str	r2, [sp, #16]
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
    2272:	7a72      	ldrb	r2, [r6, #9]
    2274:	2a01      	cmp	r2, #1
    2276:	d00d      	beq.n	2294 <tcc_init+0xf0>
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2278:	2200      	movs	r2, #0
    227a:	9505      	str	r5, [sp, #20]
    227c:	9702      	str	r7, [sp, #8]
    227e:	46a4      	mov	ip, r4
    2280:	4699      	mov	r9, r3
    2282:	9003      	str	r0, [sp, #12]
    2284:	e047      	b.n	2316 <tcc_init+0x172>
	uint32_t ctrla = 0;
    2286:	2200      	movs	r2, #0
    2288:	9201      	str	r2, [sp, #4]
				return STATUS_ERR_INVALID_ARG;
    228a:	2517      	movs	r5, #23
    228c:	e7eb      	b.n	2266 <tcc_init+0xc2>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
    228e:	2204      	movs	r2, #4
    2290:	9204      	str	r2, [sp, #16]
    2292:	e7ee      	b.n	2272 <tcc_init+0xce>
		ctrlb |= TCC_CTRLBSET_DIR;
    2294:	9904      	ldr	r1, [sp, #16]
    2296:	4311      	orrs	r1, r2
    2298:	b2ca      	uxtb	r2, r1
    229a:	9204      	str	r2, [sp, #16]
    229c:	e7ec      	b.n	2278 <tcc_init+0xd4>
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    229e:	464d      	mov	r5, r9
    22a0:	e05b      	b.n	235a <tcc_init+0x1b6>
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    22a2:	464d      	mov	r5, r9
    22a4:	e063      	b.n	236e <tcc_init+0x1ca>
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    22a6:	464d      	mov	r5, r9
    22a8:	4329      	orrs	r1, r5
    22aa:	468a      	mov	sl, r1
				| TCC_FCTRLA_SRC(cfg->source)
    22ac:	0090      	lsls	r0, r2, #2
    22ae:	1881      	adds	r1, r0, r2
    22b0:	004d      	lsls	r5, r1, #1
    22b2:	1975      	adds	r5, r6, r5
    22b4:	0029      	movs	r1, r5
    22b6:	3131      	adds	r1, #49	; 0x31
    22b8:	7809      	ldrb	r1, [r1, #0]
    22ba:	468b      	mov	fp, r1
    22bc:	2103      	movs	r1, #3
    22be:	465f      	mov	r7, fp
    22c0:	4039      	ands	r1, r7
    22c2:	4657      	mov	r7, sl
    22c4:	4339      	orrs	r1, r7
				| TCC_FCTRLA_BLANK(cfg->blanking)
    22c6:	2732      	movs	r7, #50	; 0x32
    22c8:	46ba      	mov	sl, r7
    22ca:	44aa      	add	sl, r5
    22cc:	4657      	mov	r7, sl
    22ce:	783f      	ldrb	r7, [r7, #0]
    22d0:	017f      	lsls	r7, r7, #5
    22d2:	46bb      	mov	fp, r7
    22d4:	2760      	movs	r7, #96	; 0x60
    22d6:	46ba      	mov	sl, r7
    22d8:	465f      	mov	r7, fp
    22da:	4654      	mov	r4, sl
    22dc:	4027      	ands	r7, r4
    22de:	4339      	orrs	r1, r7
				| TCC_FCTRLA_HALT(cfg->halt_action)
    22e0:	2433      	movs	r4, #51	; 0x33
    22e2:	46a2      	mov	sl, r4
    22e4:	44aa      	add	sl, r5
    22e6:	4654      	mov	r4, sl
    22e8:	7824      	ldrb	r4, [r4, #0]
    22ea:	0224      	lsls	r4, r4, #8
    22ec:	46a2      	mov	sl, r4
    22ee:	24c0      	movs	r4, #192	; 0xc0
    22f0:	00a4      	lsls	r4, r4, #2
    22f2:	4657      	mov	r7, sl
    22f4:	4027      	ands	r7, r4
    22f6:	4339      	orrs	r1, r7
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
    22f8:	3534      	adds	r5, #52	; 0x34
    22fa:	782d      	ldrb	r5, [r5, #0]
    22fc:	032d      	lsls	r5, r5, #12
    22fe:	24e0      	movs	r4, #224	; 0xe0
    2300:	01e4      	lsls	r4, r4, #7
    2302:	4025      	ands	r5, r4
    2304:	4329      	orrs	r1, r5
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
    2306:	029d      	lsls	r5, r3, #10
    2308:	23c0      	movs	r3, #192	; 0xc0
    230a:	011b      	lsls	r3, r3, #4
    230c:	401d      	ands	r5, r3
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    230e:	430d      	orrs	r5, r1
		value_buffer[i] = fault;
    2310:	a908      	add	r1, sp, #32
    2312:	500d      	str	r5, [r1, r0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
    2314:	3201      	adds	r2, #1
    2316:	2a01      	cmp	r2, #1
    2318:	dc34      	bgt.n	2384 <tcc_init+0x1e0>
		if (cfg->capture_channel >= cc_num) {
    231a:	0095      	lsls	r5, r2, #2
    231c:	18ad      	adds	r5, r5, r2
    231e:	0069      	lsls	r1, r5, #1
    2320:	1871      	adds	r1, r6, r1
    2322:	3135      	adds	r1, #53	; 0x35
    2324:	780b      	ldrb	r3, [r1, #0]
    2326:	2b03      	cmp	r3, #3
    2328:	d836      	bhi.n	2398 <tcc_init+0x1f4>
		if (cfg->filter_value > 0xF) {
    232a:	0095      	lsls	r5, r2, #2
    232c:	18ad      	adds	r5, r5, r2
    232e:	0069      	lsls	r1, r5, #1
    2330:	000d      	movs	r5, r1
    2332:	1871      	adds	r1, r6, r1
    2334:	312c      	adds	r1, #44	; 0x2c
    2336:	7809      	ldrb	r1, [r1, #0]
    2338:	290f      	cmp	r1, #15
    233a:	d832      	bhi.n	23a2 <tcc_init+0x1fe>
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
    233c:	0609      	lsls	r1, r1, #24
    233e:	20f0      	movs	r0, #240	; 0xf0
    2340:	0500      	lsls	r0, r0, #20
    2342:	4008      	ands	r0, r1
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
    2344:	1975      	adds	r5, r6, r5
    2346:	0029      	movs	r1, r5
    2348:	312d      	adds	r1, #45	; 0x2d
    234a:	7809      	ldrb	r1, [r1, #0]
    234c:	0409      	lsls	r1, r1, #16
    234e:	4301      	orrs	r1, r0
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
    2350:	352e      	adds	r5, #46	; 0x2e
    2352:	782d      	ldrb	r5, [r5, #0]
    2354:	2d00      	cmp	r5, #0
    2356:	d0a2      	beq.n	229e <tcc_init+0xfa>
    2358:	2580      	movs	r5, #128	; 0x80
    235a:	4329      	orrs	r1, r5
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
    235c:	0090      	lsls	r0, r2, #2
    235e:	1880      	adds	r0, r0, r2
    2360:	0045      	lsls	r5, r0, #1
    2362:	1975      	adds	r5, r6, r5
    2364:	352f      	adds	r5, #47	; 0x2f
    2366:	782d      	ldrb	r5, [r5, #0]
    2368:	2d00      	cmp	r5, #0
    236a:	d09a      	beq.n	22a2 <tcc_init+0xfe>
    236c:	2508      	movs	r5, #8
    236e:	4329      	orrs	r1, r5
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
    2370:	0090      	lsls	r0, r2, #2
    2372:	1880      	adds	r0, r0, r2
    2374:	0045      	lsls	r5, r0, #1
    2376:	1975      	adds	r5, r6, r5
    2378:	3530      	adds	r5, #48	; 0x30
    237a:	782d      	ldrb	r5, [r5, #0]
    237c:	2d00      	cmp	r5, #0
    237e:	d092      	beq.n	22a6 <tcc_init+0x102>
    2380:	2510      	movs	r5, #16
    2382:	e791      	b.n	22a8 <tcc_init+0x104>
    2384:	9d05      	ldr	r5, [sp, #20]
    2386:	9f02      	ldr	r7, [sp, #8]
    2388:	4664      	mov	r4, ip
    238a:	9803      	ldr	r0, [sp, #12]
	if (STATUS_OK != status) {
    238c:	2d00      	cmp	r5, #0
    238e:	d000      	beq.n	2392 <tcc_init+0x1ee>
    2390:	e71e      	b.n	21d0 <tcc_init+0x2c>
    2392:	2300      	movs	r3, #0
    2394:	0019      	movs	r1, r3
    2396:	e00e      	b.n	23b6 <tcc_init+0x212>
    2398:	9f02      	ldr	r7, [sp, #8]
    239a:	4664      	mov	r4, ip
    239c:	9803      	ldr	r0, [sp, #12]
			return STATUS_ERR_INVALID_ARG;
    239e:	2517      	movs	r5, #23
    23a0:	e7f4      	b.n	238c <tcc_init+0x1e8>
    23a2:	9f02      	ldr	r7, [sp, #8]
    23a4:	4664      	mov	r4, ip
    23a6:	9803      	ldr	r0, [sp, #12]
			return STATUS_ERR_INVALID_ARG;
    23a8:	2517      	movs	r5, #23
    23aa:	e7ef      	b.n	238c <tcc_init+0x1e8>
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
    23ac:	2202      	movs	r2, #2
    23ae:	32ff      	adds	r2, #255	; 0xff
    23b0:	409a      	lsls	r2, r3
    23b2:	4311      	orrs	r1, r2
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
    23b4:	3301      	adds	r3, #1
    23b6:	2b07      	cmp	r3, #7
    23b8:	d815      	bhi.n	23e6 <tcc_init+0x242>
		if (config->wave_ext.invert[i]) {
    23ba:	18f2      	adds	r2, r6, r3
    23bc:	3250      	adds	r2, #80	; 0x50
    23be:	7812      	ldrb	r2, [r2, #0]
    23c0:	2a00      	cmp	r2, #0
    23c2:	d003      	beq.n	23cc <tcc_init+0x228>
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
    23c4:	2280      	movs	r2, #128	; 0x80
    23c6:	0252      	lsls	r2, r2, #9
    23c8:	409a      	lsls	r2, r3
    23ca:	4311      	orrs	r1, r2
		if (config->wave_ext.non_recoverable_fault[i].output !=
    23cc:	001a      	movs	r2, r3
    23ce:	321c      	adds	r2, #28
    23d0:	0052      	lsls	r2, r2, #1
    23d2:	18b2      	adds	r2, r6, r2
    23d4:	7a52      	ldrb	r2, [r2, #9]
    23d6:	2a00      	cmp	r2, #0
    23d8:	d0ec      	beq.n	23b4 <tcc_init+0x210>
			if (config->wave_ext.non_recoverable_fault[i].output ==
    23da:	2a02      	cmp	r2, #2
    23dc:	d0e6      	beq.n	23ac <tcc_init+0x208>
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
    23de:	2201      	movs	r2, #1
    23e0:	409a      	lsls	r2, r3
    23e2:	4311      	orrs	r1, r2
    23e4:	e7e6      	b.n	23b4 <tcc_init+0x210>
    23e6:	4688      	mov	r8, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    23e8:	7e73      	ldrb	r3, [r6, #25]
    23ea:	011b      	lsls	r3, r3, #4
    23ec:	2230      	movs	r2, #48	; 0x30
    23ee:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
    23f0:	7e31      	ldrb	r1, [r6, #24]
    23f2:	2307      	movs	r3, #7
    23f4:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
    23f6:	431a      	orrs	r2, r3
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    23f8:	2300      	movs	r3, #0
    23fa:	0011      	movs	r1, r2
    23fc:	e000      	b.n	2400 <tcc_init+0x25c>
    23fe:	3301      	adds	r3, #1
    2400:	2b03      	cmp	r3, #3
    2402:	dc08      	bgt.n	2416 <tcc_init+0x272>
		if (wav_cfg->wave_polarity[n]) {
    2404:	18f2      	adds	r2, r6, r3
    2406:	7d12      	ldrb	r2, [r2, #20]
    2408:	2a00      	cmp	r2, #0
    240a:	d0f8      	beq.n	23fe <tcc_init+0x25a>
			wave |= (TCC_WAVE_POL0 << n);
    240c:	2280      	movs	r2, #128	; 0x80
    240e:	0252      	lsls	r2, r2, #9
    2410:	409a      	lsls	r2, r3
    2412:	4311      	orrs	r1, r2
    2414:	e7f3      	b.n	23fe <tcc_init+0x25a>
    2416:	4689      	mov	r9, r1
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
    2418:	2300      	movs	r3, #0
    241a:	e004      	b.n	2426 <tcc_init+0x282>
		module_inst->callback[i] = NULL;
    241c:	009a      	lsls	r2, r3, #2
    241e:	18ba      	adds	r2, r7, r2
    2420:	2100      	movs	r1, #0
    2422:	6051      	str	r1, [r2, #4]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2424:	3301      	adds	r3, #1
    2426:	2b0b      	cmp	r3, #11
    2428:	ddf8      	ble.n	241c <tcc_init+0x278>
	module_inst->register_callback_mask = 0;
    242a:	2300      	movs	r3, #0
    242c:	637b      	str	r3, [r7, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
    242e:	63bb      	str	r3, [r7, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
    2430:	0080      	lsls	r0, r0, #2
    2432:	4b2b      	ldr	r3, [pc, #172]	; (24e0 <tcc_init+0x33c>)
    2434:	50c7      	str	r7, [r0, r3]
	module_inst->hw = hw;
    2436:	603c      	str	r4, [r7, #0]
	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    2438:	23a0      	movs	r3, #160	; 0xa0
    243a:	5cf2      	ldrb	r2, [r6, r3]
    243c:	3b64      	subs	r3, #100	; 0x64
    243e:	54fa      	strb	r2, [r7, r3]
	gclk_chan_config.source_generator = config->counter.clock_source;
    2440:	7ab3      	ldrb	r3, [r6, #10]
    2442:	a907      	add	r1, sp, #28
    2444:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
    2446:	2011      	movs	r0, #17
    2448:	f7ff fd3c 	bl	1ec4 <system_gclk_chan_set_config>
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
    244c:	2011      	movs	r0, #17
    244e:	f7ff fcfd 	bl	1e4c <system_gclk_chan_enable>
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
    2452:	2700      	movs	r7, #0
    2454:	e000      	b.n	2458 <tcc_init+0x2b4>
    2456:	3701      	adds	r7, #1
    2458:	2f07      	cmp	r7, #7
    245a:	dc17      	bgt.n	248c <tcc_init+0x2e8>
		if (!config->pins.enable_wave_out_pin[i]) {
    245c:	19f3      	adds	r3, r6, r7
    245e:	3398      	adds	r3, #152	; 0x98
    2460:	781b      	ldrb	r3, [r3, #0]
    2462:	2b00      	cmp	r3, #0
    2464:	d0f7      	beq.n	2456 <tcc_init+0x2b2>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2466:	2201      	movs	r2, #1
    2468:	ab06      	add	r3, sp, #24
    246a:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    246c:	2300      	movs	r3, #0
    246e:	a906      	add	r1, sp, #24
    2470:	70cb      	strb	r3, [r1, #3]
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
    2472:	003b      	movs	r3, r7
    2474:	331e      	adds	r3, #30
    2476:	009b      	lsls	r3, r3, #2
    2478:	599b      	ldr	r3, [r3, r6]
    247a:	700b      	strb	r3, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    247c:	704a      	strb	r2, [r1, #1]
				config->pins.wave_out_pin[i], &pin_config);
    247e:	003b      	movs	r3, r7
    2480:	3316      	adds	r3, #22
    2482:	009b      	lsls	r3, r3, #2
		system_pinmux_pin_set_config(
    2484:	5cf0      	ldrb	r0, [r6, r3]
    2486:	f7ff fd87 	bl	1f98 <system_pinmux_pin_set_config>
    248a:	e7e4      	b.n	2456 <tcc_init+0x2b2>
	hw->CTRLA.reg = ctrla;
    248c:	9b01      	ldr	r3, [sp, #4]
    248e:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    2490:	68a3      	ldr	r3, [r4, #8]
    2492:	075b      	lsls	r3, r3, #29
    2494:	d4fc      	bmi.n	2490 <tcc_init+0x2ec>
	hw->CTRLBCLR.reg = 0xFF;
    2496:	23ff      	movs	r3, #255	; 0xff
    2498:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
    249a:	68a3      	ldr	r3, [r4, #8]
    249c:	075b      	lsls	r3, r3, #29
    249e:	d4fc      	bmi.n	249a <tcc_init+0x2f6>
	hw->CTRLBSET.reg = ctrlb;
    24a0:	466b      	mov	r3, sp
    24a2:	7c1b      	ldrb	r3, [r3, #16]
    24a4:	7163      	strb	r3, [r4, #5]
	hw->FCTRLA.reg = faults[0];
    24a6:	9b08      	ldr	r3, [sp, #32]
    24a8:	60e3      	str	r3, [r4, #12]
	hw->FCTRLB.reg = faults[1];
    24aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    24ac:	6123      	str	r3, [r4, #16]
	hw->DRVCTRL.reg = drvctrl;
    24ae:	4643      	mov	r3, r8
    24b0:	61a3      	str	r3, [r4, #24]
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
    24b2:	68a2      	ldr	r2, [r4, #8]
    24b4:	4b0b      	ldr	r3, [pc, #44]	; (24e4 <tcc_init+0x340>)
    24b6:	421a      	tst	r2, r3
    24b8:	d1fb      	bne.n	24b2 <tcc_init+0x30e>
	hw->WAVE.reg = waves[0];
    24ba:	464b      	mov	r3, r9
    24bc:	63e3      	str	r3, [r4, #60]	; 0x3c
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
    24be:	68a3      	ldr	r3, [r4, #8]
    24c0:	06db      	lsls	r3, r3, #27
    24c2:	d4fc      	bmi.n	24be <tcc_init+0x31a>
	hw->COUNT.reg = config->counter.count;
    24c4:	6833      	ldr	r3, [r6, #0]
    24c6:	6363      	str	r3, [r4, #52]	; 0x34
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
    24c8:	68a2      	ldr	r2, [r4, #8]
    24ca:	4b07      	ldr	r3, [pc, #28]	; (24e8 <tcc_init+0x344>)
    24cc:	421a      	tst	r2, r3
    24ce:	d1fb      	bne.n	24c8 <tcc_init+0x324>
	hw->PER.reg = (config->counter.period);
    24d0:	6873      	ldr	r3, [r6, #4]
    24d2:	6423      	str	r3, [r4, #64]	; 0x40
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    24d4:	2100      	movs	r1, #0
    24d6:	e018      	b.n	250a <tcc_init+0x366>
    24d8:	40000400 	.word	0x40000400
    24dc:	00ffffff 	.word	0x00ffffff
    24e0:	20000220 	.word	0x20000220
    24e4:	00020040 	.word	0x00020040
    24e8:	00040080 	.word	0x00040080
		while (hw->SYNCBUSY.reg & (
    24ec:	68a2      	ldr	r2, [r4, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
    24ee:	4b09      	ldr	r3, [pc, #36]	; (2514 <tcc_init+0x370>)
    24f0:	408b      	lsls	r3, r1
		while (hw->SYNCBUSY.reg & (
    24f2:	4213      	tst	r3, r2
    24f4:	d1fa      	bne.n	24ec <tcc_init+0x348>
		hw->CC[i].reg = (config->compare.match[i]);
    24f6:	1d8b      	adds	r3, r1, #6
    24f8:	009b      	lsls	r3, r3, #2
    24fa:	18f3      	adds	r3, r6, r3
    24fc:	685a      	ldr	r2, [r3, #4]
    24fe:	000b      	movs	r3, r1
    2500:	3310      	adds	r3, #16
    2502:	009b      	lsls	r3, r3, #2
    2504:	18e3      	adds	r3, r4, r3
    2506:	605a      	str	r2, [r3, #4]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
    2508:	3101      	adds	r1, #1
    250a:	2903      	cmp	r1, #3
    250c:	ddee      	ble.n	24ec <tcc_init+0x348>
    250e:	e65f      	b.n	21d0 <tcc_init+0x2c>
			return STATUS_ERR_INVALID_ARG;
    2510:	2517      	movs	r5, #23
    2512:	e65d      	b.n	21d0 <tcc_init+0x2c>
    2514:	00080100 	.word	0x00080100

00002518 <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
    2518:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
    251a:	233c      	movs	r3, #60	; 0x3c
    251c:	5cc3      	ldrb	r3, [r0, r3]
    251e:	f7ff fd6b 	bl	1ff8 <_tcc_set_compare_value>
			module_inst->double_buffering_enabled);
}
    2522:	bd10      	pop	{r4, pc}

00002524 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
    2526:	0080      	lsls	r0, r0, #2
    2528:	4b0c      	ldr	r3, [pc, #48]	; (255c <_tcc_interrupt_handler+0x38>)
    252a:	58c7      	ldr	r7, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    252c:	683b      	ldr	r3, [r7, #0]
    252e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    2530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2532:	401e      	ands	r6, r3
    2534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2536:	401e      	ands	r6, r3
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2538:	2400      	movs	r4, #0
    253a:	e000      	b.n	253e <_tcc_interrupt_handler+0x1a>
    253c:	3401      	adds	r4, #1
    253e:	2c0b      	cmp	r4, #11
    2540:	dc0b      	bgt.n	255a <_tcc_interrupt_handler+0x36>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2542:	00a3      	lsls	r3, r4, #2
    2544:	4a06      	ldr	r2, [pc, #24]	; (2560 <_tcc_interrupt_handler+0x3c>)
    2546:	589d      	ldr	r5, [r3, r2]
    2548:	4235      	tst	r5, r6
    254a:	d0f7      	beq.n	253c <_tcc_interrupt_handler+0x18>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    254c:	18fb      	adds	r3, r7, r3
    254e:	685b      	ldr	r3, [r3, #4]
    2550:	0038      	movs	r0, r7
    2552:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    2554:	683b      	ldr	r3, [r7, #0]
    2556:	62dd      	str	r5, [r3, #44]	; 0x2c
    2558:	e7f0      	b.n	253c <_tcc_interrupt_handler+0x18>
		}
	}
}
    255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    255c:	20000220 	.word	0x20000220
    2560:	00002eec 	.word	0x00002eec

00002564 <TCC0_Handler>:
MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    2564:	b510      	push	{r4, lr}
    2566:	2000      	movs	r0, #0
    2568:	f7ff ffdc 	bl	2524 <_tcc_interrupt_handler>
    256c:	bd10      	pop	{r4, pc}

0000256e <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    256e:	1c93      	adds	r3, r2, #2
    2570:	009b      	lsls	r3, r3, #2
    2572:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    2574:	2a02      	cmp	r2, #2
    2576:	d009      	beq.n	258c <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    2578:	2a03      	cmp	r2, #3
    257a:	d00c      	beq.n	2596 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    257c:	2301      	movs	r3, #1
    257e:	4093      	lsls	r3, r2
    2580:	001a      	movs	r2, r3
    2582:	7e03      	ldrb	r3, [r0, #24]
    2584:	4313      	orrs	r3, r2
    2586:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    2588:	2000      	movs	r0, #0
    258a:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    258c:	7e03      	ldrb	r3, [r0, #24]
    258e:	2210      	movs	r2, #16
    2590:	4313      	orrs	r3, r2
    2592:	7603      	strb	r3, [r0, #24]
    2594:	e7f8      	b.n	2588 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    2596:	7e03      	ldrb	r3, [r0, #24]
    2598:	2220      	movs	r2, #32
    259a:	4313      	orrs	r3, r2
    259c:	7603      	strb	r3, [r0, #24]
    259e:	e7f3      	b.n	2588 <tc_register_callback+0x1a>

000025a0 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    25a0:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    25a2:	0080      	lsls	r0, r0, #2
    25a4:	4b16      	ldr	r3, [pc, #88]	; (2600 <_tc_interrupt_handler+0x60>)
    25a6:	58c5      	ldr	r5, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    25a8:	682b      	ldr	r3, [r5, #0]
    25aa:	7b9c      	ldrb	r4, [r3, #14]
			module->register_callback_mask &
    25ac:	7e2a      	ldrb	r2, [r5, #24]
			module->enable_callback_mask;
    25ae:	7e6b      	ldrb	r3, [r5, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    25b0:	4014      	ands	r4, r2
    25b2:	401c      	ands	r4, r3

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    25b4:	07e3      	lsls	r3, r4, #31
    25b6:	d406      	bmi.n	25c6 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    25b8:	07a3      	lsls	r3, r4, #30
    25ba:	d40b      	bmi.n	25d4 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    25bc:	06e3      	lsls	r3, r4, #27
    25be:	d410      	bmi.n	25e2 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    25c0:	06a3      	lsls	r3, r4, #26
    25c2:	d415      	bmi.n	25f0 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    25c4:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    25c6:	0028      	movs	r0, r5
    25c8:	68ab      	ldr	r3, [r5, #8]
    25ca:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    25cc:	2301      	movs	r3, #1
    25ce:	682a      	ldr	r2, [r5, #0]
    25d0:	7393      	strb	r3, [r2, #14]
    25d2:	e7f1      	b.n	25b8 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    25d4:	0028      	movs	r0, r5
    25d6:	68eb      	ldr	r3, [r5, #12]
    25d8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    25da:	2302      	movs	r3, #2
    25dc:	682a      	ldr	r2, [r5, #0]
    25de:	7393      	strb	r3, [r2, #14]
    25e0:	e7ec      	b.n	25bc <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    25e2:	0028      	movs	r0, r5
    25e4:	692b      	ldr	r3, [r5, #16]
    25e6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    25e8:	2310      	movs	r3, #16
    25ea:	682a      	ldr	r2, [r5, #0]
    25ec:	7393      	strb	r3, [r2, #14]
    25ee:	e7e7      	b.n	25c0 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    25f0:	0028      	movs	r0, r5
    25f2:	696b      	ldr	r3, [r5, #20]
    25f4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    25f6:	682b      	ldr	r3, [r5, #0]
    25f8:	2220      	movs	r2, #32
    25fa:	739a      	strb	r2, [r3, #14]
}
    25fc:	e7e2      	b.n	25c4 <_tc_interrupt_handler+0x24>
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	20000224 	.word	0x20000224

00002604 <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2604:	b510      	push	{r4, lr}
    2606:	2000      	movs	r0, #0
    2608:	f7ff ffca 	bl	25a0 <_tc_interrupt_handler>
    260c:	bd10      	pop	{r4, pc}

0000260e <TC2_Handler>:
    260e:	b510      	push	{r4, lr}
    2610:	2001      	movs	r0, #1
    2612:	f7ff ffc5 	bl	25a0 <_tc_interrupt_handler>
    2616:	bd10      	pop	{r4, pc}

00002618 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    2618:	b510      	push	{r4, lr}
    261a:	b082      	sub	sp, #8
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    261c:	466a      	mov	r2, sp
    261e:	4b09      	ldr	r3, [pc, #36]	; (2644 <_tc_get_inst_index+0x2c>)
    2620:	cb12      	ldmia	r3!, {r1, r4}
    2622:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2624:	2300      	movs	r3, #0
    2626:	2b01      	cmp	r3, #1
    2628:	d808      	bhi.n	263c <_tc_get_inst_index+0x24>
		if (hw == tc_modules[i]) {
    262a:	009a      	lsls	r2, r3, #2
    262c:	4669      	mov	r1, sp
    262e:	5852      	ldr	r2, [r2, r1]
    2630:	4282      	cmp	r2, r0
    2632:	d001      	beq.n	2638 <_tc_get_inst_index+0x20>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2634:	3301      	adds	r3, #1
    2636:	e7f6      	b.n	2626 <_tc_get_inst_index+0xe>
			return i;
    2638:	b2d8      	uxtb	r0, r3
    263a:	e000      	b.n	263e <_tc_get_inst_index+0x26>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    263c:	2000      	movs	r0, #0
}
    263e:	b002      	add	sp, #8
    2640:	bd10      	pop	{r4, pc}
    2642:	46c0      	nop			; (mov r8, r8)
    2644:	00002f1c 	.word	0x00002f1c

00002648 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    264a:	b085      	sub	sp, #20
    264c:	0004      	movs	r4, r0
    264e:	000d      	movs	r5, r1
    2650:	0016      	movs	r6, r2
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    2652:	0008      	movs	r0, r1
    2654:	f7ff ffe0 	bl	2618 <_tc_get_inst_index>
    2658:	0007      	movs	r7, r0

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    265a:	4b87      	ldr	r3, [pc, #540]	; (2878 <tc_init+0x230>)
    265c:	8919      	ldrh	r1, [r3, #8]
    265e:	aa03      	add	r2, sp, #12
    2660:	8011      	strh	r1, [r2, #0]
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2662:	68db      	ldr	r3, [r3, #12]
    2664:	9302      	str	r3, [sp, #8]
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2666:	2300      	movs	r3, #0
    2668:	e005      	b.n	2676 <tc_init+0x2e>
		module_inst->callback[i]        = NULL;
    266a:	1c9a      	adds	r2, r3, #2
    266c:	0092      	lsls	r2, r2, #2
    266e:	2100      	movs	r1, #0
    2670:	5111      	str	r1, [r2, r4]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    2672:	3301      	adds	r3, #1
    2674:	b2db      	uxtb	r3, r3
    2676:	2b03      	cmp	r3, #3
    2678:	d9f7      	bls.n	266a <tc_init+0x22>
	}
	module_inst->register_callback_mask     = 0x00;
    267a:	2300      	movs	r3, #0
    267c:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    267e:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    2680:	00bb      	lsls	r3, r7, #2
    2682:	4a7e      	ldr	r2, [pc, #504]	; (287c <tc_init+0x234>)
    2684:	509c      	str	r4, [r3, r2]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    2686:	6025      	str	r5, [r4, #0]
#if SAMD09 || SAMD10 || SAMD11 || SAMHA1 || SAMHA0
	/* Check if even numbered TC modules are being configured in 32-bit
	 * counter size. Only odd numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2688:	78b3      	ldrb	r3, [r6, #2]
    268a:	2b08      	cmp	r3, #8
    268c:	d006      	beq.n	269c <tc_init+0x54>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    268e:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2690:	882b      	ldrh	r3, [r5, #0]
    2692:	07db      	lsls	r3, r3, #31
    2694:	d506      	bpl.n	26a4 <tc_init+0x5c>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    2696:	2005      	movs	r0, #5
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    2698:	b005      	add	sp, #20
    269a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    269c:	07fa      	lsls	r2, r7, #31
    269e:	d5f6      	bpl.n	268e <tc_init+0x46>
		return STATUS_ERR_INVALID_ARG;
    26a0:	2017      	movs	r0, #23
    26a2:	e7f9      	b.n	2698 <tc_init+0x50>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    26a4:	7beb      	ldrb	r3, [r5, #15]
    26a6:	06db      	lsls	r3, r3, #27
    26a8:	d501      	bpl.n	26ae <tc_init+0x66>
		return STATUS_ERR_DENIED;
    26aa:	201c      	movs	r0, #28
    26ac:	e7f4      	b.n	2698 <tc_init+0x50>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    26ae:	882b      	ldrh	r3, [r5, #0]
    26b0:	079b      	lsls	r3, r3, #30
    26b2:	d501      	bpl.n	26b8 <tc_init+0x70>
		return STATUS_ERR_DENIED;
    26b4:	201c      	movs	r0, #28
    26b6:	e7ef      	b.n	2698 <tc_init+0x50>
	if (config->pwm_channel[0].enabled) {
    26b8:	7c33      	ldrb	r3, [r6, #16]
    26ba:	2b00      	cmp	r3, #0
    26bc:	d147      	bne.n	274e <tc_init+0x106>
	if (config->pwm_channel[1].enabled) {
    26be:	7f33      	ldrb	r3, [r6, #28]
    26c0:	2b00      	cmp	r3, #0
    26c2:	d150      	bne.n	2766 <tc_init+0x11e>
			inst_pm_apbmask[instance]);
    26c4:	007b      	lsls	r3, r7, #1
    26c6:	aa02      	add	r2, sp, #8
    26c8:	5a9b      	ldrh	r3, [r3, r2]
    26ca:	4a6d      	ldr	r2, [pc, #436]	; (2880 <tc_init+0x238>)
    26cc:	6a11      	ldr	r1, [r2, #32]
    26ce:	430b      	orrs	r3, r1
    26d0:	6213      	str	r3, [r2, #32]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    26d2:	78b3      	ldrb	r3, [r6, #2]
    26d4:	2b08      	cmp	r3, #8
    26d6:	d056      	beq.n	2786 <tc_init+0x13e>
	gclk_chan_config.source_generator = config->clock_source;
    26d8:	7833      	ldrb	r3, [r6, #0]
    26da:	466a      	mov	r2, sp
    26dc:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    26de:	ab03      	add	r3, sp, #12
    26e0:	5ddf      	ldrb	r7, [r3, r7]
    26e2:	4669      	mov	r1, sp
    26e4:	0038      	movs	r0, r7
    26e6:	f7ff fbed 	bl	1ec4 <system_gclk_chan_set_config>
	system_gclk_chan_enable(inst_gclk_id[instance]);
    26ea:	0038      	movs	r0, r7
    26ec:	f7ff fbae 	bl	1e4c <system_gclk_chan_enable>
			(uint32_t)config->counter_size |
    26f0:	78b3      	ldrb	r3, [r6, #2]
			(uint32_t)config->wave_generation |
    26f2:	79b1      	ldrb	r1, [r6, #6]
			(uint32_t)config->reload_action |
    26f4:	8932      	ldrh	r2, [r6, #8]
			(uint32_t)config->wave_generation |
    26f6:	430b      	orrs	r3, r1
    26f8:	431a      	orrs	r2, r3
			(uint32_t)config->clock_prescaler;
    26fa:	88b3      	ldrh	r3, [r6, #4]
	ctrla_tmp =
    26fc:	431a      	orrs	r2, r3
	if (config->run_in_standby) {
    26fe:	7873      	ldrb	r3, [r6, #1]
    2700:	2b00      	cmp	r3, #0
    2702:	d002      	beq.n	270a <tc_init+0xc2>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2704:	2380      	movs	r3, #128	; 0x80
    2706:	011b      	lsls	r3, r3, #4
    2708:	431a      	orrs	r2, r3
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    270a:	6823      	ldr	r3, [r4, #0]
    270c:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    270e:	b25b      	sxtb	r3, r3
    2710:	2b00      	cmp	r3, #0
    2712:	dbfa      	blt.n	270a <tc_init+0xc2>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2714:	802a      	strh	r2, [r5, #0]
	if (config->oneshot) {
    2716:	7b73      	ldrb	r3, [r6, #13]
    2718:	2b00      	cmp	r3, #0
    271a:	d13d      	bne.n	2798 <tc_init+0x150>
	uint8_t ctrlbset_tmp = 0;
    271c:	2200      	movs	r2, #0
	if (config->count_direction) {
    271e:	7bb3      	ldrb	r3, [r6, #14]
    2720:	2b00      	cmp	r3, #0
    2722:	d002      	beq.n	272a <tc_init+0xe2>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    2724:	2301      	movs	r3, #1
    2726:	431a      	orrs	r2, r3
    2728:	b2d2      	uxtb	r2, r2
    272a:	6823      	ldr	r3, [r4, #0]
    272c:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    272e:	b25b      	sxtb	r3, r3
    2730:	2b00      	cmp	r3, #0
    2732:	dbfa      	blt.n	272a <tc_init+0xe2>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    2734:	23ff      	movs	r3, #255	; 0xff
    2736:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    2738:	2a00      	cmp	r2, #0
    273a:	d005      	beq.n	2748 <tc_init+0x100>
    273c:	6823      	ldr	r3, [r4, #0]
    273e:	7bdb      	ldrb	r3, [r3, #15]
		while (tc_is_syncing(module_inst)) {
    2740:	b25b      	sxtb	r3, r3
    2742:	2b00      	cmp	r3, #0
    2744:	dbfa      	blt.n	273c <tc_init+0xf4>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    2746:	716a      	strb	r2, [r5, #5]
	ctrlc_tmp = config->waveform_invert_output;
    2748:	7ab2      	ldrb	r2, [r6, #10]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    274a:	2300      	movs	r3, #0
    274c:	e028      	b.n	27a0 <tc_init+0x158>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    274e:	a901      	add	r1, sp, #4
    2750:	2301      	movs	r3, #1
    2752:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    2754:	2200      	movs	r2, #0
    2756:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    2758:	7e32      	ldrb	r2, [r6, #24]
    275a:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    275c:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    275e:	7d30      	ldrb	r0, [r6, #20]
    2760:	f7ff fc1a 	bl	1f98 <system_pinmux_pin_set_config>
    2764:	e7ab      	b.n	26be <tc_init+0x76>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2766:	a901      	add	r1, sp, #4
    2768:	2301      	movs	r3, #1
    276a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    276c:	2200      	movs	r2, #0
    276e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2770:	3224      	adds	r2, #36	; 0x24
    2772:	18b2      	adds	r2, r6, r2
    2774:	7812      	ldrb	r2, [r2, #0]
    2776:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2778:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    277a:	331f      	adds	r3, #31
    277c:	18f3      	adds	r3, r6, r3
    277e:	7818      	ldrb	r0, [r3, #0]
    2780:	f7ff fc0a 	bl	1f98 <system_pinmux_pin_set_config>
    2784:	e79e      	b.n	26c4 <tc_init+0x7c>
				inst_pm_apbmask[instance + 1]);
    2786:	1c7b      	adds	r3, r7, #1
    2788:	005b      	lsls	r3, r3, #1
    278a:	aa02      	add	r2, sp, #8
    278c:	5a9b      	ldrh	r3, [r3, r2]
    278e:	4a3c      	ldr	r2, [pc, #240]	; (2880 <tc_init+0x238>)
    2790:	6a11      	ldr	r1, [r2, #32]
    2792:	430b      	orrs	r3, r1
    2794:	6213      	str	r3, [r2, #32]
    2796:	e79f      	b.n	26d8 <tc_init+0x90>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    2798:	2204      	movs	r2, #4
    279a:	e7c0      	b.n	271e <tc_init+0xd6>
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    279c:	3301      	adds	r3, #1
    279e:	b2db      	uxtb	r3, r3
    27a0:	2b01      	cmp	r3, #1
    27a2:	d808      	bhi.n	27b6 <tc_init+0x16e>
		if (config->enable_capture_on_channel[i] == true) {
    27a4:	18f1      	adds	r1, r6, r3
    27a6:	7ac9      	ldrb	r1, [r1, #11]
    27a8:	2900      	cmp	r1, #0
    27aa:	d0f7      	beq.n	279c <tc_init+0x154>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    27ac:	2110      	movs	r1, #16
    27ae:	4099      	lsls	r1, r3
    27b0:	430a      	orrs	r2, r1
    27b2:	b2d2      	uxtb	r2, r2
    27b4:	e7f2      	b.n	279c <tc_init+0x154>
    27b6:	6823      	ldr	r3, [r4, #0]
    27b8:	7bdb      	ldrb	r3, [r3, #15]
	while (tc_is_syncing(module_inst)) {
    27ba:	b25b      	sxtb	r3, r3
    27bc:	2b00      	cmp	r3, #0
    27be:	dbfa      	blt.n	27b6 <tc_init+0x16e>
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    27c0:	71aa      	strb	r2, [r5, #6]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    27c2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    27c4:	7bd3      	ldrb	r3, [r2, #15]
	while (tc_is_syncing(module_inst)) {
    27c6:	b25b      	sxtb	r3, r3
    27c8:	2b00      	cmp	r3, #0
    27ca:	dbfa      	blt.n	27c2 <tc_init+0x17a>
	switch (module_inst->counter_size) {
    27cc:	7923      	ldrb	r3, [r4, #4]
    27ce:	2b04      	cmp	r3, #4
    27d0:	d005      	beq.n	27de <tc_init+0x196>
    27d2:	2b08      	cmp	r3, #8
    27d4:	d03a      	beq.n	284c <tc_init+0x204>
    27d6:	2b00      	cmp	r3, #0
    27d8:	d022      	beq.n	2820 <tc_init+0x1d8>
	return STATUS_ERR_INVALID_ARG;
    27da:	2017      	movs	r0, #23
    27dc:	e75c      	b.n	2698 <tc_init+0x50>
    27de:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    27e0:	b25b      	sxtb	r3, r3
    27e2:	2b00      	cmp	r3, #0
    27e4:	dbfb      	blt.n	27de <tc_init+0x196>
					config->counter_8_bit.value;
    27e6:	2328      	movs	r3, #40	; 0x28
    27e8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    27ea:	742b      	strb	r3, [r5, #16]
    27ec:	6823      	ldr	r3, [r4, #0]
    27ee:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    27f0:	b25b      	sxtb	r3, r3
    27f2:	2b00      	cmp	r3, #0
    27f4:	dbfa      	blt.n	27ec <tc_init+0x1a4>
					config->counter_8_bit.period;
    27f6:	2329      	movs	r3, #41	; 0x29
    27f8:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    27fa:	752b      	strb	r3, [r5, #20]
    27fc:	6823      	ldr	r3, [r4, #0]
    27fe:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2800:	b25b      	sxtb	r3, r3
    2802:	2b00      	cmp	r3, #0
    2804:	dbfa      	blt.n	27fc <tc_init+0x1b4>
					config->counter_8_bit.compare_capture_channel[0];
    2806:	232a      	movs	r3, #42	; 0x2a
    2808:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    280a:	762b      	strb	r3, [r5, #24]
    280c:	6823      	ldr	r3, [r4, #0]
    280e:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2810:	b25b      	sxtb	r3, r3
    2812:	2b00      	cmp	r3, #0
    2814:	dbfa      	blt.n	280c <tc_init+0x1c4>
					config->counter_8_bit.compare_capture_channel[1];
    2816:	232b      	movs	r3, #43	; 0x2b
    2818:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    281a:	766b      	strb	r3, [r5, #25]
			return STATUS_OK;
    281c:	2000      	movs	r0, #0
    281e:	e73b      	b.n	2698 <tc_init+0x50>
    2820:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    2822:	b25b      	sxtb	r3, r3
    2824:	2b00      	cmp	r3, #0
    2826:	dbfb      	blt.n	2820 <tc_init+0x1d8>
				= config->counter_16_bit.value;
    2828:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    282a:	822b      	strh	r3, [r5, #16]
    282c:	6823      	ldr	r3, [r4, #0]
    282e:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    2830:	b25b      	sxtb	r3, r3
    2832:	2b00      	cmp	r3, #0
    2834:	dbfa      	blt.n	282c <tc_init+0x1e4>
					config->counter_16_bit.compare_capture_channel[0];
    2836:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2838:	832b      	strh	r3, [r5, #24]
    283a:	6823      	ldr	r3, [r4, #0]
    283c:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    283e:	b25b      	sxtb	r3, r3
    2840:	2b00      	cmp	r3, #0
    2842:	dbfa      	blt.n	283a <tc_init+0x1f2>
					config->counter_16_bit.compare_capture_channel[1];
    2844:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    2846:	836b      	strh	r3, [r5, #26]
			return STATUS_OK;
    2848:	2000      	movs	r0, #0
    284a:	e725      	b.n	2698 <tc_init+0x50>
    284c:	7bd3      	ldrb	r3, [r2, #15]
			while (tc_is_syncing(module_inst)) {
    284e:	b25b      	sxtb	r3, r3
    2850:	2b00      	cmp	r3, #0
    2852:	dbfb      	blt.n	284c <tc_init+0x204>
				= config->counter_32_bit.value;
    2854:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2856:	612b      	str	r3, [r5, #16]
    2858:	6823      	ldr	r3, [r4, #0]
    285a:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    285c:	b25b      	sxtb	r3, r3
    285e:	2b00      	cmp	r3, #0
    2860:	dbfa      	blt.n	2858 <tc_init+0x210>
			hw->COUNT32.CC[0].reg =
    2862:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    2864:	61ab      	str	r3, [r5, #24]
    2866:	6823      	ldr	r3, [r4, #0]
    2868:	7bdb      	ldrb	r3, [r3, #15]
			while (tc_is_syncing(module_inst)) {
    286a:	b25b      	sxtb	r3, r3
    286c:	2b00      	cmp	r3, #0
    286e:	dbfa      	blt.n	2866 <tc_init+0x21e>
					config->counter_32_bit.compare_capture_channel[1];
    2870:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    2872:	61eb      	str	r3, [r5, #28]
			return STATUS_OK;
    2874:	2000      	movs	r0, #0
    2876:	e70f      	b.n	2698 <tc_init+0x50>
    2878:	00002f1c 	.word	0x00002f1c
    287c:	20000224 	.word	0x20000224
    2880:	40000400 	.word	0x40000400

00002884 <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    2884:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    2886:	6804      	ldr	r4, [r0, #0]
    2888:	7be3      	ldrb	r3, [r4, #15]

	while (tc_is_syncing(module_inst)) {
    288a:	b25b      	sxtb	r3, r3
    288c:	2b00      	cmp	r3, #0
    288e:	dbfb      	blt.n	2888 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    2890:	7903      	ldrb	r3, [r0, #4]
    2892:	2b04      	cmp	r3, #4
    2894:	d005      	beq.n	28a2 <tc_set_compare_value+0x1e>
    2896:	2b08      	cmp	r3, #8
    2898:	d007      	beq.n	28aa <tc_set_compare_value+0x26>
    289a:	2b00      	cmp	r3, #0
    289c:	d003      	beq.n	28a6 <tc_set_compare_value+0x22>
						(uint32_t)compare;
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    289e:	2017      	movs	r0, #23
    28a0:	e006      	b.n	28b0 <tc_set_compare_value+0x2c>
			if (channel_index <
    28a2:	2901      	cmp	r1, #1
    28a4:	d905      	bls.n	28b2 <tc_set_compare_value+0x2e>
			if (channel_index <
    28a6:	2901      	cmp	r1, #1
    28a8:	d908      	bls.n	28bc <tc_set_compare_value+0x38>
			if (channel_index <
    28aa:	2901      	cmp	r1, #1
    28ac:	d90c      	bls.n	28c8 <tc_set_compare_value+0x44>
	return STATUS_ERR_INVALID_ARG;
    28ae:	2017      	movs	r0, #23
}
    28b0:	bd10      	pop	{r4, pc}
						(uint8_t)compare;
    28b2:	b2d2      	uxtb	r2, r2
				tc_module->COUNT8.CC[channel_index].reg  =
    28b4:	1864      	adds	r4, r4, r1
    28b6:	7622      	strb	r2, [r4, #24]
				return STATUS_OK;
    28b8:	2000      	movs	r0, #0
    28ba:	e7f9      	b.n	28b0 <tc_set_compare_value+0x2c>
						(uint16_t)compare;
    28bc:	b292      	uxth	r2, r2
				tc_module->COUNT16.CC[channel_index].reg =
    28be:	310c      	adds	r1, #12
    28c0:	0049      	lsls	r1, r1, #1
    28c2:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    28c4:	2000      	movs	r0, #0
    28c6:	e7f3      	b.n	28b0 <tc_set_compare_value+0x2c>
				tc_module->COUNT32.CC[channel_index].reg =
    28c8:	3106      	adds	r1, #6
    28ca:	0089      	lsls	r1, r1, #2
    28cc:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    28ce:	2000      	movs	r0, #0
    28d0:	e7ee      	b.n	28b0 <tc_set_compare_value+0x2c>

000028d2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    28d2:	e7fe      	b.n	28d2 <Dummy_Handler>

000028d4 <Reset_Handler>:
{
    28d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    28d6:	4a23      	ldr	r2, [pc, #140]	; (2964 <Reset_Handler+0x90>)
    28d8:	4b23      	ldr	r3, [pc, #140]	; (2968 <Reset_Handler+0x94>)
    28da:	429a      	cmp	r2, r3
    28dc:	d009      	beq.n	28f2 <Reset_Handler+0x1e>
    28de:	4b22      	ldr	r3, [pc, #136]	; (2968 <Reset_Handler+0x94>)
    28e0:	4a20      	ldr	r2, [pc, #128]	; (2964 <Reset_Handler+0x90>)
    28e2:	e003      	b.n	28ec <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
    28e4:	6811      	ldr	r1, [r2, #0]
    28e6:	6019      	str	r1, [r3, #0]
    28e8:	3304      	adds	r3, #4
    28ea:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    28ec:	491f      	ldr	r1, [pc, #124]	; (296c <Reset_Handler+0x98>)
    28ee:	428b      	cmp	r3, r1
    28f0:	d3f8      	bcc.n	28e4 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
    28f2:	4b1f      	ldr	r3, [pc, #124]	; (2970 <Reset_Handler+0x9c>)
    28f4:	e002      	b.n	28fc <Reset_Handler+0x28>
                *pDest++ = 0;
    28f6:	2200      	movs	r2, #0
    28f8:	601a      	str	r2, [r3, #0]
    28fa:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
    28fc:	4a1d      	ldr	r2, [pc, #116]	; (2974 <Reset_Handler+0xa0>)
    28fe:	4293      	cmp	r3, r2
    2900:	d3f9      	bcc.n	28f6 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    2902:	4a1d      	ldr	r2, [pc, #116]	; (2978 <Reset_Handler+0xa4>)
    2904:	21ff      	movs	r1, #255	; 0xff
    2906:	4b1d      	ldr	r3, [pc, #116]	; (297c <Reset_Handler+0xa8>)
    2908:	438b      	bics	r3, r1
    290a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    290c:	39fd      	subs	r1, #253	; 0xfd
    290e:	2390      	movs	r3, #144	; 0x90
    2910:	005b      	lsls	r3, r3, #1
    2912:	4a1b      	ldr	r2, [pc, #108]	; (2980 <Reset_Handler+0xac>)
    2914:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    2916:	4a1b      	ldr	r2, [pc, #108]	; (2984 <Reset_Handler+0xb0>)
    2918:	78d3      	ldrb	r3, [r2, #3]
    291a:	2503      	movs	r5, #3
    291c:	43ab      	bics	r3, r5
    291e:	2402      	movs	r4, #2
    2920:	4323      	orrs	r3, r4
    2922:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    2924:	78d3      	ldrb	r3, [r2, #3]
    2926:	270c      	movs	r7, #12
    2928:	43bb      	bics	r3, r7
    292a:	2608      	movs	r6, #8
    292c:	4333      	orrs	r3, r6
    292e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    2930:	4b15      	ldr	r3, [pc, #84]	; (2988 <Reset_Handler+0xb4>)
    2932:	7b98      	ldrb	r0, [r3, #14]
    2934:	2230      	movs	r2, #48	; 0x30
    2936:	4390      	bics	r0, r2
    2938:	2220      	movs	r2, #32
    293a:	4310      	orrs	r0, r2
    293c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    293e:	7b99      	ldrb	r1, [r3, #14]
    2940:	43b9      	bics	r1, r7
    2942:	4331      	orrs	r1, r6
    2944:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    2946:	7b9a      	ldrb	r2, [r3, #14]
    2948:	43aa      	bics	r2, r5
    294a:	4322      	orrs	r2, r4
    294c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    294e:	4a0f      	ldr	r2, [pc, #60]	; (298c <Reset_Handler+0xb8>)
    2950:	6851      	ldr	r1, [r2, #4]
    2952:	2380      	movs	r3, #128	; 0x80
    2954:	430b      	orrs	r3, r1
    2956:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    2958:	f000 f9cc 	bl	2cf4 <__libc_init_array>
        main();
    295c:	f000 f936 	bl	2bcc <main>
    2960:	e7fe      	b.n	2960 <Reset_Handler+0x8c>
    2962:	46c0      	nop			; (mov r8, r8)
    2964:	00002f98 	.word	0x00002f98
    2968:	20000000 	.word	0x20000000
    296c:	20000020 	.word	0x20000020
    2970:	20000020 	.word	0x20000020
    2974:	20000254 	.word	0x20000254
    2978:	e000ed00 	.word	0xe000ed00
    297c:	00000000 	.word	0x00000000
    2980:	41007000 	.word	0x41007000
    2984:	41005000 	.word	0x41005000
    2988:	41004800 	.word	0x41004800
    298c:	41004000 	.word	0x41004000

00002990 <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    2990:	6803      	ldr	r3, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    2992:	69db      	ldr	r3, [r3, #28]
	while (i2c_master_is_syncing(module)) {
    2994:	075b      	lsls	r3, r3, #29
    2996:	d1fb      	bne.n	2990 <_i2c_master_wait_for_sync>
}
    2998:	4770      	bx	lr
	...

0000299c <set_color_green_indication>:
#define BUFFER_SET_COLOR_BLUE_PWM_TIMER                                        \
  { 0x02, 0x19 }
#define BUFFER_SET_COLOR_BLUE_PWM_FLASH                                        \
  { 0x01, 0x82 }

void set_color_green_indication(void) {
    299c:	b500      	push	{lr}
    299e:	b083      	sub	sp, #12
  uint8_t buffer_set_color_green[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_GREEN;
    29a0:	aa01      	add	r2, sp, #4
    29a2:	4b08      	ldr	r3, [pc, #32]	; (29c4 <set_color_green_indication+0x28>)
    29a4:	881b      	ldrh	r3, [r3, #0]
    29a6:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_green;
    29a8:	4b07      	ldr	r3, [pc, #28]	; (29c8 <set_color_green_indication+0x2c>)
    29aa:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    29ac:	2231      	movs	r2, #49	; 0x31
    29ae:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    29b0:	3a2f      	subs	r2, #47	; 0x2f
    29b2:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    29b4:	4904      	ldr	r1, [pc, #16]	; (29c8 <set_color_green_indication+0x2c>)
    29b6:	4805      	ldr	r0, [pc, #20]	; (29cc <set_color_green_indication+0x30>)
    29b8:	f7fe fe0e 	bl	15d8 <i2c_master_write_packet_wait>
    29bc:	2800      	cmp	r0, #0
    29be:	d1f9      	bne.n	29b4 <set_color_green_indication+0x18>
         STATUS_OK) {
  }
}
    29c0:	b003      	add	sp, #12
    29c2:	bd00      	pop	{pc}
    29c4:	00002f2c 	.word	0x00002f2c
    29c8:	20000014 	.word	0x20000014
    29cc:	2000022c 	.word	0x2000022c

000029d0 <set_color_red_indication>:

void set_color_red_indication(void) {
    29d0:	b500      	push	{lr}
    29d2:	b083      	sub	sp, #12
  uint8_t buffer_set_color_red[DATA_LENGTH_PRIMARY] = BUFFER_SET_COLOR_RED;
    29d4:	aa01      	add	r2, sp, #4
    29d6:	4b08      	ldr	r3, [pc, #32]	; (29f8 <set_color_red_indication+0x28>)
    29d8:	889b      	ldrh	r3, [r3, #4]
    29da:	8013      	strh	r3, [r2, #0]
  packet.data = buffer_set_color_red;
    29dc:	4b07      	ldr	r3, [pc, #28]	; (29fc <set_color_red_indication+0x2c>)
    29de:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    29e0:	2231      	movs	r2, #49	; 0x31
    29e2:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    29e4:	3a2f      	subs	r2, #47	; 0x2f
    29e6:	805a      	strh	r2, [r3, #2]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    29e8:	4904      	ldr	r1, [pc, #16]	; (29fc <set_color_red_indication+0x2c>)
    29ea:	4805      	ldr	r0, [pc, #20]	; (2a00 <set_color_red_indication+0x30>)
    29ec:	f7fe fdf4 	bl	15d8 <i2c_master_write_packet_wait>
    29f0:	2800      	cmp	r0, #0
    29f2:	d1f9      	bne.n	29e8 <set_color_red_indication+0x18>
         STATUS_OK) {
  }
}
    29f4:	b003      	add	sp, #12
    29f6:	bd00      	pop	{pc}
    29f8:	00002f2c 	.word	0x00002f2c
    29fc:	20000014 	.word	0x20000014
    2a00:	2000022c 	.word	0x2000022c

00002a04 <reset_chip>:
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
         STATUS_OK) {
  }
}

void reset_chip(void) {
    2a04:	b500      	push	{lr}
    2a06:	b083      	sub	sp, #12

  uint8_t buffer_reset_green_red_channel[DATA_LENGTH_PRIMARY] =
    2a08:	aa01      	add	r2, sp, #4
    2a0a:	2304      	movs	r3, #4
    2a0c:	7013      	strb	r3, [r2, #0]
    2a0e:	2300      	movs	r3, #0
    2a10:	7053      	strb	r3, [r2, #1]
      BUFFER_TURN_OFF_MAIN_DIGITAL;
  packet.data = buffer_reset_green_red_channel;
    2a12:	4b07      	ldr	r3, [pc, #28]	; (2a30 <reset_chip+0x2c>)
    2a14:	605a      	str	r2, [r3, #4]
  packet.address = KTD2026_DEVICE_ADDRESS;
    2a16:	2231      	movs	r2, #49	; 0x31
    2a18:	801a      	strh	r2, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2a1a:	3a2f      	subs	r2, #47	; 0x2f
    2a1c:	805a      	strh	r2, [r3, #2]

  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a1e:	4904      	ldr	r1, [pc, #16]	; (2a30 <reset_chip+0x2c>)
    2a20:	4804      	ldr	r0, [pc, #16]	; (2a34 <reset_chip+0x30>)
    2a22:	f7fe fdd9 	bl	15d8 <i2c_master_write_packet_wait>
    2a26:	2800      	cmp	r0, #0
    2a28:	d1f9      	bne.n	2a1e <reset_chip+0x1a>
         STATUS_OK) {
  }
}
    2a2a:	b003      	add	sp, #12
    2a2c:	bd00      	pop	{pc}
    2a2e:	46c0      	nop			; (mov r8, r8)
    2a30:	20000014 	.word	0x20000014
    2a34:	2000022c 	.word	0x2000022c

00002a38 <set_battery_charge_routine>:

void set_battery_charge_routine(void) {
    2a38:	b500      	push	{lr}
    2a3a:	b085      	sub	sp, #20

  uint8_t buffer_set_color_green_PWM[DATA_LENGTH_PRIMARY] =
    2a3c:	aa03      	add	r2, sp, #12
    2a3e:	4b1a      	ldr	r3, [pc, #104]	; (2aa8 <set_battery_charge_routine+0x70>)
    2a40:	8b19      	ldrh	r1, [r3, #24]
    2a42:	8011      	strh	r1, [r2, #0]
      BUFFER_SET_COLOR_GREEN_PWM;
  uint8_t buffer_set_charge_routine_flash_period[DATA_LENGTH_PRIMARY] =
    2a44:	8b98      	ldrh	r0, [r3, #28]
    2a46:	a902      	add	r1, sp, #8
    2a48:	8008      	strh	r0, [r1, #0]
      BUFFER_SET_CHARGE_ROUTINE_FLASH_PERIOD;
  uint8_t buffer_set_charge_routine_trise_tfall[DATA_LENGTH_PRIMARY] =
    2a4a:	8c18      	ldrh	r0, [r3, #32]
    2a4c:	a901      	add	r1, sp, #4
    2a4e:	8008      	strh	r0, [r1, #0]
      BUFFER_SET_CHARGE_ROUTINE_TRISE_TFALL;
  uint8_t buffer_set_charge_routine_PWM1_timer[DATA_LENGTH_PRIMARY] =
    2a50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    2a52:	4669      	mov	r1, sp
    2a54:	800b      	strh	r3, [r1, #0]
      BUFFER_SET_CHARGE_ROUTINE_PWM1_TIMER;
  uint8_t buffer_set_charge_brightness[DATA_LENGTH_PRIMARY] =
	  BUFFER_SET_COLOR_GREEN_BRIGHTNESS; 

  packet.address = KTD2026_DEVICE_ADDRESS;
    2a56:	4b15      	ldr	r3, [pc, #84]	; (2aac <set_battery_charge_routine+0x74>)
    2a58:	2131      	movs	r1, #49	; 0x31
    2a5a:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2a5c:	392f      	subs	r1, #47	; 0x2f
    2a5e:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_green_PWM;
    2a60:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a62:	4912      	ldr	r1, [pc, #72]	; (2aac <set_battery_charge_routine+0x74>)
    2a64:	4812      	ldr	r0, [pc, #72]	; (2ab0 <set_battery_charge_routine+0x78>)
    2a66:	f7fe fdb7 	bl	15d8 <i2c_master_write_packet_wait>
    2a6a:	2800      	cmp	r0, #0
    2a6c:	d1f9      	bne.n	2a62 <set_battery_charge_routine+0x2a>
  //packet.data = buffer_set_charge_brightness;
  //while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
  //STATUS_OK) {
  //}
  
  packet.data = buffer_set_charge_routine_flash_period;
    2a6e:	aa02      	add	r2, sp, #8
    2a70:	4b0e      	ldr	r3, [pc, #56]	; (2aac <set_battery_charge_routine+0x74>)
    2a72:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a74:	490d      	ldr	r1, [pc, #52]	; (2aac <set_battery_charge_routine+0x74>)
    2a76:	480e      	ldr	r0, [pc, #56]	; (2ab0 <set_battery_charge_routine+0x78>)
    2a78:	f7fe fdae 	bl	15d8 <i2c_master_write_packet_wait>
    2a7c:	2800      	cmp	r0, #0
    2a7e:	d1f9      	bne.n	2a74 <set_battery_charge_routine+0x3c>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_trise_tfall;
    2a80:	aa01      	add	r2, sp, #4
    2a82:	4b0a      	ldr	r3, [pc, #40]	; (2aac <set_battery_charge_routine+0x74>)
    2a84:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a86:	4909      	ldr	r1, [pc, #36]	; (2aac <set_battery_charge_routine+0x74>)
    2a88:	4809      	ldr	r0, [pc, #36]	; (2ab0 <set_battery_charge_routine+0x78>)
    2a8a:	f7fe fda5 	bl	15d8 <i2c_master_write_packet_wait>
    2a8e:	2800      	cmp	r0, #0
    2a90:	d1f9      	bne.n	2a86 <set_battery_charge_routine+0x4e>
         STATUS_OK) {
  }
  packet.data = buffer_set_charge_routine_PWM1_timer;
    2a92:	4b06      	ldr	r3, [pc, #24]	; (2aac <set_battery_charge_routine+0x74>)
    2a94:	466a      	mov	r2, sp
    2a96:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2a98:	4904      	ldr	r1, [pc, #16]	; (2aac <set_battery_charge_routine+0x74>)
    2a9a:	4805      	ldr	r0, [pc, #20]	; (2ab0 <set_battery_charge_routine+0x78>)
    2a9c:	f7fe fd9c 	bl	15d8 <i2c_master_write_packet_wait>
    2aa0:	2800      	cmp	r0, #0
    2aa2:	d1f9      	bne.n	2a98 <set_battery_charge_routine+0x60>
         STATUS_OK) {
  }
  
  
  
}
    2aa4:	b005      	add	sp, #20
    2aa6:	bd00      	pop	{pc}
    2aa8:	00002f2c 	.word	0x00002f2c
    2aac:	20000014 	.word	0x20000014
    2ab0:	2000022c 	.word	0x2000022c

00002ab4 <set_battery_low_routine>:

void set_battery_low_routine(void) {
    2ab4:	b500      	push	{lr}
    2ab6:	b085      	sub	sp, #20

  uint8_t buffer_set_color_red_PWM[DATA_LENGTH_PRIMARY] =
    2ab8:	aa03      	add	r2, sp, #12
    2aba:	4b1a      	ldr	r3, [pc, #104]	; (2b24 <set_battery_low_routine+0x70>)
    2abc:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    2abe:	8011      	strh	r1, [r2, #0]
      BUFFER_SET_COLOR_RED_PWM;
  uint8_t buffer_set_low_routine_flash_period[DATA_LENGTH_PRIMARY] =
    2ac0:	8d98      	ldrh	r0, [r3, #44]	; 0x2c
    2ac2:	a902      	add	r1, sp, #8
    2ac4:	8008      	strh	r0, [r1, #0]
      BUFFER_SET_LOW_ROUTINE_FLASH_PERIOD;
  uint8_t buffer_set_low_routine_trise_tfall[DATA_LENGTH_PRIMARY] =
    2ac6:	8e18      	ldrh	r0, [r3, #48]	; 0x30
    2ac8:	a901      	add	r1, sp, #4
    2aca:	8008      	strh	r0, [r1, #0]
      BUFFER_SET_LOW_ROUTINE_TRISE_TFALL;
  uint8_t buffer_set_low_routine_brightness[DATA_LENGTH_PRIMARY] =
    2acc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    2ace:	4669      	mov	r1, sp
    2ad0:	800b      	strh	r3, [r1, #0]
      BUFFER_SET_COLOR_RED_BRIGHTNESS;

  packet.address = KTD2026_DEVICE_ADDRESS;
    2ad2:	4b15      	ldr	r3, [pc, #84]	; (2b28 <set_battery_low_routine+0x74>)
    2ad4:	2131      	movs	r1, #49	; 0x31
    2ad6:	8019      	strh	r1, [r3, #0]
  packet.data_length = DATA_LENGTH_PRIMARY;
    2ad8:	392f      	subs	r1, #47	; 0x2f
    2ada:	8059      	strh	r1, [r3, #2]

  packet.data = buffer_set_color_red_PWM;
    2adc:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2ade:	4912      	ldr	r1, [pc, #72]	; (2b28 <set_battery_low_routine+0x74>)
    2ae0:	4812      	ldr	r0, [pc, #72]	; (2b2c <set_battery_low_routine+0x78>)
    2ae2:	f7fe fd79 	bl	15d8 <i2c_master_write_packet_wait>
    2ae6:	2800      	cmp	r0, #0
    2ae8:	d1f9      	bne.n	2ade <set_battery_low_routine+0x2a>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_flash_period;
    2aea:	aa02      	add	r2, sp, #8
    2aec:	4b0e      	ldr	r3, [pc, #56]	; (2b28 <set_battery_low_routine+0x74>)
    2aee:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2af0:	490d      	ldr	r1, [pc, #52]	; (2b28 <set_battery_low_routine+0x74>)
    2af2:	480e      	ldr	r0, [pc, #56]	; (2b2c <set_battery_low_routine+0x78>)
    2af4:	f7fe fd70 	bl	15d8 <i2c_master_write_packet_wait>
    2af8:	2800      	cmp	r0, #0
    2afa:	d1f9      	bne.n	2af0 <set_battery_low_routine+0x3c>
         STATUS_OK) {
  }
  packet.data = buffer_set_low_routine_brightness;
    2afc:	4b0a      	ldr	r3, [pc, #40]	; (2b28 <set_battery_low_routine+0x74>)
    2afe:	466a      	mov	r2, sp
    2b00:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2b02:	4909      	ldr	r1, [pc, #36]	; (2b28 <set_battery_low_routine+0x74>)
    2b04:	4809      	ldr	r0, [pc, #36]	; (2b2c <set_battery_low_routine+0x78>)
    2b06:	f7fe fd67 	bl	15d8 <i2c_master_write_packet_wait>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d1f9      	bne.n	2b02 <set_battery_low_routine+0x4e>
         STATUS_OK) {
  }

  packet.data = buffer_set_low_routine_trise_tfall;
    2b0e:	aa01      	add	r2, sp, #4
    2b10:	4b05      	ldr	r3, [pc, #20]	; (2b28 <set_battery_low_routine+0x74>)
    2b12:	605a      	str	r2, [r3, #4]
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
    2b14:	4904      	ldr	r1, [pc, #16]	; (2b28 <set_battery_low_routine+0x74>)
    2b16:	4805      	ldr	r0, [pc, #20]	; (2b2c <set_battery_low_routine+0x78>)
    2b18:	f7fe fd5e 	bl	15d8 <i2c_master_write_packet_wait>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d1f9      	bne.n	2b14 <set_battery_low_routine+0x60>
         STATUS_OK) {
  }
}
    2b20:	b005      	add	sp, #20
    2b22:	bd00      	pop	{pc}
    2b24:	00002f2c 	.word	0x00002f2c
    2b28:	20000014 	.word	0x20000014
    2b2c:	2000022c 	.word	0x2000022c

00002b30 <i2c_master_setup>:
  while ((i2c_master_write_packet_wait(&i2c_master_instance, &packet)) !=
         STATUS_OK) {
  }
}

void i2c_master_setup(void) {
    2b30:	b530      	push	{r4, r5, lr}
    2b32:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    2b34:	aa01      	add	r2, sp, #4
    2b36:	2364      	movs	r3, #100	; 0x64
    2b38:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    2b3a:	4b1f      	ldr	r3, [pc, #124]	; (2bb8 <i2c_master_setup+0x88>)
    2b3c:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    2b3e:	2300      	movs	r3, #0
    2b40:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
    2b42:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    2b44:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    2b46:	2180      	movs	r1, #128	; 0x80
    2b48:	0389      	lsls	r1, r1, #14
    2b4a:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
    2b4c:	2101      	movs	r1, #1
    2b4e:	4249      	negs	r1, r1
    2b50:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
    2b52:	61d3      	str	r3, [r2, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
    2b54:	6213      	str	r3, [r2, #32]
	config->scl_low_timeout  = false;
    2b56:	3125      	adds	r1, #37	; 0x25
    2b58:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    2b5a:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
    2b5c:	3108      	adds	r1, #8
    2b5e:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
    2b60:	3101      	adds	r1, #1
    2b62:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    2b64:	3101      	adds	r1, #1
    2b66:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
    2b68:	33d7      	adds	r3, #215	; 0xd7
    2b6a:	8613      	strh	r3, [r2, #48]	; 0x30
  struct i2c_master_config config_i2c_master;
  i2c_master_get_config_defaults(&config_i2c_master);
  config_i2c_master.buffer_timeout = 10000;
    2b6c:	4b13      	ldr	r3, [pc, #76]	; (2bbc <i2c_master_setup+0x8c>)
    2b6e:	82d3      	strh	r3, [r2, #22]
  i2c_master_init(&i2c_master_instance, MASTER_MODULE, &config_i2c_master);
    2b70:	4d13      	ldr	r5, [pc, #76]	; (2bc0 <i2c_master_setup+0x90>)
    2b72:	4914      	ldr	r1, [pc, #80]	; (2bc4 <i2c_master_setup+0x94>)
    2b74:	0028      	movs	r0, r5
    2b76:	f7fe fc33 	bl	13e0 <i2c_master_init>
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    2b7a:	682c      	ldr	r4, [r5, #0]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
    2b7c:	0028      	movs	r0, r5
    2b7e:	f7ff ff07 	bl	2990 <_i2c_master_wait_for_sync>

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    2b82:	6823      	ldr	r3, [r4, #0]
    2b84:	2202      	movs	r2, #2
    2b86:	4313      	orrs	r3, r2
    2b88:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2b8a:	6828      	ldr	r0, [r5, #0]
    2b8c:	f7fe ff3c 	bl	1a08 <_sercom_get_interrupt_vector>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2b90:	231f      	movs	r3, #31
    2b92:	4018      	ands	r0, r3
    2b94:	3b1e      	subs	r3, #30
    2b96:	4083      	lsls	r3, r0
    2b98:	4a0b      	ldr	r2, [pc, #44]	; (2bc8 <i2c_master_setup+0x98>)
    2b9a:	6013      	str	r3, [r2, #0]
	uint32_t timeout_counter = 0;
    2b9c:	2300      	movs	r3, #0
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    2b9e:	8b62      	ldrh	r2, [r4, #26]
    2ba0:	06d2      	lsls	r2, r2, #27
    2ba2:	d406      	bmi.n	2bb2 <i2c_master_setup+0x82>
		timeout_counter++;
    2ba4:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    2ba6:	4a06      	ldr	r2, [pc, #24]	; (2bc0 <i2c_master_setup+0x90>)
    2ba8:	88d2      	ldrh	r2, [r2, #6]
    2baa:	4293      	cmp	r3, r2
    2bac:	d3f7      	bcc.n	2b9e <i2c_master_setup+0x6e>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    2bae:	2310      	movs	r3, #16
    2bb0:	8363      	strh	r3, [r4, #26]
  i2c_master_enable(&i2c_master_instance);
}
    2bb2:	b00f      	add	sp, #60	; 0x3c
    2bb4:	bd30      	pop	{r4, r5, pc}
    2bb6:	46c0      	nop			; (mov r8, r8)
    2bb8:	00000d48 	.word	0x00000d48
    2bbc:	00002710 	.word	0x00002710
    2bc0:	2000022c 	.word	0x2000022c
    2bc4:	42001000 	.word	0x42001000
    2bc8:	e000e100 	.word	0xe000e100

00002bcc <main>:

#include "system_logic.h"

#include "adc_sample.h"

int main(void) {
    2bcc:	b510      	push	{r4, lr}
  startup_sys_configs();
    2bce:	f7fe fac7 	bl	1160 <startup_sys_configs>
  while (true) {
    system_state(); // Get latest system_state
    2bd2:	f7fe fb2f 	bl	1234 <system_state>
    system_logic(); // Invoke System Logic
    2bd6:	f7fe f92d 	bl	e34 <system_logic>
    2bda:	e7fa      	b.n	2bd2 <main+0x6>

00002bdc <__udivsi3>:
    2bdc:	2200      	movs	r2, #0
    2bde:	0843      	lsrs	r3, r0, #1
    2be0:	428b      	cmp	r3, r1
    2be2:	d374      	bcc.n	2cce <__udivsi3+0xf2>
    2be4:	0903      	lsrs	r3, r0, #4
    2be6:	428b      	cmp	r3, r1
    2be8:	d35f      	bcc.n	2caa <__udivsi3+0xce>
    2bea:	0a03      	lsrs	r3, r0, #8
    2bec:	428b      	cmp	r3, r1
    2bee:	d344      	bcc.n	2c7a <__udivsi3+0x9e>
    2bf0:	0b03      	lsrs	r3, r0, #12
    2bf2:	428b      	cmp	r3, r1
    2bf4:	d328      	bcc.n	2c48 <__udivsi3+0x6c>
    2bf6:	0c03      	lsrs	r3, r0, #16
    2bf8:	428b      	cmp	r3, r1
    2bfa:	d30d      	bcc.n	2c18 <__udivsi3+0x3c>
    2bfc:	22ff      	movs	r2, #255	; 0xff
    2bfe:	0209      	lsls	r1, r1, #8
    2c00:	ba12      	rev	r2, r2
    2c02:	0c03      	lsrs	r3, r0, #16
    2c04:	428b      	cmp	r3, r1
    2c06:	d302      	bcc.n	2c0e <__udivsi3+0x32>
    2c08:	1212      	asrs	r2, r2, #8
    2c0a:	0209      	lsls	r1, r1, #8
    2c0c:	d065      	beq.n	2cda <__udivsi3+0xfe>
    2c0e:	0b03      	lsrs	r3, r0, #12
    2c10:	428b      	cmp	r3, r1
    2c12:	d319      	bcc.n	2c48 <__udivsi3+0x6c>
    2c14:	e000      	b.n	2c18 <__udivsi3+0x3c>
    2c16:	0a09      	lsrs	r1, r1, #8
    2c18:	0bc3      	lsrs	r3, r0, #15
    2c1a:	428b      	cmp	r3, r1
    2c1c:	d301      	bcc.n	2c22 <__udivsi3+0x46>
    2c1e:	03cb      	lsls	r3, r1, #15
    2c20:	1ac0      	subs	r0, r0, r3
    2c22:	4152      	adcs	r2, r2
    2c24:	0b83      	lsrs	r3, r0, #14
    2c26:	428b      	cmp	r3, r1
    2c28:	d301      	bcc.n	2c2e <__udivsi3+0x52>
    2c2a:	038b      	lsls	r3, r1, #14
    2c2c:	1ac0      	subs	r0, r0, r3
    2c2e:	4152      	adcs	r2, r2
    2c30:	0b43      	lsrs	r3, r0, #13
    2c32:	428b      	cmp	r3, r1
    2c34:	d301      	bcc.n	2c3a <__udivsi3+0x5e>
    2c36:	034b      	lsls	r3, r1, #13
    2c38:	1ac0      	subs	r0, r0, r3
    2c3a:	4152      	adcs	r2, r2
    2c3c:	0b03      	lsrs	r3, r0, #12
    2c3e:	428b      	cmp	r3, r1
    2c40:	d301      	bcc.n	2c46 <__udivsi3+0x6a>
    2c42:	030b      	lsls	r3, r1, #12
    2c44:	1ac0      	subs	r0, r0, r3
    2c46:	4152      	adcs	r2, r2
    2c48:	0ac3      	lsrs	r3, r0, #11
    2c4a:	428b      	cmp	r3, r1
    2c4c:	d301      	bcc.n	2c52 <__udivsi3+0x76>
    2c4e:	02cb      	lsls	r3, r1, #11
    2c50:	1ac0      	subs	r0, r0, r3
    2c52:	4152      	adcs	r2, r2
    2c54:	0a83      	lsrs	r3, r0, #10
    2c56:	428b      	cmp	r3, r1
    2c58:	d301      	bcc.n	2c5e <__udivsi3+0x82>
    2c5a:	028b      	lsls	r3, r1, #10
    2c5c:	1ac0      	subs	r0, r0, r3
    2c5e:	4152      	adcs	r2, r2
    2c60:	0a43      	lsrs	r3, r0, #9
    2c62:	428b      	cmp	r3, r1
    2c64:	d301      	bcc.n	2c6a <__udivsi3+0x8e>
    2c66:	024b      	lsls	r3, r1, #9
    2c68:	1ac0      	subs	r0, r0, r3
    2c6a:	4152      	adcs	r2, r2
    2c6c:	0a03      	lsrs	r3, r0, #8
    2c6e:	428b      	cmp	r3, r1
    2c70:	d301      	bcc.n	2c76 <__udivsi3+0x9a>
    2c72:	020b      	lsls	r3, r1, #8
    2c74:	1ac0      	subs	r0, r0, r3
    2c76:	4152      	adcs	r2, r2
    2c78:	d2cd      	bcs.n	2c16 <__udivsi3+0x3a>
    2c7a:	09c3      	lsrs	r3, r0, #7
    2c7c:	428b      	cmp	r3, r1
    2c7e:	d301      	bcc.n	2c84 <__udivsi3+0xa8>
    2c80:	01cb      	lsls	r3, r1, #7
    2c82:	1ac0      	subs	r0, r0, r3
    2c84:	4152      	adcs	r2, r2
    2c86:	0983      	lsrs	r3, r0, #6
    2c88:	428b      	cmp	r3, r1
    2c8a:	d301      	bcc.n	2c90 <__udivsi3+0xb4>
    2c8c:	018b      	lsls	r3, r1, #6
    2c8e:	1ac0      	subs	r0, r0, r3
    2c90:	4152      	adcs	r2, r2
    2c92:	0943      	lsrs	r3, r0, #5
    2c94:	428b      	cmp	r3, r1
    2c96:	d301      	bcc.n	2c9c <__udivsi3+0xc0>
    2c98:	014b      	lsls	r3, r1, #5
    2c9a:	1ac0      	subs	r0, r0, r3
    2c9c:	4152      	adcs	r2, r2
    2c9e:	0903      	lsrs	r3, r0, #4
    2ca0:	428b      	cmp	r3, r1
    2ca2:	d301      	bcc.n	2ca8 <__udivsi3+0xcc>
    2ca4:	010b      	lsls	r3, r1, #4
    2ca6:	1ac0      	subs	r0, r0, r3
    2ca8:	4152      	adcs	r2, r2
    2caa:	08c3      	lsrs	r3, r0, #3
    2cac:	428b      	cmp	r3, r1
    2cae:	d301      	bcc.n	2cb4 <__udivsi3+0xd8>
    2cb0:	00cb      	lsls	r3, r1, #3
    2cb2:	1ac0      	subs	r0, r0, r3
    2cb4:	4152      	adcs	r2, r2
    2cb6:	0883      	lsrs	r3, r0, #2
    2cb8:	428b      	cmp	r3, r1
    2cba:	d301      	bcc.n	2cc0 <__udivsi3+0xe4>
    2cbc:	008b      	lsls	r3, r1, #2
    2cbe:	1ac0      	subs	r0, r0, r3
    2cc0:	4152      	adcs	r2, r2
    2cc2:	0843      	lsrs	r3, r0, #1
    2cc4:	428b      	cmp	r3, r1
    2cc6:	d301      	bcc.n	2ccc <__udivsi3+0xf0>
    2cc8:	004b      	lsls	r3, r1, #1
    2cca:	1ac0      	subs	r0, r0, r3
    2ccc:	4152      	adcs	r2, r2
    2cce:	1a41      	subs	r1, r0, r1
    2cd0:	d200      	bcs.n	2cd4 <__udivsi3+0xf8>
    2cd2:	4601      	mov	r1, r0
    2cd4:	4152      	adcs	r2, r2
    2cd6:	4610      	mov	r0, r2
    2cd8:	4770      	bx	lr
    2cda:	e7ff      	b.n	2cdc <__udivsi3+0x100>
    2cdc:	b501      	push	{r0, lr}
    2cde:	2000      	movs	r0, #0
    2ce0:	f000 f806 	bl	2cf0 <__aeabi_idiv0>
    2ce4:	bd02      	pop	{r1, pc}
    2ce6:	46c0      	nop			; (mov r8, r8)

00002ce8 <__aeabi_uidivmod>:
    2ce8:	2900      	cmp	r1, #0
    2cea:	d0f7      	beq.n	2cdc <__udivsi3+0x100>
    2cec:	e776      	b.n	2bdc <__udivsi3>
    2cee:	4770      	bx	lr

00002cf0 <__aeabi_idiv0>:
    2cf0:	4770      	bx	lr
    2cf2:	46c0      	nop			; (mov r8, r8)

00002cf4 <__libc_init_array>:
    2cf4:	b570      	push	{r4, r5, r6, lr}
    2cf6:	2600      	movs	r6, #0
    2cf8:	4d0c      	ldr	r5, [pc, #48]	; (2d2c <__libc_init_array+0x38>)
    2cfa:	4c0d      	ldr	r4, [pc, #52]	; (2d30 <__libc_init_array+0x3c>)
    2cfc:	1b64      	subs	r4, r4, r5
    2cfe:	10a4      	asrs	r4, r4, #2
    2d00:	42a6      	cmp	r6, r4
    2d02:	d109      	bne.n	2d18 <__libc_init_array+0x24>
    2d04:	2600      	movs	r6, #0
    2d06:	f000 f937 	bl	2f78 <_init>
    2d0a:	4d0a      	ldr	r5, [pc, #40]	; (2d34 <__libc_init_array+0x40>)
    2d0c:	4c0a      	ldr	r4, [pc, #40]	; (2d38 <__libc_init_array+0x44>)
    2d0e:	1b64      	subs	r4, r4, r5
    2d10:	10a4      	asrs	r4, r4, #2
    2d12:	42a6      	cmp	r6, r4
    2d14:	d105      	bne.n	2d22 <__libc_init_array+0x2e>
    2d16:	bd70      	pop	{r4, r5, r6, pc}
    2d18:	00b3      	lsls	r3, r6, #2
    2d1a:	58eb      	ldr	r3, [r5, r3]
    2d1c:	4798      	blx	r3
    2d1e:	3601      	adds	r6, #1
    2d20:	e7ee      	b.n	2d00 <__libc_init_array+0xc>
    2d22:	00b3      	lsls	r3, r6, #2
    2d24:	58eb      	ldr	r3, [r5, r3]
    2d26:	4798      	blx	r3
    2d28:	3601      	adds	r6, #1
    2d2a:	e7f2      	b.n	2d12 <__libc_init_array+0x1e>
    2d2c:	00002f84 	.word	0x00002f84
    2d30:	00002f84 	.word	0x00002f84
    2d34:	00002f84 	.word	0x00002f84
    2d38:	00002f88 	.word	0x00002f88

00002d3c <memcpy>:
    2d3c:	2300      	movs	r3, #0
    2d3e:	b510      	push	{r4, lr}
    2d40:	429a      	cmp	r2, r3
    2d42:	d100      	bne.n	2d46 <memcpy+0xa>
    2d44:	bd10      	pop	{r4, pc}
    2d46:	5ccc      	ldrb	r4, [r1, r3]
    2d48:	54c4      	strb	r4, [r0, r3]
    2d4a:	3301      	adds	r3, #1
    2d4c:	e7f8      	b.n	2d40 <memcpy+0x4>
    2d4e:	0000      	movs	r0, r0
    2d50:	00000368 	.word	0x00000368
    2d54:	0000061a 	.word	0x0000061a
    2d58:	0000061a 	.word	0x0000061a
    2d5c:	0000061a 	.word	0x0000061a
    2d60:	0000061a 	.word	0x0000061a
    2d64:	0000061a 	.word	0x0000061a
    2d68:	0000061a 	.word	0x0000061a
    2d6c:	0000061a 	.word	0x0000061a
    2d70:	0000061a 	.word	0x0000061a
    2d74:	0000061a 	.word	0x0000061a
    2d78:	0000061a 	.word	0x0000061a
    2d7c:	0000061a 	.word	0x0000061a
    2d80:	0000061a 	.word	0x0000061a
    2d84:	0000061a 	.word	0x0000061a
    2d88:	0000061a 	.word	0x0000061a
    2d8c:	0000061a 	.word	0x0000061a
    2d90:	00000350 	.word	0x00000350
    2d94:	0000061a 	.word	0x0000061a
    2d98:	0000061a 	.word	0x0000061a
    2d9c:	0000061a 	.word	0x0000061a
    2da0:	0000061a 	.word	0x0000061a
    2da4:	0000061a 	.word	0x0000061a
    2da8:	0000061a 	.word	0x0000061a
    2dac:	0000061a 	.word	0x0000061a
    2db0:	0000061a 	.word	0x0000061a
    2db4:	0000061a 	.word	0x0000061a
    2db8:	0000061a 	.word	0x0000061a
    2dbc:	0000061a 	.word	0x0000061a
    2dc0:	0000061a 	.word	0x0000061a
    2dc4:	0000061a 	.word	0x0000061a
    2dc8:	0000061a 	.word	0x0000061a
    2dcc:	0000061a 	.word	0x0000061a
    2dd0:	00000360 	.word	0x00000360
    2dd4:	0000061a 	.word	0x0000061a
    2dd8:	0000061a 	.word	0x0000061a
    2ddc:	0000061a 	.word	0x0000061a
    2de0:	0000061a 	.word	0x0000061a
    2de4:	0000061a 	.word	0x0000061a
    2de8:	0000061a 	.word	0x0000061a
    2dec:	0000061a 	.word	0x0000061a
    2df0:	0000061a 	.word	0x0000061a
    2df4:	0000061a 	.word	0x0000061a
    2df8:	0000061a 	.word	0x0000061a
    2dfc:	0000061a 	.word	0x0000061a
    2e00:	0000061a 	.word	0x0000061a
    2e04:	0000061a 	.word	0x0000061a
    2e08:	0000061a 	.word	0x0000061a
    2e0c:	0000061a 	.word	0x0000061a
    2e10:	00000358 	.word	0x00000358
    2e14:	00000338 	.word	0x00000338
    2e18:	00000370 	.word	0x00000370
    2e1c:	00000348 	.word	0x00000348
    2e20:	00000340 	.word	0x00000340
    2e24:	00000002 	.word	0x00000002
    2e28:	00000003 	.word	0x00000003
    2e2c:	00000004 	.word	0x00000004
    2e30:	00000005 	.word	0x00000005
    2e34:	00000006 	.word	0x00000006
    2e38:	00000007 	.word	0x00000007
    2e3c:	0000000e 	.word	0x0000000e
    2e40:	0000000f 	.word	0x0000000f
    2e44:	0000000a 	.word	0x0000000a
    2e48:	0000000b 	.word	0x0000000b
    2e4c:	0000ffff 	.word	0x0000ffff
    2e50:	0000ffff 	.word	0x0000ffff
    2e54:	0000ffff 	.word	0x0000ffff
    2e58:	0000ffff 	.word	0x0000ffff
    2e5c:	0000ffff 	.word	0x0000ffff
    2e60:	0000ffff 	.word	0x0000ffff
    2e64:	0000ffff 	.word	0x0000ffff
    2e68:	0000ffff 	.word	0x0000ffff
    2e6c:	0000ffff 	.word	0x0000ffff
    2e70:	0000ffff 	.word	0x0000ffff
    2e74:	000009a6 	.word	0x000009a6
    2e78:	000009b0 	.word	0x000009b0
    2e7c:	000009ba 	.word	0x000009ba
    2e80:	000009c4 	.word	0x000009c4
    2e84:	000009ce 	.word	0x000009ce
    2e88:	000009e0 	.word	0x000009e0
    2e8c:	000009f2 	.word	0x000009f2

00002e90 <tc_interrupt_vectors.12581>:
    2e90:	00000e0d 42000800 42000c00 42001000     .......B...B...B
    2ea0:	000b0a09 00001a8c 00001ae8 00001ae8     ................
    2eb0:	00001a86 00001a86 00001aa0 00001a92     ................
    2ec0:	00001aa6 00001ad8 00001b70 00001bde     ........p.......
    2ed0:	00001bde 00001b50 00001b62 00001b80     ....P...b.......
    2ee0:	00001b54 00001b90 00001bcc              T...........

00002eec <_tcc_intflag>:
    2eec:	00000001 00000002 00000004 00000008     ................
    2efc:	00001000 00002000 00004000 00008000     ..... ...@......
    2f0c:	00010000 00020000 00040000 00080000     ................
    2f1c:	42001800 42001c00 00001212 00800040     ...B...B....@...
    2f2c:	00000404 00000104 00001004 00000504     ................
    2f3c:	00001404 00001504 00000804 00001001     ................
    2f4c:	0000ef05 00001c02 00000204 00008201     ................
    2f5c:	00003202 00005006 00002004 00000308     .2...P... ......
    2f6c:	00000908 00001508 00001902              ............

00002f78 <_init>:
    2f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f7a:	46c0      	nop			; (mov r8, r8)
    2f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f7e:	bc08      	pop	{r3}
    2f80:	469e      	mov	lr, r3
    2f82:	4770      	bx	lr

00002f84 <__init_array_start>:
    2f84:	000000b5 	.word	0x000000b5

00002f88 <_fini>:
    2f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2f8a:	46c0      	nop			; (mov r8, r8)
    2f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2f8e:	bc08      	pop	{r3}
    2f90:	469e      	mov	lr, r3
    2f92:	4770      	bx	lr

00002f94 <__fini_array_start>:
    2f94:	0000008d 	.word	0x0000008d
